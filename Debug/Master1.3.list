
Master1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  08009588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  8 .bss          00005898  20000024  20000024  00020024  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200058bc  200058bc  00020024  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027a21  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004723  00000000  00000000  00047a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012326  00000000  00000000  0004c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0005e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021d0  00000000  00000000  0005f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ca3b  00000000  00000000  00061a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006795  00000000  00000000  0006e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00074c60  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003df8  00000000  00000000  00074cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800942c 	.word	0x0800942c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800942c 	.word	0x0800942c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8d0 	bl	8000694 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f884 	bl	8000610 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000020 	.word	0x20000020
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f855 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f008 fbe6 	bl	8008d18 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <HAL_IncTick+0x4c>)
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <HAL_IncTick+0x50>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]

      millisec++;
      millisec1++;
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <HAL_IncTick+0x54>)
  uwTick += uwTickFreq;
 800055e:	440b      	add	r3, r1
      millisec++;
 8000560:	4912      	ldr	r1, [pc, #72]	; (80005ac <HAL_IncTick+0x58>)
  uwTick += uwTickFreq;
 8000562:	6013      	str	r3, [r2, #0]
      millisec++;
 8000564:	680b      	ldr	r3, [r1, #0]
      millisec1++;
 8000566:	6802      	ldr	r2, [r0, #0]
      millisec++;
 8000568:	3301      	adds	r3, #1
      millisec1++;
 800056a:	3201      	adds	r2, #1
      if(millisec > 1000)
 800056c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      millisec1++;
 8000570:	6002      	str	r2, [r0, #0]
      millisec++;
 8000572:	600b      	str	r3, [r1, #0]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_IncTick+0x5c>)
      if(millisec > 1000)
 8000576:	dd04      	ble.n	8000582 <HAL_IncTick+0x2e>
      {
    	  sec1++;
 8000578:	6813      	ldr	r3, [r2, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	6013      	str	r3, [r2, #0]
    	  millisec=0;
 800057e:	2300      	movs	r3, #0
 8000580:	600b      	str	r3, [r1, #0]
      }
      if(sec1>60){
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	2b3c      	cmp	r3, #60	; 0x3c
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_IncTick+0x60>)
 8000588:	dd04      	ble.n	8000594 <HAL_IncTick+0x40>
    	  min++;
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	3101      	adds	r1, #1
 800058e:	6019      	str	r1, [r3, #0]
   	   sec1=0;
 8000590:	2100      	movs	r1, #0
 8000592:	6011      	str	r1, [r2, #0]
      }
      if(min>60)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	2a3c      	cmp	r2, #60	; 0x3c
      {
    	  min=0;
 8000598:	bfc4      	itt	gt
 800059a:	2200      	movgt	r2, #0
 800059c:	601a      	strgt	r2, [r3, #0]
 800059e:	4770      	bx	lr
 80005a0:	20000150 	.word	0x20000150
 80005a4:	20000000 	.word	0x20000000
 80005a8:	2000014c 	.word	0x2000014c
 80005ac:	20000158 	.word	0x20000158
 80005b0:	20000154 	.word	0x20000154
 80005b4:	20000088 	.word	0x20000088

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000150 	.word	0x20000150

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005cc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	bf1c      	itt	ne
 80005d0:	4b05      	ldrne	r3, [pc, #20]	; (80005e8 <HAL_Delay+0x24>)
 80005d2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005d6:	bf18      	it	ne
 80005d8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	f7ff ffed 	bl	80005b8 <HAL_GetTick>
 80005de:	1b40      	subs	r0, r0, r5
 80005e0:	4284      	cmp	r4, r0
 80005e2:	d8fa      	bhi.n	80005da <HAL_Delay+0x16>
  {
  }
}
 80005e4:	bd38      	pop	{r3, r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	0200      	lsls	r0, r0, #8
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000606:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	68dc      	ldr	r4, [r3, #12]
 8000616:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	2b04      	cmp	r3, #4
 8000622:	bf28      	it	cs
 8000624:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000626:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 0501 	mov.w	r5, #1
 800062c:	fa05 f303 	lsl.w	r3, r5, r3
 8000630:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000634:	bf8c      	ite	hi
 8000636:	3c03      	subhi	r4, #3
 8000638:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063a:	4019      	ands	r1, r3
 800063c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063e:	fa05 f404 	lsl.w	r4, r5, r4
 8000642:	3c01      	subs	r4, #1
 8000644:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000646:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	ea42 0201 	orr.w	r2, r2, r1
 800064c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	bfad      	iteet	ge
 8000652:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	f000 000f 	andlt.w	r0, r0, #15
 800065a:	4b06      	ldrlt	r3, [pc, #24]	; (8000674 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	bfb5      	itete	lt
 8000662:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	e000ed14 	.word	0xe000ed14

08000678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000678:	2800      	cmp	r0, #0
 800067a:	db08      	blt.n	800068e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067c:	0942      	lsrs	r2, r0, #5
 800067e:	2301      	movs	r3, #1
 8000680:	f000 001f 	and.w	r0, r0, #31
 8000684:	fa03 f000 	lsl.w	r0, r3, r0
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <HAL_NVIC_EnableIRQ+0x18>)
 800068a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100

08000694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	3801      	subs	r0, #1
 8000696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069a:	d20a      	bcs.n	80006b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	21f0      	movs	r1, #240	; 0xf0
 80006a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006c0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80006c2:	4604      	mov	r4, r0
 80006c4:	b160      	cbz	r0, 80006e0 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80006c6:	7943      	ldrb	r3, [r0, #5]
 80006c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006cc:	b913      	cbnz	r3, 80006d4 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006ce:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006d0:	f008 fb42 	bl	8008d58 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80006d4:	2302      	movs	r3, #2
 80006d6:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006d8:	2301      	movs	r3, #1
 80006da:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80006dc:	2000      	movs	r0, #0
 80006de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
}
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <HAL_CRC_Calculate>:
{
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006e4:	2302      	movs	r3, #2
{
 80006e6:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006e8:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80006ea:	6803      	ldr	r3, [r0, #0]
 80006ec:	689c      	ldr	r4, [r3, #8]
 80006ee:	f044 0401 	orr.w	r4, r4, #1
 80006f2:	609c      	str	r4, [r3, #8]
 80006f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80006f8:	4291      	cmp	r1, r2
 80006fa:	d104      	bne.n	8000706 <HAL_CRC_Calculate+0x22>
  {
    hcrc->Instance->DR = pBuffer[index];
  }
  temp = hcrc->Instance->DR;
 80006fc:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006fe:	2201      	movs	r2, #1
 8000700:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8000706:	f851 4b04 	ldr.w	r4, [r1], #4
 800070a:	601c      	str	r4, [r3, #0]
 800070c:	e7f4      	b.n	80006f8 <HAL_CRC_Calculate+0x14>

0800070e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800070e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000712:	2b02      	cmp	r3, #2
 8000714:	d003      	beq.n	800071e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800071e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000720:	2305      	movs	r3, #5
 8000722:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000726:	6813      	ldr	r3, [r2, #0]
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800072e:	2000      	movs	r0, #0
}
 8000730:	4770      	bx	lr
	...

08000734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000738:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008ec <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000740:	4a68      	ldr	r2, [pc, #416]	; (80008e4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000742:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008f0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000748:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800074a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000750:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000754:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000758:	45b6      	cmp	lr, r6
 800075a:	f040 80ae 	bne.w	80008ba <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800075e:	684c      	ldr	r4, [r1, #4]
 8000760:	f024 0710 	bic.w	r7, r4, #16
 8000764:	2f02      	cmp	r7, #2
 8000766:	d116      	bne.n	8000796 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000768:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800076c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000770:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000774:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000778:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800077c:	f04f 0c0f 	mov.w	ip, #15
 8000780:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000784:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000788:	690d      	ldr	r5, [r1, #16]
 800078a:	fa05 f50b 	lsl.w	r5, r5, fp
 800078e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000792:	f8ca 5020 	str.w	r5, [sl, #32]
 8000796:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800079c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a0:	fa05 f50a 	lsl.w	r5, r5, sl
 80007a4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007aa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ae:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007ba:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007be:	d811      	bhi.n	80007e4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007c0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007c2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c6:	68cf      	ldr	r7, [r1, #12]
 80007c8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007cc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007d0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007d2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007dc:	409f      	lsls	r7, r3
 80007de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007e6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e8:	688f      	ldr	r7, [r1, #8]
 80007ea:	fa07 f70a 	lsl.w	r7, r7, sl
 80007ee:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007f0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f2:	00e5      	lsls	r5, r4, #3
 80007f4:	d561      	bpl.n	80008ba <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	f04f 0b00 	mov.w	fp, #0
 80007fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80007fe:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000802:	4d39      	ldr	r5, [pc, #228]	; (80008e8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000804:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000808:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800080c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000810:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000814:	9703      	str	r7, [sp, #12]
 8000816:	9f03      	ldr	r7, [sp, #12]
 8000818:	f023 0703 	bic.w	r7, r3, #3
 800081c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000820:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000824:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000828:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000830:	f04f 0e0f 	mov.w	lr, #15
 8000834:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000838:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083e:	d043      	beq.n	80008c8 <HAL_GPIO_Init+0x194>
 8000840:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000844:	42a8      	cmp	r0, r5
 8000846:	d041      	beq.n	80008cc <HAL_GPIO_Init+0x198>
 8000848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084c:	42a8      	cmp	r0, r5
 800084e:	d03f      	beq.n	80008d0 <HAL_GPIO_Init+0x19c>
 8000850:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000854:	42a8      	cmp	r0, r5
 8000856:	d03d      	beq.n	80008d4 <HAL_GPIO_Init+0x1a0>
 8000858:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085c:	42a8      	cmp	r0, r5
 800085e:	d03b      	beq.n	80008d8 <HAL_GPIO_Init+0x1a4>
 8000860:	4548      	cmp	r0, r9
 8000862:	d03b      	beq.n	80008dc <HAL_GPIO_Init+0x1a8>
 8000864:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000868:	42a8      	cmp	r0, r5
 800086a:	d039      	beq.n	80008e0 <HAL_GPIO_Init+0x1ac>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	bf14      	ite	ne
 8000874:	2508      	movne	r5, #8
 8000876:	2507      	moveq	r5, #7
 8000878:	fa05 f50c 	lsl.w	r5, r5, ip
 800087c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000880:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000882:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000884:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000886:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf0c      	ite	eq
 800088c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000890:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000892:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000894:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000898:	bf0c      	ite	eq
 800089a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800089c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800089e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008a6:	bf0c      	ite	eq
 80008a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008aa:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008ac:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ae:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008b0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008b2:	bf54      	ite	pl
 80008b4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008b6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008b8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ba:	3301      	adds	r3, #1
 80008bc:	2b10      	cmp	r3, #16
 80008be:	f47f af44 	bne.w	800074a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008c2:	b005      	add	sp, #20
 80008c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c8:	465d      	mov	r5, fp
 80008ca:	e7d5      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008cc:	2501      	movs	r5, #1
 80008ce:	e7d3      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008d0:	2502      	movs	r5, #2
 80008d2:	e7d1      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008d4:	2503      	movs	r5, #3
 80008d6:	e7cf      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008d8:	2504      	movs	r5, #4
 80008da:	e7cd      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008dc:	2505      	movs	r5, #5
 80008de:	e7cb      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008e0:	2506      	movs	r5, #6
 80008e2:	e7c9      	b.n	8000878 <HAL_GPIO_Init+0x144>
 80008e4:	40013c00 	.word	0x40013c00
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021400 	.word	0x40021400

080008f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008f4:	6903      	ldr	r3, [r0, #16]
 80008f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008f8:	bf14      	ite	ne
 80008fa:	2001      	movne	r0, #1
 80008fc:	2000      	moveq	r0, #0
 80008fe:	4770      	bx	lr

08000900 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000900:	b10a      	cbz	r2, 8000906 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000902:	6181      	str	r1, [r0, #24]
 8000904:	4770      	bx	lr
 8000906:	0409      	lsls	r1, r1, #16
 8000908:	e7fb      	b.n	8000902 <HAL_GPIO_WritePin+0x2>

0800090a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800090a:	6943      	ldr	r3, [r0, #20]
 800090c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000910:	bf08      	it	eq
 8000912:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000914:	6181      	str	r1, [r0, #24]
 8000916:	4770      	bx	lr

08000918 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000918:	6801      	ldr	r1, [r0, #0]
 800091a:	694b      	ldr	r3, [r1, #20]
 800091c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	d010      	beq.n	8000948 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000926:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800092a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800092c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800092e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000930:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000934:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000938:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800093a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000944:	2001      	movs	r0, #1
 8000946:	4770      	bx	lr
  }
  return HAL_OK;
 8000948:	4618      	mov	r0, r3
}
 800094a:	4770      	bx	lr

0800094c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000950:	4604      	mov	r4, r0
 8000952:	4617      	mov	r7, r2
 8000954:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000956:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800095a:	b28e      	uxth	r6, r1
 800095c:	6825      	ldr	r5, [r4, #0]
 800095e:	f1b8 0f01 	cmp.w	r8, #1
 8000962:	bf0c      	ite	eq
 8000964:	696b      	ldreq	r3, [r5, #20]
 8000966:	69ab      	ldrne	r3, [r5, #24]
 8000968:	ea36 0303 	bics.w	r3, r6, r3
 800096c:	bf14      	ite	ne
 800096e:	2001      	movne	r0, #1
 8000970:	2000      	moveq	r0, #0
 8000972:	b908      	cbnz	r0, 8000978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000978:	696b      	ldr	r3, [r5, #20]
 800097a:	055a      	lsls	r2, r3, #21
 800097c:	d516      	bpl.n	80009ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000984:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000986:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800098a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800098c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800099a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800099c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009a0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80009a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80009a6:	2001      	movs	r0, #1
 80009a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009ac:	1c7b      	adds	r3, r7, #1
 80009ae:	d0d5      	beq.n	800095c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009b0:	f7ff fe02 	bl	80005b8 <HAL_GetTick>
 80009b4:	eba0 0009 	sub.w	r0, r0, r9
 80009b8:	4287      	cmp	r7, r0
 80009ba:	d301      	bcc.n	80009c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80009bc:	2f00      	cmp	r7, #0
 80009be:	d1cd      	bne.n	800095c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009c0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80009c2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009c4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80009c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009d0:	f042 0220 	orr.w	r2, r2, #32
 80009d4:	e7e4      	b.n	80009a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080009d6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80009d6:	b570      	push	{r4, r5, r6, lr}
 80009d8:	4604      	mov	r4, r0
 80009da:	460d      	mov	r5, r1
 80009dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	075b      	lsls	r3, r3, #29
 80009e4:	d501      	bpl.n	80009ea <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80009e6:	2000      	movs	r0, #0
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80009ea:	4620      	mov	r0, r4
 80009ec:	f7ff ff94 	bl	8000918 <I2C_IsAcknowledgeFailed>
 80009f0:	b9a8      	cbnz	r0, 8000a1e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80009f2:	1c6a      	adds	r2, r5, #1
 80009f4:	d0f3      	beq.n	80009de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f6:	f7ff fddf 	bl	80005b8 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	4285      	cmp	r5, r0
 80009fe:	d301      	bcc.n	8000a04 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d1ec      	bne.n	80009de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a04:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a06:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a08:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a12:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a18:	f042 0220 	orr.w	r2, r2, #32
 8000a1c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
}
 8000a20:	bd70      	pop	{r4, r5, r6, pc}

08000a22 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000a22:	b570      	push	{r4, r5, r6, lr}
 8000a24:	4604      	mov	r4, r0
 8000a26:	460d      	mov	r5, r1
 8000a28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000a2a:	6820      	ldr	r0, [r4, #0]
 8000a2c:	6943      	ldr	r3, [r0, #20]
 8000a2e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000a32:	d001      	beq.n	8000a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a34:	2000      	movs	r0, #0
}
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000a38:	6942      	ldr	r2, [r0, #20]
 8000a3a:	06d2      	lsls	r2, r2, #27
 8000a3c:	d50e      	bpl.n	8000a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a3e:	f06f 0210 	mvn.w	r2, #16
 8000a42:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a44:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a46:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000a50:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a52:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000a58:	2001      	movs	r0, #1
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a5c:	f7ff fdac 	bl	80005b8 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d801      	bhi.n	8000a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d1df      	bne.n	8000a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a6a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a6c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a6e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a7a:	f042 0220 	orr.w	r2, r2, #32
 8000a7e:	e7e8      	b.n	8000a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000a80 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a84:	9e08      	ldr	r6, [sp, #32]
 8000a86:	4604      	mov	r4, r0
 8000a88:	4690      	mov	r8, r2
 8000a8a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a8c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000a90:	b28d      	uxth	r5, r1
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	f1b9 0f01 	cmp.w	r9, #1
 8000a98:	bf0c      	ite	eq
 8000a9a:	695b      	ldreq	r3, [r3, #20]
 8000a9c:	699b      	ldrne	r3, [r3, #24]
 8000a9e:	ea35 0303 	bics.w	r3, r5, r3
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	4543      	cmp	r3, r8
 8000aaa:	d002      	beq.n	8000ab2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000aac:	2000      	movs	r0, #0
}
 8000aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ab2:	1c7b      	adds	r3, r7, #1
 8000ab4:	d0ed      	beq.n	8000a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ab6:	f7ff fd7f 	bl	80005b8 <HAL_GetTick>
 8000aba:	1b80      	subs	r0, r0, r6
 8000abc:	4287      	cmp	r7, r0
 8000abe:	d301      	bcc.n	8000ac4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000ac0:	2f00      	cmp	r7, #0
 8000ac2:	d1e6      	bne.n	8000a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ac4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ac6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ac8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000aca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ace:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ad2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ad4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ad8:	f042 0220 	orr.w	r2, r2, #32
 8000adc:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460d      	mov	r5, r1
 8000aea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	061b      	lsls	r3, r3, #24
 8000af2:	d501      	bpl.n	8000af8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff ff0d 	bl	8000918 <I2C_IsAcknowledgeFailed>
 8000afe:	b9a8      	cbnz	r0, 8000b2c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000b00:	1c6a      	adds	r2, r5, #1
 8000b02:	d0f3      	beq.n	8000aec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b04:	f7ff fd58 	bl	80005b8 <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	4285      	cmp	r5, r0
 8000b0c:	d301      	bcc.n	8000b12 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d1ec      	bne.n	8000aec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b12:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b14:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b16:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b20:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000b22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
}
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}

08000b30 <I2C_RequestMemoryWrite>:
{
 8000b30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b34:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b36:	6802      	ldr	r2, [r0, #0]
{
 8000b38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000b3a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b3c:	6813      	ldr	r3, [r2, #0]
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
{
 8000b44:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b46:	9600      	str	r6, [sp, #0]
 8000b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000b50:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b52:	f7ff ff95 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8000b56:	b118      	cbz	r0, 8000b60 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8000b58:	2001      	movs	r0, #1
}
 8000b5a:	b004      	add	sp, #16
 8000b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b60:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b64:	4918      	ldr	r1, [pc, #96]	; (8000bc8 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b66:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000b6a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	4633      	mov	r3, r6
 8000b70:	f7ff feec 	bl	800094c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1ef      	bne.n	8000b58 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	9003      	str	r0, [sp, #12]
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	9203      	str	r2, [sp, #12]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b84:	4632      	mov	r2, r6
 8000b86:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b88:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f7ff ffaa 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b90:	b140      	cbz	r0, 8000ba4 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b94:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b96:	bf01      	itttt	eq
 8000b98:	6822      	ldreq	r2, [r4, #0]
 8000b9a:	6813      	ldreq	r3, [r2, #0]
 8000b9c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000ba0:	6013      	streq	r3, [r2, #0]
 8000ba2:	e7d9      	b.n	8000b58 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ba4:	f1b8 0f01 	cmp.w	r8, #1
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	d102      	bne.n	8000bb2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bac:	b2ed      	uxtb	r5, r5
 8000bae:	611d      	str	r5, [r3, #16]
 8000bb0:	e7d3      	b.n	8000b5a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000bb2:	0a2a      	lsrs	r2, r5, #8
 8000bb4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000bb8:	4632      	mov	r2, r6
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff ff92 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1e6      	bne.n	8000b92 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	e7f1      	b.n	8000bac <I2C_RequestMemoryWrite+0x7c>
 8000bc8:	00010002 	.word	0x00010002

08000bcc <I2C_RequestMemoryRead>:
{
 8000bcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000bd0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bd2:	6803      	ldr	r3, [r0, #0]
{
 8000bd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000bd6:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bde:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000be6:	601a      	str	r2, [r3, #0]
{
 8000be8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bea:	9500      	str	r5, [sp, #0]
 8000bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000bf4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bf6:	f7ff ff43 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8000bfa:	b118      	cbz	r0, 8000c04 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	b004      	add	sp, #16
 8000c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c04:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c06:	492b      	ldr	r1, [pc, #172]	; (8000cb4 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c08:	b2ff      	uxtb	r7, r7
 8000c0a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000c0e:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c10:	4620      	mov	r0, r4
 8000c12:	462b      	mov	r3, r5
 8000c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c16:	f7ff fe99 	bl	800094c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	d1ee      	bne.n	8000bfc <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	9003      	str	r0, [sp, #12]
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	9203      	str	r2, [sp, #12]
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c2a:	462a      	mov	r2, r5
 8000c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c2e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c30:	4620      	mov	r0, r4
 8000c32:	f7ff ff57 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000c36:	b140      	cbz	r0, 8000c4a <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c3a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c3c:	bf01      	itttt	eq
 8000c3e:	6822      	ldreq	r2, [r4, #0]
 8000c40:	6813      	ldreq	r3, [r2, #0]
 8000c42:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000c46:	6013      	streq	r3, [r2, #0]
 8000c48:	e7d8      	b.n	8000bfc <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c4a:	f1b8 0f01 	cmp.w	r8, #1
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	d125      	bne.n	8000c9e <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c52:	b2f6      	uxtb	r6, r6
 8000c54:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c56:	462a      	mov	r2, r5
 8000c58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff ff42 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000c60:	4602      	mov	r2, r0
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1e8      	bne.n	8000c38 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c66:	6821      	ldr	r1, [r4, #0]
 8000c68:	680b      	ldr	r3, [r1, #0]
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c70:	4620      	mov	r0, r4
 8000c72:	9500      	str	r5, [sp, #0]
 8000c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c7a:	f7ff ff01 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1bc      	bne.n	8000bfc <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c82:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c88:	f047 0701 	orr.w	r7, r7, #1
 8000c8c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c8e:	4620      	mov	r0, r4
 8000c90:	462b      	mov	r3, r5
 8000c92:	f7ff fe5b 	bl	800094c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8000c96:	3000      	adds	r0, #0
 8000c98:	bf18      	it	ne
 8000c9a:	2001      	movne	r0, #1
 8000c9c:	e7af      	b.n	8000bfe <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c9e:	0a32      	lsrs	r2, r6, #8
 8000ca0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ca2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ca4:	462a      	mov	r2, r5
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff ff1c 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1c3      	bne.n	8000c38 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	e7ce      	b.n	8000c52 <I2C_RequestMemoryRead+0x86>
 8000cb4:	00010002 	.word	0x00010002

08000cb8 <HAL_I2C_Init>:
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b908      	cbnz	r0, 8000cc2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cca:	b91b      	cbnz	r3, 8000cd4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000ccc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000cd0:	f008 f85a 	bl	8008d88 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000cd4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd6:	2324      	movs	r3, #36	; 0x24
 8000cd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce4:	f000 fc72 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ce8:	6865      	ldr	r5, [r4, #4]
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <HAL_I2C_Init+0x138>)
 8000cec:	429d      	cmp	r5, r3
 8000cee:	d84d      	bhi.n	8000d8c <HAL_I2C_Init+0xd4>
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <HAL_I2C_Init+0x13c>)
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d9e3      	bls.n	8000cbe <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cf6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000cf8:	493f      	ldr	r1, [pc, #252]	; (8000df8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cfa:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000cfc:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d08:	6a13      	ldr	r3, [r2, #32]
 8000d0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d0e:	3101      	adds	r1, #1
 8000d10:	4319      	orrs	r1, r3
 8000d12:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d14:	69d1      	ldr	r1, [r2, #28]
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <HAL_I2C_Init+0x138>)
 8000d18:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d22:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d26:	d848      	bhi.n	8000dba <HAL_I2C_Init+0x102>
 8000d28:	006d      	lsls	r5, r5, #1
 8000d2a:	fbb0 f0f5 	udiv	r0, r0, r5
 8000d2e:	3001      	adds	r0, #1
 8000d30:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	bf38      	it	cc
 8000d38:	2304      	movcc	r3, #4
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	6a20      	ldr	r0, [r4, #32]
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d4e:	6891      	ldr	r1, [r2, #8]
 8000d50:	68e0      	ldr	r0, [r4, #12]
 8000d52:	6923      	ldr	r3, [r4, #16]
 8000d54:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000d58:	4303      	orrs	r3, r0
 8000d5a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d62:	68d1      	ldr	r1, [r2, #12]
 8000d64:	69a0      	ldr	r0, [r4, #24]
 8000d66:	6963      	ldr	r3, [r4, #20]
 8000d68:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d7a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d7c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d7e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d84:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d86:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_I2C_Init+0x144>)
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d995      	bls.n	8000cbe <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d92:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d94:	4e18      	ldr	r6, [pc, #96]	; (8000df8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d96:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d98:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000da0:	4333      	orrs	r3, r6
 8000da2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000da4:	6a13      	ldr	r3, [r2, #32]
 8000da6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000daa:	4371      	muls	r1, r6
 8000dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000db0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000db4:	fbb1 f1f6 	udiv	r1, r1, r6
 8000db8:	e7a9      	b.n	8000d0e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dba:	68a3      	ldr	r3, [r4, #8]
 8000dbc:	b953      	cbnz	r3, 8000dd4 <HAL_I2C_Init+0x11c>
 8000dbe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dc6:	1c43      	adds	r3, r0, #1
 8000dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dcc:	b16b      	cbz	r3, 8000dea <HAL_I2C_Init+0x132>
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	e7b2      	b.n	8000d3a <HAL_I2C_Init+0x82>
 8000dd4:	2319      	movs	r3, #25
 8000dd6:	436b      	muls	r3, r5
 8000dd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de2:	b113      	cbz	r3, 8000dea <HAL_I2C_Init+0x132>
 8000de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de8:	e7a7      	b.n	8000d3a <HAL_I2C_Init+0x82>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e7a5      	b.n	8000d3a <HAL_I2C_Init+0x82>
 8000dee:	bf00      	nop
 8000df0:	000186a0 	.word	0x000186a0
 8000df4:	001e847f 	.word	0x001e847f
 8000df8:	000f4240 	.word	0x000f4240
 8000dfc:	003d08ff 	.word	0x003d08ff

08000e00 <HAL_I2C_Mem_Write>:
{
 8000e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000e04:	4604      	mov	r4, r0
 8000e06:	4699      	mov	r9, r3
 8000e08:	460f      	mov	r7, r1
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8000e0e:	f7ff fbd3 	bl	80005b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e12:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e16:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000e18:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e1a:	d003      	beq.n	8000e24 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8000e1c:	2002      	movs	r0, #2
}
 8000e1e:	b003      	add	sp, #12
 8000e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	2319      	movs	r3, #25
 8000e28:	2201      	movs	r2, #1
 8000e2a:	493b      	ldr	r1, [pc, #236]	; (8000f18 <HAL_I2C_Mem_Write+0x118>)
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fe27 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d1f2      	bne.n	8000e1c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8000e36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d0ee      	beq.n	8000e1c <HAL_I2C_Mem_Write+0x1c>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e4a:	bf5e      	ittt	pl
 8000e4c:	681a      	ldrpl	r2, [r3, #0]
 8000e4e:	f042 0201 	orrpl.w	r2, r2, #1
 8000e52:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e5c:	2321      	movs	r3, #33	; 0x21
 8000e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e6e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8000e74:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e78:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_I2C_Mem_Write+0x11c>)
 8000e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e7e:	9501      	str	r5, [sp, #4]
 8000e80:	9600      	str	r6, [sp, #0]
 8000e82:	464b      	mov	r3, r9
 8000e84:	4642      	mov	r2, r8
 8000e86:	4639      	mov	r1, r7
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fe51 	bl	8000b30 <I2C_RequestMemoryWrite>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d02a      	beq.n	8000ee8 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
 8000e94:	e7c3      	b.n	8000e1e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e96:	f7ff fe25 	bl	8000ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e9a:	b140      	cbz	r0, 8000eae <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ea0:	bf01      	itttt	eq
 8000ea2:	6822      	ldreq	r2, [r4, #0]
 8000ea4:	6813      	ldreq	r3, [r2, #0]
 8000ea6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	streq	r3, [r2, #0]
 8000eac:	e7f1      	b.n	8000e92 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eb0:	6827      	ldr	r7, [r4, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000eb8:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8000eba:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000ebc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ebe:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ec0:	3a01      	subs	r2, #1
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ec6:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8000ec8:	1e48      	subs	r0, r1, #1
 8000eca:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ecc:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8000ece:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ed0:	d50a      	bpl.n	8000ee8 <HAL_I2C_Mem_Write+0xe8>
 8000ed2:	b148      	cbz	r0, 8000ee8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ed4:	785a      	ldrb	r2, [r3, #1]
 8000ed6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8000ed8:	3302      	adds	r3, #2
 8000eda:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000edc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ede:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8000ee0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8000ee2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000ee4:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000ee6:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000ee8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eea:	462a      	mov	r2, r5
 8000eec:	4631      	mov	r1, r6
 8000eee:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1d0      	bne.n	8000e96 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef4:	f7ff fd6f 	bl	80009d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1cf      	bne.n	8000e9c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f04:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f06:	2320      	movs	r3, #32
 8000f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000f0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f10:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000f14:	e783      	b.n	8000e1e <HAL_I2C_Mem_Write+0x1e>
 8000f16:	bf00      	nop
 8000f18:	00100002 	.word	0x00100002
 8000f1c:	ffff0000 	.word	0xffff0000

08000f20 <HAL_I2C_Mem_Read>:
{
 8000f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f24:	4604      	mov	r4, r0
 8000f26:	b087      	sub	sp, #28
 8000f28:	4699      	mov	r9, r3
 8000f2a:	460d      	mov	r5, r1
 8000f2c:	4690      	mov	r8, r2
 8000f2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff fb42 	bl	80005b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000f38:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000f3a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f3c:	d004      	beq.n	8000f48 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000f3e:	2502      	movs	r5, #2
}
 8000f40:	4628      	mov	r0, r5
 8000f42:	b007      	add	sp, #28
 8000f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f48:	9000      	str	r0, [sp, #0]
 8000f4a:	2319      	movs	r3, #25
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4977      	ldr	r1, [pc, #476]	; (800112c <HAL_I2C_Mem_Read+0x20c>)
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff fd95 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d1f1      	bne.n	8000f3e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000f5a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d0ed      	beq.n	8000f3e <HAL_I2C_Mem_Read+0x1e>
 8000f62:	2301      	movs	r3, #1
 8000f64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000f6e:	bf5e      	ittt	pl
 8000f70:	681a      	ldrpl	r2, [r3, #0]
 8000f72:	f042 0201 	orrpl.w	r2, r2, #1
 8000f76:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f7e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f80:	2322      	movs	r3, #34	; 0x22
 8000f82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f92:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f94:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8000f98:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f9c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f9e:	4b64      	ldr	r3, [pc, #400]	; (8001130 <HAL_I2C_Mem_Read+0x210>)
 8000fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	9601      	str	r6, [sp, #4]
 8000fa6:	9700      	str	r7, [sp, #0]
 8000fa8:	464b      	mov	r3, r9
 8000faa:	4642      	mov	r2, r8
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fe0d 	bl	8000bcc <I2C_RequestMemoryRead>
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	b108      	cbz	r0, 8000fba <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8000fb6:	2501      	movs	r5, #1
 8000fb8:	e7c2      	b.n	8000f40 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8000fba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	b992      	cbnz	r2, 8000fe6 <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fc0:	9002      	str	r0, [sp, #8]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	9202      	str	r2, [sp, #8]
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	9202      	str	r2, [sp, #8]
 8000fca:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000fe4:	e7ac      	b.n	8000f40 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d12c      	bne.n	8001044 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff2:	9003      	str	r0, [sp, #12]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	9203      	str	r2, [sp, #12]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001004:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001006:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001134 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 800100a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0e1      	beq.n	8000fd4 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001010:	2b03      	cmp	r3, #3
 8001012:	d86e      	bhi.n	80010f2 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8001014:	2b01      	cmp	r3, #1
 8001016:	d12d      	bne.n	8001074 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001018:	4632      	mov	r2, r6
 800101a:	4639      	mov	r1, r7
 800101c:	4620      	mov	r0, r4
 800101e:	f7ff fd00 	bl	8000a22 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001022:	2800      	cmp	r0, #0
 8001024:	d1c7      	bne.n	8000fb6 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800102e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001034:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001036:	3b01      	subs	r3, #1
 8001038:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800103a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800103c:	3b01      	subs	r3, #1
 800103e:	b29b      	uxth	r3, r3
 8001040:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001042:	e7e2      	b.n	800100a <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8001044:	2a02      	cmp	r2, #2
 8001046:	d10e      	bne.n	8001066 <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001056:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001058:	9004      	str	r0, [sp, #16]
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	9204      	str	r2, [sp, #16]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	9304      	str	r3, [sp, #16]
 8001062:	9b04      	ldr	r3, [sp, #16]
 8001064:	e7cf      	b.n	8001006 <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001066:	9005      	str	r0, [sp, #20]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	9205      	str	r2, [sp, #20]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	9305      	str	r3, [sp, #20]
 8001070:	9b05      	ldr	r3, [sp, #20]
 8001072:	e7c8      	b.n	8001006 <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8001074:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001076:	9600      	str	r6, [sp, #0]
 8001078:	463b      	mov	r3, r7
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4641      	mov	r1, r8
 8001080:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001082:	d119      	bne.n	80010b8 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001084:	f7ff fcfc 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 8001088:	2800      	cmp	r0, #0
 800108a:	d194      	bne.n	8000fb6 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001094:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001096:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800109c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800109e:	1c53      	adds	r3, r2, #1
 80010a0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80010a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010a4:	3b01      	subs	r3, #1
 80010a6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80010a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010b0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	7053      	strb	r3, [r2, #1]
 80010b6:	e7ba      	b.n	800102e <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010b8:	f7ff fce2 	bl	8000a80 <I2C_WaitOnFlagUntilTimeout>
 80010bc:	4602      	mov	r2, r0
 80010be:	2800      	cmp	r0, #0
 80010c0:	f47f af79 	bne.w	8000fb6 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010cc:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 80010d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010d6:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80010d8:	3301      	adds	r3, #1
 80010da:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80010dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010de:	3b01      	subs	r3, #1
 80010e0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80010e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010ea:	4641      	mov	r1, r8
 80010ec:	463b      	mov	r3, r7
 80010ee:	4620      	mov	r0, r4
 80010f0:	e7c8      	b.n	8001084 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f2:	4632      	mov	r2, r6
 80010f4:	4639      	mov	r1, r7
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff fc93 	bl	8000a22 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	f47f af5a 	bne.w	8000fb6 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001106:	6912      	ldr	r2, [r2, #16]
 8001108:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800110a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800110c:	1c53      	adds	r3, r2, #1
 800110e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001110:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001112:	3b01      	subs	r3, #1
 8001114:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001116:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001118:	3b01      	subs	r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	6959      	ldr	r1, [r3, #20]
 8001122:	0749      	lsls	r1, r1, #29
 8001124:	f57f af71 	bpl.w	800100a <HAL_I2C_Mem_Read+0xea>
 8001128:	e7c3      	b.n	80010b2 <HAL_I2C_Mem_Read+0x192>
 800112a:	bf00      	nop
 800112c:	00100002 	.word	0x00100002
 8001130:	ffff0000 	.word	0xffff0000
 8001134:	00010004 	.word	0x00010004

08001138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	4604      	mov	r4, r0
 800113e:	b918      	cbnz	r0, 8001148 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001140:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001142:	b002      	add	sp, #8
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001148:	6803      	ldr	r3, [r0, #0]
 800114a:	07dd      	lsls	r5, r3, #31
 800114c:	d410      	bmi.n	8001170 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	0798      	lsls	r0, r3, #30
 8001152:	d458      	bmi.n	8001206 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	071a      	lsls	r2, r3, #28
 8001158:	f100 809a 	bmi.w	8001290 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	075b      	lsls	r3, r3, #29
 8001160:	f100 80b8 	bmi.w	80012d4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001164:	69a2      	ldr	r2, [r4, #24]
 8001166:	2a00      	cmp	r2, #0
 8001168:	f040 8119 	bne.w	800139e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
 800116e:	e7e8      	b.n	8001142 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001170:	4ba6      	ldr	r3, [pc, #664]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	f002 020c 	and.w	r2, r2, #12
 8001178:	2a04      	cmp	r2, #4
 800117a:	d007      	beq.n	800118c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	2a08      	cmp	r2, #8
 8001184:	d10a      	bne.n	800119c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	0259      	lsls	r1, r3, #9
 800118a:	d507      	bpl.n	800119c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b9f      	ldr	r3, [pc, #636]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	039a      	lsls	r2, r3, #14
 8001192:	d5dc      	bpl.n	800114e <HAL_RCC_OscConfig+0x16>
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1d9      	bne.n	800114e <HAL_RCC_OscConfig+0x16>
 800119a:	e7d1      	b.n	8001140 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	4d9b      	ldr	r5, [pc, #620]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d111      	bne.n	80011ca <HAL_RCC_OscConfig+0x92>
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ae:	f7ff fa03 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4d96      	ldr	r5, [pc, #600]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	039b      	lsls	r3, r3, #14
 80011ba:	d4c8      	bmi.n	800114e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff f9fc 	bl	80005b8 <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	2864      	cmp	r0, #100	; 0x64
 80011c4:	d9f7      	bls.n	80011b6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011c6:	2003      	movs	r0, #3
 80011c8:	e7bb      	b.n	8001142 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ce:	d104      	bne.n	80011da <HAL_RCC_OscConfig+0xa2>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d6:	602b      	str	r3, [r5, #0]
 80011d8:	e7e5      	b.n	80011a6 <HAL_RCC_OscConfig+0x6e>
 80011da:	682a      	ldr	r2, [r5, #0]
 80011dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e0:	602a      	str	r2, [r5, #0]
 80011e2:	682a      	ldr	r2, [r5, #0]
 80011e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011e8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1df      	bne.n	80011ae <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011ee:	f7ff f9e3 	bl	80005b8 <HAL_GetTick>
 80011f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	039f      	lsls	r7, r3, #14
 80011f8:	d5a9      	bpl.n	800114e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff f9dd 	bl	80005b8 <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	2864      	cmp	r0, #100	; 0x64
 8001202:	d9f7      	bls.n	80011f4 <HAL_RCC_OscConfig+0xbc>
 8001204:	e7df      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	f012 0f0c 	tst.w	r2, #12
 800120e:	d007      	beq.n	8001220 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001216:	2a08      	cmp	r2, #8
 8001218:	d111      	bne.n	800123e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	025e      	lsls	r6, r3, #9
 800121e:	d40e      	bmi.n	800123e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001220:	4b7a      	ldr	r3, [pc, #488]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	0795      	lsls	r5, r2, #30
 8001226:	d502      	bpl.n	800122e <HAL_RCC_OscConfig+0xf6>
 8001228:	68e2      	ldr	r2, [r4, #12]
 800122a:	2a01      	cmp	r2, #1
 800122c:	d188      	bne.n	8001140 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	6921      	ldr	r1, [r4, #16]
 8001232:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001236:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800123a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123c:	e78a      	b.n	8001154 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800123e:	68e2      	ldr	r2, [r4, #12]
 8001240:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x2d8>)
 8001242:	b1b2      	cbz	r2, 8001272 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001248:	f7ff f9b6 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4d6f      	ldr	r5, [pc, #444]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800124e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	0798      	lsls	r0, r3, #30
 8001254:	d507      	bpl.n	8001266 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	6922      	ldr	r2, [r4, #16]
 800125a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800125e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	e776      	b.n	8001154 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff f9a7 	bl	80005b8 <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d9ef      	bls.n	8001250 <HAL_RCC_OscConfig+0x118>
 8001270:	e7a9      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001272:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001274:	f7ff f9a0 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001278:	4d64      	ldr	r5, [pc, #400]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800127a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	0799      	lsls	r1, r3, #30
 8001280:	f57f af68 	bpl.w	8001154 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff f998 	bl	80005b8 <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f6      	bls.n	800127c <HAL_RCC_OscConfig+0x144>
 800128e:	e79a      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001290:	6962      	ldr	r2, [r4, #20]
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <HAL_RCC_OscConfig+0x2dc>)
 8001294:	b17a      	cbz	r2, 80012b6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800129a:	f7ff f98d 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	4d5b      	ldr	r5, [pc, #364]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012a4:	079f      	lsls	r7, r3, #30
 80012a6:	f53f af59 	bmi.w	800115c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff f985 	bl	80005b8 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	2802      	cmp	r0, #2
 80012b2:	d9f6      	bls.n	80012a2 <HAL_RCC_OscConfig+0x16a>
 80012b4:	e787      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012b8:	f7ff f97e 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4d53      	ldr	r5, [pc, #332]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c2:	0798      	lsls	r0, r3, #30
 80012c4:	f57f af4a 	bpl.w	800115c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff f976 	bl	80005b8 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x188>
 80012d2:	e778      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 80012d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012dc:	d128      	bne.n	8001330 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012f2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4d48      	ldr	r5, [pc, #288]	; (8001418 <HAL_RCC_OscConfig+0x2e0>)
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	05d9      	lsls	r1, r3, #23
 80012fa:	d51b      	bpl.n	8001334 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	68a3      	ldr	r3, [r4, #8]
 80012fe:	4d43      	ldr	r5, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 8001300:	2b01      	cmp	r3, #1
 8001302:	d127      	bne.n	8001354 <HAL_RCC_OscConfig+0x21c>
 8001304:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800130c:	f7ff f954 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	4d3e      	ldr	r5, [pc, #248]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001312:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800131a:	079b      	lsls	r3, r3, #30
 800131c:	d539      	bpl.n	8001392 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800131e:	2e00      	cmp	r6, #0
 8001320:	f43f af20 	beq.w	8001164 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001324:	4a39      	ldr	r2, [pc, #228]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 8001326:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	e719      	b.n	8001164 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001330:	2600      	movs	r6, #0
 8001332:	e7df      	b.n	80012f4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800133c:	f7ff f93c 	bl	80005b8 <HAL_GetTick>
 8001340:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	05da      	lsls	r2, r3, #23
 8001346:	d4d9      	bmi.n	80012fc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001348:	f7ff f936 	bl	80005b8 <HAL_GetTick>
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f7      	bls.n	8001342 <HAL_RCC_OscConfig+0x20a>
 8001352:	e738      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	2b05      	cmp	r3, #5
 8001356:	d104      	bne.n	8001362 <HAL_RCC_OscConfig+0x22a>
 8001358:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	672b      	str	r3, [r5, #112]	; 0x70
 8001360:	e7d0      	b.n	8001304 <HAL_RCC_OscConfig+0x1cc>
 8001362:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	672a      	str	r2, [r5, #112]	; 0x70
 800136a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800136c:	f022 0204 	bic.w	r2, r2, #4
 8001370:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ca      	bne.n	800130c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001376:	f7ff f91f 	bl	80005b8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800137e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001380:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001382:	0798      	lsls	r0, r3, #30
 8001384:	d5cb      	bpl.n	800131e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff f917 	bl	80005b8 <HAL_GetTick>
 800138a:	1bc0      	subs	r0, r0, r7
 800138c:	4540      	cmp	r0, r8
 800138e:	d9f7      	bls.n	8001380 <HAL_RCC_OscConfig+0x248>
 8001390:	e719      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff f911 	bl	80005b8 <HAL_GetTick>
 8001396:	1bc0      	subs	r0, r0, r7
 8001398:	4540      	cmp	r0, r8
 800139a:	d9bd      	bls.n	8001318 <HAL_RCC_OscConfig+0x1e0>
 800139c:	e713      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800139e:	4d1b      	ldr	r5, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
 80013a0:	68ab      	ldr	r3, [r5, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	f43f aeca 	beq.w	8001140 <HAL_RCC_OscConfig+0x8>
 80013ac:	4e1b      	ldr	r6, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x2e4>)
 80013ae:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013b2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b4:	d134      	bne.n	8001420 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80013b6:	f7ff f8ff 	bl	80005b8 <HAL_GetTick>
 80013ba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	0199      	lsls	r1, r3, #6
 80013c0:	d41e      	bmi.n	8001400 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c2:	6a22      	ldr	r2, [r4, #32]
 80013c4:	69e3      	ldr	r3, [r4, #28]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4c0d      	ldr	r4, [pc, #52]	; (800140c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d8:	0852      	lsrs	r2, r2, #1
 80013da:	3a01      	subs	r2, #1
 80013dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013e2:	2301      	movs	r3, #1
 80013e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013e6:	f7ff f8e7 	bl	80005b8 <HAL_GetTick>
 80013ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	019a      	lsls	r2, r3, #6
 80013f0:	f53f aebc 	bmi.w	800116c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff f8e0 	bl	80005b8 <HAL_GetTick>
 80013f8:	1b40      	subs	r0, r0, r5
 80013fa:	2802      	cmp	r0, #2
 80013fc:	d9f6      	bls.n	80013ec <HAL_RCC_OscConfig+0x2b4>
 80013fe:	e6e2      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff f8da 	bl	80005b8 <HAL_GetTick>
 8001404:	1bc0      	subs	r0, r0, r7
 8001406:	2802      	cmp	r0, #2
 8001408:	d9d8      	bls.n	80013bc <HAL_RCC_OscConfig+0x284>
 800140a:	e6dc      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
 800140c:	40023800 	.word	0x40023800
 8001410:	42470000 	.word	0x42470000
 8001414:	42470e80 	.word	0x42470e80
 8001418:	40007000 	.word	0x40007000
 800141c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001420:	f7ff f8ca 	bl	80005b8 <HAL_GetTick>
 8001424:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	f57f ae9f 	bpl.w	800116c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff f8c3 	bl	80005b8 <HAL_GetTick>
 8001432:	1b00      	subs	r0, r0, r4
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f6      	bls.n	8001426 <HAL_RCC_OscConfig+0x2ee>
 8001438:	e6c5      	b.n	80011c6 <HAL_RCC_OscConfig+0x8e>
 800143a:	bf00      	nop

0800143c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143c:	4913      	ldr	r1, [pc, #76]	; (800148c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800143e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001440:	688b      	ldr	r3, [r1, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x16>
 800144a:	2b08      	cmp	r3, #8
 800144c:	d003      	beq.n	8001456 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001450:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <HAL_RCC_GetSysClockFreq+0x58>)
 8001454:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001456:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001458:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001460:	bf14      	ite	ne
 8001462:	480c      	ldrne	r0, [pc, #48]	; (8001494 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	480a      	ldreq	r0, [pc, #40]	; (8001490 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001466:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800146a:	bf18      	it	ne
 800146c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001472:	fba1 0100 	umull	r0, r1, r1, r0
 8001476:	f7fe fea7 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_RCC_GetSysClockFreq+0x50>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001486:	fbb0 f0f3 	udiv	r0, r0, r3
 800148a:	bd08      	pop	{r3, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	00f42400 	.word	0x00f42400
 8001494:	007a1200 	.word	0x007a1200

08001498 <HAL_RCC_ClockConfig>:
{
 8001498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800149c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800149e:	4604      	mov	r4, r0
 80014a0:	b910      	cbnz	r0, 80014a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_RCC_ClockConfig+0x124>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f002 020f 	and.w	r2, r2, #15
 80014b0:	428a      	cmp	r2, r1
 80014b2:	d328      	bcc.n	8001506 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	6821      	ldr	r1, [r4, #0]
 80014b6:	078f      	lsls	r7, r1, #30
 80014b8:	d42d      	bmi.n	8001516 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	07c8      	lsls	r0, r1, #31
 80014bc:	d440      	bmi.n	8001540 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_ClockConfig+0x124>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f002 020f 	and.w	r2, r2, #15
 80014c6:	4295      	cmp	r5, r2
 80014c8:	d366      	bcc.n	8001598 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	0751      	lsls	r1, r2, #29
 80014ce:	d46c      	bmi.n	80015aa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	0713      	lsls	r3, r2, #28
 80014d2:	d507      	bpl.n	80014e4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d4:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
 80014d6:	6921      	ldr	r1, [r4, #16]
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e4:	f7ff ffaa 	bl	800143c <HAL_RCC_GetSysClockFreq>
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
 80014ea:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <HAL_RCC_ClockConfig+0x12c>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	40d8      	lsrs	r0, r3
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_ClockConfig+0x130>)
 80014f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7fe ffec 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001500:	2000      	movs	r0, #0
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	4299      	cmp	r1, r3
 8001512:	d1c6      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xa>
 8001514:	e7ce      	b.n	80014b4 <HAL_RCC_ClockConfig+0x1c>
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	bf1e      	ittt	ne
 800151e:	689a      	ldrne	r2, [r3, #8]
 8001520:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001524:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001528:	bf42      	ittt	mi
 800152a:	689a      	ldrmi	r2, [r3, #8]
 800152c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001530:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68a0      	ldr	r0, [r4, #8]
 8001536:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800153a:	4302      	orrs	r2, r0
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e7bc      	b.n	80014ba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001540:	6862      	ldr	r2, [r4, #4]
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
 8001544:	2a01      	cmp	r2, #1
 8001546:	d11d      	bne.n	8001584 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	d0a8      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001550:	4e1b      	ldr	r6, [pc, #108]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
 8001552:	68b3      	ldr	r3, [r6, #8]
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	4313      	orrs	r3, r2
 800155a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800155c:	f7ff f82c 	bl	80005b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001564:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	68b3      	ldr	r3, [r6, #8]
 8001568:	6862      	ldr	r2, [r4, #4]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001572:	d0a4      	beq.n	80014be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff f820 	bl	80005b8 <HAL_GetTick>
 8001578:	1bc0      	subs	r0, r0, r7
 800157a:	4540      	cmp	r0, r8
 800157c:	d9f3      	bls.n	8001566 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800157e:	2003      	movs	r0, #3
}
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001584:	1e91      	subs	r1, r2, #2
 8001586:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	d802      	bhi.n	8001592 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001590:	e7dd      	b.n	800154e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	f013 0f02 	tst.w	r3, #2
 8001596:	e7da      	b.n	800154e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001598:	b2ea      	uxtb	r2, r5
 800159a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	429d      	cmp	r5, r3
 80015a4:	f47f af7d 	bne.w	80014a2 <HAL_RCC_ClockConfig+0xa>
 80015a8:	e78f      	b.n	80014ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015aa:	4905      	ldr	r1, [pc, #20]	; (80015c0 <HAL_RCC_ClockConfig+0x128>)
 80015ac:	68e0      	ldr	r0, [r4, #12]
 80015ae:	688b      	ldr	r3, [r1, #8]
 80015b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015b4:	4303      	orrs	r3, r0
 80015b6:	608b      	str	r3, [r1, #8]
 80015b8:	e78a      	b.n	80014d0 <HAL_RCC_ClockConfig+0x38>
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08009560 	.word	0x08009560
 80015c8:	20000020 	.word	0x20000020

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015da:	6810      	ldr	r0, [r2, #0]
}
 80015dc:	40d8      	lsrs	r0, r3
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08009570 	.word	0x08009570
 80015e8:	20000020 	.word	0x20000020

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015fa:	6810      	ldr	r0, [r2, #0]
}
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800
 8001604:	08009570 	.word	0x08009570
 8001608:	20000020 	.word	0x20000020

0800160c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	f013 0f05 	tst.w	r3, #5
{
 8001612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001614:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001616:	d105      	bne.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001618:	6828      	ldr	r0, [r5, #0]
 800161a:	f010 0002 	ands.w	r0, r0, #2
 800161e:	d128      	bne.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8001620:	b003      	add	sp, #12
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001624:	4c41      	ldr	r4, [pc, #260]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001626:	4e42      	ldr	r6, [pc, #264]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800162c:	f7fe ffc4 	bl	80005b8 <HAL_GetTick>
 8001630:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001632:	6833      	ldr	r3, [r6, #0]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	d415      	bmi.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001638:	68ab      	ldr	r3, [r5, #8]
 800163a:	686a      	ldr	r2, [r5, #4]
 800163c:	071b      	lsls	r3, r3, #28
 800163e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001642:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001646:	2301      	movs	r3, #1
 8001648:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800164a:	f7fe ffb5 	bl	80005b8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800164e:	4c38      	ldr	r4, [pc, #224]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001650:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	0118      	lsls	r0, r3, #4
 8001656:	d4df      	bmi.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001658:	f7fe ffae 	bl	80005b8 <HAL_GetTick>
 800165c:	1b80      	subs	r0, r0, r6
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f7      	bls.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001662:	e004      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001664:	f7fe ffa8 	bl	80005b8 <HAL_GetTick>
 8001668:	1bc0      	subs	r0, r0, r7
 800166a:	2802      	cmp	r0, #2
 800166c:	d9e1      	bls.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
 8001670:	e7d6      	b.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001678:	4c2e      	ldr	r4, [pc, #184]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001694:	f7fe ff90 	bl	80005b8 <HAL_GetTick>
 8001698:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	05d9      	lsls	r1, r3, #23
 800169e:	d51b      	bpl.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016a0:	4c23      	ldr	r4, [pc, #140]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80016a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016aa:	68eb      	ldr	r3, [r5, #12]
 80016ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016b0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80016b6:	d134      	bne.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80016b8:	6891      	ldr	r1, [r2, #8]
 80016ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80016be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80016c6:	4301      	orrs	r1, r0
 80016c8:	6091      	str	r1, [r2, #8]
 80016ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
 80016d6:	e7a3      	b.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7fe ff6e 	bl	80005b8 <HAL_GetTick>
 80016dc:	1b80      	subs	r0, r0, r6
 80016de:	2802      	cmp	r0, #2
 80016e0:	d9db      	bls.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80016e2:	e7c4      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016e4:	68ea      	ldr	r2, [r5, #12]
 80016e6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d0dd      	beq.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016fa:	2100      	movs	r1, #0
 80016fc:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80016fe:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001700:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001702:	07da      	lsls	r2, r3, #31
 8001704:	d5d1      	bpl.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001706:	f7fe ff57 	bl	80005b8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800170e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001712:	079b      	lsls	r3, r3, #30
 8001714:	d4c9      	bmi.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7fe ff4f 	bl	80005b8 <HAL_GetTick>
 800171a:	1b80      	subs	r0, r0, r6
 800171c:	42b8      	cmp	r0, r7
 800171e:	d9f7      	bls.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001720:	e7a5      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001722:	6891      	ldr	r1, [r2, #8]
 8001724:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001728:	e7ce      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 800172a:	bf00      	nop
 800172c:	42470068 	.word	0x42470068
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	42470e40 	.word	0x42470e40

0800173c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800173c:	6802      	ldr	r2, [r0, #0]
{
 800173e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001740:	68d3      	ldr	r3, [r2, #12]
 8001742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001746:	60d3      	str	r3, [r2, #12]
{
 8001748:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 800174a:	f7fe ff35 	bl	80005b8 <HAL_GetTick>
 800174e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	069b      	lsls	r3, r3, #26
 8001756:	d501      	bpl.n	800175c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001758:	2000      	movs	r0, #0
 800175a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800175c:	f7fe ff2c 	bl	80005b8 <HAL_GetTick>
 8001760:	1b40      	subs	r0, r0, r5
 8001762:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001766:	d9f3      	bls.n	8001750 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001768:	2003      	movs	r0, #3
}
 800176a:	bd38      	pop	{r3, r4, r5, pc}

0800176c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800176c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	0652      	lsls	r2, r2, #25
{
 8001774:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001776:	d501      	bpl.n	800177c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001778:	2000      	movs	r0, #0
 800177a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001782:	f7fe ff19 	bl	80005b8 <HAL_GetTick>
 8001786:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	065b      	lsls	r3, r3, #25
 800178e:	d4f3      	bmi.n	8001778 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001790:	f7fe ff12 	bl	80005b8 <HAL_GetTick>
 8001794:	1b40      	subs	r0, r0, r5
 8001796:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800179a:	d9f5      	bls.n	8001788 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
}
 800179e:	bd38      	pop	{r3, r4, r5, pc}

080017a0 <HAL_RTC_Init>:
{
 80017a0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80017a2:	4604      	mov	r4, r0
 80017a4:	b1b8      	cbz	r0, 80017d6 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80017a6:	7f43      	ldrb	r3, [r0, #29]
 80017a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ac:	b913      	cbnz	r3, 80017b4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80017ae:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80017b0:	f007 fb24 	bl	8008dfc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017b4:	2302      	movs	r3, #2
 80017b6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	22ca      	movs	r2, #202	; 0xca
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
 80017be:	2253      	movs	r2, #83	; 0x53
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff ffd2 	bl	800176c <RTC_EnterInitMode>
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	4605      	mov	r5, r0
 80017cc:	b128      	cbz	r0, 80017da <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017d2:	2304      	movs	r3, #4
 80017d4:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80017d6:	2501      	movs	r5, #1
 80017d8:	e02e      	b.n	8001838 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80017da:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80017dc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80017de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80017e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80017e8:	6862      	ldr	r2, [r4, #4]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	4302      	orrs	r2, r0
 80017ee:	6960      	ldr	r0, [r4, #20]
 80017f0:	4302      	orrs	r2, r0
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80017f6:	68e2      	ldr	r2, [r4, #12]
 80017f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	68a1      	ldr	r1, [r4, #8]
 80017fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001802:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800180a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	069b      	lsls	r3, r3, #26
 8001810:	d405      	bmi.n	800181e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ff92 	bl	800173c <HAL_RTC_WaitForSynchro>
 8001818:	b108      	cbz	r0, 800181e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	e7d7      	b.n	80017ce <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800181e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001820:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800182a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182c:	430a      	orrs	r2, r1
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001834:	2301      	movs	r3, #1
 8001836:	7763      	strb	r3, [r4, #29]
}
 8001838:	4628      	mov	r0, r5
 800183a:	bd38      	pop	{r3, r4, r5, pc}

0800183c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800183c:	2300      	movs	r3, #0

  while(Value >= 10U)
 800183e:	2809      	cmp	r0, #9
 8001840:	d803      	bhi.n	800184a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001842:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001846:	b2c0      	uxtb	r0, r0
 8001848:	4770      	bx	lr
    Value -= 10U;
 800184a:	380a      	subs	r0, #10
    bcdhigh++;
 800184c:	3301      	adds	r3, #1
    Value -= 10U;
 800184e:	b2c0      	uxtb	r0, r0
 8001850:	e7f5      	b.n	800183e <RTC_ByteToBcd2+0x2>

08001852 <HAL_RTC_SetTime>:
{
 8001852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001854:	7f03      	ldrb	r3, [r0, #28]
 8001856:	2b01      	cmp	r3, #1
{
 8001858:	4606      	mov	r6, r0
 800185a:	460f      	mov	r7, r1
 800185c:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001860:	d02f      	beq.n	80018c2 <HAL_RTC_SetTime+0x70>
 8001862:	2301      	movs	r3, #1
 8001864:	7703      	strb	r3, [r0, #28]
 8001866:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001868:	7745      	strb	r5, [r0, #29]
 800186a:	7808      	ldrb	r0, [r1, #0]
 800186c:	784d      	ldrb	r5, [r1, #1]
 800186e:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001870:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001872:	bb42      	cbnz	r2, 80018c6 <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001874:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001878:	bf08      	it	eq
 800187a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800187c:	f7ff ffde 	bl	800183c <RTC_ByteToBcd2>
 8001880:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001882:	4628      	mov	r0, r5
 8001884:	f7ff ffda 	bl	800183c <RTC_ByteToBcd2>
 8001888:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff ffd6 	bl	800183c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001890:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001896:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800189a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800189e:	6833      	ldr	r3, [r6, #0]
 80018a0:	22ca      	movs	r2, #202	; 0xca
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
 80018a4:	2253      	movs	r2, #83	; 0x53
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018a8:	4630      	mov	r0, r6
 80018aa:	f7ff ff5f 	bl	800176c <RTC_EnterInitMode>
 80018ae:	6833      	ldr	r3, [r6, #0]
 80018b0:	4605      	mov	r5, r0
 80018b2:	b1a8      	cbz	r0, 80018e0 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018b8:	2304      	movs	r3, #4
 80018ba:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80018bc:	2300      	movs	r3, #0
 80018be:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80018c0:	2501      	movs	r5, #1
}
 80018c2:	4628      	mov	r0, r5
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018c6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018ca:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 80018ce:	bf08      	it	eq
 80018d0:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018d2:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018d6:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80018d8:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018da:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80018de:	e7de      	b.n	800189e <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018e0:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80018e4:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80018e8:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80018ea:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018ec:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80018ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	4302      	orrs	r2, r0
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001904:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	069b      	lsls	r3, r3, #26
 800190a:	d40a      	bmi.n	8001922 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800190c:	4630      	mov	r0, r6
 800190e:	f7ff ff15 	bl	800173c <HAL_RTC_WaitForSynchro>
 8001912:	b130      	cbz	r0, 8001922 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001914:	6833      	ldr	r3, [r6, #0]
 8001916:	22ff      	movs	r2, #255	; 0xff
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800191a:	2304      	movs	r3, #4
 800191c:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 800191e:	7735      	strb	r5, [r6, #28]
 8001920:	e7ce      	b.n	80018c0 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001922:	6833      	ldr	r3, [r6, #0]
 8001924:	22ff      	movs	r2, #255	; 0xff
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001928:	2301      	movs	r3, #1
 800192a:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 800192c:	2300      	movs	r3, #0
 800192e:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001930:	e7c7      	b.n	80018c2 <HAL_RTC_SetTime+0x70>

08001932 <HAL_RTC_SetDate>:
{
 8001932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001934:	7f03      	ldrb	r3, [r0, #28]
 8001936:	2b01      	cmp	r3, #1
{
 8001938:	4605      	mov	r5, r0
 800193a:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800193e:	d030      	beq.n	80019a2 <HAL_RTC_SetDate+0x70>
 8001940:	2301      	movs	r3, #1
 8001942:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001944:	7746      	strb	r6, [r0, #29]
 8001946:	784b      	ldrb	r3, [r1, #1]
 8001948:	78c8      	ldrb	r0, [r1, #3]
 800194a:	788e      	ldrb	r6, [r1, #2]
 800194c:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800194e:	2a00      	cmp	r2, #0
 8001950:	d148      	bne.n	80019e4 <HAL_RTC_SetDate+0xb2>
 8001952:	06da      	lsls	r2, r3, #27
 8001954:	d503      	bpl.n	800195e <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001956:	f023 0310 	bic.w	r3, r3, #16
 800195a:	330a      	adds	r3, #10
 800195c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800195e:	f7ff ff6d 	bl	800183c <RTC_ByteToBcd2>
 8001962:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001964:	7848      	ldrb	r0, [r1, #1]
 8001966:	f7ff ff69 	bl	800183c <RTC_ByteToBcd2>
 800196a:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800196c:	4630      	mov	r0, r6
 800196e:	f7ff ff65 	bl	800183c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001972:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001976:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800197a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	22ca      	movs	r2, #202	; 0xca
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
 8001984:	2253      	movs	r2, #83	; 0x53
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001988:	4628      	mov	r0, r5
 800198a:	f7ff feef 	bl	800176c <RTC_EnterInitMode>
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	4606      	mov	r6, r0
 8001992:	b140      	cbz	r0, 80019a6 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001998:	2304      	movs	r3, #4
 800199a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800199c:	2300      	movs	r3, #0
 800199e:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80019a0:	2601      	movs	r6, #1
}
 80019a2:	4630      	mov	r0, r6
 80019a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80019a6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80019aa:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80019ae:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	069b      	lsls	r3, r3, #26
 80019bc:	d40a      	bmi.n	80019d4 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff febc 	bl	800173c <HAL_RTC_WaitForSynchro>
 80019c4:	b130      	cbz	r0, 80019d4 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019c6:	682b      	ldr	r3, [r5, #0]
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019cc:	2304      	movs	r3, #4
 80019ce:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80019d0:	772e      	strb	r6, [r5, #28]
 80019d2:	e7e5      	b.n	80019a0 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80019da:	2301      	movs	r3, #1
 80019dc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80019de:	2300      	movs	r3, #0
 80019e0:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 80019e2:	e7de      	b.n	80019a2 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 80019e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80019ea:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019ec:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80019f0:	e7c5      	b.n	800197e <HAL_RTC_SetDate+0x4c>

080019f2 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80019f2:	0903      	lsrs	r3, r0, #4
 80019f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80019f8:	f000 000f 	and.w	r0, r0, #15
 80019fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001a00:	b2c0      	uxtb	r0, r0
 8001a02:	4770      	bx	lr

08001a04 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a08:	6048      	str	r0, [r1, #4]
{
 8001a0a:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a0c:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001a0e:	681d      	ldr	r5, [r3, #0]
 8001a10:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8001a14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a18:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001a1c:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a1e:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001a20:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001a24:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001a28:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001a2c:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001a30:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001a32:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001a34:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001a36:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001a38:	b952      	cbnz	r2, 8001a50 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001a3a:	f7ff ffda 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a3e:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff ffd6 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a46:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f7ff ffd2 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a4e:	7088      	strb	r0, [r1, #2]
}
 8001a50:	2000      	movs	r0, #0
 8001a52:	bd70      	pop	{r4, r5, r6, pc}

08001a54 <HAL_RTC_GetDate>:
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001a56:	6803      	ldr	r3, [r0, #0]
 8001a58:	685c      	ldr	r4, [r3, #4]
 8001a5a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8001a5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001a62:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001a64:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001a68:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001a6c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001a70:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001a72:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001a74:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001a76:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8001a78:	b952      	cbnz	r2, 8001a90 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001a7a:	f7ff ffba 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a7e:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001a80:	4628      	mov	r0, r5
 8001a82:	f7ff ffb6 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a86:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ffb2 	bl	80019f2 <RTC_Bcd2ToByte>
 8001a8e:	7088      	strb	r0, [r1, #2]
}
 8001a90:	2000      	movs	r0, #0
 8001a92:	bd38      	pop	{r3, r4, r5, pc}

08001a94 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7fe fd88 	bl	80005b8 <HAL_GetTick>
 8001aa8:	4607      	mov	r7, r0
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001aaa:	b92d      	cbnz	r5, 8001ab8 <HAL_SD_ReadBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ab2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e010      	b.n	8001ada <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001ab8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001abc:	b2c0      	uxtb	r0, r0
 8001abe:	2801      	cmp	r0, #1
 8001ac0:	f040 80c3 	bne.w	8001c4a <HAL_SD_ReadBlocks+0x1b6>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ac4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ac6:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001acc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ad0:	d906      	bls.n	8001ae0 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8001ada:	b007      	add	sp, #28
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001ae6:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001aea:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001aec:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001aee:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001af2:	bf18      	it	ne
 8001af4:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001af8:	f000 fff1 	bl	8002ade <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001afc:	b150      	cbz	r0, 8001b14 <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b08:	4318      	orrs	r0, r3
 8001b0a:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001b12:	e7e2      	b.n	8001ada <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001b1a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001b1e:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001b20:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001b22:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001b24:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001b28:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 8001b2c:	4669      	mov	r1, sp
 8001b2e:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001b30:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001b32:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001b36:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001b3a:	f000 ffbd 	bl	8002ab8 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001b3e:	45d0      	cmp	r8, sl
 8001b40:	d90a      	bls.n	8001b58 <HAL_SD_ReadBlocks+0xc4>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001b42:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001b46:	4649      	mov	r1, r9
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	f000 fff8 	bl	8002b3e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d1d5      	bne.n	8001afe <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001b52:	f240 3a2a 	movw	sl, #810	; 0x32a
 8001b56:	e027      	b.n	8001ba8 <HAL_SD_ReadBlocks+0x114>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001b58:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	f000 ffd5 	bl	8002b0e <SDMMC_CmdReadSingleBlock>
 8001b64:	e7f3      	b.n	8001b4e <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	d50b      	bpl.n	8001b82 <HAL_SD_ReadBlocks+0xee>
 8001b6a:	f1a5 0904 	sub.w	r9, r5, #4
 8001b6e:	f105 0b1c 	add.w	fp, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	f000 fee2 	bl	800293c <SDIO_ReadFIFO>
 8001b78:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 8001b7c:	45d9      	cmp	r9, fp
 8001b7e:	d1f8      	bne.n	8001b72 <HAL_SD_ReadBlocks+0xde>
        tempbuff += 8U;
 8001b80:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b82:	b966      	cbnz	r6, 8001b9e <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b92:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	e79d      	b.n	8001ada <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b9e:	f7fe fd0b 	bl	80005b8 <HAL_GetTick>
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	4286      	cmp	r6, r0
 8001ba6:	d9ed      	bls.n	8001b84 <HAL_SD_ReadBlocks+0xf0>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bac:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001bb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001bb2:	d0d8      	beq.n	8001b66 <HAL_SD_ReadBlocks+0xd2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001bb4:	05db      	lsls	r3, r3, #23
 8001bb6:	d509      	bpl.n	8001bcc <HAL_SD_ReadBlocks+0x138>
 8001bb8:	f1b8 0f01 	cmp.w	r8, #1
 8001bbc:	d906      	bls.n	8001bcc <HAL_SD_ReadBlocks+0x138>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d003      	beq.n	8001bcc <HAL_SD_ReadBlocks+0x138>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001bc4:	f001 f804 	bl	8002bd0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d198      	bne.n	8001afe <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	0710      	lsls	r0, r2, #28
 8001bd2:	d507      	bpl.n	8001be4 <HAL_SD_ReadBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001be0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001be2:	e793      	b.n	8001b0c <HAL_SD_ReadBlocks+0x78>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be6:	0791      	lsls	r1, r2, #30
 8001be8:	d506      	bpl.n	8001bf8 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	e7f3      	b.n	8001be0 <HAL_SD_ReadBlocks+0x14c>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfa:	0692      	lsls	r2, r2, #26
 8001bfc:	d518      	bpl.n	8001c30 <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bfe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	e7e9      	b.n	8001be0 <HAL_SD_ReadBlocks+0x14c>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001c0c:	f000 fe96 	bl	800293c <SDIO_ReadFIFO>
 8001c10:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001c14:	b93e      	cbnz	r6, 8001c26 <HAL_SD_ReadBlocks+0x192>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c24:	e7dc      	b.n	8001be0 <HAL_SD_ReadBlocks+0x14c>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001c26:	f7fe fcc7 	bl	80005b8 <HAL_GetTick>
 8001c2a:	1bc0      	subs	r0, r0, r7
 8001c2c:	4286      	cmp	r6, r0
 8001c2e:	d9f2      	bls.n	8001c16 <HAL_SD_ReadBlocks+0x182>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c34:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8001c38:	d1e8      	bne.n	8001c0c <HAL_SD_ReadBlocks+0x178>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c3e:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001c40:	2201      	movs	r2, #1
 8001c42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8001c46:	4618      	mov	r0, r3
 8001c48:	e747      	b.n	8001ada <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c50:	e72f      	b.n	8001ab2 <HAL_SD_ReadBlocks+0x1e>

08001c52 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	4604      	mov	r4, r0
 8001c5a:	460d      	mov	r5, r1
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	461e      	mov	r6, r3
 8001c60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7fe fca9 	bl	80005b8 <HAL_GetTick>
 8001c66:	4680      	mov	r8, r0
  uint32_t count = 0U;
  uint32_t *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001c68:	b92d      	cbnz	r5, 8001c76 <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001c70:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
 8001c74:	e010      	b.n	8001c98 <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001c76:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001c7a:	b2c0      	uxtb	r0, r0
 8001c7c:	2801      	cmp	r0, #1
 8001c7e:	f040 809f 	bne.w	8001dc0 <HAL_SD_WriteBlocks+0x16e>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c84:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c8a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c8e:	d906      	bls.n	8001c9e <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c96:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8001c98:	b006      	add	sp, #24
 8001c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001ca4:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001ca8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001caa:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001cb0:	bf18      	it	ne
 8001cb2:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cb6:	f000 ff12 	bl	8002ade <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001cba:	b150      	cbz	r0, 8001cd2 <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cc6:	4318      	orrs	r0, r3
 8001cc8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001cd0:	e7e2      	b.n	8001c98 <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8001cd2:	2e01      	cmp	r6, #1
 8001cd4:	d935      	bls.n	8001d42 <HAL_SD_WriteBlocks+0xf0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001cda:	4649      	mov	r1, r9
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	f000 ff5e 	bl	8002b9e <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1ea      	bne.n	8001cbc <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001cec:	0273      	lsls	r3, r6, #9
 8001cee:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cf0:	2390      	movs	r3, #144	; 0x90
 8001cf2:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001cf4:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cf6:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cf8:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 8001cfa:	4669      	mov	r1, sp
 8001cfc:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cfe:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001d00:	f000 feda 	bl	8002ab8 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d04:	f240 3a1a 	movw	sl, #794	; 0x31a
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d0c:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001d10:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d12:	d01d      	beq.n	8001d50 <HAL_SD_WriteBlocks+0xfe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001d14:	05dd      	lsls	r5, r3, #23
 8001d16:	d508      	bpl.n	8001d2a <HAL_SD_WriteBlocks+0xd8>
 8001d18:	2e01      	cmp	r6, #1
 8001d1a:	d906      	bls.n	8001d2a <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d003      	beq.n	8001d2a <HAL_SD_WriteBlocks+0xd8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001d22:	f000 ff55 	bl	8002bd0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d1c8      	bne.n	8001cbc <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2e:	0711      	lsls	r1, r2, #28
 8001d30:	d52d      	bpl.n	8001d8e <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001d3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d40:	e7c3      	b.n	8001cca <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001d42:	2310      	movs	r3, #16
 8001d44:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001d46:	4649      	mov	r1, r9
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	f000 ff10 	bl	8002b6e <SDMMC_CmdWriteSingleBlock>
 8001d4e:	e7c8      	b.n	8001ce2 <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001d50:	045b      	lsls	r3, r3, #17
 8001d52:	d509      	bpl.n	8001d68 <HAL_SD_WriteBlocks+0x116>
 8001d54:	46a9      	mov	r9, r5
 8001d56:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001d58:	4649      	mov	r1, r9
 8001d5a:	6820      	ldr	r0, [r4, #0]
 8001d5c:	f109 0904 	add.w	r9, r9, #4
 8001d60:	f000 fdef 	bl	8002942 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001d64:	454d      	cmp	r5, r9
 8001d66:	d1f7      	bne.n	8001d58 <HAL_SD_WriteBlocks+0x106>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001d68:	b957      	cbnz	r7, 8001d80 <HAL_SD_WriteBlocks+0x12e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d74:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	e78b      	b.n	8001c98 <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001d80:	f7fe fc1a 	bl	80005b8 <HAL_GetTick>
 8001d84:	eba0 0008 	sub.w	r0, r0, r8
 8001d88:	4287      	cmp	r7, r0
 8001d8a:	d8bd      	bhi.n	8001d08 <HAL_SD_WriteBlocks+0xb6>
 8001d8c:	e7ed      	b.n	8001d6a <HAL_SD_WriteBlocks+0x118>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d90:	0792      	lsls	r2, r2, #30
 8001d92:	d506      	bpl.n	8001da2 <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	e7cd      	b.n	8001d3e <HAL_SD_WriteBlocks+0xec>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001da2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001da4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001da8:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001dae:	d003      	beq.n	8001db8 <HAL_SD_WriteBlocks+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	e7c2      	b.n	8001d3e <HAL_SD_WriteBlocks+0xec>
    hsd->State = HAL_SD_STATE_READY;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001dbe:	e76b      	b.n	8001c98 <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dc6:	e753      	b.n	8001c70 <HAL_SD_WriteBlocks+0x1e>

08001dc8 <HAL_SD_GetCardCSD>:
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  uint32_t tmp = 0U;
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8001dc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8001dca:	0f9a      	lsrs	r2, r3, #30
 8001dcc:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8001dce:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001dd2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8001dd4:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001dd8:	708a      	strb	r2, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
  pCSD->TAAC = (uint8_t)tmp;
 8001dda:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001dde:	70ca      	strb	r2, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
  pCSD->NSAC = (uint8_t)tmp;
 8001de0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001de4:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8001de6:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001de8:	714b      	strb	r3, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8001dea:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001dec:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	80ca      	strh	r2, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001df2:	88ca      	ldrh	r2, [r1, #6]
{
 8001df4:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8001dfc:	4322      	orrs	r2, r4
 8001dfe:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8001e00:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001e04:	720a      	strb	r2, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8001e06:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8001e0a:	09d4      	lsrs	r4, r2, #7
 8001e0c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8001e0e:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8001e12:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8001e14:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8001e18:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8001e1a:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001e1e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8001e20:	2400      	movs	r4, #0
 8001e22:	734c      	strb	r4, [r1, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001e24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e26:	2c00      	cmp	r4, #0
 8001e28:	f040 8083 	bne.w	8001f32 <HAL_SD_GetCardCSD+0x16a>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8001e2c:	0292      	lsls	r2, r2, #10
 8001e2e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001e32:	610a      	str	r2, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize |= (tmp) << 2U;
 8001e34:	690a      	ldr	r2, [r1, #16]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	610b      	str	r3, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001e40:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001e42:	690b      	ldr	r3, [r1, #16]
 8001e44:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001e48:	610b      	str	r3, [r1, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8001e4a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001e4e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8001e50:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001e54:	754b      	strb	r3, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8001e56:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001e5a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8001e5c:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001e60:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8001e62:	0bd3      	lsrs	r3, r2, #15
 8001e64:	f003 0306 	and.w	r3, r3, #6
 8001e68:	760b      	strb	r3, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8001e6a:	7e0c      	ldrb	r4, [r1, #24]
 8001e6c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001e70:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001e74:	4322      	orrs	r2, r4
 8001e76:	760a      	strb	r2, [r1, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001e78:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001e7a:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001e7c:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001e7e:	3402      	adds	r4, #2
 8001e80:	40a2      	lsls	r2, r4
 8001e82:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8001e84:	7a0d      	ldrb	r5, [r1, #8]
 8001e86:	2401      	movs	r4, #1
 8001e88:	40ac      	lsls	r4, r5
 8001e8a:	6584      	str	r4, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8001e8c:	0a64      	lsrs	r4, r4, #9
 8001e8e:	4362      	muls	r2, r4
 8001e90:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001e92:	f44f 7200 	mov.w	r2, #512	; 0x200
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001e96:	6602      	str	r2, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001e98:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001ea2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001ea4:	768b      	strb	r3, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8001ea6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001ea8:	7e8a      	ldrb	r2, [r1, #26]
 8001eaa:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8001eae:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001eb4:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001eb6:	76cb      	strb	r3, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8001eb8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8001eba:	0fda      	lsrs	r2, r3, #31
 8001ebc:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8001ebe:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001ec2:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8001ec4:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001ec8:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8001eca:	0d9a      	lsrs	r2, r3, #22
 8001ecc:	f002 020c 	and.w	r2, r2, #12
 8001ed0:	77ca      	strb	r2, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8001ed2:	7fca      	ldrb	r2, [r1, #31]
 8001ed4:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8001ed8:	4302      	orrs	r2, r0
 8001eda:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8001edc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001ee0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8001ee4:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001ee6:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8001eea:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001eee:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8001ef2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001ef6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8001efa:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001efe:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8001f02:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001f06:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8001f0a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001f0e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8001f12:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001f16:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8001f1a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001f1e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8001f22:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001f26:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  
  return HAL_OK;
}
 8001f30:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001f32:	2c01      	cmp	r4, #1
 8001f34:	d11a      	bne.n	8001f6c <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001f3c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001f3e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8001f40:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001f42:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8001f44:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001f48:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8001f4a:	690c      	ldr	r4, [r1, #16]
 8001f4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001f50:	4322      	orrs	r2, r4
 8001f52:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8001f54:	690a      	ldr	r2, [r1, #16]
 8001f56:	0292      	lsls	r2, r2, #10
 8001f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f5c:	6542      	str	r2, [r0, #84]	; 0x54
 8001f5e:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f68:	6582      	str	r2, [r0, #88]	; 0x58
 8001f6a:	e794      	b.n	8001e96 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd30      	pop	{r4, r5, pc}
	...

08001f88 <HAL_SD_InitCard>:
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001f8c:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001f8e:	2376      	movs	r3, #118	; 0x76
 8001f90:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001f92:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f94:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8001f96:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001f98:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8001f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f9e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8001fa2:	4e6f      	ldr	r6, [pc, #444]	; (8002160 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001fa4:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001fa6:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001fa8:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8001faa:	ab07      	add	r3, sp, #28
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	f000 fca8 	bl	8002904 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8001fb4:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8001fb6:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	f000 fcc7 	bl	800294c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001fbe:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7fe faff 	bl	80005c4 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001fc6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8001fc8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001fca:	f000 fe33 	bl	8002c34 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fce:	4606      	mov	r6, r0
 8001fd0:	b968      	cbnz	r0, 8001fee <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	f000 fe56 	bl	8002c84 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fd8:	b380      	cbz	r0, 800203c <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001fda:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001fdc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001fe0:	9b06      	ldr	r3, [sp, #24]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	42ab      	cmp	r3, r5
 8001fe6:	9206      	str	r2, [sp, #24]
 8001fe8:	d108      	bne.n	8001ffc <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001fea:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001ff4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ff6:	430e      	orrs	r6, r1
 8001ff8:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001ffa:	e081      	b.n	8002100 <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	f000 fe78 	bl	8002cf4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002004:	4601      	mov	r1, r0
 8002006:	b110      	cbz	r0, 800200e <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002008:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800200c:	e7ef      	b.n	8001fee <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f000 fe88 	bl	8002d24 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002014:	4601      	mov	r1, r0
 8002016:	2800      	cmp	r0, #0
 8002018:	d1f6      	bne.n	8002008 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800201a:	6820      	ldr	r0, [r4, #0]
 800201c:	f000 fcb1 	bl	8002982 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002020:	2800      	cmp	r0, #0
 8002022:	dadd      	bge.n	8001fe0 <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002024:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002026:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002028:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800202a:	2301      	movs	r3, #1
 800202c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002030:	f000 fc90 	bl	8002954 <SDIO_GetPowerState>
 8002034:	bb10      	cbnz	r0, 800207c <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002036:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800203a:	e06b      	b.n	8002114 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800203c:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800203e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002042:	9b06      	ldr	r3, [sp, #24]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	42ab      	cmp	r3, r5
 8002048:	9206      	str	r2, [sp, #24]
 800204a:	d0ce      	beq.n	8001fea <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800204c:	2100      	movs	r1, #0
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	f000 fe50 	bl	8002cf4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002054:	4606      	mov	r6, r0
 8002056:	2800      	cmp	r0, #0
 8002058:	d1c9      	bne.n	8001fee <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800205a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800205e:	6820      	ldr	r0, [r4, #0]
 8002060:	f000 fe60 	bl	8002d24 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002064:	4606      	mov	r6, r0
 8002066:	2800      	cmp	r0, #0
 8002068:	d1c1      	bne.n	8001fee <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800206a:	4601      	mov	r1, r0
 800206c:	6820      	ldr	r0, [r4, #0]
 800206e:	f000 fc88 	bl	8002982 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002072:	0fc3      	lsrs	r3, r0, #31
 8002074:	d0e5      	beq.n	8002042 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002076:	0042      	lsls	r2, r0, #1
 8002078:	d5d4      	bpl.n	8002024 <HAL_SD_InitCard+0x9c>
 800207a:	e7d4      	b.n	8002026 <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800207c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800207e:	2b03      	cmp	r3, #3
 8002080:	d01a      	beq.n	80020b8 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f000 fe67 	bl	8002d56 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002088:	4605      	mov	r5, r0
 800208a:	2800      	cmp	r0, #0
 800208c:	d142      	bne.n	8002114 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800208e:	4601      	mov	r1, r0
 8002090:	6820      	ldr	r0, [r4, #0]
 8002092:	f000 fc76 	bl	8002982 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002096:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002098:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	f000 fc71 	bl	8002982 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020a0:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80020a2:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	f000 fc6c 	bl	8002982 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80020aa:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020ac:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80020ae:	6820      	ldr	r0, [r4, #0]
 80020b0:	f000 fc67 	bl	8002982 <SDIO_GetResponse>
 80020b4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80020b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d122      	bne.n	8002104 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80020be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d12e      	bne.n	8002122 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80020c4:	2104      	movs	r1, #4
 80020c6:	6820      	ldr	r0, [r4, #0]
 80020c8:	f000 fc5b 	bl	8002982 <SDIO_GetResponse>
 80020cc:	0d00      	lsrs	r0, r0, #20
 80020ce:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80020d0:	a90d      	add	r1, sp, #52	; 0x34
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fe78 	bl	8001dc8 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80020d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	0412      	lsls	r2, r2, #16
 80020de:	2300      	movs	r3, #0
 80020e0:	f000 fd90 	bl	8002c04 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80020e4:	4605      	mov	r5, r0
 80020e6:	b9a8      	cbnz	r0, 8002114 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 80020e8:	f104 0310 	add.w	r3, r4, #16
 80020ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80020f4:	1d23      	adds	r3, r4, #4
 80020f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	f000 fc03 	bl	8002904 <SDIO_Init>
  return HAL_OK;
 80020fe:	4628      	mov	r0, r5
}
 8002100:	b019      	add	sp, #100	; 0x64
 8002102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002104:	f10d 0116 	add.w	r1, sp, #22
 8002108:	6820      	ldr	r0, [r4, #0]
 800210a:	f000 fe4f 	bl	8002dac <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800210e:	4605      	mov	r5, r0
 8002110:	2800      	cmp	r0, #0
 8002112:	d0d4      	beq.n	80020be <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8002114:	2001      	movs	r0, #1
 8002116:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800211a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800211c:	431d      	orrs	r5, r3
 800211e:	63a5      	str	r5, [r4, #56]	; 0x38
 8002120:	e7ee      	b.n	8002100 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002122:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8002126:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002128:	6820      	ldr	r0, [r4, #0]
 800212a:	0409      	lsls	r1, r1, #16
 800212c:	f000 fe28 	bl	8002d80 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002130:	4605      	mov	r5, r0
 8002132:	2800      	cmp	r0, #0
 8002134:	d1ee      	bne.n	8002114 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002136:	4601      	mov	r1, r0
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	f000 fc22 	bl	8002982 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800213e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002140:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	f000 fc1d 	bl	8002982 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002148:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800214a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800214c:	6820      	ldr	r0, [r4, #0]
 800214e:	f000 fc18 	bl	8002982 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002152:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002154:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002156:	6820      	ldr	r0, [r4, #0]
 8002158:	f000 fc13 	bl	8002982 <SDIO_GetResponse>
 800215c:	6720      	str	r0, [r4, #112]	; 0x70
 800215e:	e7b1      	b.n	80020c4 <HAL_SD_InitCard+0x13c>
 8002160:	422580a0 	.word	0x422580a0

08002164 <HAL_SD_Init>:
{
 8002164:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8002166:	4604      	mov	r4, r0
 8002168:	b1a0      	cbz	r0, 8002194 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800216a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800216e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002172:	b913      	cbnz	r3, 800217a <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8002174:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002176:	f006 fe4d 	bl	8008e14 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800217a:	2303      	movs	r3, #3
 800217c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff ff01 	bl	8001f88 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002186:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8002188:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800218a:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800218c:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800218e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002192:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002194:	2001      	movs	r0, #1
}
 8002196:	bd10      	pop	{r4, pc}

08002198 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002198:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800219a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800219c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800219e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80021a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80021a2:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80021a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80021a6:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80021a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80021aa:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80021ac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80021ae:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80021b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80021b2:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80021b4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80021b6:	61cb      	str	r3, [r1, #28]
}
 80021b8:	2000      	movs	r0, #0
 80021ba:	4770      	bx	lr

080021bc <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021bc:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80021be:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021c0:	0409      	lsls	r1, r1, #16
{
 80021c2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021c4:	6800      	ldr	r0, [r0, #0]
 80021c6:	f000 fe45 	bl	8002e54 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80021ca:	4601      	mov	r1, r0
 80021cc:	b928      	cbnz	r0, 80021da <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	f000 fbd7 	bl	8002982 <SDIO_GetResponse>
  return cardstate;
 80021d4:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80021d8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80021da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021dc:	4319      	orrs	r1, r3
 80021de:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80021e0:	2000      	movs	r0, #0
 80021e2:	e7f7      	b.n	80021d4 <HAL_SD_GetCardState+0x18>

080021e4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021e4:	6803      	ldr	r3, [r0, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021f6:	2320      	movs	r3, #32
 80021f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80021fc:	4770      	bx	lr
	...

08002200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002204:	6806      	ldr	r6, [r0, #0]
 8002206:	68c2      	ldr	r2, [r0, #12]
 8002208:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800220a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800220c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002210:	4313      	orrs	r3, r2
 8002212:	6133      	str	r3, [r6, #16]
{
 8002214:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002216:	6883      	ldr	r3, [r0, #8]
 8002218:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800221a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800221c:	4303      	orrs	r3, r0
 800221e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002220:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002224:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002226:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800222a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800222c:	4313      	orrs	r3, r2
 800222e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002230:	6973      	ldr	r3, [r6, #20]
 8002232:	69a2      	ldr	r2, [r4, #24]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800223e:	6173      	str	r3, [r6, #20]
 8002240:	4b7a      	ldr	r3, [pc, #488]	; (800242c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002242:	d17c      	bne.n	800233e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002244:	429e      	cmp	r6, r3
 8002246:	d003      	beq.n	8002250 <UART_SetConfig+0x50>
 8002248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224c:	429e      	cmp	r6, r3
 800224e:	d144      	bne.n	80022da <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002250:	f7ff f9cc 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002254:	2519      	movs	r5, #25
 8002256:	fb05 f300 	mul.w	r3, r5, r0
 800225a:	6860      	ldr	r0, [r4, #4]
 800225c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002260:	0040      	lsls	r0, r0, #1
 8002262:	fbb3 f3f0 	udiv	r3, r3, r0
 8002266:	fbb3 f3f9 	udiv	r3, r3, r9
 800226a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800226e:	f7ff f9bd 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	4368      	muls	r0, r5
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fbb0 f7f3 	udiv	r7, r0, r3
 800227c:	f7ff f9b6 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	4368      	muls	r0, r5
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	fbb3 f3f9 	udiv	r3, r3, r9
 800228e:	fb09 7313 	mls	r3, r9, r3, r7
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3332      	adds	r3, #50	; 0x32
 8002296:	fbb3 f3f9 	udiv	r3, r3, r9
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80022a0:	f7ff f9a4 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 80022a4:	6862      	ldr	r2, [r4, #4]
 80022a6:	4368      	muls	r0, r5
 80022a8:	0052      	lsls	r2, r2, #1
 80022aa:	fbb0 faf2 	udiv	sl, r0, r2
 80022ae:	f7ff f99d 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022b2:	6863      	ldr	r3, [r4, #4]
 80022b4:	4368      	muls	r0, r5
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80022c0:	fb09 a313 	mls	r3, r9, r3, sl
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022d2:	443b      	add	r3, r7
 80022d4:	60b3      	str	r3, [r6, #8]
 80022d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022da:	f7ff f977 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80022de:	2519      	movs	r5, #25
 80022e0:	fb05 f300 	mul.w	r3, r5, r0
 80022e4:	6860      	ldr	r0, [r4, #4]
 80022e6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022ea:	0040      	lsls	r0, r0, #1
 80022ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80022f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80022f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022f8:	f7ff f968 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80022fc:	6863      	ldr	r3, [r4, #4]
 80022fe:	4368      	muls	r0, r5
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fbb0 f7f3 	udiv	r7, r0, r3
 8002306:	f7ff f961 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800230a:	6863      	ldr	r3, [r4, #4]
 800230c:	4368      	muls	r0, r5
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	fbb3 f3f9 	udiv	r3, r3, r9
 8002318:	fb09 7313 	mls	r3, r9, r3, r7
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	3332      	adds	r3, #50	; 0x32
 8002320:	fbb3 f3f9 	udiv	r3, r3, r9
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800232a:	f7ff f94f 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800232e:	6862      	ldr	r2, [r4, #4]
 8002330:	4368      	muls	r0, r5
 8002332:	0052      	lsls	r2, r2, #1
 8002334:	fbb0 faf2 	udiv	sl, r0, r2
 8002338:	f7ff f948 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800233c:	e7b9      	b.n	80022b2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233e:	429e      	cmp	r6, r3
 8002340:	d002      	beq.n	8002348 <UART_SetConfig+0x148>
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <UART_SetConfig+0x230>)
 8002344:	429e      	cmp	r6, r3
 8002346:	d140      	bne.n	80023ca <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002348:	f7ff f950 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 800234c:	6867      	ldr	r7, [r4, #4]
 800234e:	2519      	movs	r5, #25
 8002350:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002354:	fb05 f300 	mul.w	r3, r5, r0
 8002358:	00bf      	lsls	r7, r7, #2
 800235a:	fbb3 f3f7 	udiv	r3, r3, r7
 800235e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002362:	011f      	lsls	r7, r3, #4
 8002364:	f7ff f942 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	4368      	muls	r0, r5
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fbb0 f8f3 	udiv	r8, r0, r3
 8002372:	f7ff f93b 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002376:	6863      	ldr	r3, [r4, #4]
 8002378:	4368      	muls	r0, r5
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002380:	fbb3 f3f9 	udiv	r3, r3, r9
 8002384:	fb09 8313 	mls	r3, r9, r3, r8
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002390:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002394:	f7ff f92a 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002398:	6862      	ldr	r2, [r4, #4]
 800239a:	4368      	muls	r0, r5
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	fbb0 faf2 	udiv	sl, r0, r2
 80023a2:	f7ff f923 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023a6:	6863      	ldr	r3, [r4, #4]
 80023a8:	4368      	muls	r0, r5
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023b4:	fb09 a313 	mls	r3, r9, r3, sl
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	ea43 0308 	orr.w	r3, r3, r8
 80023c8:	e783      	b.n	80022d2 <UART_SetConfig+0xd2>
 80023ca:	f7ff f8ff 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80023ce:	6867      	ldr	r7, [r4, #4]
 80023d0:	2519      	movs	r5, #25
 80023d2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023d6:	fb05 f300 	mul.w	r3, r5, r0
 80023da:	00bf      	lsls	r7, r7, #2
 80023dc:	fbb3 f3f7 	udiv	r3, r3, r7
 80023e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023e4:	011f      	lsls	r7, r3, #4
 80023e6:	f7ff f8f1 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	4368      	muls	r0, r5
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fbb0 f8f3 	udiv	r8, r0, r3
 80023f4:	f7ff f8ea 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	4368      	muls	r0, r5
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	fbb3 f3f9 	udiv	r3, r3, r9
 8002406:	fb09 8313 	mls	r3, r9, r3, r8
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002412:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002416:	f7ff f8d9 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800241a:	6862      	ldr	r2, [r4, #4]
 800241c:	4368      	muls	r0, r5
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	fbb0 faf2 	udiv	sl, r0, r2
 8002424:	f7ff f8d2 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8002428:	e7bd      	b.n	80023a6 <UART_SetConfig+0x1a6>
 800242a:	bf00      	nop
 800242c:	40011000 	.word	0x40011000
 8002430:	40011400 	.word	0x40011400

08002434 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	460e      	mov	r6, r1
 800243a:	4617      	mov	r7, r2
 800243c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	6821      	ldr	r1, [r4, #0]
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	ea36 0303 	bics.w	r3, r6, r3
 8002446:	d101      	bne.n	800244c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002448:	2000      	movs	r0, #0
}
 800244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800244c:	1c6b      	adds	r3, r5, #1
 800244e:	d0f7      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002450:	b995      	cbnz	r5, 8002478 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800245a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002464:	2320      	movs	r3, #32
 8002466:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800246a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002474:	2003      	movs	r0, #3
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002478:	f7fe f89e 	bl	80005b8 <HAL_GetTick>
 800247c:	1bc0      	subs	r0, r0, r7
 800247e:	4285      	cmp	r5, r0
 8002480:	d2dd      	bcs.n	800243e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002482:	e7e6      	b.n	8002452 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002484 <HAL_UART_Init>:
{
 8002484:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002486:	4604      	mov	r4, r0
 8002488:	b340      	cbz	r0, 80024dc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800248a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800248e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002492:	b91b      	cbnz	r3, 800249c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002494:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002498:	f006 fd1e 	bl	8008ed8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800249c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800249e:	2324      	movs	r3, #36	; 0x24
 80024a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024a4:	68d3      	ldr	r3, [r2, #12]
 80024a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024aa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff fea7 	bl	8002200 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ca:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80024ce:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80024da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	bd10      	pop	{r4, pc}

080024e0 <HAL_UART_Transmit>:
{
 80024e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024ea:	2b20      	cmp	r3, #32
{
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
 80024f0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80024f2:	d14f      	bne.n	8002594 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d04a      	beq.n	800258e <HAL_UART_Transmit+0xae>
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d048      	beq.n	800258e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80024fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002500:	2b01      	cmp	r3, #1
 8002502:	d047      	beq.n	8002594 <HAL_UART_Transmit+0xb4>
 8002504:	2301      	movs	r3, #1
 8002506:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250e:	2321      	movs	r3, #33	; 0x21
 8002510:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002514:	f7fe f850 	bl	80005b8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002518:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800251c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800251e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002522:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002524:	b29b      	uxth	r3, r3
 8002526:	b96b      	cbnz	r3, 8002544 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4632      	mov	r2, r6
 800252c:	2140      	movs	r1, #64	; 0x40
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff ff80 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002534:	b9b0      	cbnz	r0, 8002564 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002536:	2320      	movs	r3, #32
 8002538:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800253c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002544:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800254c:	68a3      	ldr	r3, [r4, #8]
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	4632      	mov	r2, r6
 8002554:	463b      	mov	r3, r7
 8002556:	f04f 0180 	mov.w	r1, #128	; 0x80
 800255a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800255c:	d10e      	bne.n	800257c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	f7ff ff69 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002562:	b110      	cbz	r0, 800256a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002564:	2003      	movs	r0, #3
 8002566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800256a:	882b      	ldrh	r3, [r5, #0]
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002574:	6923      	ldr	r3, [r4, #16]
 8002576:	b943      	cbnz	r3, 800258a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002578:	3502      	adds	r5, #2
 800257a:	e7d2      	b.n	8002522 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257c:	f7ff ff5a 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002580:	2800      	cmp	r0, #0
 8002582:	d1ef      	bne.n	8002564 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	782a      	ldrb	r2, [r5, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	3501      	adds	r5, #1
 800258c:	e7c9      	b.n	8002522 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800258e:	2001      	movs	r0, #1
 8002590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002594:	2002      	movs	r0, #2
}
 8002596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800259a <HAL_UART_Receive>:
{
 800259a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800259e:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80025a0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80025a4:	2b20      	cmp	r3, #32
{
 80025a6:	4604      	mov	r4, r0
 80025a8:	460d      	mov	r5, r1
 80025aa:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ac:	d152      	bne.n	8002654 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 80025ae:	2900      	cmp	r1, #0
 80025b0:	d04d      	beq.n	800264e <HAL_UART_Receive+0xb4>
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d04b      	beq.n	800264e <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 80025b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d04a      	beq.n	8002654 <HAL_UART_Receive+0xba>
 80025be:	2301      	movs	r3, #1
 80025c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c8:	2322      	movs	r3, #34	; 0x22
 80025ca:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80025ce:	f7fd fff3 	bl	80005b8 <HAL_GetTick>
    huart->RxXferSize = Size;
 80025d2:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 80025d6:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 80025d8:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025dc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80025de:	b280      	uxth	r0, r0
 80025e0:	b930      	cbnz	r0, 80025f0 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80025e2:	2320      	movs	r3, #32
 80025e4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80025e8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80025f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	4632      	mov	r2, r6
 8002600:	463b      	mov	r3, r7
 8002602:	f04f 0120 	mov.w	r1, #32
 8002606:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002608:	d112      	bne.n	8002630 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	f7ff ff13 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800260e:	b110      	cbz	r0, 8002616 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8002610:	2003      	movs	r0, #3
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002616:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002618:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800261a:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800261c:	b922      	cbnz	r2, 8002628 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	f825 3b02 	strh.w	r3, [r5], #2
 8002626:	e7d9      	b.n	80025dc <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f825 3b01 	strh.w	r3, [r5], #1
 800262e:	e7d5      	b.n	80025dc <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002630:	f7ff ff00 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002634:	2800      	cmp	r0, #0
 8002636:	d1eb      	bne.n	8002610 <HAL_UART_Receive+0x76>
 8002638:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800263a:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002640:	b911      	cbnz	r1, 8002648 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002642:	702b      	strb	r3, [r5, #0]
 8002644:	4615      	mov	r5, r2
 8002646:	e7c9      	b.n	80025dc <HAL_UART_Receive+0x42>
 8002648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264c:	e7f9      	b.n	8002642 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 800264e:	2001      	movs	r0, #1
 8002650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002654:	2002      	movs	r0, #2
}
 8002656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800265a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800265a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800265e:	2b20      	cmp	r3, #32
 8002660:	d120      	bne.n	80026a4 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002662:	b1e9      	cbz	r1, 80026a0 <HAL_UART_Receive_IT+0x46>
 8002664:	b1e2      	cbz	r2, 80026a0 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002666:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800266a:	2b01      	cmp	r3, #1
 800266c:	d01a      	beq.n	80026a4 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800266e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002670:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002672:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002674:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002678:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800267c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800267e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002680:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002682:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002686:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800268a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800268c:	6951      	ldr	r1, [r2, #20]
 800268e:	f041 0101 	orr.w	r1, r1, #1
 8002692:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002694:	68d1      	ldr	r1, [r2, #12]
 8002696:	f041 0120 	orr.w	r1, r1, #32
 800269a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800269c:	4618      	mov	r0, r3
 800269e:	4770      	bx	lr
      return HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
 80026a2:	4770      	bx	lr
    return HAL_BUSY;
 80026a4:	2002      	movs	r0, #2
}
 80026a6:	4770      	bx	lr

080026a8 <HAL_UART_TxCpltCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_UART_RxCpltCallback>:
 80026aa:	4770      	bx	lr

080026ac <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ac:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80026b0:	2b22      	cmp	r3, #34	; 0x22
{
 80026b2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026b4:	d136      	bne.n	8002724 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026b6:	6883      	ldr	r3, [r0, #8]
 80026b8:	6901      	ldr	r1, [r0, #16]
 80026ba:	6802      	ldr	r2, [r0, #0]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026c2:	d123      	bne.n	800270c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026c4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026c6:	b9e9      	cbnz	r1, 8002704 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026cc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80026d0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80026d2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80026d4:	3c01      	subs	r4, #1
 80026d6:	b2a4      	uxth	r4, r4
 80026d8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80026da:	b98c      	cbnz	r4, 8002700 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026dc:	6803      	ldr	r3, [r0, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	f022 0220 	bic.w	r2, r2, #32
 80026e4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ec:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026f6:	2320      	movs	r3, #32
 80026f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80026fc:	f7ff ffd5 	bl	80026aa <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002700:	2000      	movs	r0, #0
}
 8002702:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f823 2b01 	strh.w	r2, [r3], #1
 800270a:	e7e1      	b.n	80026d0 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800270c:	b921      	cbnz	r1, 8002718 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	6852      	ldr	r2, [r2, #4]
 8002712:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e7dc      	b.n	80026d2 <UART_Receive_IT+0x26>
 8002718:	6852      	ldr	r2, [r2, #4]
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	6281      	str	r1, [r0, #40]	; 0x28
 800271e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002722:	e7f7      	b.n	8002714 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002724:	2002      	movs	r0, #2
 8002726:	bd10      	pop	{r4, pc}

08002728 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002728:	6803      	ldr	r3, [r0, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800272c:	68d9      	ldr	r1, [r3, #12]
{
 800272e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002730:	0716      	lsls	r6, r2, #28
{
 8002732:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002734:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002736:	d107      	bne.n	8002748 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002738:	0696      	lsls	r6, r2, #26
 800273a:	d55a      	bpl.n	80027f2 <HAL_UART_IRQHandler+0xca>
 800273c:	068d      	lsls	r5, r1, #26
 800273e:	d558      	bpl.n	80027f2 <HAL_UART_IRQHandler+0xca>
}
 8002740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002744:	f7ff bfb2 	b.w	80026ac <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002748:	f015 0501 	ands.w	r5, r5, #1
 800274c:	d102      	bne.n	8002754 <HAL_UART_IRQHandler+0x2c>
 800274e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002752:	d04e      	beq.n	80027f2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002754:	07d3      	lsls	r3, r2, #31
 8002756:	d505      	bpl.n	8002764 <HAL_UART_IRQHandler+0x3c>
 8002758:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800275a:	bf42      	ittt	mi
 800275c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800275e:	f043 0301 	orrmi.w	r3, r3, #1
 8002762:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002764:	0750      	lsls	r0, r2, #29
 8002766:	d504      	bpl.n	8002772 <HAL_UART_IRQHandler+0x4a>
 8002768:	b11d      	cbz	r5, 8002772 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800276a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002772:	0793      	lsls	r3, r2, #30
 8002774:	d504      	bpl.n	8002780 <HAL_UART_IRQHandler+0x58>
 8002776:	b11d      	cbz	r5, 8002780 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002780:	0716      	lsls	r6, r2, #28
 8002782:	d504      	bpl.n	800278e <HAL_UART_IRQHandler+0x66>
 8002784:	b11d      	cbz	r5, 800278e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002786:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800278e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d066      	beq.n	8002862 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002794:	0695      	lsls	r5, r2, #26
 8002796:	d504      	bpl.n	80027a2 <HAL_UART_IRQHandler+0x7a>
 8002798:	0688      	lsls	r0, r1, #26
 800279a:	d502      	bpl.n	80027a2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff85 	bl	80026ac <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027a8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80027aa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ac:	d402      	bmi.n	80027b4 <HAL_UART_IRQHandler+0x8c>
 80027ae:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80027b2:	d01a      	beq.n	80027ea <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80027b4:	f7ff fd16 	bl	80021e4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	0652      	lsls	r2, r2, #25
 80027be:	d510      	bpl.n	80027e2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80027c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80027ca:	b150      	cbz	r0, 80027e2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_UART_IRQHandler+0x13c>)
 80027ce:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027d0:	f7fd ff9d 	bl	800070e <HAL_DMA_Abort_IT>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d044      	beq.n	8002862 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80027da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027e0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f002 f8e8 	bl	80049b8 <HAL_UART_ErrorCallback>
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027ea:	f002 f8e5 	bl	80049b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	63e5      	str	r5, [r4, #60]	; 0x3c
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f2:	0616      	lsls	r6, r2, #24
 80027f4:	d527      	bpl.n	8002846 <HAL_UART_IRQHandler+0x11e>
 80027f6:	060d      	lsls	r5, r1, #24
 80027f8:	d525      	bpl.n	8002846 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80027fe:	2a21      	cmp	r2, #33	; 0x21
 8002800:	d12f      	bne.n	8002862 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002802:	68a2      	ldr	r2, [r4, #8]
 8002804:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002808:	6a22      	ldr	r2, [r4, #32]
 800280a:	d117      	bne.n	800283c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800280c:	8811      	ldrh	r1, [r2, #0]
 800280e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002812:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002814:	6921      	ldr	r1, [r4, #16]
 8002816:	b979      	cbnz	r1, 8002838 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002818:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800281a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800281c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800281e:	3a01      	subs	r2, #1
 8002820:	b292      	uxth	r2, r2
 8002822:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002824:	b9ea      	cbnz	r2, 8002862 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002838:	3201      	adds	r2, #1
 800283a:	e7ee      	b.n	800281a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283c:	1c51      	adds	r1, r2, #1
 800283e:	6221      	str	r1, [r4, #32]
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e7ea      	b.n	800281c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002846:	0650      	lsls	r0, r2, #25
 8002848:	d50b      	bpl.n	8002862 <HAL_UART_IRQHandler+0x13a>
 800284a:	064a      	lsls	r2, r1, #25
 800284c:	d509      	bpl.n	8002862 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002854:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002856:	2320      	movs	r3, #32
 8002858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff ff23 	bl	80026a8 <HAL_UART_TxCpltCallback>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	08002869 	.word	0x08002869

08002868 <UART_DMAAbortOnError>:
{
 8002868:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002870:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002872:	f002 f8a1 	bl	80049b8 <HAL_UART_ErrorCallback>
 8002876:	bd08      	pop	{r3, pc}

08002878 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <SDMMC_GetCmdResp2+0x48>)
 800287a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fbb3 f2f2 	udiv	r2, r3, r2
 8002884:	f241 3388 	movw	r3, #5000	; 0x1388
 8002888:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800288a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800288e:	d314      	bcc.n	80028ba <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002890:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002892:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002896:	d0f8      	beq.n	800288a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002898:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800289a:	075b      	lsls	r3, r3, #29
 800289c:	d503      	bpl.n	80028a6 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800289e:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80028a0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80028a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028a8:	f013 0301 	ands.w	r3, r3, #1
 80028ac:	d001      	beq.n	80028b2 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80028ae:	2301      	movs	r3, #1
 80028b0:	e7f6      	b.n	80028a0 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80028b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80028b6:	6382      	str	r2, [r0, #56]	; 0x38
 80028b8:	e7f3      	b.n	80028a2 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80028ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028be:	e7f0      	b.n	80028a2 <SDMMC_GetCmdResp2+0x2a>
 80028c0:	20000020 	.word	0x20000020

080028c4 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <SDMMC_GetCmdResp3+0x3c>)
 80028c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80028d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80028d4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80028d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80028da:	d30e      	bcc.n	80028fa <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80028dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80028de:	f012 0f45 	tst.w	r2, #69	; 0x45
 80028e2:	d0f8      	beq.n	80028d6 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80028e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028e6:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80028ea:	bf15      	itete	ne
 80028ec:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80028ee:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80028f2:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80028f4:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80028f6:	4618      	mov	r0, r3
 80028f8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80028fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80028fe:	4770      	bx	lr
 8002900:	20000020 	.word	0x20000020

08002904 <SDIO_Init>:
{
 8002904:	b084      	sub	sp, #16
 8002906:	b510      	push	{r4, lr}
 8002908:	ac03      	add	r4, sp, #12
 800290a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800290e:	9904      	ldr	r1, [sp, #16]
 8002910:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002912:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002914:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002916:	9905      	ldr	r1, [sp, #20]
 8002918:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800291a:	9906      	ldr	r1, [sp, #24]
 800291c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800291e:	9907      	ldr	r1, [sp, #28]
 8002920:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002922:	9908      	ldr	r1, [sp, #32]
}
 8002924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002928:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800292c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800292e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002932:	4313      	orrs	r3, r2
 8002934:	6043      	str	r3, [r0, #4]
}
 8002936:	b004      	add	sp, #16
 8002938:	2000      	movs	r0, #0
 800293a:	4770      	bx	lr

0800293c <SDIO_ReadFIFO>:
 800293c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002940:	4770      	bx	lr

08002942 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002942:	680b      	ldr	r3, [r1, #0]
 8002944:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002948:	2000      	movs	r0, #0
 800294a:	4770      	bx	lr

0800294c <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800294c:	2303      	movs	r3, #3
 800294e:	6003      	str	r3, [r0, #0]
}
 8002950:	2000      	movs	r0, #0
 8002952:	4770      	bx	lr

08002954 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002954:	6800      	ldr	r0, [r0, #0]
}
 8002956:	f000 0003 	and.w	r0, r0, #3
 800295a:	4770      	bx	lr

0800295c <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 800295c:	680b      	ldr	r3, [r1, #0]
{
 800295e:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8002960:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002962:	688c      	ldr	r4, [r1, #8]
 8002964:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002966:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002968:	4323      	orrs	r3, r4
                       Command->Response         |\
 800296a:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 800296c:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 800296e:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002970:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8002974:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002976:	f022 020f 	bic.w	r2, r2, #15
 800297a:	4313      	orrs	r3, r2
 800297c:	60c3      	str	r3, [r0, #12]
}
 800297e:	2000      	movs	r0, #0
 8002980:	bd10      	pop	{r4, pc}

08002982 <SDIO_GetResponse>:
{
 8002982:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002984:	3014      	adds	r0, #20
 8002986:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800298c:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
}  
 8002992:	b002      	add	sp, #8
 8002994:	4770      	bx	lr
	...

08002998 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002998:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <SDMMC_GetCmdResp1+0x118>)
{
 800299a:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80029a2:	fbb3 f3f4 	udiv	r3, r3, r4
 80029a6:	435a      	muls	r2, r3
    if (count-- == 0U)
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d04a      	beq.n	8002a42 <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80029ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029ae:	f013 0f45 	tst.w	r3, #69	; 0x45
 80029b2:	f102 32ff 	add.w	r2, r2, #4294967295
 80029b6:	d0f7      	beq.n	80029a8 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80029b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029ba:	075c      	lsls	r4, r3, #29
 80029bc:	d503      	bpl.n	80029c6 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80029be:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80029c0:	6383      	str	r3, [r0, #56]	; 0x38
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80029c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029c8:	f013 0301 	ands.w	r3, r3, #1
 80029cc:	d001      	beq.n	80029d2 <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80029ce:	2301      	movs	r3, #1
 80029d0:	e7f6      	b.n	80029c0 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 80029d2:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4291      	cmp	r1, r2
 80029d8:	d136      	bne.n	8002a48 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80029da:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80029de:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80029e0:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80029e2:	f7ff ffce 	bl	8002982 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <SDMMC_GetCmdResp1+0x11c>)
 80029e8:	4003      	ands	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0e9      	beq.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80029ee:	2800      	cmp	r0, #0
 80029f0:	db2c      	blt.n	8002a4c <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80029f2:	0042      	lsls	r2, r0, #1
 80029f4:	d42d      	bmi.n	8002a52 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80029f6:	0084      	lsls	r4, r0, #2
 80029f8:	d42d      	bmi.n	8002a56 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80029fa:	00c1      	lsls	r1, r0, #3
 80029fc:	d42d      	bmi.n	8002a5a <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80029fe:	0102      	lsls	r2, r0, #4
 8002a00:	d42e      	bmi.n	8002a60 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002a02:	0144      	lsls	r4, r0, #5
 8002a04:	d42f      	bmi.n	8002a66 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002a06:	01c1      	lsls	r1, r0, #7
 8002a08:	d430      	bmi.n	8002a6c <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002a0a:	0202      	lsls	r2, r0, #8
 8002a0c:	d431      	bmi.n	8002a72 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002a0e:	0244      	lsls	r4, r0, #9
 8002a10:	d432      	bmi.n	8002a78 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002a12:	0281      	lsls	r1, r0, #10
 8002a14:	d433      	bmi.n	8002a7e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002a16:	02c2      	lsls	r2, r0, #11
 8002a18:	d434      	bmi.n	8002a84 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002a1a:	0344      	lsls	r4, r0, #13
 8002a1c:	d435      	bmi.n	8002a8a <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002a1e:	0381      	lsls	r1, r0, #14
 8002a20:	d436      	bmi.n	8002a90 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002a22:	03c2      	lsls	r2, r0, #15
 8002a24:	d437      	bmi.n	8002a96 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002a26:	0404      	lsls	r4, r0, #16
 8002a28:	d438      	bmi.n	8002a9c <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002a2a:	0441      	lsls	r1, r0, #17
 8002a2c:	d439      	bmi.n	8002aa2 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002a2e:	0482      	lsls	r2, r0, #18
 8002a30:	d43a      	bmi.n	8002aa8 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002a32:	f010 0f08 	tst.w	r0, #8
 8002a36:	bf14      	ite	ne
 8002a38:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8002a3c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002a40:	e7bf      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002a42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a46:	e7bc      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e7ba      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a50:	e7b7      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002a52:	2340      	movs	r3, #64	; 0x40
 8002a54:	e7b5      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	e7b3      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	e7b0      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a64:	e7ad      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6a:	e7aa      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a70:	e7a7      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a76:	e7a4      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7c:	e7a1      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a82:	e79e      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8002a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a88:	e79b      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8e:	e798      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002a90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a94:	e795      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002a96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a9a:	e792      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa0:	e78f      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002aa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aa6:	e78c      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8002aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aac:	e789      	b.n	80029c2 <SDMMC_GetCmdResp1+0x2a>
 8002aae:	bf00      	nop
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	fdffe008 	.word	0xfdffe008

08002ab8 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8002ab8:	680b      	ldr	r3, [r1, #0]
{
 8002aba:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8002abc:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8002abe:	684b      	ldr	r3, [r1, #4]
 8002ac0:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002ac2:	68cc      	ldr	r4, [r1, #12]
 8002ac4:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002ac6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002ac8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002aca:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002acc:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002ace:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002ad0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002ad2:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002ada:	2000      	movs	r0, #0
 8002adc:	bd10      	pop	{r4, pc}

08002ade <SDMMC_CmdBlockLength>:
{
 8002ade:	b530      	push	{r4, r5, lr}
 8002ae0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ae2:	2340      	movs	r3, #64	; 0x40
 8002ae4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ae6:	2300      	movs	r3, #0
{
 8002ae8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002aea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002aec:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aee:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002af0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002af8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002afa:	f7ff ff2f 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4621      	mov	r1, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f7ff ff47 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002b0a:	b007      	add	sp, #28
 8002b0c:	bd30      	pop	{r4, r5, pc}

08002b0e <SDMMC_CmdReadSingleBlock>:
{
 8002b0e:	b530      	push	{r4, r5, lr}
 8002b10:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b16:	2300      	movs	r3, #0
{
 8002b18:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002b1a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002b1c:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b1e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b26:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002b28:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b2a:	f7ff ff17 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4621      	mov	r1, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	f7ff ff2f 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002b3a:	b007      	add	sp, #28
 8002b3c:	bd30      	pop	{r4, r5, pc}

08002b3e <SDMMC_CmdReadMultiBlock>:
{
 8002b3e:	b530      	push	{r4, r5, lr}
 8002b40:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b46:	2300      	movs	r3, #0
{
 8002b48:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002b4a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002b4c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b4e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b50:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b56:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002b58:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b5a:	f7ff feff 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4621      	mov	r1, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	f7ff ff17 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002b6a:	b007      	add	sp, #28
 8002b6c:	bd30      	pop	{r4, r5, pc}

08002b6e <SDMMC_CmdWriteSingleBlock>:
{
 8002b6e:	b530      	push	{r4, r5, lr}
 8002b70:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b72:	2340      	movs	r3, #64	; 0x40
 8002b74:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b76:	2300      	movs	r3, #0
{
 8002b78:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002b7a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002b7c:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b7e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b86:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002b88:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b8a:	f7ff fee7 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4621      	mov	r1, r4
 8002b94:	4628      	mov	r0, r5
 8002b96:	f7ff feff 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002b9a:	b007      	add	sp, #28
 8002b9c:	bd30      	pop	{r4, r5, pc}

08002b9e <SDMMC_CmdWriteMultiBlock>:
{
 8002b9e:	b530      	push	{r4, r5, lr}
 8002ba0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ba6:	2300      	movs	r3, #0
{
 8002ba8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002baa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002bac:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bae:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bb0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002bb8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bba:	f7ff fecf 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f7ff fee7 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002bca:	b007      	add	sp, #28
 8002bcc:	bd30      	pop	{r4, r5, pc}
	...

08002bd0 <SDMMC_CmdStopTransfer>:
{
 8002bd0:	b530      	push	{r4, r5, lr}
 8002bd2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002bd4:	2300      	movs	r3, #0
{
 8002bd6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002bd8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002bda:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bdc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bde:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002be0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002be6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002be8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002bea:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bec:	f7ff feb6 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <SDMMC_CmdStopTransfer+0x30>)
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f7ff fecf 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002bfa:	b007      	add	sp, #28
 8002bfc:	bd30      	pop	{r4, r5, pc}
 8002bfe:	bf00      	nop
 8002c00:	05f5e100 	.word	0x05f5e100

08002c04 <SDMMC_CmdSelDesel>:
{
 8002c04:	b530      	push	{r4, r5, lr}
 8002c06:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c08:	2340      	movs	r3, #64	; 0x40
 8002c0a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c0c:	2300      	movs	r3, #0
{
 8002c0e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002c10:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c12:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c14:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002c1a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c1c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002c1e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c20:	f7ff fe9c 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4621      	mov	r1, r4
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7ff feb4 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002c30:	b007      	add	sp, #28
 8002c32:	bd30      	pop	{r4, r5, pc}

08002c34 <SDMMC_CmdGoIdleState>:
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002c3c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002c3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c40:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c42:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c48:	9305      	str	r3, [sp, #20]
{
 8002c4a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c4c:	f7ff fe86 	bl	800295c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <SDMMC_CmdGoIdleState+0x4c>)
 8002c52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c60:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002c62:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002c66:	d308      	bcc.n	8002c7a <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002c68:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c6a:	0612      	lsls	r2, r2, #24
 8002c6c:	d5f9      	bpl.n	8002c62 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002c6e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002c72:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8002c74:	2000      	movs	r0, #0
}
 8002c76:	b006      	add	sp, #24
 8002c78:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002c7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002c7e:	e7fa      	b.n	8002c76 <SDMMC_CmdGoIdleState+0x42>
 8002c80:	20000020 	.word	0x20000020

08002c84 <SDMMC_CmdOperCond>:
{
 8002c84:	b510      	push	{r4, lr}
 8002c86:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002c88:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002c8c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002c8e:	2308      	movs	r3, #8
 8002c90:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c92:	2340      	movs	r3, #64	; 0x40
 8002c94:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c96:	2300      	movs	r3, #0
 8002c98:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c9a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca0:	9305      	str	r3, [sp, #20]
{
 8002ca2:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ca4:	f7ff fe5a 	bl	800295c <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <SDMMC_CmdOperCond+0x6c>)
 8002caa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cb8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002cba:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002cbe:	d314      	bcc.n	8002cea <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002cc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002cc2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002cc6:	d0f8      	beq.n	8002cba <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002cc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002cca:	f012 0204 	ands.w	r2, r2, #4
 8002cce:	d004      	beq.n	8002cda <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002cd0:	2340      	movs	r3, #64	; 0x40
 8002cd2:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002cd4:	2004      	movs	r0, #4
}
 8002cd6:	b006      	add	sp, #24
 8002cd8:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002cda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002cdc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002ce0:	d0f9      	beq.n	8002cd6 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002ce2:	2340      	movs	r3, #64	; 0x40
 8002ce4:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	e7f5      	b.n	8002cd6 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002cea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002cee:	e7f2      	b.n	8002cd6 <SDMMC_CmdOperCond+0x52>
 8002cf0:	20000020 	.word	0x20000020

08002cf4 <SDMMC_CmdAppCommand>:
{
 8002cf4:	b530      	push	{r4, r5, lr}
 8002cf6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cfc:	2300      	movs	r3, #0
{
 8002cfe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002d00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002d02:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d04:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d0c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002d0e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d10:	f7ff fe24 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f7ff fe3c 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002d20:	b007      	add	sp, #28
 8002d22:	bd30      	pop	{r4, r5, pc}

08002d24 <SDMMC_CmdAppOperCommand>:
{
 8002d24:	b510      	push	{r4, lr}
 8002d26:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002d28:	2329      	movs	r3, #41	; 0x29
 8002d2a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002d2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d38:	2300      	movs	r3, #0
{
 8002d3a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002d3c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d3e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d40:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d46:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d48:	f7ff fe08 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7ff fdb9 	bl	80028c4 <SDMMC_GetCmdResp3>
}
 8002d52:	b006      	add	sp, #24
 8002d54:	bd10      	pop	{r4, pc}

08002d56 <SDMMC_CmdSendCID>:
{
 8002d56:	b510      	push	{r4, lr}
 8002d58:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002d5a:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002d5c:	2202      	movs	r2, #2
{
 8002d5e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002d60:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002d62:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d64:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002d66:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d6c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002d6e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d70:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d72:	f7ff fdf3 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fd7e 	bl	8002878 <SDMMC_GetCmdResp2>
}
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd10      	pop	{r4, pc}

08002d80 <SDMMC_CmdSendCSD>:
{
 8002d80:	b510      	push	{r4, lr}
 8002d82:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002d84:	2309      	movs	r3, #9
 8002d86:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002d88:	23c0      	movs	r3, #192	; 0xc0
 8002d8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d8c:	2300      	movs	r3, #0
{
 8002d8e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002d90:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d92:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d94:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d9c:	f7ff fdde 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff fd69 	bl	8002878 <SDMMC_GetCmdResp2>
}
 8002da6:	b006      	add	sp, #24
 8002da8:	bd10      	pop	{r4, pc}
	...

08002dac <SDMMC_CmdSetRelAdd>:
{
 8002dac:	b530      	push	{r4, r5, lr}
 8002dae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002db0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002db2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8002db4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002db6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002db8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dba:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8002dc0:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dc2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dc4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dc6:	9305      	str	r3, [sp, #20]
{
 8002dc8:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dca:	f7ff fdc7 	bl	800295c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <SDMMC_CmdSetRelAdd+0xa4>)
 8002dd0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dda:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dde:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002de0:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002de4:	d32b      	bcc.n	8002e3e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002de6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002de8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002dec:	d0f8      	beq.n	8002de0 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002df0:	075a      	lsls	r2, r3, #29
 8002df2:	d503      	bpl.n	8002dfc <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002df4:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002df6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002df8:	b007      	add	sp, #28
 8002dfa:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dfe:	f011 0101 	ands.w	r1, r1, #1
 8002e02:	d001      	beq.n	8002e08 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e04:	2001      	movs	r0, #1
 8002e06:	e7f6      	b.n	8002df6 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8002e08:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d119      	bne.n	8002e44 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002e10:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002e14:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff fdb3 	bl	8002982 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002e1c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8002e20:	d103      	bne.n	8002e2a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002e22:	0c00      	lsrs	r0, r0, #16
 8002e24:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8002e26:	4618      	mov	r0, r3
 8002e28:	e7e6      	b.n	8002df8 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002e2a:	0443      	lsls	r3, r0, #17
 8002e2c:	d40c      	bmi.n	8002e48 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e2e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002e32:	bf14      	ite	ne
 8002e34:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002e38:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002e3c:	e7dc      	b.n	8002df8 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8002e3e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002e42:	e7d9      	b.n	8002df8 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e44:	2001      	movs	r0, #1
 8002e46:	e7d7      	b.n	8002df8 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002e48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e4c:	e7d4      	b.n	8002df8 <SDMMC_CmdSetRelAdd+0x4c>
 8002e4e:	bf00      	nop
 8002e50:	20000020 	.word	0x20000020

08002e54 <SDMMC_CmdSendStatus>:
{
 8002e54:	b530      	push	{r4, r5, lr}
 8002e56:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e5c:	2300      	movs	r3, #0
{
 8002e5e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002e60:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002e62:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e64:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e66:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e6c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002e6e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e70:	f7ff fd74 	bl	800295c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	f7ff fd8c 	bl	8002998 <SDMMC_GetCmdResp1>
}
 8002e80:	b007      	add	sp, #28
 8002e82:	bd30      	pop	{r4, r5, pc}

08002e84 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <disk_status+0x10>)
 8002e86:	181a      	adds	r2, r3, r0
 8002e88:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002e8c:	7a10      	ldrb	r0, [r2, #8]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4718      	bx	r3
 8002e94:	20000068 	.word	0x20000068

08002e98 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <disk_initialize+0x1c>)
 8002e9a:	5c1a      	ldrb	r2, [r3, r0]
 8002e9c:	b942      	cbnz	r2, 8002eb0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002ea2:	181a      	adds	r2, r3, r0
 8002ea4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002ea8:	7a10      	ldrb	r0, [r2, #8]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4718      	bx	r3
  }
  return stat;
}
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	4770      	bx	lr
 8002eb4:	20000068 	.word	0x20000068

08002eb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002eb8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002eba:	4c05      	ldr	r4, [pc, #20]	; (8002ed0 <disk_read+0x18>)
 8002ebc:	1825      	adds	r5, r4, r0
 8002ebe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002ec2:	6860      	ldr	r0, [r4, #4]
 8002ec4:	6884      	ldr	r4, [r0, #8]
 8002ec6:	7a28      	ldrb	r0, [r5, #8]
 8002ec8:	46a4      	mov	ip, r4
  return res;
}
 8002eca:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002ecc:	4760      	bx	ip
 8002ece:	bf00      	nop
 8002ed0:	20000068 	.word	0x20000068

08002ed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002ed4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002ed6:	4c05      	ldr	r4, [pc, #20]	; (8002eec <disk_write+0x18>)
 8002ed8:	1825      	adds	r5, r4, r0
 8002eda:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002ede:	6860      	ldr	r0, [r4, #4]
 8002ee0:	68c4      	ldr	r4, [r0, #12]
 8002ee2:	7a28      	ldrb	r0, [r5, #8]
 8002ee4:	46a4      	mov	ip, r4
  return res;
}
 8002ee6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002ee8:	4760      	bx	ip
 8002eea:	bf00      	nop
 8002eec:	20000068 	.word	0x20000068

08002ef0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <disk_ioctl+0x18>)
{
 8002ef2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ef4:	181c      	adds	r4, r3, r0
 8002ef6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002efa:	7a20      	ldrb	r0, [r4, #8]
 8002efc:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8002efe:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	4718      	bx	r3
 8002f06:	bf00      	nop
 8002f08:	20000068 	.word	0x20000068

08002f0c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8002f0c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8002f0e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8002f10:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8002f12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8002f16:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002f1a:	4770      	bx	lr

08002f1c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002f1c:	0a0b      	lsrs	r3, r1, #8
 8002f1e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f20:	7043      	strb	r3, [r0, #1]
 8002f22:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002f24:	0e09      	lsrs	r1, r1, #24
 8002f26:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002f28:	70c1      	strb	r1, [r0, #3]
 8002f2a:	4770      	bx	lr

08002f2c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002f2c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8002f2e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002f32:	4290      	cmp	r0, r2
 8002f34:	d1fb      	bne.n	8002f2e <mem_set+0x2>
}
 8002f36:	4770      	bx	lr

08002f38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <chk_lock+0x58>)
 8002f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	462a      	mov	r2, r5
 8002f40:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8002f42:	681e      	ldr	r6, [r3, #0]
 8002f44:	b1a6      	cbz	r6, 8002f70 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002f46:	6807      	ldr	r7, [r0, #0]
 8002f48:	42be      	cmp	r6, r7
 8002f4a:	d112      	bne.n	8002f72 <chk_lock+0x3a>
 8002f4c:	685f      	ldr	r7, [r3, #4]
 8002f4e:	6886      	ldr	r6, [r0, #8]
 8002f50:	42b7      	cmp	r7, r6
 8002f52:	d10e      	bne.n	8002f72 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8002f54:	689f      	ldr	r7, [r3, #8]
 8002f56:	6946      	ldr	r6, [r0, #20]
 8002f58:	42b7      	cmp	r7, r6
 8002f5a:	d10a      	bne.n	8002f72 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f5c:	b9b1      	cbnz	r1, 8002f8c <chk_lock+0x54>
 8002f5e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8002f62:	8993      	ldrh	r3, [r2, #12]
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	bf14      	ite	ne
 8002f6a:	2000      	movne	r0, #0
 8002f6c:	2010      	moveq	r0, #16
 8002f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8002f70:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f72:	3201      	adds	r2, #1
 8002f74:	2a02      	cmp	r2, #2
 8002f76:	f103 0310 	add.w	r3, r3, #16
 8002f7a:	d1e2      	bne.n	8002f42 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f7c:	b10d      	cbz	r5, 8002f82 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f82:	2902      	cmp	r1, #2
 8002f84:	bf0c      	ite	eq
 8002f86:	2000      	moveq	r0, #0
 8002f88:	2012      	movne	r0, #18
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f8c:	2010      	movs	r0, #16
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	20000044 	.word	0x20000044

08002f94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f94:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <inc_lock+0x74>)
 8002f96:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002f98:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8002f9e:	6814      	ldr	r4, [r2, #0]
 8002fa0:	42ac      	cmp	r4, r5
 8002fa2:	d107      	bne.n	8002fb4 <inc_lock+0x20>
 8002fa4:	6857      	ldr	r7, [r2, #4]
 8002fa6:	6884      	ldr	r4, [r0, #8]
 8002fa8:	42a7      	cmp	r7, r4
 8002faa:	d103      	bne.n	8002fb4 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8002fac:	6897      	ldr	r7, [r2, #8]
 8002fae:	6944      	ldr	r4, [r0, #20]
 8002fb0:	42a7      	cmp	r7, r4
 8002fb2:	d01d      	beq.n	8002ff0 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	f102 0210 	add.w	r2, r2, #16
 8002fbc:	d1ef      	bne.n	8002f9e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002fbe:	6833      	ldr	r3, [r6, #0]
 8002fc0:	b113      	cbz	r3, 8002fc8 <inc_lock+0x34>
 8002fc2:	6933      	ldr	r3, [r6, #16]
 8002fc4:	b9eb      	cbnz	r3, 8003002 <inc_lock+0x6e>
 8002fc6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8002fc8:	011c      	lsls	r4, r3, #4
 8002fca:	1932      	adds	r2, r6, r4
 8002fcc:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8002fce:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8002fd0:	6940      	ldr	r0, [r0, #20]
 8002fd2:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8002fd4:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8002fd6:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8002fd8:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002fda:	b979      	cbnz	r1, 8002ffc <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002fdc:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8002fe0:	8992      	ldrh	r2, [r2, #12]
 8002fe2:	3201      	adds	r2, #1
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8002fea:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002fec:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8002fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d0f3      	beq.n	8002fdc <inc_lock+0x48>
 8002ff4:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8002ff8:	8992      	ldrh	r2, [r2, #12]
 8002ffa:	b912      	cbnz	r2, 8003002 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003000:	e7f1      	b.n	8002fe6 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003002:	2000      	movs	r0, #0
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003006:	bf00      	nop
 8003008:	20000044 	.word	0x20000044

0800300c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800300c:	3801      	subs	r0, #1
 800300e:	2801      	cmp	r0, #1
 8003010:	d80e      	bhi.n	8003030 <dec_lock+0x24>
		n = Files[i].ctr;
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <dec_lock+0x2c>)
 8003014:	0103      	lsls	r3, r0, #4
 8003016:	18d1      	adds	r1, r2, r3
 8003018:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 800301a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800301e:	b280      	uxth	r0, r0
 8003020:	b108      	cbz	r0, 8003026 <dec_lock+0x1a>
 8003022:	1e48      	subs	r0, r1, #1
 8003024:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8003026:	18d1      	adds	r1, r2, r3
 8003028:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800302a:	b918      	cbnz	r0, 8003034 <dec_lock+0x28>
 800302c:	50d0      	str	r0, [r2, r3]
 800302e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003030:	2002      	movs	r0, #2
 8003032:	4770      	bx	lr
		res = FR_OK;
 8003034:	2000      	movs	r0, #0
	}
	return res;
}
 8003036:	4770      	bx	lr
 8003038:	20000044 	.word	0x20000044

0800303c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800303c:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800303e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003040:	3b02      	subs	r3, #2
 8003042:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8003044:	bf3d      	ittte	cc
 8003046:	8943      	ldrhcc	r3, [r0, #10]
 8003048:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 800304a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800304e:	2000      	movcs	r0, #0
}
 8003050:	4770      	bx	lr

08003052 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003052:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003054:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003056:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003058:	0a49      	lsrs	r1, r1, #9
 800305a:	8952      	ldrh	r2, [r2, #10]
 800305c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003060:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003062:	b130      	cbz	r0, 8003072 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003064:	4281      	cmp	r1, r0
 8003066:	d302      	bcc.n	800306e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003068:	1a09      	subs	r1, r1, r0
 800306a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800306c:	e7f8      	b.n	8003060 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800306e:	6858      	ldr	r0, [r3, #4]
 8003070:	4408      	add	r0, r1
}
 8003072:	4770      	bx	lr

08003074 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003074:	6802      	ldr	r2, [r0, #0]
{
 8003076:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8003078:	b152      	cbz	r2, 8003090 <get_ldnumber+0x1c>
 800307a:	4611      	mov	r1, r2
 800307c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800307e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003082:	2c20      	cmp	r4, #32
 8003084:	d90c      	bls.n	80030a0 <get_ldnumber+0x2c>
 8003086:	2c3a      	cmp	r4, #58	; 0x3a
 8003088:	d1f8      	bne.n	800307c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800308a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800308c:	428b      	cmp	r3, r1
 800308e:	d002      	beq.n	8003096 <get_ldnumber+0x22>
	int vol = -1;
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8003094:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	2a30      	cmp	r2, #48	; 0x30
 800309a:	d1f9      	bne.n	8003090 <get_ldnumber+0x1c>
					*path = ++tt;
 800309c:	3301      	adds	r3, #1
 800309e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80030a0:	2000      	movs	r0, #0
 80030a2:	bd10      	pop	{r4, pc}

080030a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80030a8:	4604      	mov	r4, r0
 80030aa:	b918      	cbnz	r0, 80030b4 <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 80030ac:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80030ae:	2300      	movs	r3, #0
 80030b0:	602b      	str	r3, [r5, #0]
	return res;
}
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80030b4:	6803      	ldr	r3, [r0, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f8      	beq.n	80030ac <validate+0x8>
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	2a00      	cmp	r2, #0
 80030be:	d0f5      	beq.n	80030ac <validate+0x8>
 80030c0:	8881      	ldrh	r1, [r0, #4]
 80030c2:	88da      	ldrh	r2, [r3, #6]
 80030c4:	4291      	cmp	r1, r2
 80030c6:	d1f1      	bne.n	80030ac <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80030c8:	7858      	ldrb	r0, [r3, #1]
 80030ca:	f7ff fedb 	bl	8002e84 <disk_status>
 80030ce:	f010 0001 	ands.w	r0, r0, #1
 80030d2:	d1eb      	bne.n	80030ac <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	e7eb      	b.n	80030b0 <validate+0xc>

080030d8 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80030d8:	3801      	subs	r0, #1
 80030da:	440a      	add	r2, r1
			*d++ = *s++;
 80030dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e0:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80030e4:	4291      	cmp	r1, r2
 80030e6:	d1f9      	bne.n	80030dc <mem_cpy.part.0+0x4>
}
 80030e8:	4770      	bx	lr

080030ea <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80030ea:	7eca      	ldrb	r2, [r1, #27]
 80030ec:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80030ee:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80030f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80030f4:	bf01      	itttt	eq
 80030f6:	7d48      	ldrbeq	r0, [r1, #21]
 80030f8:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80030fa:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80030fe:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003102:	4618      	mov	r0, r3
 8003104:	4770      	bx	lr

08003106 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003106:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800310a:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800310c:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800310e:	7803      	ldrb	r3, [r0, #0]
 8003110:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003112:	bf01      	itttt	eq
 8003114:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003116:	750a      	strbeq	r2, [r1, #20]
 8003118:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800311a:	754a      	strbeq	r2, [r1, #21]
 800311c:	4770      	bx	lr

0800311e <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800311e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8003120:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003122:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003126:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003128:	2301      	movs	r3, #1
 800312a:	462a      	mov	r2, r5
 800312c:	4639      	mov	r1, r7
 800312e:	7840      	ldrb	r0, [r0, #1]
 8003130:	f7ff fed0 	bl	8002ed4 <disk_write>
 8003134:	b9a0      	cbnz	r0, 8003160 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003136:	6a23      	ldr	r3, [r4, #32]
 8003138:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 800313a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800313c:	1aeb      	subs	r3, r5, r3
 800313e:	4293      	cmp	r3, r2
 8003140:	d301      	bcc.n	8003146 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8003142:	2000      	movs	r0, #0
 8003144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003146:	78a6      	ldrb	r6, [r4, #2]
 8003148:	2e01      	cmp	r6, #1
 800314a:	d9fa      	bls.n	8003142 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 800314c:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 800314e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8003150:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003152:	462a      	mov	r2, r5
 8003154:	2301      	movs	r3, #1
 8003156:	4639      	mov	r1, r7
 8003158:	f7ff febc 	bl	8002ed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800315c:	3e01      	subs	r6, #1
 800315e:	e7f3      	b.n	8003148 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8003160:	2001      	movs	r0, #1
}
 8003162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003164 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003164:	78c3      	ldrb	r3, [r0, #3]
 8003166:	b10b      	cbz	r3, 800316c <sync_window+0x8>
 8003168:	f7ff bfd9 	b.w	800311e <sync_window.part.4>
}
 800316c:	4618      	mov	r0, r3
 800316e:	4770      	bx	lr

08003170 <sync_fs>:
{
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003174:	f7ff fff6 	bl	8003164 <sync_window>
 8003178:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800317a:	2800      	cmp	r0, #0
 800317c:	d142      	bne.n	8003204 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800317e:	7823      	ldrb	r3, [r4, #0]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d137      	bne.n	80031f4 <sync_fs+0x84>
 8003184:	7927      	ldrb	r7, [r4, #4]
 8003186:	2f01      	cmp	r7, #1
 8003188:	d134      	bne.n	80031f4 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800318a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800318e:	4601      	mov	r1, r0
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff fec9 	bl	8002f2c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800319a:	2355      	movs	r3, #85	; 0x55
 800319c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 80031a0:	23aa      	movs	r3, #170	; 0xaa
 80031a2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 80031a6:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80031a8:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80031aa:	2172      	movs	r1, #114	; 0x72
 80031ac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80031b0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 80031b4:	2361      	movs	r3, #97	; 0x61
 80031b6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 80031ba:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 80031be:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 80031c2:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 80031c6:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 80031ca:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80031ce:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80031d2:	6921      	ldr	r1, [r4, #16]
 80031d4:	f7ff fea2 	bl	8002f1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80031d8:	68e1      	ldr	r1, [r4, #12]
 80031da:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80031de:	f7ff fe9d 	bl	8002f1c <st_dword>
			fs->winsect = fs->volbase + 1;
 80031e2:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80031e4:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80031e6:	3201      	adds	r2, #1
 80031e8:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80031ea:	463b      	mov	r3, r7
 80031ec:	4631      	mov	r1, r6
 80031ee:	f7ff fe71 	bl	8002ed4 <disk_write>
			fs->fsi_flag = 0;
 80031f2:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80031f4:	2200      	movs	r2, #0
 80031f6:	4611      	mov	r1, r2
 80031f8:	7860      	ldrb	r0, [r4, #1]
 80031fa:	f7ff fe79 	bl	8002ef0 <disk_ioctl>
 80031fe:	3000      	adds	r0, #0
 8003200:	bf18      	it	ne
 8003202:	2001      	movne	r0, #1
}
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003206 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003206:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003208:	428b      	cmp	r3, r1
{
 800320a:	b570      	push	{r4, r5, r6, lr}
 800320c:	4606      	mov	r6, r0
 800320e:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003210:	d012      	beq.n	8003238 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8003212:	f7ff ffa7 	bl	8003164 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003216:	4604      	mov	r4, r0
 8003218:	b960      	cbnz	r0, 8003234 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800321a:	462a      	mov	r2, r5
 800321c:	2301      	movs	r3, #1
 800321e:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8003222:	7870      	ldrb	r0, [r6, #1]
 8003224:	f7ff fe48 	bl	8002eb8 <disk_read>
 8003228:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800322a:	bf1c      	itt	ne
 800322c:	f04f 35ff 	movne.w	r5, #4294967295
 8003230:	2401      	movne	r4, #1
			fs->winsect = sector;
 8003232:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8003234:	4620      	mov	r0, r4
 8003236:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8003238:	2400      	movs	r4, #0
 800323a:	e7fb      	b.n	8003234 <move_window+0x2e>

0800323c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800323c:	2300      	movs	r3, #0
{
 800323e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003240:	70c3      	strb	r3, [r0, #3]
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8003248:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800324a:	f7ff ffdc 	bl	8003206 <move_window>
 800324e:	bb30      	cbnz	r0, 800329e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8003250:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8003254:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8003258:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800325c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003260:	4293      	cmp	r3, r2
 8003262:	d11e      	bne.n	80032a2 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003264:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003268:	2be9      	cmp	r3, #233	; 0xe9
 800326a:	d005      	beq.n	8003278 <check_fs+0x3c>
 800326c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <check_fs+0x74>)
 8003270:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003274:	4293      	cmp	r3, r2
 8003276:	d116      	bne.n	80032a6 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003278:	f104 0066 	add.w	r0, r4, #102	; 0x66
 800327c:	f7ff fe46 	bl	8002f0c <ld_dword>
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <check_fs+0x78>)
 8003282:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003286:	4298      	cmp	r0, r3
 8003288:	d00f      	beq.n	80032aa <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800328a:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800328e:	f7ff fe3d 	bl	8002f0c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <check_fs+0x7c>)
 8003294:	4298      	cmp	r0, r3
 8003296:	bf14      	ite	ne
 8003298:	2002      	movne	r0, #2
 800329a:	2000      	moveq	r0, #0
 800329c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800329e:	2004      	movs	r0, #4
 80032a0:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80032a2:	2003      	movs	r0, #3
 80032a4:	bd10      	pop	{r4, pc}
	return 2;
 80032a6:	2002      	movs	r0, #2
 80032a8:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80032aa:	2000      	movs	r0, #0
}
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop
 80032b0:	009000eb 	.word	0x009000eb
 80032b4:	00544146 	.word	0x00544146
 80032b8:	33544146 	.word	0x33544146

080032bc <find_volume>:
{
 80032bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80032c0:	2300      	movs	r3, #0
{
 80032c2:	b085      	sub	sp, #20
	*rfs = 0;
 80032c4:	600b      	str	r3, [r1, #0]
{
 80032c6:	460f      	mov	r7, r1
 80032c8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80032ca:	f7ff fed3 	bl	8003074 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80032ce:	1e06      	subs	r6, r0, #0
 80032d0:	f2c0 8140 	blt.w	8003554 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80032d4:	4ba3      	ldr	r3, [pc, #652]	; (8003564 <find_volume+0x2a8>)
 80032d6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80032da:	2c00      	cmp	r4, #0
 80032dc:	f000 813c 	beq.w	8003558 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 80032e0:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80032e2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80032e4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80032e8:	b173      	cbz	r3, 8003308 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80032ea:	7860      	ldrb	r0, [r4, #1]
 80032ec:	f7ff fdca 	bl	8002e84 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80032f0:	07c1      	lsls	r1, r0, #31
 80032f2:	d409      	bmi.n	8003308 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	f000 8131 	beq.w	800355c <find_volume+0x2a0>
 80032fa:	f010 0004 	ands.w	r0, r0, #4
 80032fe:	d000      	beq.n	8003302 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8003300:	200a      	movs	r0, #10
}
 8003302:	b005      	add	sp, #20
 8003304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003308:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800330a:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800330c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800330e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003310:	f7ff fdc2 	bl	8002e98 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003314:	07c2      	lsls	r2, r0, #31
 8003316:	f100 8123 	bmi.w	8003560 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800331a:	b10d      	cbz	r5, 8003320 <find_volume+0x64>
 800331c:	0743      	lsls	r3, r0, #29
 800331e:	d4ef      	bmi.n	8003300 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003320:	2100      	movs	r1, #0
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff ff8a 	bl	800323c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003328:	2802      	cmp	r0, #2
 800332a:	f040 80f7 	bne.w	800351c <find_volume+0x260>
 800332e:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 8003332:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003334:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8003338:	b110      	cbz	r0, 8003340 <find_volume+0x84>
 800333a:	4628      	mov	r0, r5
 800333c:	f7ff fde6 	bl	8002f0c <ld_dword>
 8003340:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003344:	3101      	adds	r1, #1
 8003346:	2904      	cmp	r1, #4
 8003348:	f105 0510 	add.w	r5, r5, #16
 800334c:	d1f2      	bne.n	8003334 <find_volume+0x78>
 800334e:	2500      	movs	r5, #0
			bsect = br[i];
 8003350:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003354:	2e00      	cmp	r6, #0
 8003356:	f000 80d8 	beq.w	800350a <find_volume+0x24e>
 800335a:	4631      	mov	r1, r6
 800335c:	4620      	mov	r0, r4
 800335e:	f7ff ff6d 	bl	800323c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003362:	2801      	cmp	r0, #1
 8003364:	f200 80d2 	bhi.w	800350c <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8003368:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800336c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	f040 80d4 	bne.w	8003524 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800337c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8003380:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003384:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8003388:	d104      	bne.n	8003394 <find_volume+0xd8>
 800338a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800338e:	f7ff fdbd 	bl	8002f0c <ld_dword>
 8003392:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003394:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8003398:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800339a:	f109 33ff 	add.w	r3, r9, #4294967295
 800339e:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80033a0:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80033a4:	f200 80be 	bhi.w	8003524 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80033a8:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 80033ac:	b2bb      	uxth	r3, r7
 80033ae:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80b7 	beq.w	8003524 <find_volume+0x268>
 80033b6:	1e7b      	subs	r3, r7, #1
 80033b8:	423b      	tst	r3, r7
 80033ba:	f040 80b3 	bne.w	8003524 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80033be:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80033c2:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 80033c6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80033ca:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80033ce:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80033d2:	f040 80a7 	bne.w	8003524 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80033d6:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80033da:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80033de:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80033e2:	d103      	bne.n	80033ec <find_volume+0x130>
 80033e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033e8:	f7ff fd90 	bl	8002f0c <ld_dword>
	rv = rv << 8 | ptr[0];
 80033ec:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80033f0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80033f4:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80033f8:	f000 8094 	beq.w	8003524 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80033fc:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003400:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8003404:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003406:	4570      	cmp	r0, lr
 8003408:	f0c0 808c 	bcc.w	8003524 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800340c:	eba0 010e 	sub.w	r1, r0, lr
 8003410:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003414:	2900      	cmp	r1, #0
 8003416:	f000 8085 	beq.w	8003524 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800341a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800341e:	4281      	cmp	r1, r0
 8003420:	f200 8084 	bhi.w	800352c <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003424:	f640 77f5 	movw	r7, #4085	; 0xff5
 8003428:	42b9      	cmp	r1, r7
 800342a:	bf8c      	ite	hi
 800342c:	2702      	movhi	r7, #2
 800342e:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003430:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003432:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8003434:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 8003438:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800343a:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800343c:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800343e:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003440:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003442:	d175      	bne.n	8003530 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8003444:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8003448:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800344c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8003450:	d168      	bne.n	8003524 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003452:	f1b8 0f00 	cmp.w	r8, #0
 8003456:	d165      	bne.n	8003524 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800345c:	f7ff fd56 	bl	8002f0c <ld_dword>
 8003460:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003462:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003464:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8003468:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 800346c:	d35a      	bcc.n	8003524 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003476:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8003478:	f04f 0380 	mov.w	r3, #128	; 0x80
 800347c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800347e:	d12f      	bne.n	80034e0 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8003480:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8003484:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8003488:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d127      	bne.n	80034e0 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003490:	1c71      	adds	r1, r6, #1
 8003492:	4620      	mov	r0, r4
 8003494:	f7ff feb7 	bl	8003206 <move_window>
 8003498:	bb10      	cbnz	r0, 80034e0 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800349a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 800349e:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 80034a2:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80034a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80034a8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d117      	bne.n	80034e0 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80034b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80034b4:	f7ff fd2a 	bl	8002f0c <ld_dword>
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <find_volume+0x2ac>)
 80034ba:	4298      	cmp	r0, r3
 80034bc:	d110      	bne.n	80034e0 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80034be:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80034c2:	f7ff fd23 	bl	8002f0c <ld_dword>
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <find_volume+0x2b0>)
 80034c8:	4298      	cmp	r0, r3
 80034ca:	d109      	bne.n	80034e0 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80034cc:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80034d0:	f7ff fd1c 	bl	8002f0c <ld_dword>
 80034d4:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80034d6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80034da:	f7ff fd17 	bl	8002f0c <ld_dword>
 80034de:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80034e0:	4a23      	ldr	r2, [pc, #140]	; (8003570 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80034e2:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80034e4:	8813      	ldrh	r3, [r2, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
 80034ec:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <find_volume+0x2b8>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4294      	cmp	r4, r2
 80034f4:	bf04      	itt	eq
 80034f6:	2200      	moveq	r2, #0
 80034f8:	601a      	streq	r2, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	4294      	cmp	r4, r2
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f47f aefe 	bne.w	8003302 <find_volume+0x46>
 8003506:	6118      	str	r0, [r3, #16]
 8003508:	e6fb      	b.n	8003302 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800350a:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800350c:	3501      	adds	r5, #1
 800350e:	2d04      	cmp	r5, #4
 8003510:	f47f af1e 	bne.w	8003350 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003514:	2804      	cmp	r0, #4
 8003516:	d105      	bne.n	8003524 <find_volume+0x268>
 8003518:	2001      	movs	r0, #1
 800351a:	e6f2      	b.n	8003302 <find_volume+0x46>
 800351c:	2804      	cmp	r0, #4
 800351e:	d0fb      	beq.n	8003518 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003520:	2801      	cmp	r0, #1
 8003522:	d901      	bls.n	8003528 <find_volume+0x26c>
 8003524:	200d      	movs	r0, #13
 8003526:	e6ec      	b.n	8003302 <find_volume+0x46>
	bsect = 0;
 8003528:	2600      	movs	r6, #0
 800352a:	e71d      	b.n	8003368 <find_volume+0xac>
		fmt = FS_FAT32;
 800352c:	2703      	movs	r7, #3
 800352e:	e77f      	b.n	8003430 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003530:	f1b8 0f00 	cmp.w	r8, #0
 8003534:	d0f6      	beq.n	8003524 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003536:	2f02      	cmp	r7, #2
 8003538:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800353c:	bf18      	it	ne
 800353e:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003540:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003542:	bf18      	it	ne
 8003544:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003548:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800354a:	bf0c      	ite	eq
 800354c:	4601      	moveq	r1, r0
 800354e:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8003552:	e787      	b.n	8003464 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003554:	200b      	movs	r0, #11
 8003556:	e6d4      	b.n	8003302 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003558:	200c      	movs	r0, #12
 800355a:	e6d2      	b.n	8003302 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800355c:	4628      	mov	r0, r5
 800355e:	e6d0      	b.n	8003302 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003560:	2003      	movs	r0, #3
 8003562:	e6ce      	b.n	8003302 <find_volume+0x46>
 8003564:	20000040 	.word	0x20000040
 8003568:	41615252 	.word	0x41615252
 800356c:	61417272 	.word	0x61417272
 8003570:	20000064 	.word	0x20000064
 8003574:	20000044 	.word	0x20000044

08003578 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003578:	2901      	cmp	r1, #1
{
 800357a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357e:	4605      	mov	r5, r0
 8003580:	460c      	mov	r4, r1
 8003582:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003584:	d972      	bls.n	800366c <put_fat+0xf4>
 8003586:	6943      	ldr	r3, [r0, #20]
 8003588:	4299      	cmp	r1, r3
 800358a:	d26f      	bcs.n	800366c <put_fat+0xf4>
		switch (fs->fs_type) {
 800358c:	7803      	ldrb	r3, [r0, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d03f      	beq.n	8003612 <put_fat+0x9a>
 8003592:	2b03      	cmp	r3, #3
 8003594:	d050      	beq.n	8003638 <put_fat+0xc0>
 8003596:	2b01      	cmp	r3, #1
 8003598:	d168      	bne.n	800366c <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 800359a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800359e:	6a01      	ldr	r1, [r0, #32]
 80035a0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80035a4:	f7ff fe2f 	bl	8003206 <move_window>
 80035a8:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80035aa:	bb38      	cbnz	r0, 80035fc <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 80035ac:	f105 0930 	add.w	r9, r5, #48	; 0x30
 80035b0:	f108 0a01 	add.w	sl, r8, #1
 80035b4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80035b8:	f014 0401 	ands.w	r4, r4, #1
 80035bc:	bf1f      	itttt	ne
 80035be:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80035c2:	f003 020f 	andne.w	r2, r3, #15
 80035c6:	013b      	lslne	r3, r7, #4
 80035c8:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80035cc:	bf14      	ite	ne
 80035ce:	4313      	orrne	r3, r2
 80035d0:	b2fb      	uxtbeq	r3, r7
 80035d2:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80035d6:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 80035d8:	2301      	movs	r3, #1
 80035da:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80035dc:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80035e0:	4628      	mov	r0, r5
 80035e2:	f7ff fe10 	bl	8003206 <move_window>
			if (res != FR_OK) break;
 80035e6:	4606      	mov	r6, r0
 80035e8:	b940      	cbnz	r0, 80035fc <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 80035ea:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80035ee:	b144      	cbz	r4, 8003602 <put_fat+0x8a>
 80035f0:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80035f4:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80035f8:	2301      	movs	r3, #1
 80035fa:	70eb      	strb	r3, [r5, #3]
}
 80035fc:	4630      	mov	r0, r6
 80035fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003602:	f819 300a 	ldrb.w	r3, [r9, sl]
 8003606:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800360a:	f023 030f 	bic.w	r3, r3, #15
 800360e:	431f      	orrs	r7, r3
 8003610:	e7f0      	b.n	80035f4 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003612:	6a01      	ldr	r1, [r0, #32]
 8003614:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003618:	f7ff fdf5 	bl	8003206 <move_window>
			if (res != FR_OK) break;
 800361c:	4606      	mov	r6, r0
 800361e:	2800      	cmp	r0, #0
 8003620:	d1ec      	bne.n	80035fc <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003622:	0064      	lsls	r4, r4, #1
 8003624:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003628:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800362c:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800362e:	551f      	strb	r7, [r3, r4]
 8003630:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003634:	7057      	strb	r7, [r2, #1]
 8003636:	e7df      	b.n	80035f8 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003638:	6a01      	ldr	r1, [r0, #32]
 800363a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800363e:	f7ff fde2 	bl	8003206 <move_window>
			if (res != FR_OK) break;
 8003642:	4606      	mov	r6, r0
 8003644:	2800      	cmp	r0, #0
 8003646:	d1d9      	bne.n	80035fc <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003648:	00a4      	lsls	r4, r4, #2
 800364a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800364e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003652:	441c      	add	r4, r3
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fc59 	bl	8002f0c <ld_dword>
 800365a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800365e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003662:	4339      	orrs	r1, r7
 8003664:	4620      	mov	r0, r4
 8003666:	f7ff fc59 	bl	8002f1c <st_dword>
 800366a:	e7c5      	b.n	80035f8 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 800366c:	2602      	movs	r6, #2
 800366e:	e7c5      	b.n	80035fc <put_fat+0x84>

08003670 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003670:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003678:	d952      	bls.n	8003720 <get_fat.isra.8+0xb0>
 800367a:	6943      	ldr	r3, [r0, #20]
 800367c:	4299      	cmp	r1, r3
 800367e:	d24f      	bcs.n	8003720 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8003680:	7803      	ldrb	r3, [r0, #0]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d029      	beq.n	80036da <get_fat.isra.8+0x6a>
 8003686:	2b03      	cmp	r3, #3
 8003688:	d038      	beq.n	80036fc <get_fat.isra.8+0x8c>
 800368a:	2b01      	cmp	r3, #1
 800368c:	d148      	bne.n	8003720 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800368e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003692:	6a01      	ldr	r1, [r0, #32]
 8003694:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003698:	f7ff fdb5 	bl	8003206 <move_window>
 800369c:	b110      	cbz	r0, 80036a4 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80036a4:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036a6:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 80036a8:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80036ac:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036ae:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80036b2:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 80036b4:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036b8:	f7ff fda5 	bl	8003206 <move_window>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d1ee      	bne.n	800369e <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80036c0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80036c4:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80036c6:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80036c8:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80036cc:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80036d0:	bf4c      	ite	mi
 80036d2:	0900      	lsrmi	r0, r0, #4
 80036d4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80036da:	6a01      	ldr	r1, [r0, #32]
 80036dc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80036e0:	f7ff fd91 	bl	8003206 <move_window>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d1da      	bne.n	800369e <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80036e8:	0064      	lsls	r4, r4, #1
 80036ea:	3530      	adds	r5, #48	; 0x30
 80036ec:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80036f0:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80036f2:	5d28      	ldrb	r0, [r5, r4]
 80036f4:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80036f6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80036fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80036fc:	6a01      	ldr	r1, [r0, #32]
 80036fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003702:	f7ff fd80 	bl	8003206 <move_window>
 8003706:	2800      	cmp	r0, #0
 8003708:	d1c9      	bne.n	800369e <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800370a:	00a4      	lsls	r4, r4, #2
 800370c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003710:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003714:	4420      	add	r0, r4
 8003716:	f7ff fbf9 	bl	8002f0c <ld_dword>
 800371a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8003720:	2001      	movs	r0, #1
}
 8003722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003724 <create_chain>:
{
 8003724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003728:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800372a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800372c:	460f      	mov	r7, r1
 800372e:	b971      	cbnz	r1, 800374e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003730:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003732:	b1f6      	cbz	r6, 8003772 <create_chain+0x4e>
 8003734:	696b      	ldr	r3, [r5, #20]
 8003736:	429e      	cmp	r6, r3
 8003738:	bf28      	it	cs
 800373a:	2601      	movcs	r6, #1
 800373c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800373e:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8003740:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003742:	429c      	cmp	r4, r3
 8003744:	d318      	bcc.n	8003778 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8003746:	2e01      	cmp	r6, #1
 8003748:	d815      	bhi.n	8003776 <create_chain+0x52>
 800374a:	2400      	movs	r4, #0
 800374c:	e009      	b.n	8003762 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800374e:	4628      	mov	r0, r5
 8003750:	f7ff ff8e 	bl	8003670 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003754:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003756:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003758:	d937      	bls.n	80037ca <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	d104      	bne.n	8003768 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800375e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003762:	4620      	mov	r0, r4
 8003764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003768:	696b      	ldr	r3, [r5, #20]
 800376a:	4298      	cmp	r0, r3
 800376c:	d3f9      	bcc.n	8003762 <create_chain+0x3e>
 800376e:	463e      	mov	r6, r7
 8003770:	e7e4      	b.n	800373c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003772:	2601      	movs	r6, #1
 8003774:	e7e2      	b.n	800373c <create_chain+0x18>
				ncl = 2;
 8003776:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003778:	4621      	mov	r1, r4
 800377a:	f8d8 0000 	ldr.w	r0, [r8]
 800377e:	f7ff ff77 	bl	8003670 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8003782:	b130      	cbz	r0, 8003792 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003784:	2801      	cmp	r0, #1
 8003786:	d020      	beq.n	80037ca <create_chain+0xa6>
 8003788:	3001      	adds	r0, #1
 800378a:	d0e8      	beq.n	800375e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800378c:	42b4      	cmp	r4, r6
 800378e:	d1d6      	bne.n	800373e <create_chain+0x1a>
 8003790:	e7db      	b.n	800374a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003792:	f04f 32ff 	mov.w	r2, #4294967295
 8003796:	4621      	mov	r1, r4
 8003798:	4628      	mov	r0, r5
 800379a:	f7ff feed 	bl	8003578 <put_fat>
		if (res == FR_OK && clst != 0) {
 800379e:	b990      	cbnz	r0, 80037c6 <create_chain+0xa2>
 80037a0:	b957      	cbnz	r7, 80037b8 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80037a2:	696a      	ldr	r2, [r5, #20]
 80037a4:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 80037a6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80037a8:	3a02      	subs	r2, #2
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d90f      	bls.n	80037ce <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80037ae:	792b      	ldrb	r3, [r5, #4]
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	712b      	strb	r3, [r5, #4]
 80037b6:	e7d4      	b.n	8003762 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80037b8:	4622      	mov	r2, r4
 80037ba:	4639      	mov	r1, r7
 80037bc:	4628      	mov	r0, r5
 80037be:	f7ff fedb 	bl	8003578 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d0ed      	beq.n	80037a2 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80037c6:	2801      	cmp	r0, #1
 80037c8:	d0c9      	beq.n	800375e <create_chain+0x3a>
 80037ca:	2401      	movs	r4, #1
 80037cc:	e7c9      	b.n	8003762 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80037ce:	3b01      	subs	r3, #1
 80037d0:	612b      	str	r3, [r5, #16]
 80037d2:	e7ec      	b.n	80037ae <create_chain+0x8a>

080037d4 <remove_chain>:
{
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80037d8:	2d01      	cmp	r5, #1
{
 80037da:	4607      	mov	r7, r0
 80037dc:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80037de:	d801      	bhi.n	80037e4 <remove_chain+0x10>
 80037e0:	2002      	movs	r0, #2
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80037e4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80037e6:	6963      	ldr	r3, [r4, #20]
 80037e8:	429d      	cmp	r5, r3
 80037ea:	d2f9      	bcs.n	80037e0 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80037ec:	b12a      	cbz	r2, 80037fa <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff fec0 	bl	8003578 <put_fat>
		if (res != FR_OK) return res;
 80037f8:	bb08      	cbnz	r0, 800383e <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80037fa:	4629      	mov	r1, r5
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f7ff ff37 	bl	8003670 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003802:	4606      	mov	r6, r0
 8003804:	b908      	cbnz	r0, 800380a <remove_chain+0x36>
	return FR_OK;
 8003806:	2000      	movs	r0, #0
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800380a:	2801      	cmp	r0, #1
 800380c:	d0e8      	beq.n	80037e0 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d014      	beq.n	800383c <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003812:	2200      	movs	r2, #0
 8003814:	4629      	mov	r1, r5
 8003816:	4620      	mov	r0, r4
 8003818:	f7ff feae 	bl	8003578 <put_fat>
			if (res != FR_OK) return res;
 800381c:	b978      	cbnz	r0, 800383e <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800381e:	6962      	ldr	r2, [r4, #20]
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	1e91      	subs	r1, r2, #2
 8003824:	428b      	cmp	r3, r1
 8003826:	d205      	bcs.n	8003834 <remove_chain+0x60>
			fs->free_clst++;
 8003828:	3301      	adds	r3, #1
 800382a:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 800382c:	7923      	ldrb	r3, [r4, #4]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003834:	4296      	cmp	r6, r2
 8003836:	4635      	mov	r5, r6
 8003838:	d3df      	bcc.n	80037fa <remove_chain+0x26>
 800383a:	e7e4      	b.n	8003806 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800383c:	2001      	movs	r0, #1
}
 800383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003840 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003840:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003842:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003844:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003846:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003848:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800384a:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800384c:	b992      	cbnz	r2, 8003874 <dir_sdi.constprop.11+0x34>
 800384e:	7823      	ldrb	r3, [r4, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8003854:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003856:	b973      	cbnz	r3, 8003876 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003858:	8923      	ldrh	r3, [r4, #8]
 800385a:	b90b      	cbnz	r3, 8003860 <dir_sdi.constprop.11+0x20>
 800385c:	2002      	movs	r0, #2
 800385e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003862:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8003864:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8003866:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f7      	beq.n	800385c <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800386c:	3430      	adds	r4, #48	; 0x30
 800386e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003870:	2000      	movs	r0, #0
 8003872:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003874:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003876:	8961      	ldrh	r1, [r4, #10]
 8003878:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800387a:	b961      	cbnz	r1, 8003896 <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800387c:	4611      	mov	r1, r2
 800387e:	6828      	ldr	r0, [r5, #0]
 8003880:	f7ff fef6 	bl	8003670 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003884:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003886:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003888:	d00b      	beq.n	80038a2 <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800388a:	2801      	cmp	r0, #1
 800388c:	d9e6      	bls.n	800385c <dir_sdi.constprop.11+0x1c>
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	4298      	cmp	r0, r3
 8003892:	d3f3      	bcc.n	800387c <dir_sdi.constprop.11+0x3c>
 8003894:	e7e2      	b.n	800385c <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003896:	4619      	mov	r1, r3
 8003898:	4620      	mov	r0, r4
 800389a:	f7ff fbcf 	bl	800303c <clust2sect>
 800389e:	61e8      	str	r0, [r5, #28]
 80038a0:	e7e0      	b.n	8003864 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80038a2:	2001      	movs	r0, #1
}
 80038a4:	bd38      	pop	{r3, r4, r5, pc}

080038a6 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038a6:	69c3      	ldr	r3, [r0, #28]
{
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	4605      	mov	r5, r0
 80038ae:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038b0:	b1ab      	cbz	r3, 80038de <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80038b2:	6942      	ldr	r2, [r0, #20]
 80038b4:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038b8:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 80038bc:	d20f      	bcs.n	80038de <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80038be:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 80038c2:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80038c4:	f1b9 0f00 	cmp.w	r9, #0
 80038c8:	d14f      	bne.n	800396a <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 80038ca:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 80038cc:	3301      	adds	r3, #1
 80038ce:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80038d0:	b941      	cbnz	r1, 80038e4 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80038d2:	8923      	ldrh	r3, [r4, #8]
 80038d4:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 80038d8:	d847      	bhi.n	800396a <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 80038da:	2300      	movs	r3, #0
 80038dc:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038de:	2004      	movs	r0, #4
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80038e4:	8963      	ldrh	r3, [r4, #10]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 80038ec:	d13d      	bne.n	800396a <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff febe 	bl	8003670 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80038f4:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80038f6:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80038f8:	d802      	bhi.n	8003900 <dir_next+0x5a>
 80038fa:	2002      	movs	r0, #2
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003900:	1c42      	adds	r2, r0, #1
 8003902:	d102      	bne.n	800390a <dir_next+0x64>
 8003904:	2001      	movs	r0, #1
 8003906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800390a:	6963      	ldr	r3, [r4, #20]
 800390c:	4298      	cmp	r0, r3
 800390e:	d326      	bcc.n	800395e <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8003910:	2f00      	cmp	r7, #0
 8003912:	d0e2      	beq.n	80038da <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003914:	69a9      	ldr	r1, [r5, #24]
 8003916:	4628      	mov	r0, r5
 8003918:	f7ff ff04 	bl	8003724 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800391c:	4606      	mov	r6, r0
 800391e:	2800      	cmp	r0, #0
 8003920:	d037      	beq.n	8003992 <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003922:	2801      	cmp	r0, #1
 8003924:	d0e9      	beq.n	80038fa <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d0ec      	beq.n	8003904 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800392a:	4620      	mov	r0, r4
 800392c:	f7ff fc1a 	bl	8003164 <sync_window>
 8003930:	4607      	mov	r7, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d1e6      	bne.n	8003904 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003936:	4601      	mov	r1, r0
 8003938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800393c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003940:	f7ff faf4 	bl	8002f2c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003944:	4631      	mov	r1, r6
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fb78 	bl	800303c <clust2sect>
						fs->wflag = 1;
 800394c:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003950:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003952:	8963      	ldrh	r3, [r4, #10]
 8003954:	429f      	cmp	r7, r3
 8003956:	d310      	bcc.n	800397a <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8003958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800395a:	1bdf      	subs	r7, r3, r7
 800395c:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 800395e:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003960:	4631      	mov	r1, r6
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff fb6a 	bl	800303c <clust2sect>
 8003968:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800396a:	3430      	adds	r4, #48	; 0x30
 800396c:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 800396e:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003972:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003974:	2000      	movs	r0, #0
 8003976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 800397a:	f884 a003 	strb.w	sl, [r4, #3]
 800397e:	4620      	mov	r0, r4
 8003980:	f7ff fbcd 	bl	800311e <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003984:	2800      	cmp	r0, #0
 8003986:	d1bd      	bne.n	8003904 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800398a:	3301      	adds	r3, #1
 800398c:	3701      	adds	r7, #1
 800398e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003990:	e7df      	b.n	8003952 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003992:	2007      	movs	r0, #7
}
 8003994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003998 <follow_path>:
{
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800399c:	6807      	ldr	r7, [r0, #0]
{
 800399e:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80039a0:	780b      	ldrb	r3, [r1, #0]
 80039a2:	2b2f      	cmp	r3, #47	; 0x2f
 80039a4:	460d      	mov	r5, r1
 80039a6:	f101 0101 	add.w	r1, r1, #1
 80039aa:	d0f9      	beq.n	80039a0 <follow_path+0x8>
 80039ac:	2b5c      	cmp	r3, #92	; 0x5c
 80039ae:	d0f7      	beq.n	80039a0 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80039b0:	2300      	movs	r3, #0
 80039b2:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80039b4:	782b      	ldrb	r3, [r5, #0]
 80039b6:	2b1f      	cmp	r3, #31
 80039b8:	d959      	bls.n	8003a6e <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80039ba:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003b18 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 80039be:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80039c2:	220b      	movs	r2, #11
 80039c4:	2120      	movs	r1, #32
 80039c6:	4630      	mov	r0, r6
 80039c8:	f7ff fab0 	bl	8002f2c <mem_set>
	si = i = 0; ni = 8;
 80039cc:	2200      	movs	r2, #0
 80039ce:	f105 3eff 	add.w	lr, r5, #4294967295
 80039d2:	4611      	mov	r1, r2
 80039d4:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80039d6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80039da:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80039dc:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80039e0:	d90b      	bls.n	80039fa <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80039e2:	2b2f      	cmp	r3, #47	; 0x2f
 80039e4:	d14b      	bne.n	8003a7e <follow_path+0xe6>
 80039e6:	1868      	adds	r0, r5, r1
 80039e8:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80039ea:	f810 eb01 	ldrb.w	lr, [r0], #1
 80039ee:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 80039f2:	d0f9      	beq.n	80039e8 <follow_path+0x50>
 80039f4:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 80039f8:	d0f6      	beq.n	80039e8 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 80039fa:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	d054      	beq.n	8003aaa <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003a00:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8003a04:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003a08:	2ae5      	cmp	r2, #229	; 0xe5
 8003a0a:	bf04      	itt	eq
 8003a0c:	2205      	moveq	r2, #5
 8003a0e:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	bf34      	ite	cc
 8003a16:	2304      	movcc	r3, #4
 8003a18:	2300      	movcs	r3, #0
 8003a1a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff ff0e 	bl	8003840 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d145      	bne.n	8003ab4 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8003a28:	69e1      	ldr	r1, [r4, #28]
 8003a2a:	4648      	mov	r0, r9
 8003a2c:	f7ff fbeb 	bl	8003206 <move_window>
		if (res != FR_OK) break;
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d13f      	bne.n	8003ab4 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8003a34:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	d046      	beq.n	8003aca <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003a3c:	7ada      	ldrb	r2, [r3, #11]
 8003a3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a42:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003a44:	7ada      	ldrb	r2, [r3, #11]
 8003a46:	0711      	lsls	r1, r2, #28
 8003a48:	d40c      	bmi.n	8003a64 <follow_path+0xcc>
 8003a4a:	f103 0e0b 	add.w	lr, r3, #11
 8003a4e:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8003a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a54:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8003a58:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8003a5a:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8003a5e:	d027      	beq.n	8003ab0 <follow_path+0x118>
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d0f5      	beq.n	8003a50 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8003a64:	2100      	movs	r1, #0
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7ff ff1d 	bl	80038a6 <dir_next>
 8003a6c:	e7da      	b.n	8003a24 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003a74:	4620      	mov	r0, r4
}
 8003a76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8003a7a:	f7ff bee1 	b.w	8003840 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003a7e:	2b5c      	cmp	r3, #92	; 0x5c
 8003a80:	d0b1      	beq.n	80039e6 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003a82:	2b2e      	cmp	r3, #46	; 0x2e
 8003a84:	d036      	beq.n	8003af4 <follow_path+0x15c>
 8003a86:	4290      	cmp	r0, r2
 8003a88:	d90f      	bls.n	8003aaa <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8003a8a:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003a8e:	bf18      	it	ne
 8003a90:	3b80      	subne	r3, #128	; 0x80
 8003a92:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003b1c <follow_path+0x184>
 8003a96:	bf18      	it	ne
 8003a98:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8003a9c:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8003aa0:	f1bc 0f00 	cmp.w	ip, #0
 8003aa4:	d02b      	beq.n	8003afe <follow_path+0x166>
 8003aa6:	4563      	cmp	r3, ip
 8003aa8:	d1f8      	bne.n	8003a9c <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003aaa:	2006      	movs	r0, #6
	return res;
 8003aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	d1d7      	bne.n	8003a64 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8003ab4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003ab8:	b148      	cbz	r0, 8003ace <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003aba:	2804      	cmp	r0, #4
 8003abc:	d129      	bne.n	8003b12 <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003abe:	f013 0f04 	tst.w	r3, #4
 8003ac2:	bf08      	it	eq
 8003ac4:	2005      	moveq	r0, #5
 8003ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003aca:	2004      	movs	r0, #4
 8003acc:	e7f2      	b.n	8003ab4 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ace:	075a      	lsls	r2, r3, #29
 8003ad0:	d41f      	bmi.n	8003b12 <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003ad2:	79a3      	ldrb	r3, [r4, #6]
 8003ad4:	06db      	lsls	r3, r3, #27
 8003ad6:	d50a      	bpl.n	8003aee <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003ad8:	6963      	ldr	r3, [r4, #20]
 8003ada:	7838      	ldrb	r0, [r7, #0]
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ae4:	4419      	add	r1, r3
 8003ae6:	f7ff fb00 	bl	80030ea <ld_clust.isra.1>
 8003aea:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003aec:	e767      	b.n	80039be <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003aee:	2005      	movs	r0, #5
 8003af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003af4:	280b      	cmp	r0, #11
 8003af6:	d0d8      	beq.n	8003aaa <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8003af8:	2208      	movs	r2, #8
 8003afa:	200b      	movs	r0, #11
 8003afc:	e76b      	b.n	80039d6 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003afe:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8003b02:	f1bc 0f19 	cmp.w	ip, #25
 8003b06:	d801      	bhi.n	8003b0c <follow_path+0x174>
 8003b08:	3b20      	subs	r3, #32
 8003b0a:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003b0c:	54b3      	strb	r3, [r6, r2]
 8003b0e:	3201      	adds	r2, #1
 8003b10:	e761      	b.n	80039d6 <follow_path+0x3e>
}
 8003b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b16:	bf00      	nop
 8003b18:	08009444 	.word	0x08009444
 8003b1c:	080094c3 	.word	0x080094c3

08003b20 <dir_read.constprop.9>:
FRESULT dir_read (
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003b24:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8003b26:	2004      	movs	r0, #4
	while (dp->sect) {
 8003b28:	69e1      	ldr	r1, [r4, #28]
 8003b2a:	b909      	cbnz	r1, 8003b30 <dir_read.constprop.9+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003b2c:	b1a8      	cbz	r0, 8003b5a <dir_read.constprop.9+0x3a>
 8003b2e:	e01c      	b.n	8003b6a <dir_read.constprop.9+0x4a>
		res = move_window(fs, dp->sect);
 8003b30:	4628      	mov	r0, r5
 8003b32:	f7ff fb68 	bl	8003206 <move_window>
		if (res != FR_OK) break;
 8003b36:	b9c0      	cbnz	r0, 8003b6a <dir_read.constprop.9+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8003b38:	6a23      	ldr	r3, [r4, #32]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8003b3c:	b1c2      	cbz	r2, 8003b70 <dir_read.constprop.9+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003b3e:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003b40:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b46:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003b48:	d009      	beq.n	8003b5e <dir_read.constprop.9+0x3e>
 8003b4a:	2a2e      	cmp	r2, #46	; 0x2e
 8003b4c:	d007      	beq.n	8003b5e <dir_read.constprop.9+0x3e>
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d005      	beq.n	8003b5e <dir_read.constprop.9+0x3e>
 8003b52:	f023 0320 	bic.w	r3, r3, #32
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d001      	beq.n	8003b5e <dir_read.constprop.9+0x3e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fea0 	bl	80038a6 <dir_next>
		if (res != FR_OK) break;
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0de      	beq.n	8003b28 <dir_read.constprop.9+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61e3      	str	r3, [r4, #28]
}
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003b70:	2004      	movs	r0, #4
 8003b72:	e7fa      	b.n	8003b6a <dir_read.constprop.9+0x4a>

08003b74 <dir_register>:
{
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003b78:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8003b7a:	f7ff fe61 	bl	8003840 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8003b7e:	4604      	mov	r4, r0
 8003b80:	bb28      	cbnz	r0, 8003bce <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8003b82:	69e9      	ldr	r1, [r5, #28]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f7ff fb3e 	bl	8003206 <move_window>
			if (res != FR_OK) break;
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	b9f8      	cbnz	r0, 8003bce <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003b8e:	6a2b      	ldr	r3, [r5, #32]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2be5      	cmp	r3, #229	; 0xe5
 8003b94:	d114      	bne.n	8003bc0 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8003b96:	69e9      	ldr	r1, [r5, #28]
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fb34 	bl	8003206 <move_window>
		if (res == FR_OK) {
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	b960      	cbnz	r0, 8003bbc <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	6a28      	ldr	r0, [r5, #32]
 8003ba8:	f7ff f9c0 	bl	8002f2c <mem_set>
 8003bac:	220b      	movs	r2, #11
 8003bae:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003bb2:	6a28      	ldr	r0, [r5, #32]
 8003bb4:	f7ff fa90 	bl	80030d8 <mem_cpy.part.0>
			fs->wflag = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	70f3      	strb	r3, [r6, #3]
}
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0e8      	beq.n	8003b96 <dir_register+0x22>
			res = dir_next(dp, 1);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f7ff fe6d 	bl	80038a6 <dir_next>
 8003bcc:	e7d7      	b.n	8003b7e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003bce:	2c04      	cmp	r4, #4
 8003bd0:	bf08      	it	eq
 8003bd2:	2407      	moveq	r4, #7
 8003bd4:	e7f2      	b.n	8003bbc <dir_register+0x48>
	...

08003bd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003bda:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003bdc:	a804      	add	r0, sp, #16
{
 8003bde:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003be0:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003be4:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003be6:	f7ff fa45 	bl	8003074 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bea:	1e05      	subs	r5, r0, #0
 8003bec:	db1f      	blt.n	8003c2e <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003bee:	4912      	ldr	r1, [pc, #72]	; (8003c38 <f_mount+0x60>)
 8003bf0:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8003bf4:	b15c      	cbz	r4, 8003c0e <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <f_mount+0x64>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4294      	cmp	r4, r2
 8003bfc:	bf04      	itt	eq
 8003bfe:	2200      	moveq	r2, #0
 8003c00:	601a      	streq	r2, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	2000      	movs	r0, #0
 8003c06:	4294      	cmp	r4, r2
 8003c08:	bf08      	it	eq
 8003c0a:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003c0c:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8003c0e:	9801      	ldr	r0, [sp, #4]
 8003c10:	b108      	cbz	r0, 8003c16 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8003c12:	2300      	movs	r3, #0
 8003c14:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003c16:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003c1a:	b130      	cbz	r0, 8003c2a <f_mount+0x52>
 8003c1c:	2e01      	cmp	r6, #1
 8003c1e:	d108      	bne.n	8003c32 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003c20:	2200      	movs	r2, #0
 8003c22:	a901      	add	r1, sp, #4
 8003c24:	4668      	mov	r0, sp
 8003c26:	f7ff fb49 	bl	80032bc <find_volume>
	LEAVE_FF(fs, res);
}
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c2e:	200b      	movs	r0, #11
 8003c30:	e7fb      	b.n	8003c2a <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003c32:	2000      	movs	r0, #0
 8003c34:	e7f9      	b.n	8003c2a <f_mount+0x52>
 8003c36:	bf00      	nop
 8003c38:	20000040 	.word	0x20000040
 8003c3c:	20000044 	.word	0x20000044

08003c40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	b090      	sub	sp, #64	; 0x40
 8003c46:	4690      	mov	r8, r2
 8003c48:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	f000 80ce 	beq.w	8003dee <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003c52:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003c56:	462a      	mov	r2, r5
 8003c58:	a903      	add	r1, sp, #12
 8003c5a:	a801      	add	r0, sp, #4
 8003c5c:	f7ff fb2e 	bl	80032bc <find_volume>
	if (res == FR_OK) {
 8003c60:	4607      	mov	r7, r0
 8003c62:	bb38      	cbnz	r0, 8003cb4 <f_open+0x74>
		dj.obj.fs = fs;
 8003c64:	ae10      	add	r6, sp, #64	; 0x40
 8003c66:	9b03      	ldr	r3, [sp, #12]
 8003c68:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003c6c:	9901      	ldr	r1, [sp, #4]
 8003c6e:	4630      	mov	r0, r6
 8003c70:	f7ff fe92 	bl	8003998 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003c74:	b958      	cbnz	r0, 8003c8e <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003c76:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db1e      	blt.n	8003cbc <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003c7e:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8003c82:	bf14      	ite	ne
 8003c84:	2101      	movne	r1, #1
 8003c86:	2100      	moveq	r1, #0
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f7ff f955 	bl	8002f38 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003c8e:	f018 0f1c 	tst.w	r8, #28
 8003c92:	d073      	beq.n	8003d7c <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8003c94:	b1a0      	cbz	r0, 8003cc0 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003c96:	2804      	cmp	r0, #4
 8003c98:	d109      	bne.n	8003cae <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c9a:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <f_open+0x220>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	f000 80da 	beq.w	8003e58 <f_open+0x218>
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80d6 	beq.w	8003e58 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003cac:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003cae:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003cb2:	b170      	cbz	r0, 8003cd2 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	4607      	mov	r7, r0
 8003cba:	e092      	b.n	8003de2 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8003cbc:	2006      	movs	r0, #6
 8003cbe:	e7e6      	b.n	8003c8e <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003cc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003cc4:	f013 0f11 	tst.w	r3, #17
 8003cc8:	d163      	bne.n	8003d92 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003cca:	f018 0f04 	tst.w	r8, #4
 8003cce:	f040 80bd 	bne.w	8003e4c <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003cd2:	0728      	lsls	r0, r5, #28
 8003cd4:	d53c      	bpl.n	8003d50 <f_open+0x110>
				dw = GET_FATTIME();
 8003cd6:	f000 fe6d 	bl	80049b4 <get_fattime>
 8003cda:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003cdc:	4601      	mov	r1, r0
 8003cde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ce0:	300e      	adds	r0, #14
 8003ce2:	f7ff f91b 	bl	8002f1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ce8:	4611      	mov	r1, r2
 8003cea:	3016      	adds	r0, #22
 8003cec:	f7ff f916 	bl	8002f1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003cf2:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003cfa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003cfe:	f899 0000 	ldrb.w	r0, [r9]
 8003d02:	4651      	mov	r1, sl
 8003d04:	f7ff f9f1 	bl	80030ea <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003d0c:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003d0e:	4648      	mov	r0, r9
 8003d10:	f7ff f9f9 	bl	8003106 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003d16:	2200      	movs	r2, #0
 8003d18:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d1a:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d1c:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003d1e:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	2101      	movs	r1, #1
 8003d24:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003d26:	f1b8 0f00 	cmp.w	r8, #0
 8003d2a:	d011      	beq.n	8003d50 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	4630      	mov	r0, r6
						dw = fs->winsect;
 8003d30:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8003d34:	f7ff fd4e 	bl	80037d4 <remove_chain>
						if (res == FR_OK) {
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d1bb      	bne.n	8003cb4 <f_open+0x74>
							res = move_window(fs, dw);
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	9803      	ldr	r0, [sp, #12]
 8003d40:	f7ff fa61 	bl	8003206 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003d44:	9a03      	ldr	r2, [sp, #12]
 8003d46:	f108 33ff 	add.w	r3, r8, #4294967295
 8003d4a:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d1b1      	bne.n	8003cb4 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003d50:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003d52:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8003d58:	bf48      	it	mi
 8003d5a:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003d5e:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8003d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d64:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003d66:	bf14      	ite	ne
 8003d68:	2101      	movne	r1, #1
 8003d6a:	2100      	moveq	r1, #0
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f7ff f911 	bl	8002f94 <inc_lock>
 8003d72:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d13c      	bne.n	8003df2 <f_open+0x1b2>
 8003d78:	2002      	movs	r0, #2
 8003d7a:	e79b      	b.n	8003cb4 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d199      	bne.n	8003cb4 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003d80:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003d84:	06da      	lsls	r2, r3, #27
 8003d86:	d463      	bmi.n	8003e50 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003d88:	f018 0f02 	tst.w	r8, #2
 8003d8c:	d0e0      	beq.n	8003d50 <f_open+0x110>
 8003d8e:	07db      	lsls	r3, r3, #31
 8003d90:	d5de      	bpl.n	8003d50 <f_open+0x110>
					res = FR_DENIED;
 8003d92:	2007      	movs	r0, #7
 8003d94:	e78e      	b.n	8003cb4 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	f7ff fc6a 	bl	8003670 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8003d9c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003d9e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003da0:	d923      	bls.n	8003dea <f_open+0x1aa>
 8003da2:	1c42      	adds	r2, r0, #1
 8003da4:	4250      	negs	r0, r2
 8003da6:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003da8:	eba5 0508 	sub.w	r5, r5, r8
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d049      	beq.n	8003e44 <f_open+0x204>
				fp->clust = clst;
 8003db0:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f47f af7e 	bne.w	8003cb4 <f_open+0x74>
 8003db8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8003dbc:	b18b      	cbz	r3, 8003de2 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f7ff f93a 	bl	800303c <clust2sect>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0d5      	beq.n	8003d78 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003dcc:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8003dd0:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003dda:	f7ff f86d 	bl	8002eb8 <disk_read>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d138      	bne.n	8003e54 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8003de2:	4638      	mov	r0, r7
 8003de4:	b010      	add	sp, #64	; 0x40
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8003dea:	2002      	movs	r0, #2
 8003dec:	e7dc      	b.n	8003da8 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8003dee:	2709      	movs	r7, #9
 8003df0:	e7f7      	b.n	8003de2 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003df2:	9e03      	ldr	r6, [sp, #12]
 8003df4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003df8:	7830      	ldrb	r0, [r6, #0]
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	f7ff f975 	bl	80030ea <ld_clust.isra.1>
 8003e00:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003e02:	f108 001c 	add.w	r0, r8, #28
 8003e06:	f7ff f881 	bl	8002f0c <ld_dword>
			fp->obj.id = fs->id;
 8003e0a:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003e0c:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003e0e:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003e10:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003e14:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8003e16:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003e18:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8003e1a:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8003e1c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003e1e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003e20:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7ff f880 	bl	8002f2c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003e2c:	06ab      	lsls	r3, r5, #26
 8003e2e:	d5d8      	bpl.n	8003de2 <f_open+0x1a2>
 8003e30:	68e5      	ldr	r5, [r4, #12]
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	d0d5      	beq.n	8003de2 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003e36:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003e38:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003e3a:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003e3e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003e40:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003e44:	45a8      	cmp	r8, r5
 8003e46:	d3a6      	bcc.n	8003d96 <f_open+0x156>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e7b1      	b.n	8003db0 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003e4c:	2008      	movs	r0, #8
 8003e4e:	e731      	b.n	8003cb4 <f_open+0x74>
					res = FR_NO_FILE;
 8003e50:	2004      	movs	r0, #4
 8003e52:	e72f      	b.n	8003cb4 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003e54:	2001      	movs	r0, #1
 8003e56:	e72d      	b.n	8003cb4 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7ff fe8b 	bl	8003b74 <dir_register>
 8003e5e:	e726      	b.n	8003cae <f_open+0x6e>
 8003e60:	20000044 	.word	0x20000044

08003e64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e68:	469b      	mov	fp, r3
 8003e6a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003e6c:	2300      	movs	r3, #0
{
 8003e6e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8003e70:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003e74:	a903      	add	r1, sp, #12
{
 8003e76:	4604      	mov	r4, r0
 8003e78:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003e7a:	f7ff f913 	bl	80030a4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003e7e:	4606      	mov	r6, r0
 8003e80:	bb00      	cbnz	r0, 8003ec4 <f_read+0x60>
 8003e82:	7d66      	ldrb	r6, [r4, #21]
 8003e84:	b9f6      	cbnz	r6, 8003ec4 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003e86:	7d23      	ldrb	r3, [r4, #20]
 8003e88:	07da      	lsls	r2, r3, #31
 8003e8a:	f140 8096 	bpl.w	8003fba <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	69a7      	ldr	r7, [r4, #24]
 8003e92:	1bdf      	subs	r7, r3, r7
 8003e94:	42af      	cmp	r7, r5
 8003e96:	bf28      	it	cs
 8003e98:	462f      	movcs	r7, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003e9a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 8003e9e:	b18f      	cbz	r7, 8003ec4 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003ea0:	69a1      	ldr	r1, [r4, #24]
 8003ea2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d179      	bne.n	8003f9e <f_read+0x13a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	895b      	ldrh	r3, [r3, #10]
 8003eae:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8003eb0:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	d119      	bne.n	8003eec <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003eb8:	b941      	cbnz	r1, 8003ecc <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003eba:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003ebc:	2801      	cmp	r0, #1
 8003ebe:	d810      	bhi.n	8003ee2 <f_read+0x7e>
 8003ec0:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003ec2:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	b005      	add	sp, #20
 8003ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8003ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ece:	b11b      	cbz	r3, 8003ed8 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7ff f8be 	bl	8003052 <clmt_clust>
 8003ed6:	e7f1      	b.n	8003ebc <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003ed8:	69e1      	ldr	r1, [r4, #28]
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	f7ff fbc8 	bl	8003670 <get_fat.isra.8>
 8003ee0:	e7ec      	b.n	8003ebc <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	d101      	bne.n	8003eea <f_read+0x86>
 8003ee6:	2601      	movs	r6, #1
 8003ee8:	e7eb      	b.n	8003ec2 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8003eea:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003eec:	9b03      	ldr	r3, [sp, #12]
 8003eee:	69e1      	ldr	r1, [r4, #28]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff f8a2 	bl	800303c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d0e1      	beq.n	8003ec0 <f_read+0x5c>
			sect += csect;
 8003efc:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003efe:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8003f00:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003f04:	d02d      	beq.n	8003f62 <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	9a01      	ldr	r2, [sp, #4]
 8003f0a:	895b      	ldrh	r3, [r3, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003f0c:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003f0e:	442a      	add	r2, r5
 8003f10:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8003f12:	bf88      	it	hi
 8003f14:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003f16:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8003f18:	bf88      	it	hi
 8003f1a:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	4642      	mov	r2, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fe ffc9 	bl	8002eb8 <disk_read>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d1dd      	bne.n	8003ee6 <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003f2a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da0b      	bge.n	8003f4a <f_read+0xe6>
 8003f32:	6a20      	ldr	r0, [r4, #32]
 8003f34:	eba0 0008 	sub.w	r0, r0, r8
 8003f38:	4285      	cmp	r5, r0
 8003f3a:	d906      	bls.n	8003f4a <f_read+0xe6>
 8003f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f40:	4651      	mov	r1, sl
 8003f42:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8003f46:	f7ff f8c7 	bl	80030d8 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003f4a:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003f4c:	69a3      	ldr	r3, [r4, #24]
 8003f4e:	442b      	add	r3, r5
 8003f50:	61a3      	str	r3, [r4, #24]
 8003f52:	f8db 3000 	ldr.w	r3, [fp]
 8003f56:	442b      	add	r3, r5
 8003f58:	44a9      	add	r9, r5
 8003f5a:	f8cb 3000 	str.w	r3, [fp]
 8003f5e:	1b7f      	subs	r7, r7, r5
 8003f60:	e79d      	b.n	8003e9e <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003f62:	6a22      	ldr	r2, [r4, #32]
 8003f64:	4590      	cmp	r8, r2
 8003f66:	d018      	beq.n	8003f9a <f_read+0x136>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003f68:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da0b      	bge.n	8003f88 <f_read+0x124>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003f70:	9800      	ldr	r0, [sp, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	4651      	mov	r1, sl
 8003f76:	7840      	ldrb	r0, [r0, #1]
 8003f78:	f7fe ffac 	bl	8002ed4 <disk_write>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1b2      	bne.n	8003ee6 <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003f80:	7d23      	ldrb	r3, [r4, #20]
 8003f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f86:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003f88:	9803      	ldr	r0, [sp, #12]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	4651      	mov	r1, sl
 8003f90:	7840      	ldrb	r0, [r0, #1]
 8003f92:	f7fe ff91 	bl	8002eb8 <disk_read>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d1a5      	bne.n	8003ee6 <f_read+0x82>
			fp->sect = sect;
 8003f9a:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003f9e:	69a1      	ldr	r1, [r4, #24]
 8003fa0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003fa4:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8003fa8:	42bd      	cmp	r5, r7
 8003faa:	bf28      	it	cs
 8003fac:	463d      	movcs	r5, r7
 8003fae:	462a      	mov	r2, r5
 8003fb0:	4451      	add	r1, sl
 8003fb2:	4648      	mov	r0, r9
 8003fb4:	f7ff f890 	bl	80030d8 <mem_cpy.part.0>
 8003fb8:	e7c8      	b.n	8003f4c <f_read+0xe8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003fba:	2607      	movs	r6, #7
 8003fbc:	e782      	b.n	8003ec4 <f_read+0x60>

08003fbe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc2:	469b      	mov	fp, r3
 8003fc4:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8003fc6:	2300      	movs	r3, #0
{
 8003fc8:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8003fca:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003fce:	a903      	add	r1, sp, #12
{
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003fd4:	f7ff f866 	bl	80030a4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003fd8:	4606      	mov	r6, r0
 8003fda:	bb58      	cbnz	r0, 8004034 <f_write+0x76>
 8003fdc:	7d66      	ldrb	r6, [r4, #21]
 8003fde:	bb4e      	cbnz	r6, 8004034 <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003fe0:	7d23      	ldrb	r3, [r4, #20]
 8003fe2:	079a      	lsls	r2, r3, #30
 8003fe4:	f140 80ae 	bpl.w	8004144 <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003fe8:	69a3      	ldr	r3, [r4, #24]
 8003fea:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003fec:	bf28      	it	cs
 8003fee:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003ff0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8003ff4:	b1d7      	cbz	r7, 800402c <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003ff6:	69a1      	ldr	r1, [r4, #24]
 8003ff8:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 808f 	bne.w	8004120 <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	895b      	ldrh	r3, [r3, #10]
 8004006:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8004008:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	d124      	bne.n	800405a <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004010:	b931      	cbnz	r1, 8004020 <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004012:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004014:	b9a0      	cbnz	r0, 8004040 <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004016:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff fb83 	bl	8003724 <create_chain>
 800401e:	e004      	b.n	800402a <f_write+0x6c>
					if (fp->cltbl) {
 8004020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004022:	b15b      	cbz	r3, 800403c <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff f814 	bl	8003052 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800402a:	b948      	cbnz	r0, 8004040 <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800402c:	7d23      	ldrb	r3, [r4, #20]
 800402e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004032:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8004034:	4630      	mov	r0, r6
 8004036:	b005      	add	sp, #20
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800403c:	69e1      	ldr	r1, [r4, #28]
 800403e:	e7eb      	b.n	8004018 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004040:	2801      	cmp	r0, #1
 8004042:	d102      	bne.n	800404a <f_write+0x8c>
 8004044:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004046:	7566      	strb	r6, [r4, #21]
 8004048:	e7f4      	b.n	8004034 <f_write+0x76>
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	d101      	bne.n	8004052 <f_write+0x94>
 800404e:	2601      	movs	r6, #1
 8004050:	e7f9      	b.n	8004046 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004052:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8004054:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004056:	b903      	cbnz	r3, 800405a <f_write+0x9c>
 8004058:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800405a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	da0c      	bge.n	800407c <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004062:	9803      	ldr	r0, [sp, #12]
 8004064:	6a22      	ldr	r2, [r4, #32]
 8004066:	7840      	ldrb	r0, [r0, #1]
 8004068:	2301      	movs	r3, #1
 800406a:	4651      	mov	r1, sl
 800406c:	f7fe ff32 	bl	8002ed4 <disk_write>
 8004070:	2800      	cmp	r0, #0
 8004072:	d1ec      	bne.n	800404e <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004074:	7d23      	ldrb	r3, [r4, #20]
 8004076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407a:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	69e1      	ldr	r1, [r4, #28]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe ffda 	bl	800303c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004088:	2800      	cmp	r0, #0
 800408a:	d0db      	beq.n	8004044 <f_write+0x86>
			sect += csect;
 800408c:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800408e:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8004090:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004094:	d032      	beq.n	80040fc <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004096:	9b00      	ldr	r3, [sp, #0]
 8004098:	9a01      	ldr	r2, [sp, #4]
 800409a:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800409c:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800409e:	442a      	add	r2, r5
 80040a0:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80040a2:	bf88      	it	hi
 80040a4:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80040a6:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 80040a8:	bf88      	it	hi
 80040aa:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80040ac:	462b      	mov	r3, r5
 80040ae:	4642      	mov	r2, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	f7fe ff0f 	bl	8002ed4 <disk_write>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d1c9      	bne.n	800404e <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80040ba:	6a21      	ldr	r1, [r4, #32]
 80040bc:	eba1 0108 	sub.w	r1, r1, r8
 80040c0:	428d      	cmp	r5, r1
 80040c2:	d90a      	bls.n	80040da <f_write+0x11c>
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80040cc:	4650      	mov	r0, sl
 80040ce:	f7ff f803 	bl	80030d8 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80040d2:	7d23      	ldrb	r3, [r4, #20]
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80040da:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80040dc:	69a3      	ldr	r3, [r4, #24]
 80040de:	68e2      	ldr	r2, [r4, #12]
 80040e0:	442b      	add	r3, r5
 80040e2:	61a3      	str	r3, [r4, #24]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	bf2c      	ite	cs
 80040e8:	60e2      	strcs	r2, [r4, #12]
 80040ea:	60e3      	strcc	r3, [r4, #12]
 80040ec:	f8db 3000 	ldr.w	r3, [fp]
 80040f0:	442b      	add	r3, r5
 80040f2:	44a9      	add	r9, r5
 80040f4:	f8cb 3000 	str.w	r3, [fp]
 80040f8:	1b7f      	subs	r7, r7, r5
 80040fa:	e77b      	b.n	8003ff4 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80040fc:	6a23      	ldr	r3, [r4, #32]
 80040fe:	4598      	cmp	r8, r3
 8004100:	d00c      	beq.n	800411c <f_write+0x15e>
 8004102:	69a2      	ldr	r2, [r4, #24]
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800410a:	9800      	ldr	r0, [sp, #0]
 800410c:	2301      	movs	r3, #1
 800410e:	4642      	mov	r2, r8
 8004110:	4651      	mov	r1, sl
 8004112:	7840      	ldrb	r0, [r0, #1]
 8004114:	f7fe fed0 	bl	8002eb8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8004118:	2800      	cmp	r0, #0
 800411a:	d198      	bne.n	800404e <f_write+0x90>
			fp->sect = sect;
 800411c:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004120:	69a0      	ldr	r0, [r4, #24]
 8004122:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004126:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800412a:	42bd      	cmp	r5, r7
 800412c:	bf28      	it	cs
 800412e:	463d      	movcs	r5, r7
 8004130:	462a      	mov	r2, r5
 8004132:	4649      	mov	r1, r9
 8004134:	4450      	add	r0, sl
 8004136:	f7fe ffcf 	bl	80030d8 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800413a:	7d23      	ldrb	r3, [r4, #20]
 800413c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004140:	7523      	strb	r3, [r4, #20]
 8004142:	e7cb      	b.n	80040dc <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004144:	2607      	movs	r6, #7
 8004146:	e775      	b.n	8004034 <f_write+0x76>

08004148 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800414a:	a901      	add	r1, sp, #4
{
 800414c:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800414e:	f7fe ffa9 	bl	80030a4 <validate>
	if (res == FR_OK) {
 8004152:	4605      	mov	r5, r0
 8004154:	2800      	cmp	r0, #0
 8004156:	d13a      	bne.n	80041ce <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004158:	7d23      	ldrb	r3, [r4, #20]
 800415a:	065a      	lsls	r2, r3, #25
 800415c:	d537      	bpl.n	80041ce <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800415e:	061b      	lsls	r3, r3, #24
 8004160:	d50c      	bpl.n	800417c <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004162:	9801      	ldr	r0, [sp, #4]
 8004164:	6a22      	ldr	r2, [r4, #32]
 8004166:	7840      	ldrb	r0, [r0, #1]
 8004168:	2301      	movs	r3, #1
 800416a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800416e:	f7fe feb1 	bl	8002ed4 <disk_write>
 8004172:	bb78      	cbnz	r0, 80041d4 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004174:	7d23      	ldrb	r3, [r4, #20]
 8004176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417a:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800417c:	f000 fc1a 	bl	80049b4 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004180:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8004182:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8004184:	9801      	ldr	r0, [sp, #4]
 8004186:	f7ff f83e 	bl	8003206 <move_window>
				if (res == FR_OK) {
 800418a:	4605      	mov	r5, r0
 800418c:	b9f8      	cbnz	r0, 80041ce <f_sync+0x86>
					dir = fp->dir_ptr;
 800418e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004190:	7af3      	ldrb	r3, [r6, #11]
 8004192:	f043 0320 	orr.w	r3, r3, #32
 8004196:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004198:	68a2      	ldr	r2, [r4, #8]
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	4631      	mov	r1, r6
 800419e:	f7fe ffb2 	bl	8003106 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80041a2:	68e1      	ldr	r1, [r4, #12]
 80041a4:	f106 001c 	add.w	r0, r6, #28
 80041a8:	f7fe feb8 	bl	8002f1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80041ac:	4639      	mov	r1, r7
 80041ae:	f106 0016 	add.w	r0, r6, #22
 80041b2:	f7fe feb3 	bl	8002f1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80041b6:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80041b8:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80041ba:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80041bc:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80041be:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80041c0:	f7fe ffd6 	bl	8003170 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80041c4:	7d23      	ldrb	r3, [r4, #20]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80041ca:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80041cc:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80041ce:	4628      	mov	r0, r5
 80041d0:	b003      	add	sp, #12
 80041d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80041d4:	2501      	movs	r5, #1
 80041d6:	e7fa      	b.n	80041ce <f_sync+0x86>

080041d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80041d8:	b513      	push	{r0, r1, r4, lr}
 80041da:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80041dc:	f7ff ffb4 	bl	8004148 <f_sync>
	if (res == FR_OK)
 80041e0:	b948      	cbnz	r0, 80041f6 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80041e2:	a901      	add	r1, sp, #4
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7fe ff5d 	bl	80030a4 <validate>
		if (res == FR_OK) {
 80041ea:	b920      	cbnz	r0, 80041f6 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80041ec:	6920      	ldr	r0, [r4, #16]
 80041ee:	f7fe ff0d 	bl	800300c <dec_lock>
			if (res == FR_OK)
 80041f2:	b900      	cbnz	r0, 80041f6 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80041f4:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80041f6:	b002      	add	sp, #8
 80041f8:	bd10      	pop	{r4, pc}

080041fa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80041fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fe:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8004200:	a901      	add	r1, sp, #4
{
 8004202:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8004204:	f7fe ff4e 	bl	80030a4 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8004208:	4606      	mov	r6, r0
 800420a:	b9e0      	cbnz	r0, 8004246 <f_lseek+0x4c>
 800420c:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800420e:	b9d6      	cbnz	r6, 8004246 <f_lseek+0x4c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8004210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d078      	beq.n	8004308 <f_lseek+0x10e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004216:	1c6a      	adds	r2, r5, #1
 8004218:	d139      	bne.n	800428e <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 800421a:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800421e:	f8d3 b000 	ldr.w	fp, [r3]
 8004222:	1d1f      	adds	r7, r3, #4
 8004224:	2502      	movs	r5, #2
			if (cl) {
 8004226:	f1b8 0f00 	cmp.w	r8, #0
 800422a:	d028      	beq.n	800427e <f_lseek+0x84>
 800422c:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800422e:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8004232:	4649      	mov	r1, r9
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	f7ff fa1b 	bl	8003670 <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800423a:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800423c:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004240:	d807      	bhi.n	8004252 <f_lseek+0x58>
 8004242:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004244:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8004246:	4630      	mov	r0, r6
 8004248:	b003      	add	sp, #12
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	4680      	mov	r8, r0
 8004250:	e7ec      	b.n	800422c <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d101      	bne.n	800425a <f_lseek+0x60>
 8004256:	2601      	movs	r6, #1
 8004258:	e7f4      	b.n	8004244 <f_lseek+0x4a>
					} while (cl == pcl + 1);
 800425a:	f109 0301 	add.w	r3, r9, #1
 800425e:	4298      	cmp	r0, r3
 8004260:	4681      	mov	r9, r0
 8004262:	d0e6      	beq.n	8004232 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004264:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004266:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8004268:	bf21      	itttt	cs
 800426a:	463b      	movcs	r3, r7
 800426c:	f843 ab08 	strcs.w	sl, [r3], #8
 8004270:	f8c7 8004 	strcs.w	r8, [r7, #4]
 8004274:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8004276:	9b01      	ldr	r3, [sp, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4298      	cmp	r0, r3
 800427c:	d3e7      	bcc.n	800424e <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 800427e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 8004280:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8004282:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 8004284:	f200 80d4 	bhi.w	8004430 <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
 8004288:	2300      	movs	r3, #0
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	e7db      	b.n	8004246 <f_lseek+0x4c>
 800428e:	68e0      	ldr	r0, [r4, #12]
 8004290:	4285      	cmp	r5, r0
 8004292:	bf28      	it	cs
 8004294:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8004296:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8004298:	2d00      	cmp	r5, #0
 800429a:	d0d4      	beq.n	8004246 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800429c:	f105 38ff 	add.w	r8, r5, #4294967295
 80042a0:	4641      	mov	r1, r8
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7fe fed5 	bl	8003052 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 80042a8:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 80042aa:	61e0      	str	r0, [r4, #28]
 80042ac:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 80042ae:	4638      	mov	r0, r7
 80042b0:	f7fe fec4 	bl	800303c <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d0c4      	beq.n	8004242 <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80042b8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80042bc:	2d00      	cmp	r5, #0
 80042be:	d0c2      	beq.n	8004246 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80042c0:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80042c2:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80042c4:	3d01      	subs	r5, #1
 80042c6:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 80042ca:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80042cc:	4295      	cmp	r5, r2
 80042ce:	d0ba      	beq.n	8004246 <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80042d0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80042da:	da0a      	bge.n	80042f2 <f_lseek+0xf8>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042dc:	2301      	movs	r3, #1
 80042de:	4641      	mov	r1, r8
 80042e0:	7878      	ldrb	r0, [r7, #1]
 80042e2:	f7fe fdf7 	bl	8002ed4 <disk_write>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1b5      	bne.n	8004256 <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 80042ea:	7d23      	ldrb	r3, [r4, #20]
 80042ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f0:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80042f2:	9801      	ldr	r0, [sp, #4]
 80042f4:	2301      	movs	r3, #1
 80042f6:	462a      	mov	r2, r5
 80042f8:	4641      	mov	r1, r8
 80042fa:	7840      	ldrb	r0, [r0, #1]
 80042fc:	f7fe fddc 	bl	8002eb8 <disk_read>
 8004300:	2800      	cmp	r0, #0
 8004302:	d1a8      	bne.n	8004256 <f_lseek+0x5c>
					fp->sect = dsc;
 8004304:	6225      	str	r5, [r4, #32]
 8004306:	e79e      	b.n	8004246 <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8004308:	68e3      	ldr	r3, [r4, #12]
 800430a:	429d      	cmp	r5, r3
 800430c:	d904      	bls.n	8004318 <f_lseek+0x11e>
 800430e:	7d22      	ldrb	r2, [r4, #20]
 8004310:	f012 0f02 	tst.w	r2, #2
 8004314:	bf08      	it	eq
 8004316:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8004318:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800431a:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800431c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800431e:	2d00      	cmp	r5, #0
 8004320:	d132      	bne.n	8004388 <f_lseek+0x18e>
		fp->fptr = nsect = 0;
 8004322:	462f      	mov	r7, r5
 8004324:	e009      	b.n	800433a <f_lseek+0x140>
 8004326:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8004328:	68e3      	ldr	r3, [r4, #12]
 800432a:	69a5      	ldr	r5, [r4, #24]
 800432c:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 800432e:	bf81      	itttt	hi
 8004330:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8004332:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8004334:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8004338:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800433a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800433e:	2d00      	cmp	r5, #0
 8004340:	d081      	beq.n	8004246 <f_lseek+0x4c>
 8004342:	6a22      	ldr	r2, [r4, #32]
 8004344:	42ba      	cmp	r2, r7
 8004346:	f43f af7e 	beq.w	8004246 <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800434a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8004354:	da0c      	bge.n	8004370 <f_lseek+0x176>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004356:	9801      	ldr	r0, [sp, #4]
 8004358:	2301      	movs	r3, #1
 800435a:	4629      	mov	r1, r5
 800435c:	7840      	ldrb	r0, [r0, #1]
 800435e:	f7fe fdb9 	bl	8002ed4 <disk_write>
 8004362:	2800      	cmp	r0, #0
 8004364:	f47f af77 	bne.w	8004256 <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004368:	7d23      	ldrb	r3, [r4, #20]
 800436a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436e:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004370:	9801      	ldr	r0, [sp, #4]
 8004372:	2301      	movs	r3, #1
 8004374:	463a      	mov	r2, r7
 8004376:	4629      	mov	r1, r5
 8004378:	7840      	ldrb	r0, [r0, #1]
 800437a:	f7fe fd9d 	bl	8002eb8 <disk_read>
 800437e:	2800      	cmp	r0, #0
 8004380:	f47f af69 	bne.w	8004256 <f_lseek+0x5c>
			fp->sect = nsect;
 8004384:	6227      	str	r7, [r4, #32]
 8004386:	e75e      	b.n	8004246 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8004388:	9a01      	ldr	r2, [sp, #4]
 800438a:	8957      	ldrh	r7, [r2, #10]
 800438c:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800438e:	b303      	cbz	r3, 80043d2 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8004390:	3b01      	subs	r3, #1
 8004392:	1e6a      	subs	r2, r5, #1
 8004394:	fbb3 f1f7 	udiv	r1, r3, r7
 8004398:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800439c:	428a      	cmp	r2, r1
 800439e:	d318      	bcc.n	80043d2 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80043a0:	427a      	negs	r2, r7
 80043a2:	4013      	ands	r3, r2
				clst = fp->clust;
 80043a4:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80043a6:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 80043a8:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80043aa:	2900      	cmp	r1, #0
 80043ac:	d0bb      	beq.n	8004326 <f_lseek+0x12c>
				while (ofs > bcs) {						/* Cluster following loop */
 80043ae:	42bd      	cmp	r5, r7
 80043b0:	d81e      	bhi.n	80043f0 <f_lseek+0x1f6>
				fp->fptr += ofs;
 80043b2:	69a3      	ldr	r3, [r4, #24]
 80043b4:	442b      	add	r3, r5
 80043b6:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 80043b8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0b2      	beq.n	8004326 <f_lseek+0x12c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80043c0:	9801      	ldr	r0, [sp, #4]
 80043c2:	f7fe fe3b 	bl	800303c <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80043c6:	2800      	cmp	r0, #0
 80043c8:	f43f af3b 	beq.w	8004242 <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 80043cc:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 80043d0:	e7aa      	b.n	8004328 <f_lseek+0x12e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80043d2:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80043d4:	b951      	cbnz	r1, 80043ec <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff f9a4 	bl	8003724 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80043dc:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80043de:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80043e0:	f43f af2f 	beq.w	8004242 <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f af36 	beq.w	8004256 <f_lseek+0x5c>
					fp->obj.sclust = clst;
 80043ea:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80043ec:	61e1      	str	r1, [r4, #28]
 80043ee:	e7dc      	b.n	80043aa <f_lseek+0x1b0>
					ofs -= bcs; fp->fptr += bcs;
 80043f0:	69a3      	ldr	r3, [r4, #24]
 80043f2:	443b      	add	r3, r7
 80043f4:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80043f6:	7d23      	ldrb	r3, [r4, #20]
 80043f8:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80043fa:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80043fe:	d506      	bpl.n	800440e <f_lseek+0x214>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff f98f 	bl	8003724 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8004406:	4601      	mov	r1, r0
 8004408:	b928      	cbnz	r0, 8004416 <f_lseek+0x21c>
							ofs = 0; break;
 800440a:	4605      	mov	r5, r0
 800440c:	e7d1      	b.n	80043b2 <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	f7ff f92e 	bl	8003670 <get_fat.isra.8>
 8004414:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004416:	1c4b      	adds	r3, r1, #1
 8004418:	f43f af1d 	beq.w	8004256 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800441c:	2901      	cmp	r1, #1
 800441e:	f67f af10 	bls.w	8004242 <f_lseek+0x48>
 8004422:	9b01      	ldr	r3, [sp, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4299      	cmp	r1, r3
 8004428:	f4bf af0b 	bcs.w	8004242 <f_lseek+0x48>
					fp->clust = clst;
 800442c:	61e1      	str	r1, [r4, #28]
 800442e:	e7be      	b.n	80043ae <f_lseek+0x1b4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004430:	2611      	movs	r6, #17
 8004432:	e708      	b.n	8004246 <f_lseek+0x4c>

08004434 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	b09c      	sub	sp, #112	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8004438:	2202      	movs	r2, #2
{
 800443a:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 800443c:	a903      	add	r1, sp, #12
 800443e:	a801      	add	r0, sp, #4
 8004440:	f7fe ff3c 	bl	80032bc <find_volume>
	dj.obj.fs = fs;
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 8004448:	b990      	cbnz	r0, 8004470 <f_unlink+0x3c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800444a:	9901      	ldr	r1, [sp, #4]
 800444c:	a804      	add	r0, sp, #16
 800444e:	f7ff faa3 	bl	8003998 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8004452:	b968      	cbnz	r0, 8004470 <f_unlink+0x3c>
 8004454:	2102      	movs	r1, #2
 8004456:	a804      	add	r0, sp, #16
 8004458:	f7fe fd6e 	bl	8002f38 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800445c:	b940      	cbnz	r0, 8004470 <f_unlink+0x3c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800445e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8004462:	2b00      	cmp	r3, #0
 8004464:	db0e      	blt.n	8004484 <f_unlink+0x50>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 8004466:	f89d 6016 	ldrb.w	r6, [sp, #22]
 800446a:	07f2      	lsls	r2, r6, #31
 800446c:	d50c      	bpl.n	8004488 <f_unlink+0x54>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800446e:	2007      	movs	r0, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8004470:	b01c      	add	sp, #112	; 0x70
 8004472:	bd70      	pop	{r4, r5, r6, pc}
					res = remove_chain(&dj.obj, dclst, 0);
 8004474:	4602      	mov	r2, r0
 8004476:	4621      	mov	r1, r4
 8004478:	a804      	add	r0, sp, #16
 800447a:	f7ff f9ab 	bl	80037d4 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 800447e:	2800      	cmp	r0, #0
 8004480:	d1f6      	bne.n	8004470 <f_unlink+0x3c>
 8004482:	e025      	b.n	80044d0 <f_unlink+0x9c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8004484:	2006      	movs	r0, #6
	LEAVE_FF(fs, res);
 8004486:	e7f3      	b.n	8004470 <f_unlink+0x3c>
					dclst = ld_clust(fs, dj.dir);
 8004488:	9d03      	ldr	r5, [sp, #12]
 800448a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800448c:	7828      	ldrb	r0, [r5, #0]
 800448e:	f7fe fe2c 	bl	80030ea <ld_clust.isra.1>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8004492:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 8004494:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8004496:	d50d      	bpl.n	80044b4 <f_unlink+0x80>
						res = dir_sdi(&sdj, 0);
 8004498:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800449a:	9510      	str	r5, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 800449c:	9412      	str	r4, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 800449e:	f7ff f9cf 	bl	8003840 <dir_sdi.constprop.11>
						if (res == FR_OK) {
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d1e4      	bne.n	8004470 <f_unlink+0x3c>
							res = dir_read(&sdj, 0);			/* Read an item */
 80044a6:	a810      	add	r0, sp, #64	; 0x40
 80044a8:	f7ff fb3a 	bl	8003b20 <dir_read.constprop.9>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d0de      	beq.n	800446e <f_unlink+0x3a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80044b0:	2804      	cmp	r0, #4
 80044b2:	d1dd      	bne.n	8004470 <f_unlink+0x3c>
	FATFS *fs = dp->obj.fs;
 80044b4:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 80044b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b8:	4628      	mov	r0, r5
 80044ba:	f7fe fea4 	bl	8003206 <move_window>
	if (res == FR_OK) {
 80044be:	2800      	cmp	r0, #0
 80044c0:	d1d6      	bne.n	8004470 <f_unlink+0x3c>
		dp->dir[DIR_Name] = DDEM;
 80044c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044c4:	22e5      	movs	r2, #229	; 0xe5
 80044c6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80044c8:	2301      	movs	r3, #1
 80044ca:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	d1d1      	bne.n	8004474 <f_unlink+0x40>
				if (res == FR_OK) res = sync_fs(fs);
 80044d0:	9803      	ldr	r0, [sp, #12]
 80044d2:	f7fe fe4d 	bl	8003170 <sync_fs>
 80044d6:	e7cb      	b.n	8004470 <f_unlink+0x3c>

080044d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80044d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 80044e0:	4605      	mov	r5, r0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80044e2:	1e4f      	subs	r7, r1, #1
 80044e4:	1b2e      	subs	r6, r5, r4
 80044e6:	42b7      	cmp	r7, r6
 80044e8:	dc08      	bgt.n	80044fc <f_gets+0x24>
		//if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
		n++;
//		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
 80044ea:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80044ec:	429e      	cmp	r6, r3
 80044ee:	bf08      	it	eq
 80044f0:	461c      	moveq	r4, r3
}
 80044f2:	4620      	mov	r0, r4
	*p = 0;
 80044f4:	702b      	strb	r3, [r5, #0]
}
 80044f6:	b002      	add	sp, #8
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		f_read(fp, s, 1, &rc);
 80044fc:	ab01      	add	r3, sp, #4
 80044fe:	2201      	movs	r2, #1
 8004500:	4669      	mov	r1, sp
 8004502:	4640      	mov	r0, r8
 8004504:	f7ff fcae 	bl	8003e64 <f_read>
		if (rc != 1) break;
 8004508:	9b01      	ldr	r3, [sp, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d1ed      	bne.n	80044ea <f_gets+0x12>
		*p++ = c;
 800450e:	f89d 3000 	ldrb.w	r3, [sp]
 8004512:	f805 3b01 	strb.w	r3, [r5], #1
 8004516:	e7e5      	b.n	80044e4 <f_gets+0xc>

08004518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004518:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <FATFS_LinkDriverEx+0x40>)
 800451c:	7a5d      	ldrb	r5, [r3, #9]
 800451e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8004522:	b9b5      	cbnz	r5, 8004552 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004524:	7a5d      	ldrb	r5, [r3, #9]
 8004526:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004528:	7a5d      	ldrb	r5, [r3, #9]
 800452a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800452e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004530:	7a58      	ldrb	r0, [r3, #9]
 8004532:	4418      	add	r0, r3
 8004534:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004536:	7a5a      	ldrb	r2, [r3, #9]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	1c50      	adds	r0, r2, #1
 800453c:	b2c0      	uxtb	r0, r0
 800453e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004540:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004542:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004544:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004546:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004548:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800454a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800454c:	70cc      	strb	r4, [r1, #3]
 800454e:	4620      	mov	r0, r4
 8004550:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004552:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8004554:	bd30      	pop	{r4, r5, pc}
 8004556:	bf00      	nop
 8004558:	20000068 	.word	0x20000068

0800455c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800455c:	2200      	movs	r2, #0
 800455e:	f7ff bfdb 	b.w	8004518 <FATFS_LinkDriverEx>
	...

08004564 <enableGNZDAString>:



void enableGNZDAString(){

	    frame1[0] = 0xB5;
 8004564:	4914      	ldr	r1, [pc, #80]	; (80045b8 <enableGNZDAString+0x54>)
 8004566:	23b5      	movs	r3, #181	; 0xb5
void enableGNZDAString(){
 8004568:	b510      	push	{r4, lr}
	    frame1[0] = 0xB5;
 800456a:	700b      	strb	r3, [r1, #0]
		frame1[1] = 0x62;
 800456c:	2362      	movs	r3, #98	; 0x62
 800456e:	704b      	strb	r3, [r1, #1]
		frame1[2] = 0x06;
		frame1[3] = 0x01;
		frame1[4] = 0x08;
		frame1[5] = 0x00;
		frame1[6] = 0xF0;
 8004570:	24f0      	movs	r4, #240	; 0xf0
		frame1[2] = 0x06;
 8004572:	2306      	movs	r3, #6
 8004574:	708b      	strb	r3, [r1, #2]
		frame1[6] = 0xF0;
 8004576:	718c      	strb	r4, [r1, #6]
		frame1[5] = 0x00;
 8004578:	2300      	movs	r3, #0

		frame1[13] = 0x00;
		frame1[14] = 0x08;
		frame1[15] = 0x60;

		HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800457a:	4c10      	ldr	r4, [pc, #64]	; (80045bc <enableGNZDAString+0x58>)
		frame1[5] = 0x00;
 800457c:	714b      	strb	r3, [r1, #5]
		frame1[4] = 0x08;
 800457e:	2208      	movs	r2, #8
		frame1[3] = 0x01;
 8004580:	2001      	movs	r0, #1
		frame1[8] = 0x00;
 8004582:	720b      	strb	r3, [r1, #8]
		frame1[10] = 0x00;
 8004584:	728b      	strb	r3, [r1, #10]
		frame1[11] = 0x00;
 8004586:	72cb      	strb	r3, [r1, #11]
		frame1[12] = 0x00;
 8004588:	730b      	strb	r3, [r1, #12]
		frame1[13] = 0x00;
 800458a:	734b      	strb	r3, [r1, #13]
		frame1[15] = 0x60;
 800458c:	2360      	movs	r3, #96	; 0x60
		frame1[3] = 0x01;
 800458e:	70c8      	strb	r0, [r1, #3]
		frame1[4] = 0x08;
 8004590:	710a      	strb	r2, [r1, #4]
		frame1[7] = 0x08;
 8004592:	71ca      	strb	r2, [r1, #7]
		frame1[9] = 0x01;
 8004594:	7248      	strb	r0, [r1, #9]
		frame1[14] = 0x08;
 8004596:	738a      	strb	r2, [r1, #14]
		frame1[15] = 0x60;
 8004598:	73cb      	strb	r3, [r1, #15]
		HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800459a:	2210      	movs	r2, #16
 800459c:	f241 3388 	movw	r3, #5000	; 0x1388
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7fd ff9d 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80045a6:	4620      	mov	r0, r4
 80045a8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80045ac:	2246      	movs	r2, #70	; 0x46
 80045ae:	4904      	ldr	r1, [pc, #16]	; (80045c0 <enableGNZDAString+0x5c>)



}
 80045b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80045b4:	f7fd bff1 	b.w	800259a <HAL_UART_Receive>
 80045b8:	2000023d 	.word	0x2000023d
 80045bc:	2000130c 	.word	0x2000130c
 80045c0:	2000015c 	.word	0x2000015c

080045c4 <diableAllString>:

}



void diableAllString(){
 80045c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/*----------- Disable GLL string-------------------*/
	frame1[0] = 0xB5;
 80045c8:	4c80      	ldr	r4, [pc, #512]	; (80047cc <diableAllString+0x208>)

	frame1[13] = 0x00;
	frame1[14] = 0x00;
	frame1[15] = 0x2A;

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80045ca:	4e81      	ldr	r6, [pc, #516]	; (80047d0 <diableAllString+0x20c>)
	frame1[2] = 0x06;
 80045cc:	f04f 0306 	mov.w	r3, #6
 80045d0:	70a3      	strb	r3, [r4, #2]
	frame1[4] = 0x08;
 80045d2:	f04f 0308 	mov.w	r3, #8
 80045d6:	7123      	strb	r3, [r4, #4]
	frame1[15] = 0x2A;
 80045d8:	232a      	movs	r3, #42	; 0x2a
	frame1[5] = 0x00;
 80045da:	2500      	movs	r5, #0
	frame1[3] = 0x01;
 80045dc:	2701      	movs	r7, #1
	frame1[0] = 0xB5;
 80045de:	f04f 0ab5 	mov.w	sl, #181	; 0xb5
	frame1[1] = 0x62;
 80045e2:	f04f 0962 	mov.w	r9, #98	; 0x62
	frame1[6] = 0xF0;
 80045e6:	f04f 08f0 	mov.w	r8, #240	; 0xf0
	frame1[15] = 0x2A;
 80045ea:	73e3      	strb	r3, [r4, #15]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80045ec:	4621      	mov	r1, r4
 80045ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80045f2:	2210      	movs	r2, #16
 80045f4:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 80045f6:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80045fa:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80045fe:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 8004600:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 8004602:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[7] = 0x01;
 8004606:	71e7      	strb	r7, [r4, #7]
	frame1[8] = 0x00;
 8004608:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 800460a:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 800460c:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 800460e:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004610:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 8004612:	7365      	strb	r5, [r4, #13]
	frame1[14] = 0x00;
 8004614:	73a5      	strb	r5, [r4, #14]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004616:	f7fd ff63 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 800461a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800461e:	2246      	movs	r2, #70	; 0x46
 8004620:	496c      	ldr	r1, [pc, #432]	; (80047d4 <diableAllString+0x210>)
 8004622:	4630      	mov	r0, r6
 8004624:	f7fd ffb9 	bl	800259a <HAL_UART_Receive>

	/*----------- Disable GSV string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 8004628:	f04f 0306 	mov.w	r3, #6
 800462c:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 800462e:	f04f 0308 	mov.w	r3, #8
 8004632:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x03;
 8004634:	f04f 0303 	mov.w	r3, #3
 8004638:	71e3      	strb	r3, [r4, #7]
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x02;
	frame1[15] = 0x38;
 800463a:	2338      	movs	r3, #56	; 0x38
	frame1[14] = 0x02;
 800463c:	f04f 0b02 	mov.w	fp, #2
	frame1[15] = 0x38;
 8004640:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004642:	4621      	mov	r1, r4
 8004644:	f241 3388 	movw	r3, #5000	; 0x1388
 8004648:	2210      	movs	r2, #16
 800464a:	4630      	mov	r0, r6
	frame1[14] = 0x02;
 800464c:	f884 b00e 	strb.w	fp, [r4, #14]
	frame1[0] = 0xB5;
 8004650:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 8004654:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 8004658:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 800465a:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 800465c:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 8004660:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 8004662:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 8004664:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 8004666:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004668:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 800466a:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800466c:	f7fd ff38 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004670:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004674:	2246      	movs	r2, #70	; 0x46
 8004676:	4957      	ldr	r1, [pc, #348]	; (80047d4 <diableAllString+0x210>)
 8004678:	4630      	mov	r0, r6
 800467a:	f7fd ff8e 	bl	800259a <HAL_UART_Receive>

	/*----------- Disable GSA string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 800467e:	f04f 0306 	mov.w	r3, #6
 8004682:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 8004684:	f04f 0308 	mov.w	r3, #8
 8004688:	7123      	strb	r3, [r4, #4]
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x01;
	frame1[15] = 0x31;
 800468a:	2331      	movs	r3, #49	; 0x31
 800468c:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800468e:	4621      	mov	r1, r4
 8004690:	f241 3388 	movw	r3, #5000	; 0x1388
 8004694:	2210      	movs	r2, #16
 8004696:	4630      	mov	r0, r6
	frame1[7] = 0x02;
 8004698:	f884 b007 	strb.w	fp, [r4, #7]
	frame1[0] = 0xB5;
 800469c:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80046a0:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80046a4:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 80046a6:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80046a8:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 80046ac:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80046ae:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80046b0:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80046b2:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 80046b4:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 80046b6:	7365      	strb	r5, [r4, #13]
	frame1[14] = 0x01;
 80046b8:	73a7      	strb	r7, [r4, #14]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80046ba:	f7fd ff11 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80046be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80046c2:	2246      	movs	r2, #70	; 0x46
 80046c4:	4943      	ldr	r1, [pc, #268]	; (80047d4 <diableAllString+0x210>)
 80046c6:	4630      	mov	r0, r6
 80046c8:	f7fd ff67 	bl	800259a <HAL_UART_Receive>

	/*----------- Disable VTG string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 80046cc:	f04f 0306 	mov.w	r3, #6
 80046d0:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 80046d2:	f04f 0308 	mov.w	r3, #8
 80046d6:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x05;
 80046d8:	2305      	movs	r3, #5
 80046da:	71e3      	strb	r3, [r4, #7]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x04;
 80046dc:	f04f 0304 	mov.w	r3, #4
	frame1[15] = 0x46;
 80046e0:	f04f 0b46 	mov.w	fp, #70	; 0x46
	frame1[14] = 0x04;
 80046e4:	73a3      	strb	r3, [r4, #14]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80046e6:	4621      	mov	r1, r4
 80046e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ec:	2210      	movs	r2, #16
 80046ee:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 80046f0:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80046f4:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80046f8:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 80046fa:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80046fc:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 8004700:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 8004702:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 8004704:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 8004706:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004708:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 800470a:	7365      	strb	r5, [r4, #13]
	frame1[15] = 0x46;
 800470c:	f884 b00f 	strb.w	fp, [r4, #15]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004710:	f7fd fee6 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004714:	465a      	mov	r2, fp
 8004716:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800471a:	492e      	ldr	r1, [pc, #184]	; (80047d4 <diableAllString+0x210>)
 800471c:	4630      	mov	r0, r6
 800471e:	f7fd ff3c 	bl	800259a <HAL_UART_Receive>

	/*----------- Disable RMC string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 8004722:	f04f 0306 	mov.w	r3, #6
 8004726:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 8004728:	f04f 0308 	mov.w	r3, #8
 800472c:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x04;
 800472e:	f04f 0304 	mov.w	r3, #4
 8004732:	71e3      	strb	r3, [r4, #7]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x03;
 8004734:	f04f 0303 	mov.w	r3, #3
 8004738:	73a3      	strb	r3, [r4, #14]
	frame1[15] = 0x3F;
 800473a:	233f      	movs	r3, #63	; 0x3f
 800473c:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800473e:	4621      	mov	r1, r4
 8004740:	f241 3388 	movw	r3, #5000	; 0x1388
 8004744:	2210      	movs	r2, #16
 8004746:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 8004748:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 800474c:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 8004750:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 8004752:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 8004754:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 8004758:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 800475a:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 800475c:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 800475e:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004760:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 8004762:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004764:	f7fd febc 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004768:	465a      	mov	r2, fp
 800476a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800476e:	4919      	ldr	r1, [pc, #100]	; (80047d4 <diableAllString+0x210>)
 8004770:	4630      	mov	r0, r6
 8004772:	f7fd ff12 	bl	800259a <HAL_UART_Receive>

	/*----------- Disable GGA string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 8004776:	f04f 0306 	mov.w	r3, #6
 800477a:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 800477c:	f04f 0308 	mov.w	r3, #8
 8004780:	7123      	strb	r3, [r4, #4]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0xFF;
 8004782:	23ff      	movs	r3, #255	; 0xff
 8004784:	73a3      	strb	r3, [r4, #14]
	frame1[15] = 0x23;
 8004786:	2323      	movs	r3, #35	; 0x23
 8004788:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800478a:	4621      	mov	r1, r4
 800478c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004790:	2210      	movs	r2, #16
 8004792:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 8004794:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 8004798:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 800479c:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 800479e:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80047a0:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[7] = 0x00;
 80047a4:	71e5      	strb	r5, [r4, #7]
	frame1[8] = 0x00;
 80047a6:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80047a8:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80047aa:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80047ac:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 80047ae:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 80047b0:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80047b2:	f7fd fe95 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80047b6:	4907      	ldr	r1, [pc, #28]	; (80047d4 <diableAllString+0x210>)
 80047b8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80047bc:	465a      	mov	r2, fp
 80047be:	4630      	mov	r0, r6



}
 80047c0:	b001      	add	sp, #4
 80047c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80047c6:	f7fd bee8 	b.w	800259a <HAL_UART_Receive>
 80047ca:	bf00      	nop
 80047cc:	2000023d 	.word	0x2000023d
 80047d0:	2000130c 	.word	0x2000130c
 80047d4:	2000015c 	.word	0x2000015c

080047d8 <SDcardReadSeek>:
	fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE |  FA_READ);
	f_lseek(&fil, bytes);

}

void SDcardReadSeek(char fileName[],int bytesToRead,int bytes){
 80047d8:	b570      	push	{r4, r5, r6, lr}

//	                  fres= f_mount(&FatFs, SDPath, 1);

	                  fres = f_open(&fil, fileName, FA_READ);
 80047da:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <SDcardReadSeek+0x38>)
void SDcardReadSeek(char fileName[],int bytesToRead,int bytes){
 80047dc:	460d      	mov	r5, r1
 80047de:	4616      	mov	r6, r2
	                  fres = f_open(&fil, fileName, FA_READ);
 80047e0:	4601      	mov	r1, r0
 80047e2:	2201      	movs	r2, #1
 80047e4:	4620      	mov	r0, r4
 80047e6:	f7ff fa2b 	bl	8003c40 <f_open>
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <SDcardReadSeek+0x3c>)

	                  f_lseek(&fil, bytes);
 80047ec:	4631      	mov	r1, r6
	                  fres = f_open(&fil, fileName, FA_READ);
 80047ee:	7018      	strb	r0, [r3, #0]
	                  f_lseek(&fil, bytes);
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7ff fd02 	bl	80041fa <f_lseek>

	         	      rres = f_gets((TCHAR*)readBytes, bytesToRead, &fil);
 80047f6:	4622      	mov	r2, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	4807      	ldr	r0, [pc, #28]	; (8004818 <SDcardReadSeek+0x40>)
 80047fc:	f7ff fe6c 	bl	80044d8 <f_gets>
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <SDcardReadSeek+0x44>)
 8004802:	6018      	str	r0, [r3, #0]

	         	      f_close(&fil);
 8004804:	4620      	mov	r0, r4

}
 8004806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	         	      f_close(&fil);
 800480a:	f7ff bce5 	b.w	80041d8 <f_close>
 800480e:	bf00      	nop
 8004810:	2000068c 	.word	0x2000068c
 8004814:	20000688 	.word	0x20000688
 8004818:	200002f4 	.word	0x200002f4
 800481c:	20000684 	.word	0x20000684

08004820 <SDcardWriteSeek>:




void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


//	                   fres= f_mount(&FatFs, SDPath, 1);

	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004824:	4c0d      	ldr	r4, [pc, #52]	; (800485c <SDcardWriteSeek+0x3c>)
 8004826:	4d0e      	ldr	r5, [pc, #56]	; (8004860 <SDcardWriteSeek+0x40>)
void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004828:	460f      	mov	r7, r1
 800482a:	4616      	mov	r6, r2
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 800482c:	4601      	mov	r1, r0
 800482e:	2232      	movs	r2, #50	; 0x32
 8004830:	4620      	mov	r0, r4
void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004832:	4698      	mov	r8, r3
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004834:	f7ff fa04 	bl	8003c40 <f_open>

	         	      f_lseek(&fil, bytes);
 8004838:	4641      	mov	r1, r8
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 800483a:	7028      	strb	r0, [r5, #0]
	         	      f_lseek(&fil, bytes);
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff fcdc 	bl	80041fa <f_lseek>

	         	       fres = f_write(&fil, buffer, bytesToWrite, 0);
 8004842:	463a      	mov	r2, r7
 8004844:	4631      	mov	r1, r6
 8004846:	4620      	mov	r0, r4
 8004848:	2300      	movs	r3, #0
 800484a:	f7ff fbb8 	bl	8003fbe <f_write>
 800484e:	7028      	strb	r0, [r5, #0]

	         	       f_close(&fil);
 8004850:	4620      	mov	r0, r4


}
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	         	       f_close(&fil);
 8004856:	f7ff bcbf 	b.w	80041d8 <f_close>
 800485a:	bf00      	nop
 800485c:	2000068c 	.word	0x2000068c
 8004860:	20000688 	.word	0x20000688

08004864 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004864:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8004866:	2001      	movs	r0, #1
 8004868:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800486c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004870:	4283      	cmp	r3, r0
 8004872:	d102      	bne.n	800487a <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <BSP_SD_Init+0x1c>)
 8004876:	f7fd fc75 	bl	8002164 <HAL_SD_Init>
}
 800487a:	b003      	add	sp, #12
 800487c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004880:	200011a0 	.word	0x200011a0

08004884 <BSP_SD_ReadBlocks>:
{
 8004884:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	460a      	mov	r2, r1
 800488c:	4601      	mov	r1, r0
 800488e:	4804      	ldr	r0, [pc, #16]	; (80048a0 <BSP_SD_ReadBlocks+0x1c>)
 8004890:	f7fd f900 	bl	8001a94 <HAL_SD_ReadBlocks>
}
 8004894:	3000      	adds	r0, #0
 8004896:	bf18      	it	ne
 8004898:	2001      	movne	r0, #1
 800489a:	b003      	add	sp, #12
 800489c:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a0:	200011a0 	.word	0x200011a0

080048a4 <BSP_SD_WriteBlocks>:
{
 80048a4:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	460a      	mov	r2, r1
 80048ac:	4601      	mov	r1, r0
 80048ae:	4804      	ldr	r0, [pc, #16]	; (80048c0 <BSP_SD_WriteBlocks+0x1c>)
 80048b0:	f7fd f9cf 	bl	8001c52 <HAL_SD_WriteBlocks>
}
 80048b4:	3000      	adds	r0, #0
 80048b6:	bf18      	it	ne
 80048b8:	2001      	movne	r0, #1
 80048ba:	b003      	add	sp, #12
 80048bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c0:	200011a0 	.word	0x200011a0

080048c4 <BSP_SD_GetCardState>:
{
 80048c4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80048c6:	4803      	ldr	r0, [pc, #12]	; (80048d4 <BSP_SD_GetCardState+0x10>)
 80048c8:	f7fd fc78 	bl	80021bc <HAL_SD_GetCardState>
}
 80048cc:	3804      	subs	r0, #4
 80048ce:	bf18      	it	ne
 80048d0:	2001      	movne	r0, #1
 80048d2:	bd08      	pop	{r3, pc}
 80048d4:	200011a0 	.word	0x200011a0

080048d8 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80048d8:	4601      	mov	r1, r0
 80048da:	4801      	ldr	r0, [pc, #4]	; (80048e0 <BSP_SD_GetCardInfo+0x8>)
 80048dc:	f7fd bc5c 	b.w	8002198 <HAL_SD_GetCardInfo>
 80048e0:	200011a0 	.word	0x200011a0

080048e4 <EEPROM_WriteByte>:

unsigned char TmpData;
static unsigned int i;

void EEPROM_WriteByte(unsigned int Addr, unsigned char Data)
{
 80048e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80048e6:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&Data,1,500);
 80048e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
{
 80048ec:	f803 1d01 	strb.w	r1, [r3, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&Data,1,500);
 80048f0:	9202      	str	r2, [sp, #8]
 80048f2:	2201      	movs	r2, #1
 80048f4:	9201      	str	r2, [sp, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	b282      	uxth	r2, r0
 80048fa:	2310      	movs	r3, #16
 80048fc:	21a0      	movs	r1, #160	; 0xa0
 80048fe:	4804      	ldr	r0, [pc, #16]	; (8004910 <EEPROM_WriteByte+0x2c>)
 8004900:	f7fc fa7e 	bl	8000e00 <HAL_I2C_Mem_Write>
	HAL_Delay(8);
 8004904:	2008      	movs	r0, #8
 8004906:	f7fb fe5d 	bl	80005c4 <HAL_Delay>
}
 800490a:	b007      	add	sp, #28
 800490c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004910:	20000e50 	.word	0x20000e50

08004914 <EEPROM_ReadByte>:

unsigned char EEPROM_ReadByte(unsigned int Addr)
{
 8004914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&TmpData,1,500);
 8004916:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	4c06      	ldr	r4, [pc, #24]	; (8004938 <EEPROM_ReadByte+0x24>)
 800491e:	9400      	str	r4, [sp, #0]
 8004920:	2301      	movs	r3, #1
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	b282      	uxth	r2, r0
 8004926:	2310      	movs	r3, #16
 8004928:	21a0      	movs	r1, #160	; 0xa0
 800492a:	4804      	ldr	r0, [pc, #16]	; (800493c <EEPROM_ReadByte+0x28>)
 800492c:	f7fc faf8 	bl	8000f20 <HAL_I2C_Mem_Read>

	return TmpData;
}
 8004930:	7820      	ldrb	r0, [r4, #0]
 8004932:	b004      	add	sp, #16
 8004934:	bd10      	pop	{r4, pc}
 8004936:	bf00      	nop
 8004938:	200008bc 	.word	0x200008bc
 800493c:	20000e50 	.word	0x20000e50

08004940 <EEPROM_WriteArray>:

void EEPROM_WriteArray(unsigned char *Array, unsigned int len,unsigned int StartAddr)
{
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<len;i++)
 8004942:	4c09      	ldr	r4, [pc, #36]	; (8004968 <EEPROM_WriteArray+0x28>)
{
 8004944:	4605      	mov	r5, r0
 8004946:	460e      	mov	r6, r1
 8004948:	4617      	mov	r7, r2
	for(i=0;i<len;i++)
 800494a:	2300      	movs	r3, #0
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	42b0      	cmp	r0, r6
 8004952:	d300      	bcc.n	8004956 <EEPROM_WriteArray+0x16>
		EEPROM_WriteByte(StartAddr+i,*Array);
		Array++;
	}


}
 8004954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_WriteByte(StartAddr+i,*Array);
 8004956:	f815 1b01 	ldrb.w	r1, [r5], #1
 800495a:	4438      	add	r0, r7
 800495c:	f7ff ffc2 	bl	80048e4 <EEPROM_WriteByte>
	for(i=0;i<len;i++)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	e7f2      	b.n	800494c <EEPROM_WriteArray+0xc>
 8004966:	bf00      	nop
 8004968:	20000074 	.word	0x20000074

0800496c <EEPROM_ReadArray>:

void EEPROM_ReadArray(unsigned char *Array,unsigned int len,unsigned int StartAddr)
{
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<len;i++)
 800496e:	4c09      	ldr	r4, [pc, #36]	; (8004994 <EEPROM_ReadArray+0x28>)
{
 8004970:	4605      	mov	r5, r0
 8004972:	460e      	mov	r6, r1
 8004974:	4617      	mov	r7, r2
	for(i=0;i<len;i++)
 8004976:	2300      	movs	r3, #0
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	42b0      	cmp	r0, r6
 800497e:	d300      	bcc.n	8004982 <EEPROM_ReadArray+0x16>
	{
		*Array  = EEPROM_ReadByte(StartAddr+i);
		Array++;
	}
}
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Array  = EEPROM_ReadByte(StartAddr+i);
 8004982:	4438      	add	r0, r7
 8004984:	f7ff ffc6 	bl	8004914 <EEPROM_ReadByte>
	for(i=0;i<len;i++)
 8004988:	6823      	ldr	r3, [r4, #0]
		*Array  = EEPROM_ReadByte(StartAddr+i);
 800498a:	f805 0b01 	strb.w	r0, [r5], #1
	for(i=0;i<len;i++)
 800498e:	3301      	adds	r3, #1
 8004990:	e7f2      	b.n	8004978 <EEPROM_ReadArray+0xc>
 8004992:	bf00      	nop
 8004994:	20000074 	.word	0x20000074

08004998 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004998:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800499a:	4903      	ldr	r1, [pc, #12]	; (80049a8 <MX_FATFS_Init+0x10>)
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <MX_FATFS_Init+0x14>)
 800499e:	f7ff fddd 	bl	800455c <FATFS_LinkDriver>
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <MX_FATFS_Init+0x18>)
 80049a4:	7018      	strb	r0, [r3, #0]
 80049a6:	bd08      	pop	{r3, pc}
 80049a8:	200008c1 	.word	0x200008c1
 80049ac:	0800954c 	.word	0x0800954c
 80049b0:	200008c0 	.word	0x200008c0

080049b4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80049b4:	2000      	movs	r0, #0
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_OREFLAG (huart);
 80049ba:	2300      	movs	r3, #0
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	6803      	ldr	r3, [r0, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	9201      	str	r2, [sp, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	9b01      	ldr	r3, [sp, #4]

}
 80049ca:	b002      	add	sp, #8
 80049cc:	4770      	bx	lr
	...

080049d0 <transferRecValuesToData>:
//	   cntVal=i;



}
void transferRecValuesToData(int cnt){
 80049d0:	b510      	push	{r4, lr}
	//   counter=cnt-2;
	   cnt=cnt+1;
	 //  while (!(RecMsg1[i] == 0x7D))
		for(int i=0;i<cnt;i++)
	   {
		   Data[i]=RecMsg4[i];
 80049d2:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <transferRecValuesToData+0x18>)
 80049d4:	4905      	ldr	r1, [pc, #20]	; (80049ec <transferRecValuesToData+0x1c>)
		for(int i=0;i<cnt;i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	4283      	cmp	r3, r0
 80049da:	dd00      	ble.n	80049de <transferRecValuesToData+0xe>
////	   Data[i]=0x7D;
//	   cntVal=i;



}
 80049dc:	bd10      	pop	{r4, pc}
		   Data[i]=RecMsg4[i];
 80049de:	5c5c      	ldrb	r4, [r3, r1]
 80049e0:	549c      	strb	r4, [r3, r2]
		for(int i=0;i<cnt;i++)
 80049e2:	3301      	adds	r3, #1
 80049e4:	e7f8      	b.n	80049d8 <transferRecValuesToData+0x8>
 80049e6:	bf00      	nop
 80049e8:	20003758 	.word	0x20003758
 80049ec:	200053d4 	.word	0x200053d4

080049f0 <clearingRecBuffer>:

}

void clearingRecBuffer()
{
int x=0;
 80049f0:	2300      	movs	r3, #0
for(;x<160;x++)
{
RecMsg2[x]=0x00;
 80049f2:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <clearingRecBuffer+0x10>)
 80049f4:	4619      	mov	r1, r3
 80049f6:	5499      	strb	r1, [r3, r2]
for(;x<160;x++)
 80049f8:	3301      	adds	r3, #1
 80049fa:	2ba0      	cmp	r3, #160	; 0xa0
 80049fc:	d1fb      	bne.n	80049f6 <clearingRecBuffer+0x6>

}

}
 80049fe:	4770      	bx	lr
 8004a00:	200054ce 	.word	0x200054ce

08004a04 <clearingDisp1Buffer>:

}

void clearingDisp1Buffer()
{
int x=0;
 8004a04:	2300      	movs	r3, #0
for(;x<40;x++)
{
Disp1[x]=0x00;
 8004a06:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <clearingDisp1Buffer+0x10>)
 8004a08:	4619      	mov	r1, r3
 8004a0a:	54d1      	strb	r1, [r2, r3]
for(;x<40;x++)
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	2b28      	cmp	r3, #40	; 0x28
 8004a10:	d1fb      	bne.n	8004a0a <clearingDisp1Buffer+0x6>

}

}
 8004a12:	4770      	bx	lr
 8004a14:	20000fa9 	.word	0x20000fa9

08004a18 <clearingFrameBuffer>:

}

void clearingFrameBuffer()
{
int x=0;
 8004a18:	2300      	movs	r3, #0
for(;x<100;x++)
{
frame[x]=0x00;
 8004a1a:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <clearingFrameBuffer+0x10>)
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	5499      	strb	r1, [r3, r2]
for(;x<100;x++)
 8004a20:	3301      	adds	r3, #1
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d1fb      	bne.n	8004a1e <clearingFrameBuffer+0x6>

}

}
 8004a26:	4770      	bx	lr
 8004a28:	20003ae1 	.word	0x20003ae1

08004a2c <function6_A>:
 {
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 	TimingDelay4=6;
 8004a2e:	4c43      	ldr	r4, [pc, #268]	; (8004b3c <function6_A+0x110>)
 8004a30:	2306      	movs	r3, #6
 8004a32:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8004a34:	f000 face 	bl	8004fd4 <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	2a01      	cmp	r2, #1
 8004a3c:	d1fc      	bne.n	8004a38 <function6_A+0xc>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a42:	483f      	ldr	r0, [pc, #252]	; (8004b40 <function6_A+0x114>)
 8004a44:	f7fb ff5c 	bl	8000900 <HAL_GPIO_WritePin>
	            TimingDelay4=12;
 8004a48:	230c      	movs	r3, #12
 8004a4a:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8004a4c:	f000 fac2 	bl	8004fd4 <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d1fc      	bne.n	8004a50 <function6_A+0x24>
if(noOfSides==3){
 8004a56:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <function6_A+0x118>)
 8004a58:	483b      	ldr	r0, [pc, #236]	; (8004b48 <function6_A+0x11c>)
 8004a5a:	7812      	ldrb	r2, [r2, #0]
	 frame[0] = 1;//Disp[0];//side1
 8004a5c:	4c3b      	ldr	r4, [pc, #236]	; (8004b4c <function6_A+0x120>)
if(noOfSides==3){
 8004a5e:	2a03      	cmp	r2, #3
	Disp[3]=0x01;
 8004a60:	bf04      	itt	eq
 8004a62:	70c3      	strbeq	r3, [r0, #3]
	Disp[9]=0x01;
 8004a64:	7243      	strbeq	r3, [r0, #9]
	 clearingFrameBuffer();
 8004a66:	f7ff ffd7 	bl	8004a18 <clearingFrameBuffer>
	 frame[5] = Disp[4];//side13
 8004a6a:	7905      	ldrb	r5, [r0, #4]
	 frame[6] = Disp[5];//side24
 8004a6c:	7941      	ldrb	r1, [r0, #5]
	 frame[10] =slaveNo;//slaveNo
 8004a6e:	4838      	ldr	r0, [pc, #224]	; (8004b50 <function6_A+0x124>)
 8004a70:	7806      	ldrb	r6, [r0, #0]
	 	      Disp1[0]=frame[0];
 8004a72:	4838      	ldr	r0, [pc, #224]	; (8004b54 <function6_A+0x128>)
	 frame[10] =slaveNo;//slaveNo
 8004a74:	72a6      	strb	r6, [r4, #10]
	 frame[0] = 1;//Disp[0];//side1
 8004a76:	2301      	movs	r3, #1
	 frame[2] = 3;//Disp[2];//side3
 8004a78:	2203      	movs	r2, #3
	 frame[1] = 2;//Disp[1];//side2
 8004a7a:	2702      	movs	r7, #2
	 frame[5] = Disp[4];//side13
 8004a7c:	b2ed      	uxtb	r5, r5
	 frame[6] = Disp[5];//side24
 8004a7e:	b2c9      	uxtb	r1, r1
	 	      Disp1[0]=frame[0];
 8004a80:	7003      	strb	r3, [r0, #0]
	 frame[6] = Disp[5];//side24
 8004a82:	71a1      	strb	r1, [r4, #6]
	 	     Disp1[1]=frame[1];
 8004a84:	7047      	strb	r7, [r0, #1]
	 	    Disp1[2]=frame[2];
 8004a86:	7082      	strb	r2, [r0, #2]
	 	   Disp1[3]=frame[3];
 8004a88:	70c3      	strb	r3, [r0, #3]
	 	  Disp1[4]=frame[4];
 8004a8a:	7103      	strb	r3, [r0, #4]
	 	 Disp1[5]=frame[5];
 8004a8c:	7145      	strb	r5, [r0, #5]
	 	Disp1[6]=frame[6];
 8004a8e:	7181      	strb	r1, [r0, #6]
		byteToIntegerVal(&Disp1[0],0);
 8004a90:	2100      	movs	r1, #0
	 frame[0] = 1;//Disp[0];//side1
 8004a92:	7023      	strb	r3, [r4, #0]
	 frame[3] = 1;//Disp[3];//side4
 8004a94:	70e3      	strb	r3, [r4, #3]
	 frame[4] = 1;//Disp[4];//side5
 8004a96:	7123      	strb	r3, [r4, #4]
	 frame[7] = 1;//Disp[7];//side5
 8004a98:	71e3      	strb	r3, [r4, #7]
	 frame[9] = 1;//Disp[9];//GPIO
 8004a9a:	7263      	strb	r3, [r4, #9]
	 frame[11] = 1;//Disp[11];//GreenLeft
 8004a9c:	72e3      	strb	r3, [r4, #11]
	 frame[12] = 1;//Disp[12];
 8004a9e:	7323      	strb	r3, [r4, #12]
	 frame[13] = 1;//Disp[13];
 8004aa0:	7363      	strb	r3, [r4, #13]
	 frame[14] = 1;//Disp[14];
 8004aa2:	73a3      	strb	r3, [r4, #14]
	 frame[15] = 1;//Disp[15];
 8004aa4:	73e3      	strb	r3, [r4, #15]
	 frame[16] = 1;//Disp[16];
 8004aa6:	7423      	strb	r3, [r4, #16]
	 frame[17] = 1;//Disp[17];
 8004aa8:	7463      	strb	r3, [r4, #17]
	 frame[18] = 1;//Disp[18];
 8004aaa:	74a3      	strb	r3, [r4, #18]
	 frame[19] = 1;//Disp[19];
 8004aac:	74e3      	strb	r3, [r4, #19]
	 	Disp1[7]=frame[7];
 8004aae:	71c3      	strb	r3, [r0, #7]
	 frame[2] = 3;//Disp[2];//side3
 8004ab0:	70a2      	strb	r2, [r4, #2]
	 frame[8] = 3;//PWM
 8004ab2:	7222      	strb	r2, [r4, #8]
	 	Disp1[8]=frame[8];
 8004ab4:	7202      	strb	r2, [r0, #8]
	 frame[1] = 2;//Disp[1];//side2
 8004ab6:	7067      	strb	r7, [r4, #1]
	 frame[5] = Disp[4];//side13
 8004ab8:	7165      	strb	r5, [r4, #5]
	 	Disp1[9]=frame[9];
 8004aba:	7243      	strb	r3, [r0, #9]
	 	Disp1[10]= frame[10];
 8004abc:	7286      	strb	r6, [r0, #10]
	 	Disp1[11]= frame[11];
 8004abe:	72c3      	strb	r3, [r0, #11]
	 	Disp1[12]= frame[12];
 8004ac0:	7303      	strb	r3, [r0, #12]
	 	Disp1[13]= frame[13];
 8004ac2:	7343      	strb	r3, [r0, #13]
	 	Disp1[14]= frame[14];
 8004ac4:	7383      	strb	r3, [r0, #14]
	 	Disp1[15]= frame[15];
 8004ac6:	73c3      	strb	r3, [r0, #15]
	 	Disp1[16]=frame[16];
 8004ac8:	7403      	strb	r3, [r0, #16]
	 	Disp1[17]=frame[17];
 8004aca:	7443      	strb	r3, [r0, #17]
	 	Disp1[18]=frame[18];
 8004acc:	7483      	strb	r3, [r0, #18]
	 	Disp1[19]=frame[19];
 8004ace:	74c3      	strb	r3, [r0, #19]
		byteToIntegerVal(&Disp1[0],0);
 8004ad0:	f000 fb48 	bl	8005164 <byteToIntegerVal>
		 	       	CRCValue =	HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 19);
 8004ad4:	2213      	movs	r2, #19
 8004ad6:	4920      	ldr	r1, [pc, #128]	; (8004b58 <function6_A+0x12c>)
 8004ad8:	4820      	ldr	r0, [pc, #128]	; (8004b5c <function6_A+0x130>)
 8004ada:	f7fb fe03 	bl	80006e4 <HAL_CRC_Calculate>
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <function6_A+0x134>)
 8004ae0:	6018      	str	r0, [r3, #0]
		 	       	intToByte(CRCValue);
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f000 fb4e 	bl	8005184 <intToByte>
		           frame[20]=crcVal[3]; //CRC
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <function6_A+0x138>)
	 HAL_UART_Transmit (&huart2, (uint8_t*)frame,26,5000) ;
 8004aea:	481f      	ldr	r0, [pc, #124]	; (8004b68 <function6_A+0x13c>)
		           frame[20]=crcVal[3]; //CRC
 8004aec:	78da      	ldrb	r2, [r3, #3]
 8004aee:	7522      	strb	r2, [r4, #20]
		           frame[21]=crcVal[2]; //CRC
 8004af0:	789a      	ldrb	r2, [r3, #2]
 8004af2:	7562      	strb	r2, [r4, #21]
		           frame[22]=crcVal[1]; //CRC
 8004af4:	785a      	ldrb	r2, [r3, #1]
		           frame[23]=crcVal[0]; //CRC
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	75e3      	strb	r3, [r4, #23]
	 frame[24]=125 ;
 8004afa:	237d      	movs	r3, #125	; 0x7d
 8004afc:	7623      	strb	r3, [r4, #24]
	 frame[25]=125 ;
 8004afe:	7663      	strb	r3, [r4, #25]
	 frame[26]=0x0D ;
 8004b00:	230d      	movs	r3, #13
 8004b02:	76a3      	strb	r3, [r4, #26]
	 frame[27]=0x0A ;
 8004b04:	230a      	movs	r3, #10
		           frame[22]=crcVal[1]; //CRC
 8004b06:	75a2      	strb	r2, [r4, #22]
	 frame[27]=0x0A ;
 8004b08:	76e3      	strb	r3, [r4, #27]
	 HAL_UART_Transmit (&huart2, (uint8_t*)frame,26,5000) ;
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b10:	221a      	movs	r2, #26
 8004b12:	f7fd fce5 	bl	80024e0 <HAL_UART_Transmit>
	 HAL_UART_Transmit (&huart6, (uint8_t*)frame,26,5000) ;
 8004b16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	221a      	movs	r2, #26
 8004b1e:	4813      	ldr	r0, [pc, #76]	; (8004b6c <function6_A+0x140>)
 8004b20:	f7fd fcde 	bl	80024e0 <HAL_UART_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004b24:	2200      	movs	r2, #0
 8004b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b2a:	4805      	ldr	r0, [pc, #20]	; (8004b40 <function6_A+0x114>)
 8004b2c:	f7fb fee8 	bl	8000900 <HAL_GPIO_WritePin>
	 clearingFrameBuffer();
 8004b30:	f7ff ff72 	bl	8004a18 <clearingFrameBuffer>
}
 8004b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	 clearingDisp1Buffer();
 8004b38:	f7ff bf64 	b.w	8004a04 <clearingDisp1Buffer>
 8004b3c:	20001580 	.word	0x20001580
 8004b40:	40020800 	.word	0x40020800
 8004b44:	200000ed 	.word	0x200000ed
 8004b48:	200010bd 	.word	0x200010bd
 8004b4c:	20003ae1 	.word	0x20003ae1
 8004b50:	20000008 	.word	0x20000008
 8004b54:	20000fa9 	.word	0x20000fa9
 8004b58:	2000151c 	.word	0x2000151c
 8004b5c:	20000d28 	.word	0x20000d28
 8004b60:	20000078 	.word	0x20000078
 8004b64:	20003d98 	.word	0x20003d98
 8004b68:	20001584 	.word	0x20001584
 8004b6c:	2000130c 	.word	0x2000130c

08004b70 <clearingDataBuffer>:

void clearingDataBuffer()
{
int x=0;
 8004b70:	2300      	movs	r3, #0
for(;x<100;x++)
{
Data[x]=0x00;
 8004b72:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <clearingDataBuffer+0x10>)
 8004b74:	4619      	mov	r1, r3
 8004b76:	5499      	strb	r1, [r3, r2]
for(;x<100;x++)
 8004b78:	3301      	adds	r3, #1
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d1fb      	bne.n	8004b76 <clearingDataBuffer+0x6>

}

}
 8004b7e:	4770      	bx	lr
 8004b80:	20003758 	.word	0x20003758

08004b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b84:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b86:	2230      	movs	r2, #48	; 0x30
{
 8004b88:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	eb0d 0002 	add.w	r0, sp, r2
 8004b90:	f004 fc32 	bl	80093f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b94:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b96:	2214      	movs	r2, #20
 8004b98:	2100      	movs	r1, #0
 8004b9a:	a807      	add	r0, sp, #28
 8004b9c:	f004 fc2c 	bl	80093f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	a803      	add	r0, sp, #12
 8004ba6:	f004 fc27 	bl	80093f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <SystemClock_Config+0xb8>)
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004bb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004bb6:	6411      	str	r1, [r2, #64]	; 0x40
 8004bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004bbe:	9201      	str	r2, [sp, #4]
 8004bc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc2:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <SystemClock_Config+0xbc>)
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	6811      	ldr	r1, [r2, #0]
 8004bc8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bd0:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004bd6:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd8:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004bda:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004bdc:	2332      	movs	r3, #50	; 0x32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bde:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004be0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004be2:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004be4:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004be6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004be8:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004bea:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004bec:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004bf0:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf2:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004bf4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bf6:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bf8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004bfa:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bfc:	f7fc fa9c 	bl	8001138 <HAL_RCC_OscConfig>
 8004c00:	4601      	mov	r1, r0
 8004c02:	b100      	cbz	r0, 8004c06 <SystemClock_Config+0x82>
 8004c04:	e7fe      	b.n	8004c04 <SystemClock_Config+0x80>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c06:	230f      	movs	r3, #15
 8004c08:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004c0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c0e:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004c10:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004c12:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c18:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c1a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004c1c:	f7fc fc3c 	bl	8001498 <HAL_RCC_ClockConfig>
 8004c20:	b100      	cbz	r0, 8004c24 <SystemClock_Config+0xa0>
 8004c22:	e7fe      	b.n	8004c22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c24:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c28:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c2a:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c2c:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c2e:	f7fc fced 	bl	800160c <HAL_RCCEx_PeriphCLKConfig>
 8004c32:	b100      	cbz	r0, 8004c36 <SystemClock_Config+0xb2>
 8004c34:	e7fe      	b.n	8004c34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
  }
}
 8004c36:	b018      	add	sp, #96	; 0x60
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40007000 	.word	0x40007000

08004c44 <main>:
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8004c48:	f7fb fc6a 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8004c4c:	f7ff ff9a 	bl	8004b84 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	2214      	movs	r2, #20
 8004c52:	2100      	movs	r1, #0
 8004c54:	a807      	add	r0, sp, #28
 8004c56:	f004 fbcf 	bl	80093f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c5a:	2400      	movs	r4, #0
 8004c5c:	4b8e      	ldr	r3, [pc, #568]	; (8004e98 <main+0x254>)
 8004c5e:	9401      	str	r4, [sp, #4]
 8004c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004c62:	488e      	ldr	r0, [pc, #568]	; (8004e9c <main+0x258>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c64:	f042 0210 	orr.w	r2, r2, #16
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6c:	f002 0210 	and.w	r2, r2, #16
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c74:	9402      	str	r4, [sp, #8]
 8004c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c78:	f042 0204 	orr.w	r2, r2, #4
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c80:	f002 0204 	and.w	r2, r2, #4
 8004c84:	9202      	str	r2, [sp, #8]
 8004c86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c88:	9403      	str	r4, [sp, #12]
 8004c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004c98:	9203      	str	r2, [sp, #12]
 8004c9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9c:	9404      	str	r4, [sp, #16]
 8004c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca8:	f002 0201 	and.w	r2, r2, #1
 8004cac:	9204      	str	r2, [sp, #16]
 8004cae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb0:	9405      	str	r4, [sp, #20]
 8004cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb4:	f042 0202 	orr.w	r2, r2, #2
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbc:	f002 0202 	and.w	r2, r2, #2
 8004cc0:	9205      	str	r2, [sp, #20]
 8004cc2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cc4:	9406      	str	r4, [sp, #24]
 8004cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc8:	f042 0208 	orr.w	r2, r2, #8
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	211e      	movs	r1, #30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cda:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004cdc:	f7fb fe10 	bl	8000900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2, GPIO_PIN_RESET);
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	f242 010c 	movw	r1, #8204	; 0x200c
 8004ce6:	486e      	ldr	r0, [pc, #440]	; (8004ea0 <main+0x25c>)
 8004ce8:	f7fb fe0a 	bl	8000900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3||GPIO_PIN_1, GPIO_PIN_RESET);
 8004cec:	4622      	mov	r2, r4
 8004cee:	2101      	movs	r1, #1
 8004cf0:	486c      	ldr	r0, [pc, #432]	; (8004ea4 <main+0x260>)
 8004cf2:	f7fb fe05 	bl	8000900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	f248 0108 	movw	r1, #32776	; 0x8008
 8004cfc:	486a      	ldr	r0, [pc, #424]	; (8004ea8 <main+0x264>)
 8004cfe:	f7fb fdff 	bl	8000900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d02:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
 8004d04:	231e      	movs	r3, #30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d06:	a907      	add	r1, sp, #28
 8004d08:	4864      	ldr	r0, [pc, #400]	; (8004e9c <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
 8004d0a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d0c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d10:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d12:	f7fb fd0f 	bl	8000734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2;
 8004d16:	f242 030c 	movw	r3, #8204	; 0x200c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d1a:	a907      	add	r1, sp, #28
 8004d1c:	4860      	ldr	r0, [pc, #384]	; (8004ea0 <main+0x25c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2;
 8004d1e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d20:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d24:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d26:	f7fb fd05 	bl	8000734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8004d2a:	f44f 73b8 	mov.w	r3, #368	; 0x170
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d2e:	a907      	add	r1, sp, #28
 8004d30:	485d      	ldr	r0, [pc, #372]	; (8004ea8 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8004d32:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d34:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pins : PE7 PE8 PE9 PE10 
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;//GPIO_NOPULL;
 8004d38:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3a:	f7fb fcfb 	bl	8000734 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004d3e:	f647 73a0 	movw	r3, #32672	; 0x7fa0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d42:	a907      	add	r1, sp, #28
 8004d44:	4855      	ldr	r0, [pc, #340]	; (8004e9c <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004d46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d48:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;//GPIO_NOPULL;
 8004d4a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d4c:	f7fb fcf2 	bl	8000734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_1;//PB1 is for shut down
 8004d50:	f244 030a 	movw	r3, #16394	; 0x400a
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	a907      	add	r1, sp, #28
 8004d56:	4853      	ldr	r0, [pc, #332]	; (8004ea4 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_1;//PB1 is for shut down
 8004d58:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d5a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d60:	f7fb fce8 	bl	8000734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8004d64:	f248 0308 	movw	r3, #32776	; 0x8008
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d68:	a907      	add	r1, sp, #28
 8004d6a:	484f      	ldr	r0, [pc, #316]	; (8004ea8 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8004d6c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d6e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d72:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d74:	f7fb fcde 	bl	8000734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5; //for jump and extend
 8004d78:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	a907      	add	r1, sp, #28
 8004d7c:	4849      	ldr	r0, [pc, #292]	; (8004ea4 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5; //for jump and extend
 8004d7e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d80:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8004d82:	9509      	str	r5, [sp, #36]	; 0x24


  /*Configure GPIO pins : PE5 */
   GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d84:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d86:	f7fb fcd5 	bl	8000734 <HAL_GPIO_Init>
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
   GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d8a:	4844      	ldr	r0, [pc, #272]	; (8004e9c <main+0x258>)
   GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d8c:	9707      	str	r7, [sp, #28]
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d8e:	a907      	add	r1, sp, #28
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d90:	9408      	str	r4, [sp, #32]
   GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8004d92:	9509      	str	r5, [sp, #36]	; 0x24
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d94:	f7fb fcce 	bl	8000734 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8004d98:	4844      	ldr	r0, [pc, #272]	; (8004eac <main+0x268>)
 8004d9a:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <main+0x26c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004d9c:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004d9e:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8004da2:	237f      	movs	r3, #127	; 0x7f
 8004da4:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004da6:	23ff      	movs	r3, #255	; 0xff
 8004da8:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004daa:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004dac:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004dae:	f7fc fcf7 	bl	80017a0 <HAL_RTC_Init>
 8004db2:	b100      	cbz	r0, 8004db6 <main+0x172>
 8004db4:	e7fe      	b.n	8004db4 <main+0x170>
  huart3.Instance = USART3;
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <main+0x270>)
  huart3.Init.BaudRate = 38400;
 8004db8:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <main+0x274>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dba:	6098      	str	r0, [r3, #8]
  huart3.Init.BaudRate = 38400;
 8004dbc:	f44f 4816 	mov.w	r8, #38400	; 0x9600
 8004dc0:	e883 0104 	stmia.w	r3, {r2, r8}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dc4:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004dc6:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004dc8:	f04f 080c 	mov.w	r8, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dcc:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dce:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dd0:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004dd2:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dd6:	f7fd fb55 	bl	8002484 <HAL_UART_Init>
 8004dda:	b100      	cbz	r0, 8004dde <main+0x19a>
 8004ddc:	e7fe      	b.n	8004ddc <main+0x198>
  hcrc.Instance = CRC;
 8004dde:	4837      	ldr	r0, [pc, #220]	; (8004ebc <main+0x278>)
 8004de0:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <main+0x27c>)
 8004de2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004de4:	f7fb fc6c 	bl	80006c0 <HAL_CRC_Init>
 8004de8:	4604      	mov	r4, r0
 8004dea:	b100      	cbz	r0, 8004dee <main+0x1aa>
 8004dec:	e7fe      	b.n	8004dec <main+0x1a8>
  hsd.Instance = SDIO;
 8004dee:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <main+0x280>)
 8004df0:	4a35      	ldr	r2, [pc, #212]	; (8004ec8 <main+0x284>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004df2:	6098      	str	r0, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004df4:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockDiv = 3;
 8004df8:	2203      	movs	r2, #3
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004dfa:	60d8      	str	r0, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004dfc:	6118      	str	r0, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004dfe:	6158      	str	r0, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8004e00:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 8004e02:	f7ff fdc9 	bl	8004998 <MX_FATFS_Init>
  huart6.Instance = USART6;
 8004e06:	4831      	ldr	r0, [pc, #196]	; (8004ecc <main+0x288>)
  huart6.Init.BaudRate = 9600;
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <main+0x28c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004e0a:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 9600;
 8004e0c:	f44f 5c16 	mov.w	ip, #9600	; 0x2580
 8004e10:	e880 1008 	stmia.w	r0, {r3, ip}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004e14:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004e16:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004e18:	f8c0 8014 	str.w	r8, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e1c:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e1e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004e20:	f7fd fb30 	bl	8002484 <HAL_UART_Init>
 8004e24:	b100      	cbz	r0, 8004e28 <main+0x1e4>
 8004e26:	e7fe      	b.n	8004e26 <main+0x1e2>
  huart1.Instance = USART1;
 8004e28:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <main+0x290>)
  huart1.Init.BaudRate = 115200;
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <main+0x294>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e2c:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8004e2e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e32:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e34:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e36:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e38:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e3a:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8004e3c:	e883 4004 	stmia.w	r3, {r2, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e40:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e44:	f7fd fb1e 	bl	8002484 <HAL_UART_Init>
 8004e48:	b100      	cbz	r0, 8004e4c <main+0x208>
 8004e4a:	e7fe      	b.n	8004e4a <main+0x206>
  huart2.Instance = USART2;
 8004e4c:	4b23      	ldr	r3, [pc, #140]	; (8004edc <main+0x298>)
  huart2.Init.BaudRate = 19200;
 8004e4e:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <main+0x29c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e50:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 19200;
 8004e52:	f44f 4496 	mov.w	r4, #19200	; 0x4b00
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e56:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e58:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e5a:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e5c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e5e:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 19200;
 8004e60:	e883 0014 	stmia.w	r3, {r2, r4}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e64:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e68:	f7fd fb0c 	bl	8002484 <HAL_UART_Init>
 8004e6c:	b100      	cbz	r0, 8004e70 <main+0x22c>
 8004e6e:	e7fe      	b.n	8004e6e <main+0x22a>
  hi2c1.Instance = I2C1;
 8004e70:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 8004e72:	491d      	ldr	r1, [pc, #116]	; (8004ee8 <main+0x2a4>)
 8004e74:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <main+0x2a8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e76:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8004e78:	e883 0006 	stmia.w	r3, {r1, r2}
  hi2c1.Init.OwnAddress1 = 0;
 8004e7c:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e82:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e84:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e86:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e88:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e8a:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e8c:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e8e:	f7fb ff13 	bl	8000cb8 <HAL_I2C_Init>
 8004e92:	4604      	mov	r4, r0
 8004e94:	b360      	cbz	r0, 8004ef0 <main+0x2ac>
 8004e96:	e7fe      	b.n	8004e96 <main+0x252>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40020800 	.word	0x40020800
 8004ea4:	40020400 	.word	0x40020400
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	20001168 	.word	0x20001168
 8004eb0:	40002800 	.word	0x40002800
 8004eb4:	20000e10 	.word	0x20000e10
 8004eb8:	40004800 	.word	0x40004800
 8004ebc:	20000d28 	.word	0x20000d28
 8004ec0:	40023000 	.word	0x40023000
 8004ec4:	200011a0 	.word	0x200011a0
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	2000130c 	.word	0x2000130c
 8004ed0:	40011400 	.word	0x40011400
 8004ed4:	200010e8 	.word	0x200010e8
 8004ed8:	40011000 	.word	0x40011000
 8004edc:	20001584 	.word	0x20001584
 8004ee0:	40004400 	.word	0x40004400
 8004ee4:	20000e50 	.word	0x20000e50
 8004ee8:	40005400 	.word	0x40005400
 8004eec:	000186a0 	.word	0x000186a0
         		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	4822      	ldr	r0, [pc, #136]	; (8004f80 <main+0x33c>)
 8004ef6:	f7fb fd03 	bl	8000900 <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004efa:	462a      	mov	r2, r5
 8004efc:	2110      	movs	r1, #16
 8004efe:	4820      	ldr	r0, [pc, #128]	; (8004f80 <main+0x33c>)
 8004f00:	f7fb fcfe 	bl	8000900 <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f04:	4622      	mov	r2, r4
 8004f06:	2110      	movs	r1, #16
 8004f08:	481d      	ldr	r0, [pc, #116]	; (8004f80 <main+0x33c>)
 8004f0a:	f7fb fcf9 	bl	8000900 <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4639      	mov	r1, r7
 8004f12:	481b      	ldr	r0, [pc, #108]	; (8004f80 <main+0x33c>)
 8004f14:	f7fb fcf4 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004f18:	4622      	mov	r2, r4
 8004f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1e:	4819      	ldr	r0, [pc, #100]	; (8004f84 <main+0x340>)
 8004f20:	f7fb fcee 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8004f24:	4622      	mov	r2, r4
 8004f26:	4631      	mov	r1, r6
 8004f28:	4817      	ldr	r0, [pc, #92]	; (8004f88 <main+0x344>)
 8004f2a:	f7fb fce9 	bl	8000900 <HAL_GPIO_WritePin>
         	       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8004f2e:	4622      	mov	r2, r4
 8004f30:	2104      	movs	r1, #4
 8004f32:	4815      	ldr	r0, [pc, #84]	; (8004f88 <main+0x344>)
 8004f34:	f7fb fce4 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004f38:	4622      	mov	r2, r4
 8004f3a:	2108      	movs	r1, #8
 8004f3c:	4812      	ldr	r0, [pc, #72]	; (8004f88 <main+0x344>)
 8004f3e:	f7fb fcdf 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f42:	4622      	mov	r2, r4
 8004f44:	2110      	movs	r1, #16
 8004f46:	4810      	ldr	r0, [pc, #64]	; (8004f88 <main+0x344>)
 8004f48:	f7fb fcda 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	2104      	movs	r1, #4
 8004f50:	480d      	ldr	r0, [pc, #52]	; (8004f88 <main+0x344>)
 8004f52:	f7fb fcd5 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8004f56:	462a      	mov	r2, r5
 8004f58:	2108      	movs	r1, #8
 8004f5a:	480b      	ldr	r0, [pc, #44]	; (8004f88 <main+0x344>)
 8004f5c:	f7fb fcd0 	bl	8000900 <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8004f60:	462a      	mov	r2, r5
 8004f62:	2110      	movs	r1, #16
 8004f64:	4808      	ldr	r0, [pc, #32]	; (8004f88 <main+0x344>)
 8004f66:	f7fb fccb 	bl	8000900 <HAL_GPIO_WritePin>
         	       fres= f_mount(&FatFs, SDPath, 1);
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	4907      	ldr	r1, [pc, #28]	; (8004f8c <main+0x348>)
 8004f6e:	4808      	ldr	r0, [pc, #32]	; (8004f90 <main+0x34c>)
 8004f70:	f7fe fe32 	bl	8003bd8 <f_mount>
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <main+0x350>)
 8004f76:	7018      	strb	r0, [r3, #0]
	  init4();
 8004f78:	f003 fc6c 	bl	8008854 <init4>
 8004f7c:	e7fc      	b.n	8004f78 <main+0x334>
 8004f7e:	bf00      	nop
 8004f80:	40020c00 	.word	0x40020c00
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	200008c1 	.word	0x200008c1
 8004f90:	20000454 	.word	0x20000454
 8004f94:	20000688 	.word	0x20000688

08004f98 <TimingDelay_Decrement>:
}

/* USER CODE BEGIN 4 */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <TimingDelay_Decrement+0x10>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	b112      	cbz	r2, 8004fa4 <TimingDelay_Decrement+0xc>
  {
    TimingDelay--;
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000ec4 	.word	0x20000ec4

08004fac <TimingDelay_Decrement1>:
  }
}
void TimingDelay_Decrement1(void)
{
  if (TimingDelay1 != 0x00)
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <TimingDelay_Decrement1+0x10>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	b112      	cbz	r2, 8004fb8 <TimingDelay_Decrement1+0xc>
  {
    TimingDelay1--;
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	200015cc 	.word	0x200015cc

08004fc0 <TimingDelay_Decrement3>:
    TimingDelay2--;
  }
}
void TimingDelay_Decrement3(void)
{
  if (TimingDelay3 != 0x00)
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <TimingDelay_Decrement3+0x10>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	b112      	cbz	r2, 8004fcc <TimingDelay_Decrement3+0xc>
  {
    TimingDelay3--;
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000e08 	.word	0x20000e08

08004fd4 <TimingDelay_Decrement4>:
  }
}
void TimingDelay_Decrement4(void)
{
  if (TimingDelay4 != 0x00)
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <TimingDelay_Decrement4+0x10>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	b112      	cbz	r2, 8004fe0 <TimingDelay_Decrement4+0xc>
  {
    TimingDelay4--;
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20001580 	.word	0x20001580

08004fe8 <TimingDelay_Decrement5>:
  }
}
void TimingDelay_Decrement5(void)
{
  if (TimingDelay5 != 0x00)
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <TimingDelay_Decrement5+0x10>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	b112      	cbz	r2, 8004ff4 <TimingDelay_Decrement5+0xc>
  {
    TimingDelay5--;
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	3a01      	subs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20001198 	.word	0x20001198

08004ffc <clearframe>:

void  populatePrimaryHVSecondaryHV();


void clearframe() {
	int x = 0;
 8004ffc:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		frame[x] = 0x00;
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <clearframe+0x10>)
 8005000:	4619      	mov	r1, r3
 8005002:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005004:	3301      	adds	r3, #1
 8005006:	2ba0      	cmp	r3, #160	; 0xa0
 8005008:	d1fb      	bne.n	8005002 <clearframe+0x6>

	}
}
 800500a:	4770      	bx	lr
 800500c:	20003ae1 	.word	0x20003ae1

08005010 <clearReadBytes>:

void clearReadBytes() {
	int x = 0;
 8005010:	2300      	movs	r3, #0
	for (; x < 350; x++) {
		readBytes[x] = 0x00;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <clearReadBytes+0x14>)
 8005014:	4619      	mov	r1, r3
 8005016:	5499      	strb	r1, [r3, r2]
	for (; x < 350; x++) {
 8005018:	3301      	adds	r3, #1
 800501a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800501e:	d1fa      	bne.n	8005016 <clearReadBytes+0x6>

	}
}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	200002f4 	.word	0x200002f4

08005028 <clearBuffer>:
void clearBuffer() {
	int x = 0;
 8005028:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg2[x] = 0x00;
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <clearBuffer+0x10>)
 800502c:	4619      	mov	r1, r3
 800502e:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005030:	3301      	adds	r3, #1
 8005032:	2ba0      	cmp	r3, #160	; 0xa0
 8005034:	d1fb      	bne.n	800502e <clearBuffer+0x6>

	}
}
 8005036:	4770      	bx	lr
 8005038:	200054ce 	.word	0x200054ce

0800503c <clearDispBuffer>:

void clearDispBuffer() {
//	int x = 0;
//	for (; x < 40; x++) {
		Disp[0] = 0x00;
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <clearDispBuffer+0x10>)
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
		Disp[1] = 0x00;
 8005042:	705a      	strb	r2, [r3, #1]
		Disp[2] = 0x00;
 8005044:	709a      	strb	r2, [r3, #2]
		Disp[3] = 0x00;
 8005046:	70da      	strb	r2, [r3, #3]
		Disp[6] = 0x00;
 8005048:	719a      	strb	r2, [r3, #6]
 800504a:	4770      	bx	lr
 800504c:	200010bd 	.word	0x200010bd

08005050 <clearaRxBuffer>:

	}
}

void clearaRxBuffer() {
	int x = 0;
 8005050:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer[x] = 0x00;
 8005052:	4a03      	ldr	r2, [pc, #12]	; (8005060 <clearaRxBuffer+0x10>)
 8005054:	4619      	mov	r1, r3
 8005056:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005058:	3301      	adds	r3, #1
 800505a:	2ba0      	cmp	r3, #160	; 0xa0
 800505c:	d1fb      	bne.n	8005056 <clearaRxBuffer+0x6>

	}
}
 800505e:	4770      	bx	lr
 8005060:	2000134c 	.word	0x2000134c

08005064 <clearBuffer3>:
		aRxBuffer1[x] = 0x00;

	}
}
void clearBuffer3() {
	int x = 0;
 8005064:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg3[x] = 0x00;
 8005066:	4a03      	ldr	r2, [pc, #12]	; (8005074 <clearBuffer3+0x10>)
 8005068:	4619      	mov	r1, r3
 800506a:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 800506c:	3301      	adds	r3, #1
 800506e:	2ba0      	cmp	r3, #160	; 0xa0
 8005070:	d1fb      	bne.n	800506a <clearBuffer3+0x6>

	}
}
 8005072:	4770      	bx	lr
 8005074:	200056c2 	.word	0x200056c2

08005078 <clearaRxBuffer3>:

void clearaRxBuffer3() {
	int x = 0;
 8005078:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer3[x] = 0x00;
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <clearaRxBuffer3+0x10>)
 800507c:	4619      	mov	r1, r3
 800507e:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005080:	3301      	adds	r3, #1
 8005082:	2ba0      	cmp	r3, #160	; 0xa0
 8005084:	d1fb      	bne.n	800507e <clearaRxBuffer3+0x6>

	}
}
 8005086:	4770      	bx	lr
 8005088:	20000fdc 	.word	0x20000fdc

0800508c <clearBuffer4>:

void clearBuffer4() {
	int x = 0;
 800508c:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg4[x] = 0x00;
 800508e:	4a03      	ldr	r2, [pc, #12]	; (800509c <clearBuffer4+0x10>)
 8005090:	4619      	mov	r1, r3
 8005092:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005094:	3301      	adds	r3, #1
 8005096:	2ba0      	cmp	r3, #160	; 0xa0
 8005098:	d1fb      	bne.n	8005092 <clearBuffer4+0x6>

	}
}
 800509a:	4770      	bx	lr
 800509c:	200053d4 	.word	0x200053d4

080050a0 <clearaRxBuffer4>:

void clearaRxBuffer4() {
	int x = 0;
 80050a0:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer4[x] = 0x00;
 80050a2:	4a03      	ldr	r2, [pc, #12]	; (80050b0 <clearaRxBuffer4+0x10>)
 80050a4:	4619      	mov	r1, r3
 80050a6:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 80050a8:	3301      	adds	r3, #1
 80050aa:	2ba0      	cmp	r3, #160	; 0xa0
 80050ac:	d1fb      	bne.n	80050a6 <clearaRxBuffer4+0x6>

	}
}
 80050ae:	4770      	bx	lr
 80050b0:	20001438 	.word	0x20001438

080050b4 <clearPlanDetailsArrayBuffer>:
}



void clearPlanDetailsArrayBuffer() {
	int x = 0;
 80050b4:	2300      	movs	r3, #0
	for (; x < 149; x++) {
		planDetailsArray[x] = 0x00;
 80050b6:	4a03      	ldr	r2, [pc, #12]	; (80050c4 <clearPlanDetailsArrayBuffer+0x10>)
 80050b8:	4619      	mov	r1, r3
 80050ba:	5499      	strb	r1, [r3, r2]
	for (; x < 149; x++) {
 80050bc:	3301      	adds	r3, #1
 80050be:	2b95      	cmp	r3, #149	; 0x95
 80050c0:	d1fb      	bne.n	80050ba <clearPlanDetailsArrayBuffer+0x6>

	}
}
 80050c2:	4770      	bx	lr
 80050c4:	20003b95 	.word	0x20003b95

080050c8 <clearPlanTimeBuffer>:



void clearPlanTimeBuffer() {
	int x = 0;
 80050c8:	2300      	movs	r3, #0
	for (; x < 49; x++) {
		planTime[x] = 0x00;
 80050ca:	4a03      	ldr	r2, [pc, #12]	; (80050d8 <clearPlanTimeBuffer+0x10>)
 80050cc:	4619      	mov	r1, r3
 80050ce:	5499      	strb	r1, [r3, r2]
	for (; x < 49; x++) {
 80050d0:	3301      	adds	r3, #1
 80050d2:	2b31      	cmp	r3, #49	; 0x31
 80050d4:	d1fb      	bne.n	80050ce <clearPlanTimeBuffer+0x6>

	}
}
 80050d6:	4770      	bx	lr
 80050d8:	20001128 	.word	0x20001128

080050dc <crcApi>:
//		frame[21] = 0x0D;
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 21, 5000);

}

int crcApi(void) {
 80050dc:	b510      	push	{r4, lr}

	int zzzz = zxx9 + frame[3]; // have changed frame[3] to frame[5]
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <crcApi+0x1c>)
 80050e0:	78da      	ldrb	r2, [r3, #3]
 80050e2:	1d19      	adds	r1, r3, #4
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; to zxx9=6;
	zzzz = zxx9 + frame[3];
 80050e4:	3204      	adds	r2, #4
	int zyy9 = 0;
 80050e6:	2000      	movs	r0, #0
	while (zxx9 < zzzz) {
 80050e8:	1acc      	subs	r4, r1, r3
 80050ea:	42a2      	cmp	r2, r4
 80050ec:	dc00      	bgt.n	80050f0 <crcApi+0x14>
		zyy9 = zyy9 + frame[zxx9++];
	}

	return zyy9;

}
 80050ee:	bd10      	pop	{r4, pc}
		zyy9 = zyy9 + frame[zxx9++];
 80050f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f4:	4420      	add	r0, r4
 80050f6:	e7f7      	b.n	80050e8 <crcApi+0xc>
 80050f8:	20003ae1 	.word	0x20003ae1

080050fc <crcApiResponse>:

int crcApiResponse(void) {
 80050fc:	b510      	push	{r4, lr}

	int zzzzRes = zxx9Res + frame[5]; // have changed frame[3] to frame[5]
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <crcApiResponse+0x1c>)
 8005100:	795a      	ldrb	r2, [r3, #5]
 8005102:	1d99      	adds	r1, r3, #6
	int zyy9Res = 0;
	int zxx9Res = 6;           // have changed zxx9=4; to zxx9=6;
	zzzzRes = zxx9Res + frame[5];
 8005104:	3206      	adds	r2, #6
	int zyy9Res = 0;
 8005106:	2000      	movs	r0, #0
	while (zxx9Res < zzzzRes) {
 8005108:	1acc      	subs	r4, r1, r3
 800510a:	42a2      	cmp	r2, r4
 800510c:	dc00      	bgt.n	8005110 <crcApiResponse+0x14>
		zyy9Res = zyy9Res + frame[zxx9Res++];
	}

	return zyy9Res;

}
 800510e:	bd10      	pop	{r4, pc}
		zyy9Res = zyy9Res + frame[zxx9Res++];
 8005110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005114:	4420      	add	r0, r4
 8005116:	e7f7      	b.n	8005108 <crcApiResponse+0xc>
 8005118:	20003ae1 	.word	0x20003ae1

0800511c <readDateSD>:




}
void readDateSD(int cnt){
 800511c:	b508      	push	{r3, lr}
	clearReadBytes();
 800511e:	f7ff ff77 	bl	8005010 <clearReadBytes>
	SDcardReadSeek("date.txt", 18, cnt);
 8005122:	2112      	movs	r1, #18
 8005124:	4602      	mov	r2, r0




}
 8005126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("date.txt", 18, cnt);
 800512a:	4801      	ldr	r0, [pc, #4]	; (8005130 <readDateSD+0x14>)
 800512c:	f7ff bb54 	b.w	80047d8 <SDcardReadSeek>
 8005130:	08009522 	.word	0x08009522

08005134 <readDaySD>:

void readDaySD(int cnt){
 8005134:	b508      	push	{r3, lr}
	clearReadBytes();
 8005136:	f7ff ff6b 	bl	8005010 <clearReadBytes>
	SDcardReadSeek("day.txt", 100, cnt);
 800513a:	2164      	movs	r1, #100	; 0x64
 800513c:	4602      	mov	r2, r0




}
 800513e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("day.txt", 100, cnt);
 8005142:	4801      	ldr	r0, [pc, #4]	; (8005148 <readDaySD+0x14>)
 8005144:	f7ff bb48 	b.w	80047d8 <SDcardReadSeek>
 8005148:	0800952b 	.word	0x0800952b

0800514c <readPlanSD>:
void readPlanSD(int cnt){
 800514c:	b508      	push	{r3, lr}
	clearReadBytes();
 800514e:	f7ff ff5f 	bl	8005010 <clearReadBytes>
	SDcardReadSeek("planN.txt", 19, cnt);
 8005152:	2113      	movs	r1, #19
 8005154:	4602      	mov	r2, r0




}
 8005156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("planN.txt", 19, cnt);
 800515a:	4801      	ldr	r0, [pc, #4]	; (8005160 <readPlanSD+0x14>)
 800515c:	f7ff bb3c 	b.w	80047d8 <SDcardReadSeek>
 8005160:	0800953d 	.word	0x0800953d

08005164 <byteToIntegerVal>:
//		}
//		if (temp == 9)
//			break;
//	}
//}
void byteToIntegerVal(char *dat, uint8_t index) {
 8005164:	b530      	push	{r4, r5, lr}
	int zx = 0;
//	while (zx<8)
	while (zx < 24)

	{
		stringInt[zx + index] = *dat;
 8005166:	4a06      	ldr	r2, [pc, #24]	; (8005180 <byteToIntegerVal+0x1c>)
 8005168:	f100 0318 	add.w	r3, r0, #24
 800516c:	1a09      	subs	r1, r1, r0
 800516e:	1844      	adds	r4, r0, r1
 8005170:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005174:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
	while (zx < 24)
 8005178:	4298      	cmp	r0, r3
 800517a:	d1f8      	bne.n	800516e <byteToIntegerVal+0xa>

		*dat++;
		zx++;

	}
}
 800517c:	bd30      	pop	{r4, r5, pc}
 800517e:	bf00      	nop
 8005180:	2000151c 	.word	0x2000151c

08005184 <intToByte>:

void intToByte(int val) {
	test = val;
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <intToByte+0x34>)
 8005186:	6018      	str	r0, [r3, #0]
	test &= 0xFF;
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	601a      	str	r2, [r3, #0]
	crcVal[0] = test;
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <intToByte+0x38>)
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	7011      	strb	r1, [r2, #0]

	test = (val & 0xFF00) >> 8;
 8005194:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8005198:	6019      	str	r1, [r3, #0]
	crcVal[1] = test;
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	7051      	strb	r1, [r2, #1]

	test = (val & 0xFF0000) >> 16;
 800519e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80051a2:	6019      	str	r1, [r3, #0]
	crcVal[2] = test;
	test = (val & 0xFF000000) >> 24;
 80051a4:	0e00      	lsrs	r0, r0, #24
	crcVal[2] = test;
 80051a6:	6819      	ldr	r1, [r3, #0]
	test = (val & 0xFF000000) >> 24;
 80051a8:	6018      	str	r0, [r3, #0]
	crcVal[3] = test;
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	70d3      	strb	r3, [r2, #3]
	crcVal[4] = 0;
 80051ae:	2300      	movs	r3, #0
	crcVal[2] = test;
 80051b0:	7091      	strb	r1, [r2, #2]
	crcVal[4] = 0;
 80051b2:	7113      	strb	r3, [r2, #4]
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000118 	.word	0x20000118
 80051bc:	20003d98 	.word	0x20003d98

080051c0 <clearStringBuffer>:
		k++;
	}
}

void clearStringBuffer() {
	for (int i = 0; i < 10; i++) {
 80051c0:	2300      	movs	r3, #0
		string[i] = 0x00;
 80051c2:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <clearStringBuffer+0x10>)
 80051c4:	4619      	mov	r1, r3
 80051c6:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < 10; i++) {
 80051c8:	3301      	adds	r3, #1
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d1fb      	bne.n	80051c6 <clearStringBuffer+0x6>
	}
}
 80051ce:	4770      	bx	lr
 80051d0:	200052f2 	.word	0x200052f2

080051d4 <countDown>:
}

void countDown()
{

	if (planMode==2) //signal with without pedestrian
 80051d4:	4b8c      	ldr	r3, [pc, #560]	; (8005408 <countDown+0x234>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d166      	bne.n	80052aa <countDown+0xd6>
	     {
		switch(phase_No)
 80051dc:	4b8b      	ldr	r3, [pc, #556]	; (800540c <countDown+0x238>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d83d      	bhi.n	8005262 <countDown+0x8e>
 80051e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051ea:	006e      	.short	0x006e
 80051ec:	00090094 	.word	0x00090094
 80051f0:	002500b4 	.word	0x002500b4
 80051f4:	003d00d0 	.word	0x003d00d0
 80051f8:	0055004d 	.word	0x0055004d
			Disp[1]=planA1GT;
			break;

		case 3:

			Disp[0]=planS2GT+planS3GT+planS4GT+planS5GT+planA2GT+planA3GT+planA4GT+planA5GT;
 80051fc:	4b84      	ldr	r3, [pc, #528]	; (8005410 <countDown+0x23c>)
 80051fe:	4a85      	ldr	r2, [pc, #532]	; (8005414 <countDown+0x240>)
 8005200:	7819      	ldrb	r1, [r3, #0]
 8005202:	4b85      	ldr	r3, [pc, #532]	; (8005418 <countDown+0x244>)
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	440b      	add	r3, r1
 800520a:	4413      	add	r3, r2
 800520c:	4a83      	ldr	r2, [pc, #524]	; (800541c <countDown+0x248>)
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	4413      	add	r3, r2
 8005212:	4a83      	ldr	r2, [pc, #524]	; (8005420 <countDown+0x24c>)
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	4413      	add	r3, r2
 8005218:	4a82      	ldr	r2, [pc, #520]	; (8005424 <countDown+0x250>)
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	4413      	add	r3, r2
 800521e:	4a82      	ldr	r2, [pc, #520]	; (8005428 <countDown+0x254>)
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	4413      	add	r3, r2
 8005224:	4a81      	ldr	r2, [pc, #516]	; (800542c <countDown+0x258>)
 8005226:	7812      	ldrb	r2, [r2, #0]
		Disp[1]=planA1GT;
		break;

	case 3:

		Disp[0]=planS2GT+planS3GT+planS4GT+planS5GT+planA2GT+planA3GT+planA4GT+planA5GT+padestarianTime ;
 8005228:	4413      	add	r3, r2
 800522a:	4a81      	ldr	r2, [pc, #516]	; (8005430 <countDown+0x25c>)
 800522c:	b2db      	uxtb	r3, r3
 800522e:	7013      	strb	r3, [r2, #0]
		Disp[1]=planS2GT;
 8005230:	7051      	strb	r1, [r2, #1]
		break;
 8005232:	4770      	bx	lr
			Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT +planA5GT;
 8005234:	4b78      	ldr	r3, [pc, #480]	; (8005418 <countDown+0x244>)
 8005236:	4a79      	ldr	r2, [pc, #484]	; (800541c <countDown+0x248>)
 8005238:	7819      	ldrb	r1, [r3, #0]
 800523a:	4b76      	ldr	r3, [pc, #472]	; (8005414 <countDown+0x240>)
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	440b      	add	r3, r1
 8005242:	4413      	add	r3, r2
 8005244:	4a77      	ldr	r2, [pc, #476]	; (8005424 <countDown+0x250>)
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	4413      	add	r3, r2
 800524a:	4a77      	ldr	r2, [pc, #476]	; (8005428 <countDown+0x254>)
 800524c:	7812      	ldrb	r2, [r2, #0]
 800524e:	4413      	add	r3, r2
 8005250:	4a76      	ldr	r2, [pc, #472]	; (800542c <countDown+0x258>)
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	4413      	add	r3, r2
		Disp[7]=0x08  ;
        break;

	case 5:
//		Disp[0]=Disp[0]+padestarianTime;
		Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT +planA5GT+padestarianTime+padestarianTime;
 8005256:	4a76      	ldr	r2, [pc, #472]	; (8005430 <countDown+0x25c>)
 8005258:	b2db      	uxtb	r3, r3
 800525a:	7053      	strb	r3, [r2, #1]
		Disp[2]=planS3GT;
 800525c:	7091      	strb	r1, [r2, #2]

	case 7:

		Disp[2]=planS1GT+planS2GT+planS4GT+planS5GT+planA1GT+planA2GT+planA4GT+planA5GT+padestarianTime ;
		Disp[3]=planS4GT;
		Disp[7]=0x08  ;
 800525e:	2308      	movs	r3, #8
//			Disp[1]=padestarianTime;
//			Disp[2]=padestarianTime;
//		}
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
		Disp[6]=planS5GT ;
		Disp[7]=0x03  ;
 8005260:	71d3      	strb	r3, [r2, #7]
 8005262:	4770      	bx	lr
			Disp[2]=planS4GT+planS5GT+planA4GT+planA5GT ;
 8005264:	4b6b      	ldr	r3, [pc, #428]	; (8005414 <countDown+0x240>)
 8005266:	4a70      	ldr	r2, [pc, #448]	; (8005428 <countDown+0x254>)
 8005268:	7819      	ldrb	r1, [r3, #0]
 800526a:	4b6c      	ldr	r3, [pc, #432]	; (800541c <countDown+0x248>)
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	440b      	add	r3, r1
 8005272:	4413      	add	r3, r2
 8005274:	4a6d      	ldr	r2, [pc, #436]	; (800542c <countDown+0x258>)
 8005276:	7812      	ldrb	r2, [r2, #0]
		Disp[2]=planS1GT+planS2GT+planS4GT+planS5GT+planA1GT+planA2GT+planA4GT+planA5GT+padestarianTime ;
 8005278:	4413      	add	r3, r2
 800527a:	4a6d      	ldr	r2, [pc, #436]	; (8005430 <countDown+0x25c>)
 800527c:	b2db      	uxtb	r3, r3
 800527e:	7093      	strb	r3, [r2, #2]
		Disp[3]=planS4GT;
 8005280:	70d1      	strb	r1, [r2, #3]
 8005282:	e7ec      	b.n	800525e <countDown+0x8a>
			Disp[3]=planA4GT ;
 8005284:	4b68      	ldr	r3, [pc, #416]	; (8005428 <countDown+0x254>)
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	4b69      	ldr	r3, [pc, #420]	; (8005430 <countDown+0x25c>)
 800528a:	70da      	strb	r2, [r3, #3]
			Disp[0]=planA4GT;
 800528c:	701a      	strb	r2, [r3, #0]
		Disp[7]=0x08  ;
 800528e:	2208      	movs	r2, #8
 8005290:	71da      	strb	r2, [r3, #7]
		break;
 8005292:	4770      	bx	lr
			Disp[3]=planS5GT+planA5GT ;
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <countDown+0x248>)
 8005296:	7819      	ldrb	r1, [r3, #0]
 8005298:	4b64      	ldr	r3, [pc, #400]	; (800542c <countDown+0x258>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	440b      	add	r3, r1
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
 800529e:	4a64      	ldr	r2, [pc, #400]	; (8005430 <countDown+0x25c>)
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	70d3      	strb	r3, [r2, #3]
		Disp[6]=planS5GT ;
 80052a4:	7191      	strb	r1, [r2, #6]
		Disp[7]=0x03  ;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e7da      	b.n	8005260 <countDown+0x8c>
	if (planMode==3) //signal with pedestrian
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d1d9      	bne.n	8005262 <countDown+0x8e>
		switch(phase_No)
 80052ae:	4b57      	ldr	r3, [pc, #348]	; (800540c <countDown+0x238>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d8d4      	bhi.n	8005262 <countDown+0x8e>
 80052b8:	e8df f003 	tbb	[pc, r3]
 80052bc:	4b312b05 	.word	0x4b312b05
 80052c0:	876d6751 	.word	0x876d6751
 80052c4:	8b          	.byte	0x8b
 80052c5:	00          	.byte	0x00
		Disp[0]=planS1GT ;
 80052c6:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <countDown+0x260>)
		Disp[1]=Disp[0]+planA1GT;
 80052c8:	495b      	ldr	r1, [pc, #364]	; (8005438 <countDown+0x264>)
		Disp[0]=planS1GT ;
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	4b58      	ldr	r3, [pc, #352]	; (8005430 <countDown+0x25c>)
		Disp[1]=Disp[0]+planA1GT;
 80052ce:	7809      	ldrb	r1, [r1, #0]
		Disp[0]=planS1GT ;
 80052d0:	701a      	strb	r2, [r3, #0]
		Disp[1]=Disp[0]+planA1GT;
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	440a      	add	r2, r1
 80052d6:	b2d2      	uxtb	r2, r2
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80052d8:	4951      	ldr	r1, [pc, #324]	; (8005420 <countDown+0x24c>)
		Disp[1]=Disp[0]+planA1GT;
 80052da:	705a      	strb	r2, [r3, #1]
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80052dc:	785a      	ldrb	r2, [r3, #1]
 80052de:	7809      	ldrb	r1, [r1, #0]
 80052e0:	440a      	add	r2, r1
 80052e2:	494b      	ldr	r1, [pc, #300]	; (8005410 <countDown+0x23c>)
 80052e4:	7809      	ldrb	r1, [r1, #0]
 80052e6:	440a      	add	r2, r1
 80052e8:	b2d2      	uxtb	r2, r2
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80052ea:	494e      	ldr	r1, [pc, #312]	; (8005424 <countDown+0x250>)
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80052ec:	709a      	strb	r2, [r3, #2]
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80052ee:	789a      	ldrb	r2, [r3, #2]
 80052f0:	7809      	ldrb	r1, [r1, #0]
 80052f2:	440a      	add	r2, r1
 80052f4:	4948      	ldr	r1, [pc, #288]	; (8005418 <countDown+0x244>)
 80052f6:	7809      	ldrb	r1, [r1, #0]
 80052f8:	440a      	add	r2, r1
 80052fa:	b2d2      	uxtb	r2, r2
		Disp[6]=Disp[3]+planA4GT+planS4GT;
 80052fc:	494a      	ldr	r1, [pc, #296]	; (8005428 <countDown+0x254>)
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80052fe:	70da      	strb	r2, [r3, #3]
		Disp[6]=Disp[3]+planA4GT+planS4GT;
 8005300:	78da      	ldrb	r2, [r3, #3]
 8005302:	7809      	ldrb	r1, [r1, #0]
 8005304:	440a      	add	r2, r1
 8005306:	4943      	ldr	r1, [pc, #268]	; (8005414 <countDown+0x240>)
 8005308:	7809      	ldrb	r1, [r1, #0]
 800530a:	440a      	add	r2, r1
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	719a      	strb	r2, [r3, #6]
 8005310:	e7bd      	b.n	800528e <countDown+0xba>
		Disp[0]=planA1GT ;
 8005312:	4b49      	ldr	r3, [pc, #292]	; (8005438 <countDown+0x264>)
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	4b46      	ldr	r3, [pc, #280]	; (8005430 <countDown+0x25c>)
 8005318:	701a      	strb	r2, [r3, #0]
		Disp[1]=planA1GT;
 800531a:	705a      	strb	r2, [r3, #1]
		break;
 800531c:	4770      	bx	lr
		Disp[0]=planS2GT+planS3GT+planS4GT+planS5GT+planA2GT+planA3GT+planA4GT+planA5GT+padestarianTime ;
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <countDown+0x23c>)
 8005320:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <countDown+0x240>)
 8005322:	7819      	ldrb	r1, [r3, #0]
 8005324:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <countDown+0x244>)
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	440b      	add	r3, r1
 800532c:	4413      	add	r3, r2
 800532e:	4a3b      	ldr	r2, [pc, #236]	; (800541c <countDown+0x248>)
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	4413      	add	r3, r2
 8005334:	4a3a      	ldr	r2, [pc, #232]	; (8005420 <countDown+0x24c>)
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	4413      	add	r3, r2
 800533a:	4a3a      	ldr	r2, [pc, #232]	; (8005424 <countDown+0x250>)
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	4413      	add	r3, r2
 8005340:	4a39      	ldr	r2, [pc, #228]	; (8005428 <countDown+0x254>)
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	4413      	add	r3, r2
 8005346:	4a39      	ldr	r2, [pc, #228]	; (800542c <countDown+0x258>)
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	4413      	add	r3, r2
 800534c:	4a3b      	ldr	r2, [pc, #236]	; (800543c <countDown+0x268>)
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	e76a      	b.n	8005228 <countDown+0x54>
		Disp[1]=planA2GT ;
 8005352:	4b33      	ldr	r3, [pc, #204]	; (8005420 <countDown+0x24c>)
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <countDown+0x25c>)
 8005358:	705a      	strb	r2, [r3, #1]
		Disp[2]=planA2GT;
 800535a:	709a      	strb	r2, [r3, #2]
 800535c:	e797      	b.n	800528e <countDown+0xba>
		Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT +planA5GT+padestarianTime+padestarianTime;
 800535e:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <countDown+0x244>)
 8005360:	482e      	ldr	r0, [pc, #184]	; (800541c <countDown+0x248>)
 8005362:	7819      	ldrb	r1, [r3, #0]
 8005364:	4b35      	ldr	r3, [pc, #212]	; (800543c <countDown+0x268>)
 8005366:	7800      	ldrb	r0, [r0, #0]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	4b2a      	ldr	r3, [pc, #168]	; (8005414 <countDown+0x240>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	440b      	add	r3, r1
 8005370:	4403      	add	r3, r0
 8005372:	482c      	ldr	r0, [pc, #176]	; (8005424 <countDown+0x250>)
 8005374:	7800      	ldrb	r0, [r0, #0]
 8005376:	4403      	add	r3, r0
 8005378:	482b      	ldr	r0, [pc, #172]	; (8005428 <countDown+0x254>)
 800537a:	7800      	ldrb	r0, [r0, #0]
 800537c:	4403      	add	r3, r0
 800537e:	482b      	ldr	r0, [pc, #172]	; (800542c <countDown+0x258>)
 8005380:	7800      	ldrb	r0, [r0, #0]
 8005382:	4403      	add	r3, r0
 8005384:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8005388:	e765      	b.n	8005256 <countDown+0x82>
		Disp[2]=planA3GT ;
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <countDown+0x250>)
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <countDown+0x25c>)
 8005390:	709a      	strb	r2, [r3, #2]
		Disp[3]=planA4GT ;
 8005392:	70da      	strb	r2, [r3, #3]
 8005394:	e77b      	b.n	800528e <countDown+0xba>
		Disp[2]=planS1GT+planS2GT+planS4GT+planS5GT+planA1GT+planA2GT+planA4GT+planA5GT+padestarianTime ;
 8005396:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <countDown+0x240>)
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <countDown+0x23c>)
 800539a:	7819      	ldrb	r1, [r3, #0]
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <countDown+0x260>)
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <countDown+0x248>)
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	440b      	add	r3, r1
 80053aa:	4413      	add	r3, r2
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <countDown+0x264>)
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <countDown+0x24c>)
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	4413      	add	r3, r2
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <countDown+0x254>)
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <countDown+0x258>)
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	4413      	add	r3, r2
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <countDown+0x268>)
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	e756      	b.n	8005278 <countDown+0xa4>
		Disp[3]=planA4GT ;
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <countDown+0x254>)
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <countDown+0x25c>)
 80053d0:	e7df      	b.n	8005392 <countDown+0x1be>
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <countDown+0x248>)
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <countDown+0x23c>)
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <countDown+0x260>)
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <countDown+0x244>)
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <countDown+0x264>)
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <countDown+0x24c>)
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	4413      	add	r3, r2
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <countDown+0x250>)
 80053f4:	7812      	ldrb	r2, [r2, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	4a0c      	ldr	r2, [pc, #48]	; (800542c <countDown+0x258>)
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	440b      	add	r3, r1
 80053fe:	4413      	add	r3, r2
 8005400:	4a0e      	ldr	r2, [pc, #56]	; (800543c <countDown+0x268>)
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	4413      	add	r3, r2
 8005406:	e74a      	b.n	800529e <countDown+0xca>
 8005408:	200051f2 	.word	0x200051f2
 800540c:	200039d0 	.word	0x200039d0
 8005410:	200015ed 	.word	0x200015ed
 8005414:	20003c2b 	.word	0x20003c2b
 8005418:	200039fc 	.word	0x200039fc
 800541c:	2000001d 	.word	0x2000001d
 8005420:	200039f4 	.word	0x200039f4
 8005424:	20003ad6 	.word	0x20003ad6
 8005428:	20003ae0 	.word	0x20003ae0
 800542c:	2000001c 	.word	0x2000001c
 8005430:	200010bd 	.word	0x200010bd
 8005434:	200037bc 	.word	0x200037bc
 8005438:	20003c2c 	.word	0x20003c2c
 800543c:	20000018 	.word	0x20000018

08005440 <sendMsgToSlave>:

	SDcardReadSeek("phase.txt",350, 0);


}
void sendMsgToSlave(){
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   	//-------------------------------every 50 millisec transmitting the data to slave-------------------------//
//		 	   	       	if(millisec1>50)
//	 	   	       		if((slave1Rsp==1)||(slave2Rsp==1)||(slave3Rsp==1)||(slave4Rsp==1)||(millisec1>60))
//	                    if((slave4Rsp==1)||(millisec1>150))
//	                    if((slave1Rsp==1)||(slave2Rsp==1)||(slave3Rsp==1)||(millisec1>70))
						if(millisec1>150)
 8005444:	4d47      	ldr	r5, [pc, #284]	; (8005564 <sendMsgToSlave+0x124>)
 8005446:	682b      	ldr	r3, [r5, #0]
 8005448:	2b96      	cmp	r3, #150	; 0x96
 800544a:	f340 8089 	ble.w	8005560 <sendMsgToSlave+0x120>
//		 	   	       		{
//		 	   	       			slaveNo=1;
//
//		 	   	       		}

		if (slaveNo == 1) {
 800544e:	4c46      	ldr	r4, [pc, #280]	; (8005568 <sendMsgToSlave+0x128>)
 8005450:	4e46      	ldr	r6, [pc, #280]	; (800556c <sendMsgToSlave+0x12c>)
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d111      	bne.n	800547c <sendMsgToSlave+0x3c>
			if (slave1Transmit == 1) {
 8005458:	4b45      	ldr	r3, [pc, #276]	; (8005570 <sendMsgToSlave+0x130>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2a01      	cmp	r2, #1
 800545e:	d10d      	bne.n	800547c <sendMsgToSlave+0x3c>
				if (slave1Rsp == 1) {
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	2a01      	cmp	r2, #1
 8005464:	4a43      	ldr	r2, [pc, #268]	; (8005574 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x01;
					communicationStatus = communicationStatus | 0x01;
 8005466:	7811      	ldrb	r1, [r2, #0]
 8005468:	bf0c      	ite	eq
 800546a:	f041 0101 	orreq.w	r1, r1, #1
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x06;
 800546e:	f001 0106 	andne.w	r1, r1, #6
 8005472:	7011      	strb	r1, [r2, #0]
				}
				slave1Transmit=0;
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
				slaveNo++;//incrementing the value of slave
 8005478:	2302      	movs	r3, #2
 800547a:	6023      	str	r3, [r4, #0]
			}
		}
		if (slaveNo == 2) {
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	4f3e      	ldr	r7, [pc, #248]	; (8005578 <sendMsgToSlave+0x138>)
 8005480:	2b02      	cmp	r3, #2
 8005482:	d111      	bne.n	80054a8 <sendMsgToSlave+0x68>
			if (slave2Transmit == 1) {
 8005484:	4b3d      	ldr	r3, [pc, #244]	; (800557c <sendMsgToSlave+0x13c>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2a01      	cmp	r2, #1
 800548a:	d10d      	bne.n	80054a8 <sendMsgToSlave+0x68>
				if (slave2Rsp == 1) {
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	2a01      	cmp	r2, #1
 8005490:	4a38      	ldr	r2, [pc, #224]	; (8005574 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x02;
					communicationStatus = communicationStatus | 0x02;
 8005492:	7811      	ldrb	r1, [r2, #0]
 8005494:	bf0c      	ite	eq
 8005496:	f041 0102 	orreq.w	r1, r1, #2
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x05;
 800549a:	f001 0105 	andne.w	r1, r1, #5
 800549e:	7011      	strb	r1, [r2, #0]
				}
				slave2Transmit=0;
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
				slaveNo++;//incrementing the value of slave
 80054a4:	2303      	movs	r3, #3
 80054a6:	6023      	str	r3, [r4, #0]
			}
		}

		if (slaveNo == 3) {
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800558c <sendMsgToSlave+0x14c>
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d112      	bne.n	80054d8 <sendMsgToSlave+0x98>
			if (slave3Transmit == 1) {
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <sendMsgToSlave+0x140>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2a01      	cmp	r2, #1
 80054b8:	d10e      	bne.n	80054d8 <sendMsgToSlave+0x98>
				if (slave3Rsp == 1) {
 80054ba:	f8d8 2000 	ldr.w	r2, [r8]
 80054be:	2a01      	cmp	r2, #1
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x04;
								communicationStatus = communicationStatus | 0x04;
 80054c2:	7811      	ldrb	r1, [r2, #0]
 80054c4:	bf0c      	ite	eq
 80054c6:	f041 0104 	orreq.w	r1, r1, #4
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x03;
 80054ca:	f001 0103 	andne.w	r1, r1, #3
 80054ce:	7011      	strb	r1, [r2, #0]
				}
				slave3Transmit = 0;
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
				slaveNo++;		 	   	   //incrementing the value of slave
 80054d4:	2304      	movs	r3, #4
 80054d6:	6023      	str	r3, [r4, #0]
			}
		}
		if (slaveNo == 4) {
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8005590 <sendMsgToSlave+0x150>
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d112      	bne.n	8005508 <sendMsgToSlave+0xc8>
				if (slave4Transmit == 1) {
 80054e2:	4b28      	ldr	r3, [pc, #160]	; (8005584 <sendMsgToSlave+0x144>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2a01      	cmp	r2, #1
 80054e8:	d10e      	bne.n	8005508 <sendMsgToSlave+0xc8>
					if (slave4Rsp == 1) {
 80054ea:	f8d9 2000 	ldr.w	r2, [r9]
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	4a20      	ldr	r2, [pc, #128]	; (8005574 <sendMsgToSlave+0x134>)
	//						communicationStatus = 0x04;
									communicationStatus = communicationStatus | 0x08;
 80054f2:	7811      	ldrb	r1, [r2, #0]
 80054f4:	bf0c      	ite	eq
 80054f6:	f041 0108 	orreq.w	r1, r1, #8
					} else {
	//						communicationStatus = 0x00;
						communicationStatus = communicationStatus & 0x07;
 80054fa:	f001 0107 	andne.w	r1, r1, #7
 80054fe:	7011      	strb	r1, [r2, #0]
					}
					slave4Transmit = 0;
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
					slaveNo++;		 	   	   //incrementing the value of slave
 8005504:	2305      	movs	r3, #5
 8005506:	6023      	str	r3, [r4, #0]


//		                           if(slaveNo>noOfSides+1)

//		                        	   if(slaveNo==noOfSides)
		                         if(noOfSides != 3)
 8005508:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <sendMsgToSlave+0x148>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b03      	cmp	r3, #3
 	                             if(slaveNo>4)
 800550e:	6823      	ldr	r3, [r4, #0]
		                         if(noOfSides != 3)
 8005510:	d024      	beq.n	800555c <sendMsgToSlave+0x11c>
 	                             if(slaveNo>4)
 8005512:	2b04      	cmp	r3, #4

				 	   	       		{
				 	   	       			slaveNo=1;
 8005514:	bfc4      	itt	gt
 8005516:	2301      	movgt	r3, #1
 8005518:	6023      	strgt	r3, [r4, #0]
		                        	 }
		                         }

//		                 if (!(slaveNo == noOfSides + 1)){

	 	   	       		function6_A(); //Master to slave1
 800551a:	f7ff fa87 	bl	8004a2c <function6_A>

//		                 }


	 	   	       		if(slaveNo==1)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10b      	bne.n	800553c <sendMsgToSlave+0xfc>
	 	   	       		{
	 	   	       		slave1Transmit=1;
 8005524:	4a12      	ldr	r2, [pc, #72]	; (8005570 <sendMsgToSlave+0x130>)
 8005526:	6013      	str	r3, [r2, #0]
		            	slave4Transmit = 1;

		                }

                        /*----------all slave response status to 0-------------*/
	                   	slave1Rsp=0;
 8005528:	2300      	movs	r3, #0
 800552a:	6033      	str	r3, [r6, #0]
	                   	slave2Rsp=0;
 800552c:	603b      	str	r3, [r7, #0]
	                   	slave3Rsp=0;
 800552e:	f8c8 3000 	str.w	r3, [r8]
	                	slave4Rsp=0;
 8005532:	f8c9 3000 	str.w	r3, [r9]
//	 	   	       		msgTx++;
//		 	   	       		slaveNo++;//incrementing the value of slave
	                   	millisec1=0;
 8005536:	602b      	str	r3, [r5, #0]
	 	   	       		//commFlag++;
	 	   	       	}
}
 8005538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	                   	if (slaveNo == 2) {
 800553c:	2b02      	cmp	r3, #2
 800553e:	d103      	bne.n	8005548 <sendMsgToSlave+0x108>
	                   	slave2Transmit=1;
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <sendMsgToSlave+0x13c>)
 8005542:	2201      	movs	r2, #1
		            	slave4Transmit = 1;
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e7ef      	b.n	8005528 <sendMsgToSlave+0xe8>
	                   	if (slaveNo == 3) {
 8005548:	2b03      	cmp	r3, #3
 800554a:	d102      	bne.n	8005552 <sendMsgToSlave+0x112>
	                   	slave3Transmit=1;
 800554c:	2201      	movs	r2, #1
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <sendMsgToSlave+0x140>)
 8005550:	e7f8      	b.n	8005544 <sendMsgToSlave+0x104>
	                	if (slaveNo == 4) {
 8005552:	2b04      	cmp	r3, #4
 8005554:	d1e8      	bne.n	8005528 <sendMsgToSlave+0xe8>
		            	slave4Transmit = 1;
 8005556:	2201      	movs	r2, #1
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <sendMsgToSlave+0x144>)
 800555a:	e7f3      	b.n	8005544 <sendMsgToSlave+0x104>
		                        	 if(slaveNo>3)
 800555c:	2b03      	cmp	r3, #3
 800555e:	e7d9      	b.n	8005514 <sendMsgToSlave+0xd4>
 8005560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005564:	2000014c 	.word	0x2000014c
 8005568:	20000008 	.word	0x20000008
 800556c:	2000008c 	.word	0x2000008c
 8005570:	20000090 	.word	0x20000090
 8005574:	2000007c 	.word	0x2000007c
 8005578:	20000094 	.word	0x20000094
 800557c:	20000098 	.word	0x20000098
 8005580:	200000a0 	.word	0x200000a0
 8005584:	200000a8 	.word	0x200000a8
 8005588:	200000ed 	.word	0x200000ed
 800558c:	2000009c 	.word	0x2000009c
 8005590:	200000a4 	.word	0x200000a4

08005594 <analysingResponseOfSlave>:
}



void analysingResponseOfSlave()
{
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//side1PoleType=3;
//side2PoleType=3;
//side3PoleType=3;
//side4PoleType=3;
/*----------------Separating the values of sides------------------*/
sideNo1= Disp[4] >> 4; // right shift 4 bit
 8005598:	4956      	ldr	r1, [pc, #344]	; (80056f4 <analysingResponseOfSlave+0x160>)
sideNo1=sideNo1 << 4 ; //left shift 4 bit
 800559a:	4a57      	ldr	r2, [pc, #348]	; (80056f8 <analysingResponseOfSlave+0x164>)
sideNo1= Disp[4] >> 4; // right shift 4 bit
 800559c:	790b      	ldrb	r3, [r1, #4]
sideNo4=  Disp[5] ^ sideNo2; //

/*-------------------------checking the pole type----------------------------*/

/*-------------------------pole type = standard pole----------------------------*/
if(side1PoleType==1)//standard pole
 800559e:	4e57      	ldr	r6, [pc, #348]	; (80056fc <analysingResponseOfSlave+0x168>)
sideNo3=  Disp[4] ^ sideNo1; //
 80055a0:	7908      	ldrb	r0, [r1, #4]
sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80055a2:	4c57      	ldr	r4, [pc, #348]	; (8005700 <analysingResponseOfSlave+0x16c>)
if(side1PoleType==1)//standard pole
 80055a4:	f8d6 e000 	ldr.w	lr, [r6]
sideNo3=  Disp[4] ^ sideNo1; //
 80055a8:	4d56      	ldr	r5, [pc, #344]	; (8005704 <analysingResponseOfSlave+0x170>)
sideNo1=sideNo1 << 4 ; //left shift 4 bit
 80055aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ae:	6013      	str	r3, [r2, #0]
sideNo2= Disp[5] >> 4; // right shift 4 bit
 80055b0:	794a      	ldrb	r2, [r1, #5]
sideNo4=  Disp[5] ^ sideNo2; //
 80055b2:	7949      	ldrb	r1, [r1, #5]
sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80055b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055b8:	6022      	str	r2, [r4, #0]
sideNo4=  Disp[5] ^ sideNo2; //
 80055ba:	4c53      	ldr	r4, [pc, #332]	; (8005708 <analysingResponseOfSlave+0x174>)
sideNo3=  Disp[4] ^ sideNo1; //
 80055bc:	4058      	eors	r0, r3
sideNo4=  Disp[5] ^ sideNo2; //
 80055be:	4051      	eors	r1, r2
if(side1PoleType==1)//standard pole
 80055c0:	f1be 0f01 	cmp.w	lr, #1
sideNo3=  Disp[4] ^ sideNo1; //
 80055c4:	6028      	str	r0, [r5, #0]
sideNo4=  Disp[5] ^ sideNo2; //
 80055c6:	6021      	str	r1, [r4, #0]
if(side1PoleType==1)//standard pole
 80055c8:	d07b      	beq.n	80056c2 <analysingResponseOfSlave+0x12e>
	 checkSideColour(primaryByteCommand[1],primaryByte[1],1);

		//not working
	}
}
if(side2PoleType==1)//standard pole
 80055ca:	4e50      	ldr	r6, [pc, #320]	; (800570c <analysingResponseOfSlave+0x178>)
 80055cc:	6837      	ldr	r7, [r6, #0]
 80055ce:	2f01      	cmp	r7, #1
 80055d0:	d103      	bne.n	80055da <analysingResponseOfSlave+0x46>
{
	primaryByteCommand[2]=sideNo2;
 80055d2:	4e4f      	ldr	r6, [pc, #316]	; (8005710 <analysingResponseOfSlave+0x17c>)
 80055d4:	60b2      	str	r2, [r6, #8]
	secondaryByteCommand[2]=sideNo2;
 80055d6:	4e4f      	ldr	r6, [pc, #316]	; (8005714 <analysingResponseOfSlave+0x180>)
 80055d8:	60b2      	str	r2, [r6, #8]
		}
		else{
			//not working
		}
}
if(side3PoleType==1)//standard pole
 80055da:	4e4f      	ldr	r6, [pc, #316]	; (8005718 <analysingResponseOfSlave+0x184>)
 80055dc:	6836      	ldr	r6, [r6, #0]
 80055de:	2e01      	cmp	r6, #1
 80055e0:	d109      	bne.n	80055f6 <analysingResponseOfSlave+0x62>
{
	sideNo3=sideNo3 << 4; // left shit 4 bit
	primaryByteCommand[3]=sideNo3;
 80055e2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8005710 <analysingResponseOfSlave+0x17c>
	sideNo3=sideNo3 << 4; // left shit 4 bit
 80055e6:	0100      	lsls	r0, r0, #4
	primaryByteCommand[3]=sideNo3;
 80055e8:	f8cc 000c 	str.w	r0, [ip, #12]
	secondaryByteCommand[3]=sideNo3;
 80055ec:	f8df c124 	ldr.w	ip, [pc, #292]	; 8005714 <analysingResponseOfSlave+0x180>
	sideNo3=sideNo3 << 4; // left shit 4 bit
 80055f0:	6028      	str	r0, [r5, #0]
	secondaryByteCommand[3]=sideNo3;
 80055f2:	f8cc 000c 	str.w	r0, [ip, #12]
		else{
			//not working
		}
}

if(side4PoleType==1)//standard pole
 80055f6:	4849      	ldr	r0, [pc, #292]	; (800571c <analysingResponseOfSlave+0x188>)
 80055f8:	6800      	ldr	r0, [r0, #0]
 80055fa:	2801      	cmp	r0, #1
 80055fc:	d109      	bne.n	8005612 <analysingResponseOfSlave+0x7e>
{
	sideNo4=sideNo4 << 4; // left shit 4 bit
	primaryByteCommand[4]=sideNo4;
 80055fe:	f8df c110 	ldr.w	ip, [pc, #272]	; 8005710 <analysingResponseOfSlave+0x17c>
	sideNo4=sideNo4 << 4; // left shit 4 bit
 8005602:	0109      	lsls	r1, r1, #4
	primaryByteCommand[4]=sideNo4;
 8005604:	f8cc 1010 	str.w	r1, [ip, #16]
	secondaryByteCommand[4]=sideNo4;
 8005608:	f8df c108 	ldr.w	ip, [pc, #264]	; 8005714 <analysingResponseOfSlave+0x180>
	sideNo4=sideNo4 << 4; // left shit 4 bit
 800560c:	6021      	str	r1, [r4, #0]
	secondaryByteCommand[4]=sideNo4;
 800560e:	f8cc 1010 	str.w	r1, [ip, #16]
		else{
			//not working
		}
}
/*-------------------------pole type = L-cantilever pole----------------------------*/
if(side1PoleType==2)
 8005612:	f1be 0f02 	cmp.w	lr, #2
 8005616:	d107      	bne.n	8005628 <analysingResponseOfSlave+0x94>
{
	secondaryByteCommand[1]=sideNo1;
 8005618:	493e      	ldr	r1, [pc, #248]	; (8005714 <analysingResponseOfSlave+0x180>)
	primaryByteCommand[1]= sideNo1 >> 4; // right shift 4 bit
	primaryByteCommand[1]=primaryByteCommand[1] | secondaryByteCommand[1];
 800561a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005710 <analysingResponseOfSlave+0x17c>
	secondaryByteCommand[1]=sideNo1;
 800561e:	604b      	str	r3, [r1, #4]
	primaryByteCommand[1]=primaryByteCommand[1] | secondaryByteCommand[1];
 8005620:	ea43 1113 	orr.w	r1, r3, r3, lsr #4
 8005624:	f8cc 1004 	str.w	r1, [ip, #4]

		//not working
	}
}

if(side2PoleType==2)
 8005628:	2f02      	cmp	r7, #2
 800562a:	d107      	bne.n	800563c <analysingResponseOfSlave+0xa8>
{

	secondaryByteCommand[2]=sideNo2;
 800562c:	4939      	ldr	r1, [pc, #228]	; (8005714 <analysingResponseOfSlave+0x180>)
	primaryByteCommand[2]= sideNo2 >> 4; // right shift 4 bit
	primaryByteCommand[2]=primaryByteCommand[2] | secondaryByteCommand[2];
 800562e:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8005710 <analysingResponseOfSlave+0x17c>
	secondaryByteCommand[2]=sideNo2;
 8005632:	608a      	str	r2, [r1, #8]
	primaryByteCommand[2]=primaryByteCommand[2] | secondaryByteCommand[2];
 8005634:	ea42 1112 	orr.w	r1, r2, r2, lsr #4
 8005638:	f8cc 1008 	str.w	r1, [ip, #8]

		//not working
	}
}

if(side3PoleType==2)
 800563c:	2e02      	cmp	r6, #2
 800563e:	d10c      	bne.n	800565a <analysingResponseOfSlave+0xc6>
{
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 8005640:	6829      	ldr	r1, [r5, #0]
 8005642:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005714 <analysingResponseOfSlave+0x180>
 8005646:	ea4f 1c01 	mov.w	ip, r1, lsl #4
//	secondaryByteCommand[3]=sideNo3;
	primaryByteCommand[3]= sideNo3 ;
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 800564a:	ea41 010c 	orr.w	r1, r1, ip
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 800564e:	f8c8 c00c 	str.w	ip, [r8, #12]
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 8005652:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8005710 <analysingResponseOfSlave+0x17c>
 8005656:	f8cc 100c 	str.w	r1, [ip, #12]

		//not working
	}
}

if(side4PoleType==2)
 800565a:	2802      	cmp	r0, #2
 800565c:	d10c      	bne.n	8005678 <analysingResponseOfSlave+0xe4>
{
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 800565e:	6821      	ldr	r1, [r4, #0]
 8005660:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005714 <analysingResponseOfSlave+0x180>
 8005664:	ea4f 1c01 	mov.w	ip, r1, lsl #4
//	secondaryByteCommand[4]=sideNo4;
	primaryByteCommand[4]= sideNo4 ;
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 8005668:	ea41 010c 	orr.w	r1, r1, ip
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 800566c:	f8c8 c010 	str.w	ip, [r8, #16]
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 8005670:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005710 <analysingResponseOfSlave+0x17c>
 8005674:	f8cc 1010 	str.w	r1, [ip, #16]

		//not working
	}
}
/*-------------------------pole type = T-cantilever pole----------------------------*/
if(side1PoleType==3)
 8005678:	f1be 0f03 	cmp.w	lr, #3
 800567c:	d105      	bne.n	800568a <analysingResponseOfSlave+0xf6>
{

	primaryByteCommand[1]= sideNo1 >> 4; // right shift 4 bit
	primaryByteCommand[1]=primaryByteCommand[1] | sideNo1;
 800567e:	4924      	ldr	r1, [pc, #144]	; (8005710 <analysingResponseOfSlave+0x17c>)
 8005680:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8005684:	604b      	str	r3, [r1, #4]
	secondaryByteCommand[1]=primaryByteCommand[1];
 8005686:	4923      	ldr	r1, [pc, #140]	; (8005714 <analysingResponseOfSlave+0x180>)
 8005688:	604b      	str	r3, [r1, #4]

		//not working
	}
}

if(side2PoleType==3)
 800568a:	2f03      	cmp	r7, #3
 800568c:	d105      	bne.n	800569a <analysingResponseOfSlave+0x106>
{


	primaryByteCommand[2]= sideNo2 >> 4; // right shift 4 bit
	primaryByteCommand[2]=primaryByteCommand[2] | sideNo2;
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <analysingResponseOfSlave+0x17c>)
 8005690:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
 8005694:	609a      	str	r2, [r3, #8]
	secondaryByteCommand[2]=primaryByteCommand[2];
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <analysingResponseOfSlave+0x180>)
 8005698:	609a      	str	r2, [r3, #8]

		//not working
	}
}

if(side3PoleType==3)
 800569a:	2e03      	cmp	r6, #3
 800569c:	d106      	bne.n	80056ac <analysingResponseOfSlave+0x118>
{
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 800569e:	682b      	ldr	r3, [r5, #0]
	primaryByteCommand[3]= sideNo3 ;
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 80056a0:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <analysingResponseOfSlave+0x17c>)
 80056a2:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 80056a6:	60d3      	str	r3, [r2, #12]
	secondaryByteCommand[3]=primaryByteCommand[3];
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <analysingResponseOfSlave+0x180>)
 80056aa:	60d3      	str	r3, [r2, #12]

		//not working
	}
}

if(side4PoleType==3)
 80056ac:	2803      	cmp	r0, #3
 80056ae:	d106      	bne.n	80056be <analysingResponseOfSlave+0x12a>
{
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 80056b0:	6823      	ldr	r3, [r4, #0]
//	secondaryByteCommand[4]=sideNo4;
	primaryByteCommand[4]= sideNo4 ;
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 80056b2:	4a17      	ldr	r2, [pc, #92]	; (8005710 <analysingResponseOfSlave+0x17c>)
 80056b4:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 80056b8:	6113      	str	r3, [r2, #16]
	secondaryByteCommand[4]=primaryByteCommand[4];
 80056ba:	4a16      	ldr	r2, [pc, #88]	; (8005714 <analysingResponseOfSlave+0x180>)
 80056bc:	6113      	str	r3, [r2, #16]
 80056be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	primaryByteCommand[1]=sideNo1;
 80056c2:	4e13      	ldr	r6, [pc, #76]	; (8005710 <analysingResponseOfSlave+0x17c>)
	if(primaryByteCommand[1]==primaryByte[1])
 80056c4:	4f16      	ldr	r7, [pc, #88]	; (8005720 <analysingResponseOfSlave+0x18c>)
	primaryByteCommand[1]=sideNo1;
 80056c6:	6073      	str	r3, [r6, #4]
	secondaryByteCommand[1]=sideNo1;
 80056c8:	4e12      	ldr	r6, [pc, #72]	; (8005714 <analysingResponseOfSlave+0x180>)
 80056ca:	6073      	str	r3, [r6, #4]
	if(primaryByteCommand[1]==primaryByte[1])
 80056cc:	687e      	ldr	r6, [r7, #4]
 80056ce:	42b3      	cmp	r3, r6
 80056d0:	f47f af7b 	bne.w	80055ca <analysingResponseOfSlave+0x36>
		if(primaryByte[1]==0x30) ///green
 80056d4:	2b30      	cmp	r3, #48	; 0x30
 80056d6:	f47f af78 	bne.w	80055ca <analysingResponseOfSlave+0x36>
			if((primaryByte[2]==0x30)||(primaryByte[3]==0x30)||(primaryByte[4]==0x30)){
 80056da:	68be      	ldr	r6, [r7, #8]
 80056dc:	2e30      	cmp	r6, #48	; 0x30
 80056de:	d0ee      	beq.n	80056be <analysingResponseOfSlave+0x12a>
 80056e0:	68fe      	ldr	r6, [r7, #12]
 80056e2:	2e30      	cmp	r6, #48	; 0x30
 80056e4:	d0eb      	beq.n	80056be <analysingResponseOfSlave+0x12a>
 80056e6:	693e      	ldr	r6, [r7, #16]
 80056e8:	2e30      	cmp	r6, #48	; 0x30
 80056ea:	f47f af6e 	bne.w	80055ca <analysingResponseOfSlave+0x36>
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f2:	bf00      	nop
 80056f4:	200010bd 	.word	0x200010bd
 80056f8:	200015e8 	.word	0x200015e8
 80056fc:	20001620 	.word	0x20001620
 8005700:	20003680 	.word	0x20003680
 8005704:	20003ad8 	.word	0x20003ad8
 8005708:	20001658 	.word	0x20001658
 800570c:	2000363c 	.word	0x2000363c
 8005710:	20003c30 	.word	0x20003c30
 8005714:	20003608 	.word	0x20003608
 8005718:	200039f8 	.word	0x200039f8
 800571c:	20003ac8 	.word	0x20003ac8
 8005720:	2000371c 	.word	0x2000371c

08005724 <slaveResponse>:
void slaveResponse(){
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(msgUnPrcd4==1)
 8005726:	4d67      	ldr	r5, [pc, #412]	; (80058c4 <slaveResponse+0x1a0>)
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d113      	bne.n	8005756 <slaveResponse+0x32>
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 800572e:	4c66      	ldr	r4, [pc, #408]	; (80058c8 <slaveResponse+0x1a4>)
					functionRec=0;
 8005730:	4b66      	ldr	r3, [pc, #408]	; (80058cc <slaveResponse+0x1a8>)
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005732:	4967      	ldr	r1, [pc, #412]	; (80058d0 <slaveResponse+0x1ac>)
					functionRec=0;
 8005734:	2600      	movs	r6, #0
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005736:	4632      	mov	r2, r6
 8005738:	4620      	mov	r0, r4
					functionRec=0;
 800573a:	601e      	str	r6, [r3, #0]
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 800573c:	f003 fa24 	bl	8008b88 <msgParse>
 8005740:	4b64      	ldr	r3, [pc, #400]	; (80058d4 <slaveResponse+0x1b0>)
					  		if(!(signVal==0))
 8005742:	b948      	cbnz	r0, 8005758 <slaveResponse+0x34>
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005744:	6018      	str	r0, [r3, #0]
					clearingDataBuffer();
 8005746:	f7ff fa13 	bl	8004b70 <clearingDataBuffer>
			  		clearBuffer4();
 800574a:	f7ff fc9f 	bl	800508c <clearBuffer4>
			  		clearaRxBuffer4();
 800574e:	f7ff fca7 	bl	80050a0 <clearaRxBuffer4>
			  		msgUnPrcd4=0;
 8005752:	2300      	movs	r3, #0
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					  			 signVal=signVal-6;
 8005758:	3806      	subs	r0, #6
 800575a:	6018      	str	r0, [r3, #0]
					  			transferRecValuesToData(signVal);
 800575c:	f7ff f938 	bl	80049d0 <transferRecValuesToData>
					  		  byteToIntegerVal(&Data[0],0);
 8005760:	4631      	mov	r1, r6
 8005762:	485d      	ldr	r0, [pc, #372]	; (80058d8 <slaveResponse+0x1b4>)
					  		  crcstring[0] = crcbits & 0xFF;
 8005764:	4f5d      	ldr	r7, [pc, #372]	; (80058dc <slaveResponse+0x1b8>)
					  		  byteToIntegerVal(&Data[0],0);
 8005766:	f7ff fcfd 	bl	8005164 <byteToIntegerVal>
					  		CRCValue = HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 8);
 800576a:	2208      	movs	r2, #8
 800576c:	495c      	ldr	r1, [pc, #368]	; (80058e0 <slaveResponse+0x1bc>)
 800576e:	485d      	ldr	r0, [pc, #372]	; (80058e4 <slaveResponse+0x1c0>)
 8005770:	f7fa ffb8 	bl	80006e4 <HAL_CRC_Calculate>
 8005774:	4b5c      	ldr	r3, [pc, #368]	; (80058e8 <slaveResponse+0x1c4>)
 8005776:	6018      	str	r0, [r3, #0]
					  		  crcbits =	CRCValue;
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b5c      	ldr	r3, [pc, #368]	; (80058ec <slaveResponse+0x1c8>)
 800577c:	601a      	str	r2, [r3, #0]
					  		  crcstring[0] = crcbits & 0xFF;
 800577e:	681a      	ldr	r2, [r3, #0]
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 8005780:	6819      	ldr	r1, [r3, #0]
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 8005782:	6818      	ldr	r0, [r3, #0]
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005784:	681b      	ldr	r3, [r3, #0]
					  		  crcstring[0] = crcbits & 0xFF;
 8005786:	b2d2      	uxtb	r2, r2
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005788:	0e1b      	lsrs	r3, r3, #24
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 800578a:	f3c1 2107 	ubfx	r1, r1, #8, #8
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 800578e:	f3c0 4007 	ubfx	r0, r0, #16, #8
					  		  crcstring[0] = crcbits & 0xFF;
 8005792:	703a      	strb	r2, [r7, #0]
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 8005794:	7079      	strb	r1, [r7, #1]
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 8005796:	70b8      	strb	r0, [r7, #2]
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005798:	70fb      	strb	r3, [r7, #3]
						  		if(RecMsg4[10] == crcstring[3])
 800579a:	7aa7      	ldrb	r7, [r4, #10]
 800579c:	429f      	cmp	r7, r3
 800579e:	f040 808e 	bne.w	80058be <slaveResponse+0x19a>
						  		if(RecMsg4[11] == crcstring[2])
 80057a2:	7ae3      	ldrb	r3, [r4, #11]
 80057a4:	4283      	cmp	r3, r0
 80057a6:	f040 808a 	bne.w	80058be <slaveResponse+0x19a>
						  		if(RecMsg4[12] == crcstring[1])
 80057aa:	7b23      	ldrb	r3, [r4, #12]
 80057ac:	428b      	cmp	r3, r1
 80057ae:	f040 8086 	bne.w	80058be <slaveResponse+0x19a>
						  		if(RecMsg4[13] == crcstring[0]){
 80057b2:	7b63      	ldrb	r3, [r4, #13]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f040 8082 	bne.w	80058be <slaveResponse+0x19a>
						  			if(RecMsg4[5]== 1)//comparing the receive msg with side
 80057ba:	7963      	ldrb	r3, [r4, #5]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d11b      	bne.n	80057f8 <slaveResponse+0xd4>
						  				if(RecMsg4[0] == 0xFF)
 80057c0:	7823      	ldrb	r3, [r4, #0]
						  					primaryByte[1]=0x00;
 80057c2:	4a4b      	ldr	r2, [pc, #300]	; (80058f0 <slaveResponse+0x1cc>)
						  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80057c4:	484b      	ldr	r0, [pc, #300]	; (80058f4 <slaveResponse+0x1d0>)
						  					primaryByte[1]=0x00;
 80057c6:	2bff      	cmp	r3, #255	; 0xff
 80057c8:	bf08      	it	eq
 80057ca:	4633      	moveq	r3, r6
 80057cc:	6053      	str	r3, [r2, #4]
						  				if(RecMsg4[1] == 0xFF)
 80057ce:	7862      	ldrb	r2, [r4, #1]
						  					secondaryByte[1]=0x00;
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <slaveResponse+0x1d4>)
						  				if(RecMsg4[1] == 0xFF)
 80057d2:	2aff      	cmp	r2, #255	; 0xff
						  					secondaryByte[1]=0x00;
 80057d4:	bf08      	it	eq
 80057d6:	4632      	moveq	r2, r6
 80057d8:	605a      	str	r2, [r3, #4]
						  				hundredPlaceSegment[1]=RecMsg4[2];
 80057da:	4b48      	ldr	r3, [pc, #288]	; (80058fc <slaveResponse+0x1d8>)
 80057dc:	78a2      	ldrb	r2, [r4, #2]
 80057de:	605a      	str	r2, [r3, #4]
						  				tenPlaceSegment[1]=RecMsg4[3];
 80057e0:	4b47      	ldr	r3, [pc, #284]	; (8005900 <slaveResponse+0x1dc>)
 80057e2:	78e2      	ldrb	r2, [r4, #3]
 80057e4:	605a      	str	r2, [r3, #4]
						  				unitPlaceSegment[1]=RecMsg4[4];
 80057e6:	4b47      	ldr	r3, [pc, #284]	; (8005904 <slaveResponse+0x1e0>)
 80057e8:	7922      	ldrb	r2, [r4, #4]
 80057ea:	605a      	str	r2, [r3, #4]
						  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80057ec:	2108      	movs	r1, #8
 80057ee:	f7fb f88c 	bl	800090a <HAL_GPIO_TogglePin>
						  			slave1Rsp=1;
 80057f2:	4b45      	ldr	r3, [pc, #276]	; (8005908 <slaveResponse+0x1e4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 2){
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d11b      	bne.n	8005836 <slaveResponse+0x112>
								    if (RecMsg4[0] == 0xFF)
 80057fe:	7822      	ldrb	r2, [r4, #0]
 8005800:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <slaveResponse+0x1cc>)
								        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8005802:	4842      	ldr	r0, [pc, #264]	; (800590c <slaveResponse+0x1e8>)
								    if (RecMsg4[0] == 0xFF)
 8005804:	2aff      	cmp	r2, #255	; 0xff
								    	primaryByte[2] = 0x00;
 8005806:	bf08      	it	eq
 8005808:	2200      	moveq	r2, #0
								    	primaryByte[2] = RecMsg4[0];
 800580a:	609a      	str	r2, [r3, #8]
								    if (RecMsg4[1] == 0xFF)
 800580c:	7862      	ldrb	r2, [r4, #1]
 800580e:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <slaveResponse+0x1d4>)
 8005810:	2aff      	cmp	r2, #255	; 0xff
								    	secondaryByte[2] = 0x00;
 8005812:	bf08      	it	eq
 8005814:	2200      	moveq	r2, #0
								    	secondaryByte[2] = RecMsg4[1];
 8005816:	609a      	str	r2, [r3, #8]
								        hundredPlaceSegment[2] = RecMsg4[2];
 8005818:	4b38      	ldr	r3, [pc, #224]	; (80058fc <slaveResponse+0x1d8>)
 800581a:	78a2      	ldrb	r2, [r4, #2]
 800581c:	609a      	str	r2, [r3, #8]
								        tenPlaceSegment[2] = RecMsg4[3];
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <slaveResponse+0x1dc>)
 8005820:	78e2      	ldrb	r2, [r4, #3]
 8005822:	609a      	str	r2, [r3, #8]
								        unitPlaceSegment[2] = RecMsg4[4];
 8005824:	4b37      	ldr	r3, [pc, #220]	; (8005904 <slaveResponse+0x1e0>)
 8005826:	7922      	ldrb	r2, [r4, #4]
 8005828:	609a      	str	r2, [r3, #8]
								        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800582a:	2108      	movs	r1, #8
 800582c:	f7fb f86d 	bl	800090a <HAL_GPIO_TogglePin>
						  			slave2Rsp=1;
 8005830:	4b37      	ldr	r3, [pc, #220]	; (8005910 <slaveResponse+0x1ec>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 3){
 8005836:	7963      	ldrb	r3, [r4, #5]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d11b      	bne.n	8005874 <slaveResponse+0x150>
									    if (RecMsg4[0] == 0xFF)
 800583c:	7822      	ldrb	r2, [r4, #0]
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <slaveResponse+0x1cc>)
								        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005840:	482c      	ldr	r0, [pc, #176]	; (80058f4 <slaveResponse+0x1d0>)
									    if (RecMsg4[0] == 0xFF)
 8005842:	2aff      	cmp	r2, #255	; 0xff
									    	primaryByte[3] = 0x00;
 8005844:	bf08      	it	eq
 8005846:	2200      	moveq	r2, #0
									    	primaryByte[3] = RecMsg4[0];
 8005848:	60da      	str	r2, [r3, #12]
									    if (RecMsg4[1] == 0xFF)
 800584a:	7862      	ldrb	r2, [r4, #1]
 800584c:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <slaveResponse+0x1d4>)
 800584e:	2aff      	cmp	r2, #255	; 0xff
									    	secondaryByte[3] = 0x00;
 8005850:	bf08      	it	eq
 8005852:	2200      	moveq	r2, #0
									    	secondaryByte[3] = RecMsg4[1];
 8005854:	60da      	str	r2, [r3, #12]
							         	hundredPlaceSegment[3] = RecMsg4[2];
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <slaveResponse+0x1d8>)
 8005858:	78a2      	ldrb	r2, [r4, #2]
 800585a:	60da      	str	r2, [r3, #12]
								        tenPlaceSegment[3] = RecMsg4[3];
 800585c:	4b28      	ldr	r3, [pc, #160]	; (8005900 <slaveResponse+0x1dc>)
 800585e:	78e2      	ldrb	r2, [r4, #3]
 8005860:	60da      	str	r2, [r3, #12]
								        unitPlaceSegment[3] = RecMsg4[4];
 8005862:	4b28      	ldr	r3, [pc, #160]	; (8005904 <slaveResponse+0x1e0>)
 8005864:	7922      	ldrb	r2, [r4, #4]
 8005866:	60da      	str	r2, [r3, #12]
								        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005868:	2104      	movs	r1, #4
 800586a:	f7fb f84e 	bl	800090a <HAL_GPIO_TogglePin>
						            slave3Rsp=1;
 800586e:	4b29      	ldr	r3, [pc, #164]	; (8005914 <slaveResponse+0x1f0>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 4){
 8005874:	7963      	ldrb	r3, [r4, #5]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d11b      	bne.n	80058b2 <slaveResponse+0x18e>
									    if (RecMsg4[0] == 0xFF)
 800587a:	7822      	ldrb	r2, [r4, #0]
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <slaveResponse+0x1cc>)
						  				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800587e:	4826      	ldr	r0, [pc, #152]	; (8005918 <slaveResponse+0x1f4>)
									    if (RecMsg4[0] == 0xFF)
 8005880:	2aff      	cmp	r2, #255	; 0xff
									    	primaryByte[3] = 0x00;
 8005882:	bf08      	it	eq
 8005884:	2200      	moveq	r2, #0
									    	primaryByte[3] = RecMsg4[0];
 8005886:	60da      	str	r2, [r3, #12]
									    if (RecMsg4[1] == 0xFF)
 8005888:	7862      	ldrb	r2, [r4, #1]
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <slaveResponse+0x1d4>)
 800588c:	2aff      	cmp	r2, #255	; 0xff
									    	secondaryByte[3] = 0x00;
 800588e:	bf08      	it	eq
 8005890:	2200      	moveq	r2, #0
									    	secondaryByte[3] = RecMsg4[1];
 8005892:	60da      	str	r2, [r3, #12]
						  				hundredPlaceSegment[4] = RecMsg4[2];
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <slaveResponse+0x1d8>)
 8005896:	78a2      	ldrb	r2, [r4, #2]
 8005898:	611a      	str	r2, [r3, #16]
						  				tenPlaceSegment[4] = RecMsg4[3];
 800589a:	4b19      	ldr	r3, [pc, #100]	; (8005900 <slaveResponse+0x1dc>)
 800589c:	78e2      	ldrb	r2, [r4, #3]
 800589e:	611a      	str	r2, [r3, #16]
						  				unitPlaceSegment[4] = RecMsg4[4];
 80058a0:	4b18      	ldr	r3, [pc, #96]	; (8005904 <slaveResponse+0x1e0>)
 80058a2:	7922      	ldrb	r2, [r4, #4]
 80058a4:	611a      	str	r2, [r3, #16]
						  				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80058a6:	2108      	movs	r1, #8
 80058a8:	f7fb f82f 	bl	800090a <HAL_GPIO_TogglePin>
						  				slave4Rsp=1;
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <slaveResponse+0x1f8>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
						  			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);//master
 80058b2:	2108      	movs	r1, #8
 80058b4:	481a      	ldr	r0, [pc, #104]	; (8005920 <slaveResponse+0x1fc>)
 80058b6:	f7fb f828 	bl	800090a <HAL_GPIO_TogglePin>
						  			analysingResponseOfSlave();
 80058ba:	f7ff fe6b 	bl	8005594 <analysingResponseOfSlave>
						  		msgUnPrcd4=0;
 80058be:	2300      	movs	r3, #0
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	e740      	b.n	8005746 <slaveResponse+0x22>
 80058c4:	20000ebc 	.word	0x20000ebc
 80058c8:	200053d4 	.word	0x200053d4
 80058cc:	20000084 	.word	0x20000084
 80058d0:	08009547 	.word	0x08009547
 80058d4:	200015c8 	.word	0x200015c8
 80058d8:	20003758 	.word	0x20003758
 80058dc:	20000fd8 	.word	0x20000fd8
 80058e0:	2000151c 	.word	0x2000151c
 80058e4:	20000d28 	.word	0x20000d28
 80058e8:	20000078 	.word	0x20000078
 80058ec:	20000080 	.word	0x20000080
 80058f0:	2000371c 	.word	0x2000371c
 80058f4:	40020800 	.word	0x40020800
 80058f8:	20003664 	.word	0x20003664
 80058fc:	20003740 	.word	0x20003740
 8005900:	200037c0 	.word	0x200037c0
 8005904:	20001608 	.word	0x20001608
 8005908:	2000008c 	.word	0x2000008c
 800590c:	40020000 	.word	0x40020000
 8005910:	20000094 	.word	0x20000094
 8005914:	2000009c 	.word	0x2000009c
 8005918:	40020400 	.word	0x40020400
 800591c:	200000a4 	.word	0x200000a4
 8005920:	40021000 	.word	0x40021000

08005924 <crcApi4>:



}

int crcApi4(int signval) {
 8005924:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + RecMsg3[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + RecMsg3[signval];
 8005926:	490b      	ldr	r1, [pc, #44]	; (8005954 <crcApi4+0x30>)
 8005928:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 800592a:	2204      	movs	r2, #4
	zzzz = zxx9 + RecMsg3[signval];
 800592c:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 800592e:	2300      	movs	r3, #0
	zzzz = zxx9 + RecMsg3[signval];
 8005930:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 8005932:	42a2      	cmp	r2, r4
 8005934:	db04      	blt.n	8005940 <crcApi4+0x1c>
		zyy9 = zyy9 + RecMsg3[signval++];
		zxx9++;
	}
	while (zyy9 > 256) {
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	dc08      	bgt.n	800594e <crcApi4+0x2a>
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + RecMsg3[signval++];
 8005940:	1815      	adds	r5, r2, r0
 8005942:	440d      	add	r5, r1
		zxx9++;
 8005944:	3201      	adds	r2, #1
		zyy9 = zyy9 + RecMsg3[signval++];
 8005946:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 800594a:	442b      	add	r3, r5
 800594c:	e7f1      	b.n	8005932 <crcApi4+0xe>
		crcValue = crcValue - 1;
 800594e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005952:	e7f0      	b.n	8005936 <crcApi4+0x12>
 8005954:	200056c2 	.word	0x200056c2

08005958 <crcApi1>:


int crcApi1(int signval) {
 8005958:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + RecMsg1[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + RecMsg1[signval];
 800595a:	490b      	ldr	r1, [pc, #44]	; (8005988 <crcApi1+0x30>)
 800595c:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 800595e:	2204      	movs	r2, #4
	zzzz = zxx9 + RecMsg1[signval];
 8005960:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 8005962:	2300      	movs	r3, #0
	zzzz = zxx9 + RecMsg1[signval];
 8005964:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 8005966:	42a2      	cmp	r2, r4
 8005968:	db04      	blt.n	8005974 <crcApi1+0x1c>
		zyy9 = zyy9 + RecMsg1[signval++];
		zxx9++;
	}
	while (zyy9 > 256) {
 800596a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596e:	dc08      	bgt.n	8005982 <crcApi1+0x2a>
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + RecMsg1[signval++];
 8005974:	1815      	adds	r5, r2, r0
 8005976:	440d      	add	r5, r1
		zxx9++;
 8005978:	3201      	adds	r2, #1
		zyy9 = zyy9 + RecMsg1[signval++];
 800597a:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 800597e:	442b      	add	r3, r5
 8005980:	e7f1      	b.n	8005966 <crcApi1+0xe>
		crcValue = crcValue - 1;
 8005982:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005986:	e7f0      	b.n	800596a <crcApi1+0x12>
 8005988:	200057bc 	.word	0x200057bc

0800598c <crcApi3>:


int crcApi3(int signval) {
 800598c:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + aRxBuffer[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + aRxBuffer[signval];
 800598e:	490a      	ldr	r1, [pc, #40]	; (80059b8 <crcApi3+0x2c>)
 8005990:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 8005992:	2204      	movs	r2, #4
	zzzz = zxx9 + aRxBuffer[signval];
 8005994:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 8005996:	2300      	movs	r3, #0
	zzzz = zxx9 + aRxBuffer[signval];
 8005998:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 800599a:	42a2      	cmp	r2, r4
 800599c:	db04      	blt.n	80059a8 <crcApi3+0x1c>
 800599e:	1c58      	adds	r0, r3, #1
 80059a0:	0a00      	lsrs	r0, r0, #8
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 80059a2:	eba3 2000 	sub.w	r0, r3, r0, lsl #8
 80059a6:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + aRxBuffer[signval++];
 80059a8:	1885      	adds	r5, r0, r2
 80059aa:	440d      	add	r5, r1
		zxx9++;
 80059ac:	3201      	adds	r2, #1
		zyy9 = zyy9 + aRxBuffer[signval++];
 80059ae:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 80059b2:	442b      	add	r3, r5
 80059b4:	e7f1      	b.n	800599a <crcApi3+0xe>
 80059b6:	bf00      	nop
 80059b8:	2000134c 	.word	0x2000134c

080059bc <function9>:
int function9(void) {
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 80059be:	4e51      	ldr	r6, [pc, #324]	; (8005b04 <function9+0x148>)
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80059c0:	4d51      	ldr	r5, [pc, #324]	; (8005b08 <function9+0x14c>)
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 80059c2:	4852      	ldr	r0, [pc, #328]	; (8005b0c <function9+0x150>)
	frame[0] = 126;
 80059c4:	4c52      	ldr	r4, [pc, #328]	; (8005b10 <function9+0x154>)
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 80059c6:	2200      	movs	r2, #0
 80059c8:	4631      	mov	r1, r6
 80059ca:	f7fc f81b 	bl	8001a04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80059ce:	2200      	movs	r2, #0
 80059d0:	4629      	mov	r1, r5
 80059d2:	484e      	ldr	r0, [pc, #312]	; (8005b0c <function9+0x150>)
 80059d4:	f7fc f83e 	bl	8001a54 <HAL_RTC_GetDate>
	frame[0] = 126;
 80059d8:	237e      	movs	r3, #126	; 0x7e
 80059da:	7023      	strb	r3, [r4, #0]
	frame[1] = 126;
 80059dc:	7063      	strb	r3, [r4, #1]
	frame[2] = 0; // function no
 80059de:	2300      	movs	r3, #0
 80059e0:	70a3      	strb	r3, [r4, #2]
	frame[3] = 21;
 80059e2:	2315      	movs	r3, #21
 80059e4:	70e3      	strb	r3, [r4, #3]
	frame[4] = junctionId;
 80059e6:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <function9+0x158>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	7123      	strb	r3, [r4, #4]
	frame[5] = programVersionNo; // junction no
 80059ec:	4b4a      	ldr	r3, [pc, #296]	; (8005b18 <function9+0x15c>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	7163      	strb	r3, [r4, #5]
	frame[6] = fileNo; // junction no
 80059f2:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <function9+0x160>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	71a3      	strb	r3, [r4, #6]
	frame[7] = 9;
 80059f8:	2309      	movs	r3, #9
 80059fa:	71e3      	strb	r3, [r4, #7]
	frame[8] = sTime.Hours;
 80059fc:	7833      	ldrb	r3, [r6, #0]
 80059fe:	7223      	strb	r3, [r4, #8]
	frame[9] = sTime.Minutes;
 8005a00:	7873      	ldrb	r3, [r6, #1]
 8005a02:	7263      	strb	r3, [r4, #9]
	frame[10] = sDate.Date;
 8005a04:	78ab      	ldrb	r3, [r5, #2]
 8005a06:	72a3      	strb	r3, [r4, #10]
	frame[11] = sDate.Month;
 8005a08:	786b      	ldrb	r3, [r5, #1]
 8005a0a:	72e3      	strb	r3, [r4, #11]
	frame[12] = 12;
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	7323      	strb	r3, [r4, #12]
	frame[13] = '1';
 8005a10:	2331      	movs	r3, #49	; 0x31
 8005a12:	7363      	strb	r3, [r4, #13]
	frame[14] = '1';
 8005a14:	73a3      	strb	r3, [r4, #14]
	frame[15] = '1';
 8005a16:	73e3      	strb	r3, [r4, #15]
	frame[16] = '1';
 8005a18:	7423      	strb	r3, [r4, #16]
	frame[17] = '1';
 8005a1a:	7463      	strb	r3, [r4, #17]
	frame[18] = '1';
 8005a1c:	74a3      	strb	r3, [r4, #18]
	frame[19] = '1';
 8005a1e:	74e3      	strb	r3, [r4, #19]
	frame[20] = '1';
 8005a20:	7523      	strb	r3, [r4, #20]
	frame[21] = '1';
 8005a22:	7563      	strb	r3, [r4, #21]
	frame[22] = '1'; //'1'
 8005a24:	75a3      	strb	r3, [r4, #22]
	frame[23] = '1'; //'0' ; //'5' ;
 8005a26:	75e3      	strb	r3, [r4, #23]
	frame[24] = '1'; // '2' ;//'9' ;//'1' ;
 8005a28:	7623      	strb	r3, [r4, #24]
	frame[25] = 0xFF - crcApi();
 8005a2a:	f7ff fb57 	bl	80050dc <crcApi>
	frame[26] = 125;
 8005a2e:	237d      	movs	r3, #125	; 0x7d
 8005a30:	76a3      	strb	r3, [r4, #26]
	frame[27] = 125;
 8005a32:	76e3      	strb	r3, [r4, #27]
	if(programFromBLE==1)
 8005a34:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <function9+0x164>)
 8005a36:	681b      	ldr	r3, [r3, #0]
	frame[25] = 0xFF - crcApi();
 8005a38:	43c0      	mvns	r0, r0
	if(programFromBLE==1)
 8005a3a:	2b01      	cmp	r3, #1
	frame[25] = 0xFF - crcApi();
 8005a3c:	7660      	strb	r0, [r4, #25]
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 27, 5000);
 8005a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a42:	f04f 021b 	mov.w	r2, #27
 8005a46:	4621      	mov	r1, r4
	if(programFromBLE==1)
 8005a48:	d14d      	bne.n	8005ae6 <function9+0x12a>
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 27, 5000);
 8005a4a:	4836      	ldr	r0, [pc, #216]	; (8005b24 <function9+0x168>)
 8005a4c:	f7fc fd48 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 8005a50:	4935      	ldr	r1, [pc, #212]	; (8005b28 <function9+0x16c>)
 8005a52:	4834      	ldr	r0, [pc, #208]	; (8005b24 <function9+0x168>)
 8005a54:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8005a58:	2228      	movs	r2, #40	; 0x28
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005a5a:	4c33      	ldr	r4, [pc, #204]	; (8005b28 <function9+0x16c>)
	signVal=4;
 8005a5c:	4f33      	ldr	r7, [pc, #204]	; (8005b2c <function9+0x170>)
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 70, 0x1FFF);
 8005a5e:	f7fc fd9c 	bl	800259a <HAL_UART_Receive>
	HAL_Delay(300);
 8005a62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a66:	f7fa fdad 	bl	80005c4 <HAL_Delay>
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4930      	ldr	r1, [pc, #192]	; (8005b30 <function9+0x174>)
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f003 f88a 	bl	8008b88 <msgParse>
	signVal=4;
 8005a74:	2004      	movs	r0, #4
 8005a76:	6038      	str	r0, [r7, #0]
		if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2] + crcApi3(signVal)
 8005a78:	f7ff ff88 	bl	800598c <crcApi3>
 8005a7c:	7963      	ldrb	r3, [r4, #5]
 8005a7e:	4423      	add	r3, r4
 8005a80:	799b      	ldrb	r3, [r3, #6]
 8005a82:	4418      	add	r0, r3
 8005a84:	28ff      	cmp	r0, #255	; 0xff
 8005a86:	d137      	bne.n	8005af8 <function9+0x13c>
			signVal = signVal + 4;
 8005a88:	2308      	movs	r3, #8
 8005a8a:	603b      	str	r3, [r7, #0]
			sTime.Hours = aRxBuffer[signVal + 2]; // current hour
 8005a8c:	7aa3      	ldrb	r3, [r4, #10]
 8005a8e:	7033      	strb	r3, [r6, #0]
			sTime.Minutes =aRxBuffer[signVal + 3]; // current min
 8005a90:	7ae3      	ldrb	r3, [r4, #11]
 8005a92:	7073      	strb	r3, [r6, #1]
			sDate.Date = aRxBuffer[signVal + 4]; // current date
 8005a94:	7b23      	ldrb	r3, [r4, #12]
 8005a96:	70ab      	strb	r3, [r5, #2]
			sDate.Month = aRxBuffer[signVal + 5]; // current month
 8005a98:	7b63      	ldrb	r3, [r4, #13]
 8005a9a:	706b      	strb	r3, [r5, #1]
			sDate.Year = aRxBuffer[signVal + 6];	// current year
 8005a9c:	7ba3      	ldrb	r3, [r4, #14]
 8005a9e:	70eb      	strb	r3, [r5, #3]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005aa0:	2200      	movs	r2, #0
			sDate.WeekDay=aRxBuffer[signVal + 8];	// current weekday
 8005aa2:	7c23      	ldrb	r3, [r4, #16]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005aa4:	4917      	ldr	r1, [pc, #92]	; (8005b04 <function9+0x148>)
 8005aa6:	4819      	ldr	r0, [pc, #100]	; (8005b0c <function9+0x150>)
			sDate.WeekDay=aRxBuffer[signVal + 8];	// current weekday
 8005aa8:	702b      	strb	r3, [r5, #0]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005aaa:	f7fb fed2 	bl	8001852 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4915      	ldr	r1, [pc, #84]	; (8005b08 <function9+0x14c>)
 8005ab2:	4816      	ldr	r0, [pc, #88]	; (8005b0c <function9+0x150>)
 8005ab4:	f7fb ff3d 	bl	8001932 <HAL_RTC_SetDate>
			   HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005ab8:	4913      	ldr	r1, [pc, #76]	; (8005b08 <function9+0x14c>)
 8005aba:	4814      	ldr	r0, [pc, #80]	; (8005b0c <function9+0x150>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	f7fb ffc9 	bl	8001a54 <HAL_RTC_GetDate>
			   DateLast=sDate.Date;
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <function9+0x178>)
 8005ac4:	78aa      	ldrb	r2, [r5, #2]
 8005ac6:	701a      	strb	r2, [r3, #0]
			string[1] = aRxBuffer[signVal + 7];	// current clock sync status
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	441c      	add	r4, r3
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <function9+0x17c>)
 8005ace:	79e2      	ldrb	r2, [r4, #7]
 8005ad0:	705a      	strb	r2, [r3, #1]
			clearBuffer3();
 8005ad2:	f7ff fac7 	bl	8005064 <clearBuffer3>
				clearaRxBuffer();
 8005ad6:	f7ff fabb 	bl	8005050 <clearaRxBuffer>
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005ada:	2110      	movs	r1, #16
 8005adc:	4817      	ldr	r0, [pc, #92]	; (8005b3c <function9+0x180>)
 8005ade:	f7fa ff14 	bl	800090a <HAL_GPIO_TogglePin>
			return 1;
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 27, 5000);
 8005ae6:	4816      	ldr	r0, [pc, #88]	; (8005b40 <function9+0x184>)
 8005ae8:	f7fc fcfa 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 70, 0x1FFF);
 8005aec:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005af0:	2246      	movs	r2, #70	; 0x46
 8005af2:	490d      	ldr	r1, [pc, #52]	; (8005b28 <function9+0x16c>)
 8005af4:	4812      	ldr	r0, [pc, #72]	; (8005b40 <function9+0x184>)
 8005af6:	e7b0      	b.n	8005a5a <function9+0x9e>
	clearBuffer3();
 8005af8:	f7ff fab4 	bl	8005064 <clearBuffer3>
	clearaRxBuffer();
 8005afc:	f7ff faa8 	bl	8005050 <clearaRxBuffer>
}
 8005b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000ea4 	.word	0x20000ea4
 8005b08:	2000115a 	.word	0x2000115a
 8005b0c:	20001168 	.word	0x20001168
 8005b10:	20003ae1 	.word	0x20003ae1
 8005b14:	2000000d 	.word	0x2000000d
 8005b18:	2000010d 	.word	0x2000010d
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	2000367c 	.word	0x2000367c
 8005b24:	200010e8 	.word	0x200010e8
 8005b28:	2000134c 	.word	0x2000134c
 8005b2c:	200015c8 	.word	0x200015c8
 8005b30:	080094f7 	.word	0x080094f7
 8005b34:	200015ec 	.word	0x200015ec
 8005b38:	200052f2 	.word	0x200052f2
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	20000e10 	.word	0x20000e10

08005b44 <function_10>:
int function_10() {
 8005b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		SDcardReadSeek("infoN.txt", 15, 0);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	210f      	movs	r1, #15
 8005b4c:	485f      	ldr	r0, [pc, #380]	; (8005ccc <function_10+0x188>)
		totalNoOfPhases = totalNoOfPhases + 1;
 8005b4e:	4e60      	ldr	r6, [pc, #384]	; (8005cd0 <function_10+0x18c>)
			frame[4] = junctionId;									//junctionID
 8005b50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d10 <function_10+0x1cc>
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005b54:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005d14 <function_10+0x1d0>
		SDcardReadSeek("infoN.txt", 15, 0);
 8005b58:	f7fe fe3e 	bl	80047d8 <SDcardReadSeek>
		totalNoOfPhases=readBytes[9];
 8005b5c:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <function_10+0x190>)
		totalNoOfPhases = totalNoOfPhases + 1;
 8005b5e:	7a5b      	ldrb	r3, [r3, #9]
 8005b60:	3301      	adds	r3, #1
 8005b62:	7033      	strb	r3, [r6, #0]
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005b64:	2501      	movs	r5, #1
	int seekCnt=0;
 8005b66:	2700      	movs	r7, #0
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005b68:	7833      	ldrb	r3, [r6, #0]
 8005b6a:	429d      	cmp	r5, r3
 8005b6c:	db02      	blt.n	8005b74 <function_10+0x30>
	return 1;
 8005b6e:	2001      	movs	r0, #1
}
 8005b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			phaseNo = i;
 8005b74:	4858      	ldr	r0, [pc, #352]	; (8005cd8 <function_10+0x194>)
			frame[0] = 0x7E;
 8005b76:	4c59      	ldr	r4, [pc, #356]	; (8005cdc <function_10+0x198>)
			phaseNo = i;
 8005b78:	7005      	strb	r5, [r0, #0]
			clearframe();
 8005b7a:	f7ff fa3f 	bl	8004ffc <clearframe>
			fileNo = 111;
 8005b7e:	4a58      	ldr	r2, [pc, #352]	; (8005ce0 <function_10+0x19c>)
 8005b80:	236f      	movs	r3, #111	; 0x6f
 8005b82:	7013      	strb	r3, [r2, #0]
			frame[6] = fileNo;									//fileNumb
 8005b84:	71a3      	strb	r3, [r4, #6]
			frame[7] = 0x0A;									//functionNo
 8005b86:	230a      	movs	r3, #10
 8005b88:	71e3      	strb	r3, [r4, #7]
			frame[8] = planNo;									//planNo
 8005b8a:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <function_10+0x1a0>)
			frame[0] = 0x7E;
 8005b8c:	227e      	movs	r2, #126	; 0x7e
 8005b8e:	7022      	strb	r2, [r4, #0]
			frame[1] = 0x7E;
 8005b90:	7062      	strb	r2, [r4, #1]
			frame[8] = planNo;									//planNo
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	7223      	strb	r3, [r4, #8]
			frame[2] = 0x00;									//byte size 1
 8005b96:	2200      	movs	r2, #0
 8005b98:	70a2      	strb	r2, [r4, #2]
			frame[9] = planID;									//phaseNo
 8005b9a:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <function_10+0x1a4>)
			frame[3] = 18;									//byte size 2
 8005b9c:	2212      	movs	r2, #18
 8005b9e:	70e2      	strb	r2, [r4, #3]
			frame[4] = junctionId;									//junctionID
 8005ba0:	f898 2000 	ldrb.w	r2, [r8]
 8005ba4:	7122      	strb	r2, [r4, #4]
			frame[9] = planID;									//phaseNo
 8005ba6:	781b      	ldrb	r3, [r3, #0]
			frame[5] = programVersionNo;					//programVerNumber
 8005ba8:	4a50      	ldr	r2, [pc, #320]	; (8005cec <function_10+0x1a8>)
			frame[9] = planID;									//phaseNo
 8005baa:	7263      	strb	r3, [r4, #9]
			frame[10] = phaseNo;
 8005bac:	7803      	ldrb	r3, [r0, #0]
			frame[5] = programVersionNo;					//programVerNumber
 8005bae:	7812      	ldrb	r2, [r2, #0]
			frame[10] = phaseNo;
 8005bb0:	72a3      	strb	r3, [r4, #10]
			frame[11] = '1';
 8005bb2:	2331      	movs	r3, #49	; 0x31
			frame[5] = programVersionNo;					//programVerNumber
 8005bb4:	7162      	strb	r2, [r4, #5]
			frame[11] = '1';
 8005bb6:	72e3      	strb	r3, [r4, #11]
			frame[12] = '1';
 8005bb8:	7323      	strb	r3, [r4, #12]
			frame[13] = '1';
 8005bba:	7363      	strb	r3, [r4, #13]
			frame[14] = '1';
 8005bbc:	73a3      	strb	r3, [r4, #14]
			frame[15] = '1';
 8005bbe:	73e3      	strb	r3, [r4, #15]
			frame[16] = '1';
 8005bc0:	7423      	strb	r3, [r4, #16]
			frame[17] = '1';
 8005bc2:	7463      	strb	r3, [r4, #17]
			frame[18] = '1';
 8005bc4:	74a3      	strb	r3, [r4, #18]
			frame[19] = '1';									//'1'
 8005bc6:	74e3      	strb	r3, [r4, #19]
			frame[20] = '1';									//'0' ; //'5' ;
 8005bc8:	7523      	strb	r3, [r4, #20]
			frame[21] = '1';							// '2' ;//'9' ;//'1' ;
 8005bca:	7563      	strb	r3, [r4, #21]
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005bcc:	f7ff fa96 	bl	80050fc <crcApiResponse>
			frame[23] = 0x7D;								// ending delimeter
 8005bd0:	237d      	movs	r3, #125	; 0x7d
 8005bd2:	75e3      	strb	r3, [r4, #23]
			frame[24] = 0x7D;								//ending delimeter
 8005bd4:	7623      	strb	r3, [r4, #24]
			if(programFromBLE==1)
 8005bd6:	4b46      	ldr	r3, [pc, #280]	; (8005cf0 <function_10+0x1ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005bda:	43c0      	mvns	r0, r0
			if(programFromBLE==1)
 8005bdc:	2b01      	cmp	r3, #1
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005bde:	75a0      	strb	r0, [r4, #22]
				HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8005be0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005be4:	f04f 0218 	mov.w	r2, #24
 8005be8:	4621      	mov	r1, r4
			if(programFromBLE==1)
 8005bea:	d129      	bne.n	8005c40 <function_10+0xfc>
				HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8005bec:	4841      	ldr	r0, [pc, #260]	; (8005cf4 <function_10+0x1b0>)
 8005bee:	f7fc fc77 	bl	80024e0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 8005bf2:	4941      	ldr	r1, [pc, #260]	; (8005cf8 <function_10+0x1b4>)
 8005bf4:	483f      	ldr	r0, [pc, #252]	; (8005cf4 <function_10+0x1b0>)
 8005bf6:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8005bfa:	2228      	movs	r2, #40	; 0x28
			signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005bfc:	4c3e      	ldr	r4, [pc, #248]	; (8005cf8 <function_10+0x1b4>)
 8005bfe:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005d18 <function_10+0x1d4>
			HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8005c02:	f7fc fcca 	bl	800259a <HAL_UART_Receive>
			HAL_Delay(300);
 8005c06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c0a:	f7fa fcdb 	bl	80005c4 <HAL_Delay>
			signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	493a      	ldr	r1, [pc, #232]	; (8005cfc <function_10+0x1b8>)
 8005c12:	4620      	mov	r0, r4
 8005c14:	f002 ffb8 	bl	8008b88 <msgParse>
 8005c18:	f8ca 0000 	str.w	r0, [sl]
			HAL_Delay(1000);
 8005c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c20:	f7fa fcd0 	bl	80005c4 <HAL_Delay>
			signVal=4;
 8005c24:	2004      	movs	r0, #4
 8005c26:	f8ca 0000 	str.w	r0, [sl]
							+ crcApi3(signVal) == 0xFF)
 8005c2a:	f7ff feaf 	bl	800598c <crcApi3>
					if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8005c2e:	7963      	ldrb	r3, [r4, #5]
 8005c30:	4423      	add	r3, r4
 8005c32:	799b      	ldrb	r3, [r3, #6]
							+ crcApi3(signVal) == 0xFF)
 8005c34:	4418      	add	r0, r3
					if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8005c36:	28ff      	cmp	r0, #255	; 0xff
 8005c38:	d00b      	beq.n	8005c52 <function_10+0x10e>
					return 0;
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8005c40:	482f      	ldr	r0, [pc, #188]	; (8005d00 <function_10+0x1bc>)
 8005c42:	f7fc fc4d 	bl	80024e0 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8005c46:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c4a:	2228      	movs	r2, #40	; 0x28
 8005c4c:	492a      	ldr	r1, [pc, #168]	; (8005cf8 <function_10+0x1b4>)
 8005c4e:	482c      	ldr	r0, [pc, #176]	; (8005d00 <function_10+0x1bc>)
 8005c50:	e7d4      	b.n	8005bfc <function_10+0xb8>
				signVal = signVal + 2;
 8005c52:	2306      	movs	r3, #6
 8005c54:	f8ca 3000 	str.w	r3, [sl]
				if ((aRxBuffer[signVal] == junctionId)) {
 8005c58:	79a2      	ldrb	r2, [r4, #6]
 8005c5a:	f898 3000 	ldrb.w	r3, [r8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d1eb      	bne.n	8005c3a <function_10+0xf6>
							string[i] = aRxBuffer[signVal];
 8005c62:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <function_10+0x1c0>)
						for (int i = 0; i < 15; i++) {
 8005c64:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 8005c66:	340a      	adds	r4, #10
 8005c68:	5d19      	ldrb	r1, [r3, r4]
 8005c6a:	5499      	strb	r1, [r3, r2]
						for (int i = 0; i < 15; i++) {
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	2b0f      	cmp	r3, #15
 8005c70:	d1fa      	bne.n	8005c68 <function_10+0x124>
 8005c72:	2319      	movs	r3, #25
 8005c74:	f8ca 3000 	str.w	r3, [sl]
						string[16]=0xFF;
 8005c78:	23ff      	movs	r3, #255	; 0xff
 8005c7a:	7413      	strb	r3, [r2, #16]
						EEPROM_WriteArray(string,17,eepromAddress);
 8005c7c:	4c22      	ldr	r4, [pc, #136]	; (8005d08 <function_10+0x1c4>)
						SDcardWriteSeek("phase.txt", 17, (uint8_t *) string, seekCnt);
 8005c7e:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <function_10+0x1c0>)
 8005c80:	4822      	ldr	r0, [pc, #136]	; (8005d0c <function_10+0x1c8>)
 8005c82:	463b      	mov	r3, r7
 8005c84:	2111      	movs	r1, #17
 8005c86:	f7fe fdcb 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("phase.txt", 350, 0);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005c90:	481e      	ldr	r0, [pc, #120]	; (8005d0c <function_10+0x1c8>)
 8005c92:	f7fe fda1 	bl	80047d8 <SDcardReadSeek>
						EEPROM_WriteArray(string,17,eepromAddress);
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	481a      	ldr	r0, [pc, #104]	; (8005d04 <function_10+0x1c0>)
 8005c9a:	2111      	movs	r1, #17
 8005c9c:	f7fe fe50 	bl	8004940 <EEPROM_WriteArray>
						clearReadBytes();
 8005ca0:	f7ff f9b6 	bl	8005010 <clearReadBytes>
						clearStringBuffer();
 8005ca4:	f7ff fa8c 	bl	80051c0 <clearStringBuffer>
						EEPROM_ReadArray(string,17,eepromAddress);
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	4816      	ldr	r0, [pc, #88]	; (8005d04 <function_10+0x1c0>)
 8005cac:	2111      	movs	r1, #17
 8005cae:	f7fe fe5d 	bl	800496c <EEPROM_ReadArray>
						seekCnt=seekCnt+17;
 8005cb2:	3711      	adds	r7, #17
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	4648      	mov	r0, r9
                         eepromAddress= seekCnt;
 8005cb8:	6027      	str	r7, [r4, #0]
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005cba:	3501      	adds	r5, #1
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005cbc:	f7fa fe25 	bl	800090a <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 8005cc0:	f7ff f9c6 	bl	8005050 <clearaRxBuffer>
						clearBuffer4();
 8005cc4:	f7ff f9e2 	bl	800508c <clearBuffer4>
 8005cc8:	e74e      	b.n	8005b68 <function_10+0x24>
 8005cca:	bf00      	nop
 8005ccc:	080094fc 	.word	0x080094fc
 8005cd0:	20000120 	.word	0x20000120
 8005cd4:	200002f4 	.word	0x200002f4
 8005cd8:	20003738 	.word	0x20003738
 8005cdc:	20003ae1 	.word	0x20003ae1
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	20003acd 	.word	0x20003acd
 8005ce8:	20003631 	.word	0x20003631
 8005cec:	2000010d 	.word	0x2000010d
 8005cf0:	2000367c 	.word	0x2000367c
 8005cf4:	200010e8 	.word	0x200010e8
 8005cf8:	2000134c 	.word	0x2000134c
 8005cfc:	080094f7 	.word	0x080094f7
 8005d00:	20000e10 	.word	0x20000e10
 8005d04:	200052f2 	.word	0x200052f2
 8005d08:	200000c0 	.word	0x200000c0
 8005d0c:	08009533 	.word	0x08009533
 8005d10:	2000000d 	.word	0x2000000d
 8005d14:	40021000 	.word	0x40021000
 8005d18:	200015c8 	.word	0x200015c8

08005d1c <RTC_UtcToIstSet>:



}
void RTC_UtcToIstSet(unsigned char uDate,unsigned char uMonth, unsigned char uYear,unsigned char uHours, unsigned char uMinutes,unsigned char uSeconds)
{
 8005d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
//static unsigned char LeapYear;

      if( (uDate > 31) || (uMonth > 12) || (uYear >99) || (uHours > 23) || (uMinutes > 59) || (uSeconds > 59) )
 8005d20:	281f      	cmp	r0, #31
{
 8005d22:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8005d26:	f89d 5020 	ldrb.w	r5, [sp, #32]
      if( (uDate > 31) || (uMonth > 12) || (uYear >99) || (uHours > 23) || (uMinutes > 59) || (uSeconds > 59) )
 8005d2a:	d85d      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
 8005d2c:	290c      	cmp	r1, #12
 8005d2e:	d85b      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
 8005d30:	2a63      	cmp	r2, #99	; 0x63
 8005d32:	d859      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
 8005d34:	2b17      	cmp	r3, #23
 8005d36:	d857      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
 8005d38:	f1bc 0f3b 	cmp.w	ip, #59	; 0x3b
 8005d3c:	d854      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
 8005d3e:	2d3b      	cmp	r5, #59	; 0x3b
 8005d40:	d852      	bhi.n	8005de8 <RTC_UtcToIstSet+0xcc>
Minutes = 0;
Seconds = 0;

Seconds = uSeconds;

Minutes = uMinutes + 30;
 8005d42:	f10c 081e 	add.w	r8, ip, #30
if( (uYear % 4) == 0)
 8005d46:	f012 0f03 	tst.w	r2, #3
 8005d4a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8005e00 <RTC_UtcToIstSet+0xe4>
 8005d4e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8005e04 <RTC_UtcToIstSet+0xe8>
Hours = 0;
 8005d52:	4f26      	ldr	r7, [pc, #152]	; (8005dec <RTC_UtcToIstSet+0xd0>)
MaxDayOfMonth[2] = 29;
 8005d54:	bf08      	it	eq
 8005d56:	241d      	moveq	r4, #29
Minutes = uMinutes + 30;
 8005d58:	fa5f f888 	uxtb.w	r8, r8
MaxDayOfMonth[2] = 29;
 8005d5c:	bf08      	it	eq
 8005d5e:	f88e 4002 	strbeq.w	r4, [lr, #2]
if(Minutes >= 60)
 8005d62:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
{
Minutes -= 60;
 8005d66:	bf88      	it	hi
 8005d68:	f1ac 0c1e 	subhi.w	ip, ip, #30
Date = 0;
 8005d6c:	f04f 0600 	mov.w	r6, #0
Minutes -= 60;
 8005d70:	bf84      	itt	hi
 8005d72:	f889 c000 	strbhi.w	ip, [r9]
Hours = 1;
 8005d76:	f04f 0c01 	movhi.w	ip, #1
Hours = 0;
 8005d7a:	703e      	strb	r6, [r7, #0]
Hours = 1;
 8005d7c:	bf88      	it	hi
 8005d7e:	f887 c000 	strbhi.w	ip, [r7]
}

Hours += uHours+5;
 8005d82:	f897 c000 	ldrb.w	ip, [r7]
Minutes = uMinutes + 30;
 8005d86:	bf98      	it	ls
 8005d88:	f889 8000 	strbls.w	r8, [r9]
Hours += uHours+5;
 8005d8c:	4463      	add	r3, ip
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f103 0c05 	add.w	ip, r3, #5
 8005d94:	fa5f fc8c 	uxtb.w	ip, ip
if(Hours >=24)
 8005d98:	f1bc 0f17 	cmp.w	ip, #23
{
Hours -= 24;
 8005d9c:	bf88      	it	hi
 8005d9e:	3b13      	subhi	r3, #19
Date = 0;
 8005da0:	4c13      	ldr	r4, [pc, #76]	; (8005df0 <RTC_UtcToIstSet+0xd4>)
Hours -= 24;
 8005da2:	bf84      	itt	hi
 8005da4:	703b      	strbhi	r3, [r7, #0]
Date =1;
 8005da6:	2301      	movhi	r3, #1
Date = 0;
 8005da8:	7026      	strb	r6, [r4, #0]
Date =1;
 8005daa:	bf88      	it	hi
 8005dac:	7023      	strbhi	r3, [r4, #0]
}

Date += uDate;
 8005dae:	7823      	ldrb	r3, [r4, #0]
Seconds = uSeconds;
 8005db0:	4e10      	ldr	r6, [pc, #64]	; (8005df4 <RTC_UtcToIstSet+0xd8>)
Hours += uHours+5;
 8005db2:	bf98      	it	ls
 8005db4:	f887 c000 	strbls.w	ip, [r7]
Date += uDate;
 8005db8:	4418      	add	r0, r3
Month = uMonth;
Year = uYear;
if(Date > MaxDayOfMonth[uMonth])
 8005dba:	f81e 3001 	ldrb.w	r3, [lr, r1]
Seconds = uSeconds;
 8005dbe:	7035      	strb	r5, [r6, #0]
Date += uDate;
 8005dc0:	b2c0      	uxtb	r0, r0
 8005dc2:	4d0d      	ldr	r5, [pc, #52]	; (8005df8 <RTC_UtcToIstSet+0xdc>)
 8005dc4:	4e0d      	ldr	r6, [pc, #52]	; (8005dfc <RTC_UtcToIstSet+0xe0>)
 8005dc6:	7020      	strb	r0, [r4, #0]
if(Date > MaxDayOfMonth[uMonth])
 8005dc8:	4283      	cmp	r3, r0
Month = uMonth;
 8005dca:	7029      	strb	r1, [r5, #0]
Year = uYear;
 8005dcc:	7032      	strb	r2, [r6, #0]
if(Date > MaxDayOfMonth[uMonth])
 8005dce:	d20b      	bcs.n	8005de8 <RTC_UtcToIstSet+0xcc>
{
Date=1;
 8005dd0:	2301      	movs	r3, #1
Month = uMonth + 1;
 8005dd2:	4419      	add	r1, r3
 8005dd4:	b2c9      	uxtb	r1, r1
if(Month > 12)
 8005dd6:	290d      	cmp	r1, #13
Date=1;
 8005dd8:	7023      	strb	r3, [r4, #0]
if(Month > 12)
 8005dda:	d002      	beq.n	8005de2 <RTC_UtcToIstSet+0xc6>
Month = uMonth + 1;
 8005ddc:	7029      	strb	r1, [r5, #0]
 8005dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
Month=1;
Year++;
 8005de2:	3201      	adds	r2, #1
Month=1;
 8005de4:	702b      	strb	r3, [r5, #0]
Year++;
 8005de6:	7032      	strb	r2, [r6, #0]
 8005de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dec:	20002624 	.word	0x20002624
 8005df0:	20003640 	.word	0x20003640
 8005df4:	200051f3 	.word	0x200051f3
 8005df8:	20003d54 	.word	0x20003d54
 8005dfc:	20003ad4 	.word	0x20003ad4
 8005e00:	20003641 	.word	0x20003641
 8005e04:	200051f1 	.word	0x200051f1

08005e08 <convertStringToByte>:
/*-------------------*/




void convertStringToByte(){
 8005e08:	b573      	push	{r0, r1, r4, r5, r6, lr}




	/*----------day------------------*/
	RecMsg2[40] = RecMsg2[17] - 0x30;
 8005e0a:	4c4a      	ldr	r4, [pc, #296]	; (8005f34 <convertStringToByte+0x12c>)
 8005e0c:	7c60      	ldrb	r0, [r4, #17]
	RecMsg2[41] = RecMsg2[40] * 10;
	RecMsg2[42] = RecMsg2[18] - 0x30;
 8005e0e:	7ca3      	ldrb	r3, [r4, #18]
	GPSDay = RecMsg2[41] + RecMsg2[42];

	/*----------month------------------*/
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8005e10:	7d21      	ldrb	r1, [r4, #20]
	RecMsg2[44] = RecMsg2[43] * 10;
	RecMsg2[45] = RecMsg2[21] - 0x30;
	GPSMonth = RecMsg2[44] + RecMsg2[45];

	/*----------year------------------*/
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8005e12:	7e62      	ldrb	r2, [r4, #25]
	GPSYear = RecMsg2[47] + RecMsg2[48];

	/*----------Hr------------------*/
	RecMsg2[49] = RecMsg2[7] - 0x30;
	RecMsg2[50] = RecMsg2[49] * 10;
	RecMsg2[51] = RecMsg2[8] - 0x30;
 8005e14:	7a25      	ldrb	r5, [r4, #8]
	GPSHr = RecMsg2[50] + RecMsg2[51];

	/*----------min------------------*/
	RecMsg2[52] = RecMsg2[9] - 0x30;
	RecMsg2[53] = RecMsg2[52] * 10;
	RecMsg2[54] = RecMsg2[10] - 0x30;
 8005e16:	7aa6      	ldrb	r6, [r4, #10]
	RecMsg2[40] = RecMsg2[17] - 0x30;
 8005e18:	3830      	subs	r0, #48	; 0x30
 8005e1a:	b2c0      	uxtb	r0, r0
 8005e1c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	RecMsg2[41] = RecMsg2[40] * 10;
 8005e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e24:	0040      	lsls	r0, r0, #1
	RecMsg2[42] = RecMsg2[18] - 0x30;
 8005e26:	3b30      	subs	r3, #48	; 0x30
 8005e28:	b2db      	uxtb	r3, r3
	RecMsg2[41] = RecMsg2[40] * 10;
 8005e2a:	b2c0      	uxtb	r0, r0
 8005e2c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	RecMsg2[42] = RecMsg2[18] - 0x30;
 8005e30:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	GPSDay = RecMsg2[41] + RecMsg2[42];
 8005e34:	4418      	add	r0, r3
 8005e36:	4b40      	ldr	r3, [pc, #256]	; (8005f38 <convertStringToByte+0x130>)
 8005e38:	b2c0      	uxtb	r0, r0
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8005e3a:	3930      	subs	r1, #48	; 0x30
	GPSDay = RecMsg2[41] + RecMsg2[42];
 8005e3c:	7018      	strb	r0, [r3, #0]
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8005e3e:	b2c9      	uxtb	r1, r1
	RecMsg2[45] = RecMsg2[21] - 0x30;
 8005e40:	7d63      	ldrb	r3, [r4, #21]
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8005e42:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	RecMsg2[44] = RecMsg2[43] * 10;
 8005e46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e4a:	0049      	lsls	r1, r1, #1
	RecMsg2[45] = RecMsg2[21] - 0x30;
 8005e4c:	3b30      	subs	r3, #48	; 0x30
 8005e4e:	b2db      	uxtb	r3, r3
	RecMsg2[44] = RecMsg2[43] * 10;
 8005e50:	b2c9      	uxtb	r1, r1
 8005e52:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	RecMsg2[45] = RecMsg2[21] - 0x30;
 8005e56:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	GPSMonth = RecMsg2[44] + RecMsg2[45];
 8005e5a:	4419      	add	r1, r3
 8005e5c:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <convertStringToByte+0x134>)
 8005e5e:	b2c9      	uxtb	r1, r1
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8005e60:	3a30      	subs	r2, #48	; 0x30
	GPSMonth = RecMsg2[44] + RecMsg2[45];
 8005e62:	7019      	strb	r1, [r3, #0]
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8005e64:	b2d2      	uxtb	r2, r2
	RecMsg2[48] = RecMsg2[26] - 0x30;
 8005e66:	7ea3      	ldrb	r3, [r4, #26]
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8005e68:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	RecMsg2[47] = RecMsg2[46] * 10;
 8005e6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005e70:	0052      	lsls	r2, r2, #1
	RecMsg2[48] = RecMsg2[26] - 0x30;
 8005e72:	3b30      	subs	r3, #48	; 0x30
 8005e74:	b2db      	uxtb	r3, r3
	RecMsg2[47] = RecMsg2[46] * 10;
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	RecMsg2[48] = RecMsg2[26] - 0x30;
 8005e7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	GPSYear = RecMsg2[47] + RecMsg2[48];
 8005e80:	441a      	add	r2, r3
 8005e82:	4b2f      	ldr	r3, [pc, #188]	; (8005f40 <convertStringToByte+0x138>)
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
	RecMsg2[49] = RecMsg2[7] - 0x30;
 8005e88:	79e3      	ldrb	r3, [r4, #7]
 8005e8a:	3b30      	subs	r3, #48	; 0x30
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	RecMsg2[50] = RecMsg2[49] * 10;
 8005e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e96:	005b      	lsls	r3, r3, #1
	RecMsg2[51] = RecMsg2[8] - 0x30;
 8005e98:	3d30      	subs	r5, #48	; 0x30
 8005e9a:	b2ed      	uxtb	r5, r5
	RecMsg2[50] = RecMsg2[49] * 10;
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	RecMsg2[51] = RecMsg2[8] - 0x30;
 8005ea2:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
	GPSHr = RecMsg2[50] + RecMsg2[51];
 8005ea6:	442b      	add	r3, r5
 8005ea8:	4d26      	ldr	r5, [pc, #152]	; (8005f44 <convertStringToByte+0x13c>)
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	702b      	strb	r3, [r5, #0]
	RecMsg2[52] = RecMsg2[9] - 0x30;
 8005eae:	7a65      	ldrb	r5, [r4, #9]
 8005eb0:	3d30      	subs	r5, #48	; 0x30
 8005eb2:	b2ed      	uxtb	r5, r5
 8005eb4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	RecMsg2[53] = RecMsg2[52] * 10;
 8005eb8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005ebc:	006d      	lsls	r5, r5, #1
	RecMsg2[54] = RecMsg2[10] - 0x30;
 8005ebe:	3e30      	subs	r6, #48	; 0x30
	RecMsg2[53] = RecMsg2[52] * 10;
 8005ec0:	b2ed      	uxtb	r5, r5
	RecMsg2[54] = RecMsg2[10] - 0x30;
 8005ec2:	b2f6      	uxtb	r6, r6
	RecMsg2[53] = RecMsg2[52] * 10;
 8005ec4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	RecMsg2[54] = RecMsg2[10] - 0x30;
 8005ec8:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
	GPSMin = RecMsg2[53] + RecMsg2[54];
 8005ecc:	19ac      	adds	r4, r5, r6
 8005ece:	4d1e      	ldr	r5, [pc, #120]	; (8005f48 <convertStringToByte+0x140>)
 8005ed0:	b2e4      	uxtb	r4, r4
 8005ed2:	702c      	strb	r4, [r5, #0]


 RTC_UtcToIstSet(GPSDay,GPSMonth,GPSYear,GPSHr,GPSMin,GPSSec);
 8005ed4:	4d1d      	ldr	r5, [pc, #116]	; (8005f4c <convertStringToByte+0x144>)
 8005ed6:	782d      	ldrb	r5, [r5, #0]
 8005ed8:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005edc:	f7ff ff1e 	bl	8005d1c <RTC_UtcToIstSet>
//	else{
//		GPSHr=GPSHr+0x05;
//	}  //Date,Month,Year,Hours,Minutes,Seconds


if(Date != 0 || Month != 0 || Year != 0)
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <convertStringToByte+0x148>)
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <convertStringToByte+0x14c>)
 8005ee4:	7818      	ldrb	r0, [r3, #0]
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <convertStringToByte+0x150>)
 8005ee8:	b918      	cbnz	r0, 8005ef2 <convertStringToByte+0xea>
 8005eea:	7811      	ldrb	r1, [r2, #0]
 8005eec:	b909      	cbnz	r1, 8005ef2 <convertStringToByte+0xea>
 8005eee:	7819      	ldrb	r1, [r3, #0]
 8005ef0:	b1e9      	cbz	r1, 8005f2e <convertStringToByte+0x126>
{
	            sTime.Hours = Hours; // current hour
 8005ef2:	4c1a      	ldr	r4, [pc, #104]	; (8005f5c <convertStringToByte+0x154>)
 8005ef4:	491a      	ldr	r1, [pc, #104]	; (8005f60 <convertStringToByte+0x158>)
 8005ef6:	7824      	ldrb	r4, [r4, #0]
 8005ef8:	700c      	strb	r4, [r1, #0]
				sTime.Minutes =Minutes; // current min
 8005efa:	4c1a      	ldr	r4, [pc, #104]	; (8005f64 <convertStringToByte+0x15c>)
				sDate.Date = Date; // current date
				sDate.Month = Month; // current month
 8005efc:	7812      	ldrb	r2, [r2, #0]
				sTime.Minutes =Minutes; // current min
 8005efe:	7824      	ldrb	r4, [r4, #0]
 8005f00:	704c      	strb	r4, [r1, #1]
				sDate.Date = Date; // current date
 8005f02:	4c19      	ldr	r4, [pc, #100]	; (8005f68 <convertStringToByte+0x160>)
				sDate.Year = Year;	// current year
 8005f04:	781b      	ldrb	r3, [r3, #0]
				sDate.Date = Date; // current date
 8005f06:	70a0      	strb	r0, [r4, #2]
				sDate.Month = Month; // current month
 8005f08:	7062      	strb	r2, [r4, #1]

				HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005f0a:	4818      	ldr	r0, [pc, #96]	; (8005f6c <convertStringToByte+0x164>)
				sDate.Year = Year;	// current year
 8005f0c:	70e3      	strb	r3, [r4, #3]
				HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fb fc9f 	bl	8001852 <HAL_RTC_SetTime>
			    HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8005f14:	2200      	movs	r2, #0
 8005f16:	4621      	mov	r1, r4
 8005f18:	4814      	ldr	r0, [pc, #80]	; (8005f6c <convertStringToByte+0x164>)
 8005f1a:	f7fb fd0a 	bl	8001932 <HAL_RTC_SetDate>

			    /*---------get the date and update the DateLast variable-------*/
			    HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4621      	mov	r1, r4
 8005f22:	4812      	ldr	r0, [pc, #72]	; (8005f6c <convertStringToByte+0x164>)
 8005f24:	f7fb fd96 	bl	8001a54 <HAL_RTC_GetDate>
				DateLast=sDate.Date;
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <convertStringToByte+0x168>)
 8005f2a:	78a2      	ldrb	r2, [r4, #2]
 8005f2c:	701a      	strb	r2, [r3, #0]





}
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	bf00      	nop
 8005f34:	200054ce 	.word	0x200054ce
 8005f38:	20002623 	.word	0x20002623
 8005f3c:	200039fd 	.word	0x200039fd
 8005f40:	200039ed 	.word	0x200039ed
 8005f44:	200039ec 	.word	0x200039ec
 8005f48:	20003638 	.word	0x20003638
 8005f4c:	20005204 	.word	0x20005204
 8005f50:	20003640 	.word	0x20003640
 8005f54:	20003d54 	.word	0x20003d54
 8005f58:	20003ad4 	.word	0x20003ad4
 8005f5c:	20002624 	.word	0x20002624
 8005f60:	20000ea4 	.word	0x20000ea4
 8005f64:	200051f1 	.word	0x200051f1
 8005f68:	2000115a 	.word	0x2000115a
 8005f6c:	20001168 	.word	0x20001168
 8005f70:	200015ec 	.word	0x200015ec

08005f74 <getDateAndTimeFromGPS>:
void getDateAndTimeFromGPS(){
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	    min=0;
 8005f78:	4c1e      	ldr	r4, [pc, #120]	; (8005ff4 <getDateAndTimeFromGPS+0x80>)
		if(msgUnPrcd==1)
 8005f7a:	4f1f      	ldr	r7, [pc, #124]	; (8005ff8 <getDateAndTimeFromGPS+0x84>)
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);
 8005f7c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8006014 <getDateAndTimeFromGPS+0xa0>
	    min=0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	6023      	str	r3, [r4, #0]
		diableAllString();
 8005f84:	f7fe fb1e 	bl	80045c4 <diableAllString>
		HAL_Delay(1000);
 8005f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f8c:	f7fa fb1a 	bl	80005c4 <HAL_Delay>
		enableGNZDAString();
 8005f90:	f7fe fae8 	bl	8004564 <enableGNZDAString>
 8005f94:	46b8      	mov	r8, r7
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);
 8005f96:	2201      	movs	r2, #1
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4818      	ldr	r0, [pc, #96]	; (8005ffc <getDateAndTimeFromGPS+0x88>)
 8005f9c:	f7fc fb5d 	bl	800265a <HAL_UART_Receive_IT>
		if(msgUnPrcd==1)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d11b      	bne.n	8005fde <getDateAndTimeFromGPS+0x6a>
							functionRec=0;
 8005fa6:	4b16      	ldr	r3, [pc, #88]	; (8006000 <getDateAndTimeFromGPS+0x8c>)
							if(strncmp((char*)RecMsg2,(char*) "$GNZDA,",6) == 0)
 8005fa8:	4e16      	ldr	r6, [pc, #88]	; (8006004 <getDateAndTimeFromGPS+0x90>)
 8005faa:	4917      	ldr	r1, [pc, #92]	; (8006008 <getDateAndTimeFromGPS+0x94>)
							functionRec=0;
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
							if(strncmp((char*)RecMsg2,(char*) "$GNZDA,",6) == 0)
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	2206      	movs	r2, #6
 8005fb4:	f003 fa28 	bl	8009408 <strncmp>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b958      	cbnz	r0, 8005fd4 <getDateAndTimeFromGPS+0x60>
                                       if( RecMsg2[7] != ','){
 8005fbc:	79f3      	ldrb	r3, [r6, #7]
 8005fbe:	2b2c      	cmp	r3, #44	; 0x2c
 8005fc0:	d012      	beq.n	8005fe8 <getDateAndTimeFromGPS+0x74>
							  			convertStringToByte();
 8005fc2:	f7ff ff21 	bl	8005e08 <convertStringToByte>
							  			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005fc6:	462a      	mov	r2, r5
 8005fc8:	4910      	ldr	r1, [pc, #64]	; (800600c <getDateAndTimeFromGPS+0x98>)
 8005fca:	4811      	ldr	r0, [pc, #68]	; (8006010 <getDateAndTimeFromGPS+0x9c>)
}
 8005fcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
							  			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005fd0:	f7fb bd40 	b.w	8001a54 <HAL_RTC_GetDate>
                                    clearingRecBuffer();
 8005fd4:	f7fe fd0c 	bl	80049f0 <clearingRecBuffer>
							  		msgUnPrcd=0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c8 3000 	str.w	r3, [r8]
		  if(min==2)
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d1d8      	bne.n	8005f96 <getDateAndTimeFromGPS+0x22>
 8005fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                                       if(dateTimeGet==1 || min==2)
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d1f2      	bne.n	8005fd4 <getDateAndTimeFromGPS+0x60>
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000088 	.word	0x20000088
 8005ff8:	20000fd4 	.word	0x20000fd4
 8005ffc:	2000130c 	.word	0x2000130c
 8006000:	20000084 	.word	0x20000084
 8006004:	200054ce 	.word	0x200054ce
 8006008:	08009506 	.word	0x08009506
 800600c:	2000115a 	.word	0x2000115a
 8006010:	20001168 	.word	0x20001168
 8006014:	2000134c 	.word	0x2000134c

08006018 <function11N>:


/*-------------------------------function 11---------------------------*/
/*----------------------- registration function----------------------------------*/
int function11N()   // check registration
{
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clearframe();
	frame[0] = 126;
 800601c:	4c67      	ldr	r4, [pc, #412]	; (80061bc <function11N+0x1a4>)
	frame[1] = 126;
	frame[2] = 00;   //byte size 1
	frame[3] = 31;//31;   //byte size 2
	frame[4] = junctionId;   // 127 ;//
 800601e:	4f68      	ldr	r7, [pc, #416]	; (80061c0 <function11N+0x1a8>)
	frame[5] = programVersionNo;   // 127 ;//
 8006020:	4e68      	ldr	r6, [pc, #416]	; (80061c4 <function11N+0x1ac>)
	frame[6] = fileNo;
 8006022:	4d69      	ldr	r5, [pc, #420]	; (80061c8 <function11N+0x1b0>)
	clearframe();
 8006024:	f7fe ffea 	bl	8004ffc <clearframe>
	frame[0] = 126;
 8006028:	237e      	movs	r3, #126	; 0x7e
 800602a:	7023      	strb	r3, [r4, #0]
	frame[1] = 126;
 800602c:	7063      	strb	r3, [r4, #1]
	frame[2] = 00;   //byte size 1
 800602e:	2300      	movs	r3, #0
 8006030:	70a3      	strb	r3, [r4, #2]
	frame[3] = 31;//31;   //byte size 2
 8006032:	231f      	movs	r3, #31
 8006034:	70e3      	strb	r3, [r4, #3]
	frame[4] = junctionId;   // 127 ;//
 8006036:	783b      	ldrb	r3, [r7, #0]
 8006038:	7123      	strb	r3, [r4, #4]
	frame[5] = programVersionNo;   // 127 ;//
 800603a:	7833      	ldrb	r3, [r6, #0]
 800603c:	7163      	strb	r3, [r4, #5]
	frame[6] = fileNo;
 800603e:	782b      	ldrb	r3, [r5, #0]
 8006040:	71a3      	strb	r3, [r4, #6]
	frame[7] = 0x0B;   //function no
	frame[8] = '0';
	frame[9] = '1';
	frame[10] = '3';
 8006042:	2233      	movs	r2, #51	; 0x33
	frame[7] = 0x0B;   //function no
 8006044:	230b      	movs	r3, #11
 8006046:	71e3      	strb	r3, [r4, #7]
	frame[10] = '3';
 8006048:	72a2      	strb	r2, [r4, #10]
	frame[8] = '0';
 800604a:	2330      	movs	r3, #48	; 0x30
	frame[11] = '7';
 800604c:	2237      	movs	r2, #55	; 0x37
	frame[8] = '0';
 800604e:	7223      	strb	r3, [r4, #8]
	frame[11] = '7';
 8006050:	72e2      	strb	r2, [r4, #11]
	frame[12] = '7';
 8006052:	7322      	strb	r2, [r4, #12]
	frame[13] = '7';
 8006054:	7362      	strb	r2, [r4, #13]
	frame[14] = '0';
 8006056:	73a3      	strb	r3, [r4, #14]
	frame[15] = '0';
 8006058:	73e3      	strb	r3, [r4, #15]
	frame[16] = '0';
 800605a:	7423      	strb	r3, [r4, #16]
	frame[17] = '6';
 800605c:	2236      	movs	r2, #54	; 0x36
	frame[18] = '2';
	frame[19] = '0';
 800605e:	74e3      	strb	r3, [r4, #19]
	frame[20] = '1';//'9';
	frame[21] = '2';//'1';
	frame[22] = '5';//'1';//'4';//'5';//'2';//
 8006060:	2335      	movs	r3, #53	; 0x35
	frame[9] = '1';
 8006062:	2131      	movs	r1, #49	; 0x31
	frame[17] = '6';
 8006064:	7462      	strb	r2, [r4, #17]
	frame[22] = '5';//'1';//'4';//'5';//'2';//
 8006066:	75a3      	strb	r3, [r4, #22]
	frame[18] = '2';
 8006068:	2232      	movs	r2, #50	; 0x32

	frame[23] = 1;
 800606a:	2301      	movs	r3, #1
	frame[9] = '1';
 800606c:	7261      	strb	r1, [r4, #9]
	frame[18] = '2';
 800606e:	74a2      	strb	r2, [r4, #18]
	frame[20] = '1';//'9';
 8006070:	7521      	strb	r1, [r4, #20]
	frame[21] = '2';//'1';
 8006072:	7562      	strb	r2, [r4, #21]
	frame[23] = 1;
 8006074:	75e3      	strb	r3, [r4, #23]
	frame[24] = 1;
 8006076:	7623      	strb	r3, [r4, #24]
	frame[25] = 1;
 8006078:	7663      	strb	r3, [r4, #25]
	frame[26] = 1;
 800607a:	76a3      	strb	r3, [r4, #26]
	frame[27] = 1;
 800607c:	76e3      	strb	r3, [r4, #27]
	frame[28] = 1;
 800607e:	7723      	strb	r3, [r4, #28]
	frame[29] = 1;
 8006080:	7763      	strb	r3, [r4, #29]
	frame[30] = 1;
 8006082:	77a3      	strb	r3, [r4, #30]
	frame[31] = 1;
 8006084:	77e3      	strb	r3, [r4, #31]
	frame[32] = 1;   //'1'
 8006086:	f884 3020 	strb.w	r3, [r4, #32]
	frame[33] = 1;   //'0' ; //'5' ;
 800608a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	frame[34] = 1;   // '2' ;//'9' ;//'1' ;
 800608e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	frame[35] = 0xFF - crcApi();
 8006092:	f7ff f823 	bl	80050dc <crcApi>
	frame[36] = 125;
 8006096:	237d      	movs	r3, #125	; 0x7d
 8006098:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	frame[37] = 125;
 800609c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
//	frame[38] = 125;
//		frame[21] = 0x0D;
	if(programFromBLE==1)
 80060a0:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <function11N+0x1b4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
	frame[35] = 0xFF - crcApi();
 80060a4:	43c0      	mvns	r0, r0
	if(programFromBLE==1)
 80060a6:	2b01      	cmp	r3, #1
	frame[35] = 0xFF - crcApi();
 80060a8:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	{
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 37, 5000);
 80060ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80060b0:	f04f 0225 	mov.w	r2, #37	; 0x25
 80060b4:	4621      	mov	r1, r4
	if(programFromBLE==1)
 80060b6:	d173      	bne.n	80061a0 <function11N+0x188>
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 37, 5000);
 80060b8:	4845      	ldr	r0, [pc, #276]	; (80061d0 <function11N+0x1b8>)
 80060ba:	f7fc fa11 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80060be:	4945      	ldr	r1, [pc, #276]	; (80061d4 <function11N+0x1bc>)
 80060c0:	4843      	ldr	r0, [pc, #268]	; (80061d0 <function11N+0x1b8>)
 80060c2:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80060c6:	221e      	movs	r2, #30
	{
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 37, 5000);
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
	}
	HAL_Delay(300);
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80060c8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80061d4 <function11N+0x1bc>
 80060cc:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8006220 <function11N+0x208>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80060d0:	f7fc fa63 	bl	800259a <HAL_UART_Receive>
	HAL_Delay(300);
 80060d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80060d8:	f7fa fa74 	bl	80005c4 <HAL_Delay>
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80060dc:	2200      	movs	r2, #0
 80060de:	493e      	ldr	r1, [pc, #248]	; (80061d8 <function11N+0x1c0>)
 80060e0:	4640      	mov	r0, r8
 80060e2:	f002 fd51 	bl	8008b88 <msgParse>
 80060e6:	4604      	mov	r4, r0
 80060e8:	f8c9 0000 	str.w	r0, [r9]


	if (!(signVal == 0)){
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d060      	beq.n	80061b2 <function11N+0x19a>

		if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2] + crcApi3(signVal)
 80060f0:	f7ff fc4c 	bl	800598c <crcApi3>
 80060f4:	eb08 0304 	add.w	r3, r8, r4
 80060f8:	785a      	ldrb	r2, [r3, #1]
 80060fa:	4413      	add	r3, r2
 80060fc:	789b      	ldrb	r3, [r3, #2]
 80060fe:	4418      	add	r0, r3
 8006100:	28ff      	cmp	r0, #255	; 0xff
 8006102:	d14a      	bne.n	800619a <function11N+0x182>
				== 0xFF) {

			signVal = signVal + 2;
 8006104:	3402      	adds	r4, #2
 8006106:	4a35      	ldr	r2, [pc, #212]	; (80061dc <function11N+0x1c4>)
 8006108:	f8c9 4000 	str.w	r4, [r9]
			/*-----------------flash--------------------*/

int j=0;
			for (int i = 0; i < 15; i++) {
 800610c:	2300      	movs	r3, #0
				    bytesToWriteInSD[j]=aRxBuffer[signVal+i];
 800610e:	4444      	add	r4, r8
				    j++;
				    if(i==2)
				    {
				    	i=i+1;
 8006110:	2b02      	cmp	r3, #2
				    bytesToWriteInSD[j]=aRxBuffer[signVal+i];
 8006112:	5ce1      	ldrb	r1, [r4, r3]
 8006114:	f802 1f01 	strb.w	r1, [r2, #1]!
				    	i=i+1;
 8006118:	bf08      	it	eq
 800611a:	2303      	moveq	r3, #3
			for (int i = 0; i < 15; i++) {
 800611c:	3301      	adds	r3, #1
 800611e:	2b0e      	cmp	r3, #14
 8006120:	ddf6      	ble.n	8006110 <function11N+0xf8>
						}
			//--------------------------SD Card Write----------------------//
//			SDcardWrite("info.txt",6,(uint8_t *)bytesToWrite);
//			 seek("info.txt",0);

			SDcardWriteSeek("infoN.txt", 14, (uint8_t *) bytesToWriteInSD, 0);
 8006122:	2300      	movs	r3, #0
 8006124:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <function11N+0x1c8>)
 8006126:	482f      	ldr	r0, [pc, #188]	; (80061e4 <function11N+0x1cc>)
 8006128:	210e      	movs	r1, #14
 800612a:	f7fe fb79 	bl	8004820 <SDcardWriteSeek>
				SDcardReadSeek("infoN.txt", 15, 0);
 800612e:	2200      	movs	r2, #0
 8006130:	210f      	movs	r1, #15
 8006132:	482c      	ldr	r0, [pc, #176]	; (80061e4 <function11N+0x1cc>)
 8006134:	f7fe fb50 	bl	80047d8 <SDcardReadSeek>

			           junctionId = readBytes[0];
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <function11N+0x1d0>)


			/*----------------------------flash write ends here ------------------------*/


						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800613a:	482c      	ldr	r0, [pc, #176]	; (80061ec <function11N+0x1d4>)
			           junctionId = readBytes[0];
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	703a      	strb	r2, [r7, #0]
			           programVersionNo = readBytes[1];
 8006140:	785a      	ldrb	r2, [r3, #1]
 8006142:	7032      	strb	r2, [r6, #0]
			           fileNo = readBytes[2];
 8006144:	789a      	ldrb	r2, [r3, #2]
 8006146:	702a      	strb	r2, [r5, #0]
			            noOfSides = readBytes[4];
 8006148:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <function11N+0x1d8>)
 800614a:	7919      	ldrb	r1, [r3, #4]
 800614c:	7011      	strb	r1, [r2, #0]
						noOfDateSlots = readBytes[5];
 800614e:	4a29      	ldr	r2, [pc, #164]	; (80061f4 <function11N+0x1dc>)
 8006150:	7959      	ldrb	r1, [r3, #5]
 8006152:	7011      	strb	r1, [r2, #0]
						noOfDaySlots = readBytes[6];
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <function11N+0x1e0>)
 8006156:	7999      	ldrb	r1, [r3, #6]
 8006158:	7011      	strb	r1, [r2, #0]
						noOfPlans=readBytes[7];
 800615a:	4a28      	ldr	r2, [pc, #160]	; (80061fc <function11N+0x1e4>)
 800615c:	79d9      	ldrb	r1, [r3, #7]
 800615e:	7011      	strb	r1, [r2, #0]
						padestarianTime = readBytes[8];
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <function11N+0x1e8>)
 8006162:	7a19      	ldrb	r1, [r3, #8]
 8006164:	6011      	str	r1, [r2, #0]
						side1PoleType= readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 8006166:	4a27      	ldr	r2, [pc, #156]	; (8006204 <function11N+0x1ec>)
 8006168:	7a99      	ldrb	r1, [r3, #10]
 800616a:	6011      	str	r1, [r2, #0]
						side2PoleType= readBytes[11];
 800616c:	4a26      	ldr	r2, [pc, #152]	; (8006208 <function11N+0x1f0>)
 800616e:	7ad9      	ldrb	r1, [r3, #11]
 8006170:	6011      	str	r1, [r2, #0]
						side3PoleType= readBytes[12];
 8006172:	4a26      	ldr	r2, [pc, #152]	; (800620c <function11N+0x1f4>)
 8006174:	7b19      	ldrb	r1, [r3, #12]
 8006176:	6011      	str	r1, [r2, #0]
						side4PoleType= readBytes[13];
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <function11N+0x1f8>)
 800617a:	7b59      	ldrb	r1, [r3, #13]
 800617c:	6011      	str	r1, [r2, #0]
						side5PoleType= readBytes[14];
 800617e:	4a25      	ldr	r2, [pc, #148]	; (8006214 <function11N+0x1fc>)
 8006180:	7b99      	ldrb	r1, [r3, #14]
 8006182:	6011      	str	r1, [r2, #0]
						totalNoOfPhases=readBytes[9];
 8006184:	7a5a      	ldrb	r2, [r3, #9]
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <function11N+0x200>)
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006188:	2110      	movs	r1, #16
						totalNoOfPhases=readBytes[9];
 800618a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800618c:	f7fa fbbd 	bl	800090a <HAL_GPIO_TogglePin>


			clearaRxBuffer();
 8006190:	f7fe ff5e 	bl	8005050 <clearaRxBuffer>
			clearBuffer4();
 8006194:	f7fe ff7a 	bl	800508c <clearBuffer4>
//			function1_1();
			return 1;
 8006198:	2401      	movs	r4, #1
			clearBuffer4();
			clearaRxBuffer();
			return 0;
		}

}
 800619a:	4620      	mov	r0, r4
 800619c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 37, 5000);
 80061a0:	481e      	ldr	r0, [pc, #120]	; (800621c <function11N+0x204>)
 80061a2:	f7fc f99d 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80061a6:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80061aa:	221e      	movs	r2, #30
 80061ac:	4909      	ldr	r1, [pc, #36]	; (80061d4 <function11N+0x1bc>)
 80061ae:	481b      	ldr	r0, [pc, #108]	; (800621c <function11N+0x204>)
 80061b0:	e78a      	b.n	80060c8 <function11N+0xb0>
			clearBuffer4();
 80061b2:	f7fe ff6b 	bl	800508c <clearBuffer4>
			clearaRxBuffer();
 80061b6:	f7fe ff4b 	bl	8005050 <clearaRxBuffer>
			return 0;
 80061ba:	e7ee      	b.n	800619a <function11N+0x182>
 80061bc:	20003ae1 	.word	0x20003ae1
 80061c0:	2000000d 	.word	0x2000000d
 80061c4:	2000010d 	.word	0x2000010d
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	2000367c 	.word	0x2000367c
 80061d0:	200010e8 	.word	0x200010e8
 80061d4:	2000134c 	.word	0x2000134c
 80061d8:	080094f7 	.word	0x080094f7
 80061dc:	200036e7 	.word	0x200036e7
 80061e0:	200036e8 	.word	0x200036e8
 80061e4:	080094fc 	.word	0x080094fc
 80061e8:	200002f4 	.word	0x200002f4
 80061ec:	40021000 	.word	0x40021000
 80061f0:	200000ed 	.word	0x200000ed
 80061f4:	200000e4 	.word	0x200000e4
 80061f8:	200000e5 	.word	0x200000e5
 80061fc:	200000ec 	.word	0x200000ec
 8006200:	20000018 	.word	0x20000018
 8006204:	20001620 	.word	0x20001620
 8006208:	2000363c 	.word	0x2000363c
 800620c:	200039f8 	.word	0x200039f8
 8006210:	20003ac8 	.word	0x20003ac8
 8006214:	200039f0 	.word	0x200039f0
 8006218:	20000120 	.word	0x20000120
 800621c:	20000e10 	.word	0x20000e10
 8006220:	200015c8 	.word	0x200015c8

08006224 <function12>:

/*-------------------------------function 12---------------------------*/
/*------------------------------------getting date info--------------------------------------*/
int function12(void) {
 8006224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 0;
	int seekCnt=0;
//	noOfDateSlots=1;
//	junctionId=1;

	for (int i = 1; i < noOfDateSlots + 1;) {
 8006228:	4f60      	ldr	r7, [pc, #384]	; (80063ac <function12+0x188>)
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//

						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800622a:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80063dc <function12+0x1b8>
	int seekCnt=0;
 800622e:	2600      	movs	r6, #0
	for (int i = 1; i < noOfDateSlots + 1;) {
 8006230:	2401      	movs	r4, #1
	int resmsg = 0;
 8006232:	46b0      	mov	r8, r6
 8006234:	46ba      	mov	sl, r7
	for (int i = 1; i < noOfDateSlots + 1;) {
 8006236:	783b      	ldrb	r3, [r7, #0]
 8006238:	4d5d      	ldr	r5, [pc, #372]	; (80063b0 <function12+0x18c>)
 800623a:	429c      	cmp	r4, r3
 800623c:	dd07      	ble.n	800624e <function12+0x2a>
				clearBuffer4();
				return 0;
			}

	}
	clearaRxBuffer();
 800623e:	f7fe ff07 	bl	8005050 <clearaRxBuffer>
	if(noOfDateSlots==dateSlotNo)
 8006242:	7838      	ldrb	r0, [r7, #0]
 8006244:	782b      	ldrb	r3, [r5, #0]
 8006246:	1ac3      	subs	r3, r0, r3
 8006248:	4258      	negs	r0, r3
 800624a:	4158      	adcs	r0, r3
 800624c:	e0aa      	b.n	80063a4 <function12+0x180>
		if (resmsg == 1) {
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	f000 8094 	beq.w	800637e <function12+0x15a>
			dateSlotNo = i;
 8006256:	702c      	strb	r4, [r5, #0]
			i++;
 8006258:	3401      	adds	r4, #1
		clearframe();
 800625a:	f7fe fecf 	bl	8004ffc <clearframe>
		frame[4] = junctionId; // junction no
 800625e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80063e0 <function12+0x1bc>
		frame[0] = 126;
 8006262:	4954      	ldr	r1, [pc, #336]	; (80063b4 <function12+0x190>)
		frame[17] = 0;
 8006264:	9101      	str	r1, [sp, #4]
		frame[3] = 14;
 8006266:	220e      	movs	r2, #14
 8006268:	70ca      	strb	r2, [r1, #3]
		frame[4] = junctionId; // junction no
 800626a:	f899 2000 	ldrb.w	r2, [r9]
 800626e:	710a      	strb	r2, [r1, #4]
		frame[5] = programVersionNo; // junction no
 8006270:	4a51      	ldr	r2, [pc, #324]	; (80063b8 <function12+0x194>)
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	714a      	strb	r2, [r1, #5]
		frame[6] = fileNo; // junction no
 8006276:	4a51      	ldr	r2, [pc, #324]	; (80063bc <function12+0x198>)
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	718a      	strb	r2, [r1, #6]
		frame[7] = 0x0C; // function no
 800627c:	220c      	movs	r2, #12
		frame[0] = 126;
 800627e:	237e      	movs	r3, #126	; 0x7e
		frame[7] = 0x0C; // function no
 8006280:	71ca      	strb	r2, [r1, #7]
		frame[8] = 1;  // 1 indicates it is for date slot
 8006282:	2201      	movs	r2, #1
		frame[0] = 126;
 8006284:	700b      	strb	r3, [r1, #0]
		frame[1] = 126;
 8006286:	704b      	strb	r3, [r1, #1]
		frame[8] = 1;  // 1 indicates it is for date slot
 8006288:	720a      	strb	r2, [r1, #8]
		frame[2] = 0; // function no
 800628a:	2300      	movs	r3, #0
		frame[9] = dateSlotNo;
 800628c:	782a      	ldrb	r2, [r5, #0]
		frame[2] = 0; // function no
 800628e:	708b      	strb	r3, [r1, #2]
		frame[9] = dateSlotNo;
 8006290:	724a      	strb	r2, [r1, #9]
		frame[10] = 0;
 8006292:	728b      	strb	r3, [r1, #10]
		frame[11] = 0;
 8006294:	72cb      	strb	r3, [r1, #11]
		frame[12] = 0;
 8006296:	730b      	strb	r3, [r1, #12]
		frame[13] = 0;
 8006298:	734b      	strb	r3, [r1, #13]
		frame[14] = 0;
 800629a:	738b      	strb	r3, [r1, #14]
		frame[15] = 0;
 800629c:	73cb      	strb	r3, [r1, #15]
		frame[16] = 0;
 800629e:	740b      	strb	r3, [r1, #16]
		frame[17] = 0;
 80062a0:	744b      	strb	r3, [r1, #17]
		frame[18] = 0xFF - crcApi();  // junction no
 80062a2:	f7fe ff1b 	bl	80050dc <crcApi>
 80062a6:	9901      	ldr	r1, [sp, #4]
		frame[19] = 125;
 80062a8:	237d      	movs	r3, #125	; 0x7d
 80062aa:	74cb      	strb	r3, [r1, #19]
		frame[20] = 125;
 80062ac:	750b      	strb	r3, [r1, #20]
		if(programFromBLE==1)
 80062ae:	4b44      	ldr	r3, [pc, #272]	; (80063c0 <function12+0x19c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
		frame[18] = 0xFF - crcApi();  // junction no
 80062b2:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 80062b4:	2b01      	cmp	r3, #1
		frame[18] = 0xFF - crcApi();  // junction no
 80062b6:	7488      	strb	r0, [r1, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80062b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80062bc:	f04f 0214 	mov.w	r2, #20
		if(programFromBLE==1)
 80062c0:	d162      	bne.n	8006388 <function12+0x164>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80062c2:	4840      	ldr	r0, [pc, #256]	; (80063c4 <function12+0x1a0>)
 80062c4:	f7fc f90c 	bl	80024e0 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 25, 0x2FFF);
 80062c8:	493f      	ldr	r1, [pc, #252]	; (80063c8 <function12+0x1a4>)
 80062ca:	483e      	ldr	r0, [pc, #248]	; (80063c4 <function12+0x1a0>)
 80062cc:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80062d0:	2219      	movs	r2, #25
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 80062d2:	f7fc f962 	bl	800259a <HAL_UART_Receive>
		HAL_Delay(900);
 80062d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80062da:	f7fa f973 	bl	80005c4 <HAL_Delay>
		signVal=5;
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <function12+0x1a8>)
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	2005      	movs	r0, #5
 80062e4:	6018      	str	r0, [r3, #0]
					+ crcApi3(signVal) == 0xFF) {
 80062e6:	f7ff fb51 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80062ea:	4a37      	ldr	r2, [pc, #220]	; (80063c8 <function12+0x1a4>)
 80062ec:	7991      	ldrb	r1, [r2, #6]
 80062ee:	4411      	add	r1, r2
 80062f0:	4696      	mov	lr, r2
 80062f2:	79c9      	ldrb	r1, [r1, #7]
					+ crcApi3(signVal) == 0xFF) {
 80062f4:	4408      	add	r0, r1
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80062f6:	28ff      	cmp	r0, #255	; 0xff
 80062f8:	d14f      	bne.n	800639a <function12+0x176>
				signVal = signVal + 2;
 80062fa:	9b01      	ldr	r3, [sp, #4]
				if ((aRxBuffer[signVal] == junctionId))
 80062fc:	79d0      	ldrb	r0, [r2, #7]
				signVal = signVal + 2;
 80062fe:	2107      	movs	r1, #7
 8006300:	6019      	str	r1, [r3, #0]
				if ((aRxBuffer[signVal] == junctionId))
 8006302:	f899 1000 	ldrb.w	r1, [r9]
 8006306:	4288      	cmp	r0, r1
 8006308:	d195      	bne.n	8006236 <function12+0x12>
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 800630a:	7a92      	ldrb	r2, [r2, #10]
 800630c:	2a0c      	cmp	r2, #12
					signVal = signVal + 3;
 800630e:	f04f 010a 	mov.w	r1, #10
						signVal = signVal + 1;
 8006312:	bf08      	it	eq
 8006314:	220b      	moveq	r2, #11
					signVal = signVal + 3;
 8006316:	6019      	str	r1, [r3, #0]
						signVal = signVal + 1;
 8006318:	bf08      	it	eq
 800631a:	601a      	streq	r2, [r3, #0]
						string[0] = noOfDateSlots;  //TotalDateSlot
 800631c:	492c      	ldr	r1, [pc, #176]	; (80063d0 <function12+0x1ac>)
						signVal=signVal+1;
 800631e:	6818      	ldr	r0, [r3, #0]
						string[0] = noOfDateSlots;  //TotalDateSlot
 8006320:	f89a 2000 	ldrb.w	r2, [sl]
 8006324:	700a      	strb	r2, [r1, #0]
						signVal=signVal+1;
 8006326:	f100 0c01 	add.w	ip, r0, #1
						string[1] = dateSlotNo;			// SerialNoOfDateSlot
 800632a:	782a      	ldrb	r2, [r5, #0]
 800632c:	704a      	strb	r2, [r1, #1]
 800632e:	4688      	mov	r8, r1
						for (int i = 0; i < 9; i++) {
 8006330:	2200      	movs	r2, #0
							string[2 + i] = aRxBuffer[signVal];
 8006332:	eb0e 050c 	add.w	r5, lr, ip
 8006336:	eb08 0e02 	add.w	lr, r8, r2
 800633a:	f815 c002 	ldrb.w	ip, [r5, r2]
 800633e:	f88e c002 	strb.w	ip, [lr, #2]
						for (int i = 0; i < 9; i++) {
 8006342:	3201      	adds	r2, #1
 8006344:	2a09      	cmp	r2, #9
 8006346:	d1f6      	bne.n	8006336 <function12+0x112>
 8006348:	300a      	adds	r0, #10
 800634a:	6018      	str	r0, [r3, #0]
					string[10] = 0xFF ;//
 800634c:	23ff      	movs	r3, #255	; 0xff
 800634e:	728b      	strb	r3, [r1, #10]
						SDcardWriteSeek("date.txt", 11, (uint8_t *) string, seekCnt);
 8006350:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <function12+0x1ac>)
 8006352:	4820      	ldr	r0, [pc, #128]	; (80063d4 <function12+0x1b0>)
 8006354:	4633      	mov	r3, r6
 8006356:	210b      	movs	r1, #11
 8006358:	f7fe fa62 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("date.txt", 100, 0);
 800635c:	2200      	movs	r2, #0
 800635e:	2164      	movs	r1, #100	; 0x64
 8006360:	481c      	ldr	r0, [pc, #112]	; (80063d4 <function12+0x1b0>)
 8006362:	f7fe fa39 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006366:	2110      	movs	r1, #16
 8006368:	4658      	mov	r0, fp
 800636a:	f7fa face 	bl	800090a <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+11;
 800636e:	360b      	adds	r6, #11
						clearaRxBuffer();
 8006370:	f7fe fe6e 	bl	8005050 <clearaRxBuffer>
						resmsg = 1;
 8006374:	f04f 0801 	mov.w	r8, #1
						clearBuffer4();
 8006378:	f7fe fe88 	bl	800508c <clearBuffer4>
 800637c:	e75b      	b.n	8006236 <function12+0x12>
		if (i == 1) {
 800637e:	2c01      	cmp	r4, #1
			dateSlotNo = i;
 8006380:	bf04      	itt	eq
 8006382:	702c      	strbeq	r4, [r5, #0]
			i++;
 8006384:	2402      	moveq	r4, #2
 8006386:	e768      	b.n	800625a <function12+0x36>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 8006388:	4813      	ldr	r0, [pc, #76]	; (80063d8 <function12+0x1b4>)
 800638a:	f7fc f8a9 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 800638e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006392:	2228      	movs	r2, #40	; 0x28
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <function12+0x1a4>)
 8006396:	4810      	ldr	r0, [pc, #64]	; (80063d8 <function12+0x1b4>)
 8006398:	e79b      	b.n	80062d2 <function12+0xae>
							clearaRxBuffer();
 800639a:	f7fe fe59 	bl	8005050 <clearaRxBuffer>
							clearBuffer4();
 800639e:	f7fe fe75 	bl	800508c <clearBuffer4>
							return 0;
 80063a2:	2000      	movs	r0, #0
	return 1;
	else
	return 0;
}
 80063a4:	b003      	add	sp, #12
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	bf00      	nop
 80063ac:	200000e4 	.word	0x200000e4
 80063b0:	200000bd 	.word	0x200000bd
 80063b4:	20003ae1 	.word	0x20003ae1
 80063b8:	2000010d 	.word	0x2000010d
 80063bc:	2000000c 	.word	0x2000000c
 80063c0:	2000367c 	.word	0x2000367c
 80063c4:	200010e8 	.word	0x200010e8
 80063c8:	2000134c 	.word	0x2000134c
 80063cc:	200015c8 	.word	0x200015c8
 80063d0:	200052f2 	.word	0x200052f2
 80063d4:	08009522 	.word	0x08009522
 80063d8:	20000e10 	.word	0x20000e10
 80063dc:	40021000 	.word	0x40021000
 80063e0:	2000000d 	.word	0x2000000d

080063e4 <function13>:


/*-------------------------------function 13---------------------------*/
/*------------------------------------getting day info--------------------------------------*/
int function13(void) {
 80063e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 0;
	int seekCnt=0;
 80063e8:	2700      	movs	r7, #0
//	noOfDaySlots=3;
	for (int i = 1; i < noOfDaySlots + 1;) {
 80063ea:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80065cc <function13+0x1e8>
 80063ee:	2401      	movs	r4, #1
	int resmsg = 0;
 80063f0:	463b      	mov	r3, r7
	for (int i = 1; i < noOfDaySlots + 1;) {
 80063f2:	f899 2000 	ldrb.w	r2, [r9]
 80063f6:	4e6b      	ldr	r6, [pc, #428]	; (80065a4 <function13+0x1c0>)
 80063f8:	4294      	cmp	r4, r2
 80063fa:	dd18      	ble.n	800642e <function13+0x4a>
				clearBuffer4();
				return 0;
			}

	}
	string[0]=0xFF;
 80063fc:	4a6a      	ldr	r2, [pc, #424]	; (80065a8 <function13+0x1c4>)
	string[1]=0xFF;
	string[2]=0xFF;
	string[3]=0xFF;
	SDcardWriteSeek("day.txt", 3, (uint8_t *) string, seekCnt);
 80063fe:	486b      	ldr	r0, [pc, #428]	; (80065ac <function13+0x1c8>)
	string[0]=0xFF;
 8006400:	23ff      	movs	r3, #255	; 0xff
 8006402:	7013      	strb	r3, [r2, #0]
	string[1]=0xFF;
 8006404:	7053      	strb	r3, [r2, #1]
	string[2]=0xFF;
 8006406:	7093      	strb	r3, [r2, #2]
	string[3]=0xFF;
 8006408:	70d3      	strb	r3, [r2, #3]
	SDcardWriteSeek("day.txt", 3, (uint8_t *) string, seekCnt);
 800640a:	2103      	movs	r1, #3
 800640c:	463b      	mov	r3, r7
 800640e:	f7fe fa07 	bl	8004820 <SDcardWriteSeek>
	SDcardReadSeek("day.txt", 50, 0);
 8006412:	4866      	ldr	r0, [pc, #408]	; (80065ac <function13+0x1c8>)
 8006414:	2200      	movs	r2, #0
 8006416:	2132      	movs	r1, #50	; 0x32
 8006418:	f7fe f9de 	bl	80047d8 <SDcardReadSeek>
	clearaRxBuffer();
 800641c:	f7fe fe18 	bl	8005050 <clearaRxBuffer>
	if(daySlotNo==noOfDaySlots)
 8006420:	7830      	ldrb	r0, [r6, #0]
 8006422:	f899 3000 	ldrb.w	r3, [r9]
 8006426:	1ac3      	subs	r3, r0, r3
 8006428:	4258      	negs	r0, r3
 800642a:	4158      	adcs	r0, r3
 800642c:	e0b4      	b.n	8006598 <function13+0x1b4>
		if (resmsg == 1) {
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 809f 	beq.w	8006572 <function13+0x18e>
			daySlotNo = i;
 8006434:	7034      	strb	r4, [r6, #0]
			i++;
 8006436:	3401      	adds	r4, #1
		frame[0] = 126;
 8006438:	4d5d      	ldr	r5, [pc, #372]	; (80065b0 <function13+0x1cc>)
		frame[4] = junctionId; // junction no
 800643a:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80065d8 <function13+0x1f4>
		clearframe();
 800643e:	f7fe fddd 	bl	8004ffc <clearframe>
		frame[3] = 14;
 8006442:	220e      	movs	r2, #14
 8006444:	70ea      	strb	r2, [r5, #3]
		frame[4] = junctionId; // junction no
 8006446:	f89a 2000 	ldrb.w	r2, [sl]
 800644a:	712a      	strb	r2, [r5, #4]
		frame[5] = programVersionNo; // junction no
 800644c:	4a59      	ldr	r2, [pc, #356]	; (80065b4 <function13+0x1d0>)
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	716a      	strb	r2, [r5, #5]
		frame[6] = fileNo; // junction no
 8006452:	4a59      	ldr	r2, [pc, #356]	; (80065b8 <function13+0x1d4>)
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	71aa      	strb	r2, [r5, #6]
		frame[7] = 0x0D; // function no
 8006458:	220d      	movs	r2, #13
		frame[0] = 126;
 800645a:	237e      	movs	r3, #126	; 0x7e
		frame[7] = 0x0D; // function no
 800645c:	71ea      	strb	r2, [r5, #7]
		frame[8] = 2;  // 2 indicates it is for day slot
 800645e:	2202      	movs	r2, #2
		frame[0] = 126;
 8006460:	702b      	strb	r3, [r5, #0]
		frame[1] = 126;
 8006462:	706b      	strb	r3, [r5, #1]
		frame[8] = 2;  // 2 indicates it is for day slot
 8006464:	722a      	strb	r2, [r5, #8]
		frame[2] = 0; // function no
 8006466:	2300      	movs	r3, #0
		frame[9] = daySlotNo;
 8006468:	7832      	ldrb	r2, [r6, #0]
		frame[2] = 0; // function no
 800646a:	70ab      	strb	r3, [r5, #2]
		frame[9] = daySlotNo;
 800646c:	726a      	strb	r2, [r5, #9]
		frame[10] = 0;
 800646e:	72ab      	strb	r3, [r5, #10]
		frame[11] = 0;
 8006470:	72eb      	strb	r3, [r5, #11]
		frame[12] = 0;
 8006472:	732b      	strb	r3, [r5, #12]
		frame[13] = 0;
 8006474:	736b      	strb	r3, [r5, #13]
		frame[14] = 0;
 8006476:	73ab      	strb	r3, [r5, #14]
		frame[15] = 0;
 8006478:	73eb      	strb	r3, [r5, #15]
		frame[16] = 0;
 800647a:	742b      	strb	r3, [r5, #16]
		frame[17] = 0;
 800647c:	746b      	strb	r3, [r5, #17]
		frame[18] = 0xFF - crcApi();  // junction no
 800647e:	f7fe fe2d 	bl	80050dc <crcApi>
		frame[19] = 125;
 8006482:	237d      	movs	r3, #125	; 0x7d
 8006484:	74eb      	strb	r3, [r5, #19]
		frame[20] = 125;
 8006486:	752b      	strb	r3, [r5, #20]
		if(programFromBLE==1)
 8006488:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <function13+0x1d8>)
 800648a:	681b      	ldr	r3, [r3, #0]
		frame[18] = 0xFF - crcApi();  // junction no
 800648c:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 800648e:	2b01      	cmp	r3, #1
		frame[18] = 0xFF - crcApi();  // junction no
 8006490:	74a8      	strb	r0, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 8006492:	f241 3388 	movw	r3, #5000	; 0x1388
 8006496:	f04f 0214 	mov.w	r2, #20
 800649a:	4629      	mov	r1, r5
		if(programFromBLE==1)
 800649c:	d16e      	bne.n	800657c <function13+0x198>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 800649e:	4848      	ldr	r0, [pc, #288]	; (80065c0 <function13+0x1dc>)
 80064a0:	f7fc f81e 	bl	80024e0 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80064a4:	4947      	ldr	r1, [pc, #284]	; (80065c4 <function13+0x1e0>)
 80064a6:	4846      	ldr	r0, [pc, #280]	; (80065c0 <function13+0x1dc>)
 80064a8:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80064ac:	221e      	movs	r2, #30
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80064ae:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80065c4 <function13+0x1e0>
 80064b2:	f8df b128 	ldr.w	fp, [pc, #296]	; 80065dc <function13+0x1f8>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 80064b6:	f7fc f870 	bl	800259a <HAL_UART_Receive>
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	4942      	ldr	r1, [pc, #264]	; (80065c8 <function13+0x1e4>)
 80064be:	4640      	mov	r0, r8
 80064c0:	f002 fb62 	bl	8008b88 <msgParse>
 80064c4:	f8cb 0000 	str.w	r0, [fp]
		HAL_Delay(900);
 80064c8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80064cc:	f7fa f87a 	bl	80005c4 <HAL_Delay>
		if (!(signVal == 0)){
 80064d0:	f8db 2000 	ldr.w	r2, [fp]
 80064d4:	4645      	mov	r5, r8
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d059      	beq.n	800658e <function13+0x1aa>
					+ crcApi3(signVal) == 0xFF) {
 80064da:	4610      	mov	r0, r2
 80064dc:	9201      	str	r2, [sp, #4]
 80064de:	f7ff fa55 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80064e2:	9a01      	ldr	r2, [sp, #4]
 80064e4:	4442      	add	r2, r8
 80064e6:	7851      	ldrb	r1, [r2, #1]
 80064e8:	440a      	add	r2, r1
 80064ea:	7892      	ldrb	r2, [r2, #2]
					+ crcApi3(signVal) == 0xFF) {
 80064ec:	4410      	add	r0, r2
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80064ee:	28ff      	cmp	r0, #255	; 0xff
 80064f0:	d14d      	bne.n	800658e <function13+0x1aa>
				clearStringBuffer();
 80064f2:	f7fe fe65 	bl	80051c0 <clearStringBuffer>
				signVal = signVal + 2;
 80064f6:	f8db 2000 	ldr.w	r2, [fp]
 80064fa:	1c91      	adds	r1, r2, #2
 80064fc:	f8cb 1000 	str.w	r1, [fp]
				if ((aRxBuffer[signVal] == junctionId))
 8006500:	f818 0001 	ldrb.w	r0, [r8, r1]
 8006504:	f89a 1000 	ldrb.w	r1, [sl]
 8006508:	4288      	cmp	r0, r1
 800650a:	d148      	bne.n	800659e <function13+0x1ba>
					signVal = signVal + 3;
 800650c:	1d51      	adds	r1, r2, #5
 800650e:	f8cb 1000 	str.w	r1, [fp]
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 8006512:	f818 1001 	ldrb.w	r1, [r8, r1]
						string[0] = noOfDaySlots;  //TotalDaySlot
 8006516:	4b2d      	ldr	r3, [pc, #180]	; (80065cc <function13+0x1e8>)
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 8006518:	290c      	cmp	r1, #12
						signVal = signVal + 1;
 800651a:	bf04      	itt	eq
 800651c:	3206      	addeq	r2, #6
 800651e:	f8cb 2000 	streq.w	r2, [fp]
                        signVal=signVal+2;
 8006522:	f8db 1000 	ldr.w	r1, [fp]
						string[0] = noOfDaySlots;  //TotalDaySlot
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <function13+0x1c4>)
 8006528:	7818      	ldrb	r0, [r3, #0]
 800652a:	7010      	strb	r0, [r2, #0]
							string[2 + i] = aRxBuffer[signVal];
 800652c:	440d      	add	r5, r1
						string[1] = daySlotNo;			// SerialNoOfDaySlot
 800652e:	7830      	ldrb	r0, [r6, #0]
 8006530:	7050      	strb	r0, [r2, #1]
							string[2 + i] = aRxBuffer[signVal];
 8006532:	78a8      	ldrb	r0, [r5, #2]
 8006534:	7090      	strb	r0, [r2, #2]
 8006536:	78e8      	ldrb	r0, [r5, #3]
 8006538:	70d0      	strb	r0, [r2, #3]
 800653a:	3105      	adds	r1, #5
 800653c:	7928      	ldrb	r0, [r5, #4]
 800653e:	7110      	strb	r0, [r2, #4]
					string[5] = 0xFF ;//
 8006540:	23ff      	movs	r3, #255	; 0xff
 8006542:	7153      	strb	r3, [r2, #5]
 8006544:	f8cb 1000 	str.w	r1, [fp]
						SDcardWriteSeek("day.txt", 6, (uint8_t *) string, seekCnt);
 8006548:	463b      	mov	r3, r7
 800654a:	2106      	movs	r1, #6
 800654c:	4817      	ldr	r0, [pc, #92]	; (80065ac <function13+0x1c8>)
 800654e:	f7fe f967 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("day.txt", 50, 0);
 8006552:	2200      	movs	r2, #0
 8006554:	2132      	movs	r1, #50	; 0x32
 8006556:	4815      	ldr	r0, [pc, #84]	; (80065ac <function13+0x1c8>)
 8006558:	f7fe f93e 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800655c:	2110      	movs	r1, #16
 800655e:	481c      	ldr	r0, [pc, #112]	; (80065d0 <function13+0x1ec>)
 8006560:	f7fa f9d3 	bl	800090a <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+6;
 8006564:	3706      	adds	r7, #6
						clearaRxBuffer();
 8006566:	f7fe fd73 	bl	8005050 <clearaRxBuffer>
						clearBuffer4();
 800656a:	f7fe fd8f 	bl	800508c <clearBuffer4>
						resmsg = 1;
 800656e:	2301      	movs	r3, #1
 8006570:	e73f      	b.n	80063f2 <function13+0xe>
		if (i == 1) {
 8006572:	2c01      	cmp	r4, #1
			daySlotNo = i;
 8006574:	bf04      	itt	eq
 8006576:	7034      	strbeq	r4, [r6, #0]
			i++;
 8006578:	2402      	moveq	r4, #2
 800657a:	e75d      	b.n	8006438 <function13+0x54>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 800657c:	4815      	ldr	r0, [pc, #84]	; (80065d4 <function13+0x1f0>)
 800657e:	f7fb ffaf 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 8006582:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006586:	221e      	movs	r2, #30
 8006588:	490e      	ldr	r1, [pc, #56]	; (80065c4 <function13+0x1e0>)
 800658a:	4812      	ldr	r0, [pc, #72]	; (80065d4 <function13+0x1f0>)
 800658c:	e78f      	b.n	80064ae <function13+0xca>
							clearaRxBuffer();
 800658e:	f7fe fd5f 	bl	8005050 <clearaRxBuffer>
							clearBuffer4();
 8006592:	f7fe fd7b 	bl	800508c <clearBuffer4>
							return 0;
 8006596:	2000      	movs	r0, #0
	return 1;
	else
		return 0;
}
 8006598:	b003      	add	sp, #12
 800659a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		resmsg=0;
 800659e:	2300      	movs	r3, #0
 80065a0:	e727      	b.n	80063f2 <function13+0xe>
 80065a2:	bf00      	nop
 80065a4:	200000bf 	.word	0x200000bf
 80065a8:	200052f2 	.word	0x200052f2
 80065ac:	0800952b 	.word	0x0800952b
 80065b0:	20003ae1 	.word	0x20003ae1
 80065b4:	2000010d 	.word	0x2000010d
 80065b8:	2000000c 	.word	0x2000000c
 80065bc:	2000367c 	.word	0x2000367c
 80065c0:	200010e8 	.word	0x200010e8
 80065c4:	2000134c 	.word	0x2000134c
 80065c8:	080094f7 	.word	0x080094f7
 80065cc:	200000e5 	.word	0x200000e5
 80065d0:	40021000 	.word	0x40021000
 80065d4:	20000e10 	.word	0x20000e10
 80065d8:	2000000d 	.word	0x2000000d
 80065dc:	200015c8 	.word	0x200015c8

080065e0 <function14>:

/*------------------------------------getting plan info--------------------------------------*/
int function14(void) {
 80065e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int resmsg = 0;
	int seekCnt=0;
 80065e4:	2600      	movs	r6, #0
////    signVal = msgParse(RxBuffer,"T\r\r\nOK",0);
		frame[0] = 126;
		frame[1] = 126;
		frame[2] = 0; // function no
		frame[3] = 17;
		frame[4] = junctionId; // junction no
 80065e6:	4f5e      	ldr	r7, [pc, #376]	; (8006760 <function14+0x180>)
//							Address = Address + 4;
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80065e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006794 <function14+0x1b4>
	for (int i = 1; i < noOfPlans + 1;) {
 80065ec:	2501      	movs	r5, #1
	int resmsg = 0;
 80065ee:	46b1      	mov	r9, r6
	for (int i = 1; i < noOfPlans + 1;) {
 80065f0:	4c5c      	ldr	r4, [pc, #368]	; (8006764 <function14+0x184>)
 80065f2:	485d      	ldr	r0, [pc, #372]	; (8006768 <function14+0x188>)
 80065f4:	7823      	ldrb	r3, [r4, #0]
 80065f6:	429d      	cmp	r5, r3
 80065f8:	dd08      	ble.n	800660c <function14+0x2c>
				clearBuffer4();
				return 0;
			}

	}
	clearaRxBuffer();
 80065fa:	f7fe fd29 	bl	8005050 <clearaRxBuffer>
	if(planNo==noOfPlans)
 80065fe:	7823      	ldrb	r3, [r4, #0]
 8006600:	7800      	ldrb	r0, [r0, #0]
 8006602:	1ac3      	subs	r3, r0, r3
 8006604:	4258      	negs	r0, r3
 8006606:	4158      	adcs	r0, r3
	return 1;
	else
		return 0;
}
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (resmsg == 1) {
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	f000 8090 	beq.w	8006734 <function14+0x154>
			planNo = i;
 8006614:	7005      	strb	r5, [r0, #0]
			i++;
 8006616:	3501      	adds	r5, #1
		frame[0] = 126;
 8006618:	4c54      	ldr	r4, [pc, #336]	; (800676c <function14+0x18c>)
		clearframe();
 800661a:	f7fe fcef 	bl	8004ffc <clearframe>
		frame[0] = 126;
 800661e:	237e      	movs	r3, #126	; 0x7e
 8006620:	7023      	strb	r3, [r4, #0]
		frame[1] = 126;
 8006622:	7063      	strb	r3, [r4, #1]
		frame[2] = 0; // function no
 8006624:	2300      	movs	r3, #0
 8006626:	70a3      	strb	r3, [r4, #2]
		frame[3] = 17;
 8006628:	2311      	movs	r3, #17
 800662a:	70e3      	strb	r3, [r4, #3]
		frame[4] = junctionId; // junction no
 800662c:	783b      	ldrb	r3, [r7, #0]
 800662e:	7123      	strb	r3, [r4, #4]
		frame[5] = programVersionNo; // junction no
 8006630:	4b4f      	ldr	r3, [pc, #316]	; (8006770 <function14+0x190>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	7163      	strb	r3, [r4, #5]
		frame[6] = fileNo; // junction no
 8006636:	4b4f      	ldr	r3, [pc, #316]	; (8006774 <function14+0x194>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	71a3      	strb	r3, [r4, #6]
		frame[7] = 0x0E; // function no
 800663c:	230e      	movs	r3, #14
 800663e:	71e3      	strb	r3, [r4, #7]
		frame[8] = planNo;  // plan no
 8006640:	7803      	ldrb	r3, [r0, #0]
 8006642:	7223      	strb	r3, [r4, #8]
		frame[9] = 1;
 8006644:	2301      	movs	r3, #1
 8006646:	7263      	strb	r3, [r4, #9]
		frame[10] = 1;
 8006648:	72a3      	strb	r3, [r4, #10]
		frame[11] = 1;
 800664a:	72e3      	strb	r3, [r4, #11]
		frame[12] = 1;
 800664c:	7323      	strb	r3, [r4, #12]
		frame[13] = 1;
 800664e:	7363      	strb	r3, [r4, #13]
		frame[14] = 1;
 8006650:	73a3      	strb	r3, [r4, #14]
		frame[15] = 1;
 8006652:	73e3      	strb	r3, [r4, #15]
		frame[16] = 1;
 8006654:	7423      	strb	r3, [r4, #16]
		frame[17] = 1;
 8006656:	7463      	strb	r3, [r4, #17]
		frame[18] = 1;  //'1'
 8006658:	74a3      	strb	r3, [r4, #18]
		frame[19] = 1;  //'0' ; //'5' ;
 800665a:	74e3      	strb	r3, [r4, #19]
		frame[20] = 1;  // '2' ;//'9' ;//'1' ;
 800665c:	7523      	strb	r3, [r4, #20]
		frame[21] = 0xFF - crcApi();  // junction no
 800665e:	f7fe fd3d 	bl	80050dc <crcApi>
		frame[22] = 125;
 8006662:	237d      	movs	r3, #125	; 0x7d
 8006664:	75a3      	strb	r3, [r4, #22]
		frame[23] = 125;
 8006666:	75e3      	strb	r3, [r4, #23]
		if(programFromBLE==1)
 8006668:	4b43      	ldr	r3, [pc, #268]	; (8006778 <function14+0x198>)
 800666a:	681b      	ldr	r3, [r3, #0]
		frame[21] = 0xFF - crcApi();  // junction no
 800666c:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 800666e:	2b01      	cmp	r3, #1
		frame[21] = 0xFF - crcApi();  // junction no
 8006670:	7560      	strb	r0, [r4, #21]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 23, 5000);
 8006672:	f241 3388 	movw	r3, #5000	; 0x1388
 8006676:	f04f 0217 	mov.w	r2, #23
 800667a:	4621      	mov	r1, r4
		if(programFromBLE==1)
 800667c:	d15f      	bne.n	800673e <function14+0x15e>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 23, 5000);
 800667e:	483f      	ldr	r0, [pc, #252]	; (800677c <function14+0x19c>)
 8006680:	f7fb ff2e 	bl	80024e0 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 45, 0x2FFF);
 8006684:	493e      	ldr	r1, [pc, #248]	; (8006780 <function14+0x1a0>)
 8006686:	483d      	ldr	r0, [pc, #244]	; (800677c <function14+0x19c>)
 8006688:	f642 73ff 	movw	r3, #12287	; 0x2fff
 800668c:	222d      	movs	r2, #45	; 0x2d
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 45, 0x1FFF);
 800668e:	f7fb ff84 	bl	800259a <HAL_UART_Receive>
		signVal=4;
 8006692:	4c3c      	ldr	r4, [pc, #240]	; (8006784 <function14+0x1a4>)
		HAL_Delay(900);
 8006694:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006698:	f7f9 ff94 	bl	80005c4 <HAL_Delay>
		signVal=4;
 800669c:	2004      	movs	r0, #4
 800669e:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 80066a0:	f7ff f974 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80066a4:	4a36      	ldr	r2, [pc, #216]	; (8006780 <function14+0x1a0>)
 80066a6:	7953      	ldrb	r3, [r2, #5]
 80066a8:	4413      	add	r3, r2
 80066aa:	799b      	ldrb	r3, [r3, #6]
					+ crcApi3(signVal) == 0xFF) {
 80066ac:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80066ae:	28ff      	cmp	r0, #255	; 0xff
 80066b0:	d14e      	bne.n	8006750 <function14+0x170>
				signVal = signVal + 2;
 80066b2:	2306      	movs	r3, #6
 80066b4:	6023      	str	r3, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId)) {
 80066b6:	7991      	ldrb	r1, [r2, #6]
 80066b8:	783b      	ldrb	r3, [r7, #0]
 80066ba:	4299      	cmp	r1, r3
 80066bc:	d198      	bne.n	80065f0 <function14+0x10>
					signVal = signVal + 3;
 80066be:	2309      	movs	r3, #9
 80066c0:	6023      	str	r3, [r4, #0]
					if ((aRxBuffer[signVal] == 0x0E))
 80066c2:	7a53      	ldrb	r3, [r2, #9]
 80066c4:	2b0e      	cmp	r3, #14
 80066c6:	d193      	bne.n	80065f0 <function14+0x10>
						string[0] = aRxBuffer[signVal];  //planNoID
 80066c8:	4b2f      	ldr	r3, [pc, #188]	; (8006788 <function14+0x1a8>)
 80066ca:	7a91      	ldrb	r1, [r2, #10]
 80066cc:	7019      	strb	r1, [r3, #0]
						string[1] = aRxBuffer[signVal];  //planNo
 80066ce:	7ad1      	ldrb	r1, [r2, #11]
 80066d0:	7059      	strb	r1, [r3, #1]
						string[2] = aRxBuffer[signVal];			// on time hour
 80066d2:	7b11      	ldrb	r1, [r2, #12]
						string[3] = aRxBuffer[signVal];			// on time min
 80066d4:	7b52      	ldrb	r2, [r2, #13]
							string[4 + i] = aRxBuffer[signVal];
 80066d6:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8006798 <function14+0x1b8>
						if (string[2] == 0x6F)
 80066da:	296f      	cmp	r1, #111	; 0x6f
							string[2] = 0;
 80066dc:	bf08      	it	eq
 80066de:	2100      	moveq	r1, #0
						if (string[3] == 0x6F)
 80066e0:	2a6f      	cmp	r2, #111	; 0x6f
							string[3] = 0;
 80066e2:	bf08      	it	eq
 80066e4:	2200      	moveq	r2, #0
 80066e6:	70da      	strb	r2, [r3, #3]
 80066e8:	469c      	mov	ip, r3
							string[2] = 0;
 80066ea:	7099      	strb	r1, [r3, #2]
						for (int i = 0; i < 15; i++) {
 80066ec:	2200      	movs	r2, #0
							string[4 + i] = aRxBuffer[signVal];
 80066ee:	eb0c 0102 	add.w	r1, ip, r2
 80066f2:	f812 000e 	ldrb.w	r0, [r2, lr]
 80066f6:	7108      	strb	r0, [r1, #4]
						for (int i = 0; i < 15; i++) {
 80066f8:	3201      	adds	r2, #1
 80066fa:	2a0f      	cmp	r2, #15
 80066fc:	d1f7      	bne.n	80066ee <function14+0x10e>
 80066fe:	221d      	movs	r2, #29
 8006700:	6022      	str	r2, [r4, #0]
					string[18] = 0xFF ;//
 8006702:	22ff      	movs	r2, #255	; 0xff
 8006704:	749a      	strb	r2, [r3, #18]
						SDcardWriteSeek("planN.txt", 19, (uint8_t *) string, seekCnt);
 8006706:	2113      	movs	r1, #19
 8006708:	4633      	mov	r3, r6
 800670a:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <function14+0x1a8>)
 800670c:	481f      	ldr	r0, [pc, #124]	; (800678c <function14+0x1ac>)
 800670e:	f7fe f887 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("planN.txt", 100, 0);
 8006712:	2200      	movs	r2, #0
 8006714:	2164      	movs	r1, #100	; 0x64
 8006716:	481d      	ldr	r0, [pc, #116]	; (800678c <function14+0x1ac>)
 8006718:	f7fe f85e 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800671c:	2110      	movs	r1, #16
 800671e:	4640      	mov	r0, r8
 8006720:	f7fa f8f3 	bl	800090a <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+19;
 8006724:	3613      	adds	r6, #19
						clearaRxBuffer();
 8006726:	f7fe fc93 	bl	8005050 <clearaRxBuffer>
						resmsg = 1;
 800672a:	f04f 0901 	mov.w	r9, #1
						clearBuffer4();
 800672e:	f7fe fcad 	bl	800508c <clearBuffer4>
 8006732:	e75d      	b.n	80065f0 <function14+0x10>
		if (i == 1) {
 8006734:	2d01      	cmp	r5, #1
			planNo = i;
 8006736:	bf04      	itt	eq
 8006738:	7005      	strbeq	r5, [r0, #0]
			i++;
 800673a:	2502      	moveq	r5, #2
 800673c:	e76c      	b.n	8006618 <function14+0x38>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 23, 5000);
 800673e:	4814      	ldr	r0, [pc, #80]	; (8006790 <function14+0x1b0>)
 8006740:	f7fb fece 	bl	80024e0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 45, 0x1FFF);
 8006744:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006748:	222d      	movs	r2, #45	; 0x2d
 800674a:	490d      	ldr	r1, [pc, #52]	; (8006780 <function14+0x1a0>)
 800674c:	4810      	ldr	r0, [pc, #64]	; (8006790 <function14+0x1b0>)
 800674e:	e79e      	b.n	800668e <function14+0xae>
							clearaRxBuffer();
 8006750:	f7fe fc7e 	bl	8005050 <clearaRxBuffer>
							clearBuffer4();
 8006754:	f7fe fc9a 	bl	800508c <clearBuffer4>
							return 0;
 8006758:	2000      	movs	r0, #0
 800675a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675e:	bf00      	nop
 8006760:	2000000d 	.word	0x2000000d
 8006764:	200000ec 	.word	0x200000ec
 8006768:	20003acd 	.word	0x20003acd
 800676c:	20003ae1 	.word	0x20003ae1
 8006770:	2000010d 	.word	0x2000010d
 8006774:	2000000c 	.word	0x2000000c
 8006778:	2000367c 	.word	0x2000367c
 800677c:	200010e8 	.word	0x200010e8
 8006780:	2000134c 	.word	0x2000134c
 8006784:	200015c8 	.word	0x200015c8
 8006788:	200052f2 	.word	0x200052f2
 800678c:	0800953d 	.word	0x0800953d
 8006790:	20000e10 	.word	0x20000e10
 8006794:	40021000 	.word	0x40021000
 8006798:	2000135a 	.word	0x2000135a

0800679c <function15>:

/*-------------------------------function 15---------------------------*/
/*------------------------------------getting map info for date--------------------------------------*/
int function15(void) {
 800679c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 1;
	int seekCnt=0;
	int seekCntWrite=0;
//	noOfDateSlots=2;
//	junctionId=1;
	for (int i = 1; i < noOfDateSlots + 1;) {
 80067a0:	2501      	movs	r5, #1
	int seekCntWrite=0;
 80067a2:	f04f 0800 	mov.w	r8, #0
	int seekCnt=0;
 80067a6:	46c1      	mov	r9, r8
	int resmsg = 1;
 80067a8:	462c      	mov	r4, r5
	for (int i = 1; i < noOfDateSlots + 1;) {
 80067aa:	4e82      	ldr	r6, [pc, #520]	; (80069b4 <function15+0x218>)
 80067ac:	7833      	ldrb	r3, [r6, #0]
 80067ae:	429d      	cmp	r5, r3
 80067b0:	dd08      	ble.n	80067c4 <function15+0x28>
//				return 0;
			}}
	}

	}
	clearaRxBuffer();
 80067b2:	f7fe fc4d 	bl	8005050 <clearaRxBuffer>
	if(dateSlotNo==noOfDateSlots)
 80067b6:	4b80      	ldr	r3, [pc, #512]	; (80069b8 <function15+0x21c>)
 80067b8:	7818      	ldrb	r0, [r3, #0]
 80067ba:	7833      	ldrb	r3, [r6, #0]
 80067bc:	1ac3      	subs	r3, r0, r3
 80067be:	4258      	negs	r0, r3
 80067c0:	4158      	adcs	r0, r3
 80067c2:	e0ee      	b.n	80069a2 <function15+0x206>
		if (resmsg == 1) {
 80067c4:	2c01      	cmp	r4, #1
 80067c6:	f040 80d2 	bne.w	800696e <function15+0x1d2>
			dateSlotNo = i;
 80067ca:	4b7b      	ldr	r3, [pc, #492]	; (80069b8 <function15+0x21c>)
 80067cc:	701d      	strb	r5, [r3, #0]
			i++;
 80067ce:	3501      	adds	r5, #1
		clearframe();
 80067d0:	f7fe fc14 	bl	8004ffc <clearframe>
		for (int i = 1; i < noOfDateSlots + 1;) {
 80067d4:	2601      	movs	r6, #1
 80067d6:	4b77      	ldr	r3, [pc, #476]	; (80069b4 <function15+0x218>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	429e      	cmp	r6, r3
 80067dc:	dce5      	bgt.n	80067aa <function15+0xe>
			if (resmsg == 1) {
 80067de:	2c01      	cmp	r4, #1
 80067e0:	f040 80cb 	bne.w	800697a <function15+0x1de>
				dateSlotNo = i;
 80067e4:	4b74      	ldr	r3, [pc, #464]	; (80069b8 <function15+0x21c>)
 80067e6:	701e      	strb	r6, [r3, #0]
				i++;
 80067e8:	3601      	adds	r6, #1
			clearframe();
 80067ea:	f7fe fc07 	bl	8004ffc <clearframe>
		clearReadBytes();
 80067ee:	f7fe fc0f 	bl	8005010 <clearReadBytes>
		SDcardReadSeek("date.txt", 15, seekCnt);
 80067f2:	464a      	mov	r2, r9
 80067f4:	210f      	movs	r1, #15
 80067f6:	4871      	ldr	r0, [pc, #452]	; (80069bc <function15+0x220>)
		dateID = readBytes[2];
 80067f8:	f8df b204 	ldr.w	fp, [pc, #516]	; 8006a00 <function15+0x264>
		SDcardReadSeek("date.txt", 15, seekCnt);
 80067fc:	f7fd ffec 	bl	80047d8 <SDcardReadSeek>
		dateID = readBytes[2];
 8006800:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <function15+0x224>)
		totalNoOfPlans = readBytes[9];
 8006802:	4870      	ldr	r0, [pc, #448]	; (80069c4 <function15+0x228>)
		dateID = readBytes[2];
 8006804:	789a      	ldrb	r2, [r3, #2]
		totalNoOfPlans = readBytes[9];
 8006806:	7a5b      	ldrb	r3, [r3, #9]
		dateID = readBytes[2];
 8006808:	f88b 2000 	strb.w	r2, [fp]
		totalNoOfPlans = readBytes[9];
 800680c:	7003      	strb	r3, [r0, #0]
		clearReadBytes();
 800680e:	f7fe fbff 	bl	8005010 <clearReadBytes>
		seekCnt = seekCnt + 11;
 8006812:	f109 090b 	add.w	r9, r9, #11
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006816:	2701      	movs	r7, #1
 8006818:	f8cd b000 	str.w	fp, [sp]
 800681c:	9001      	str	r0, [sp, #4]
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	429f      	cmp	r7, r3
 8006824:	dcd7      	bgt.n	80067d6 <function15+0x3a>
				frame[0] = 126;
 8006826:	4c68      	ldr	r4, [pc, #416]	; (80069c8 <function15+0x22c>)
 8006828:	237e      	movs	r3, #126	; 0x7e
 800682a:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 800682c:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 800682e:	2300      	movs	r3, #0
 8006830:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 8006832:	2312      	movs	r3, #18
 8006834:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 8006836:	4b65      	ldr	r3, [pc, #404]	; (80069cc <function15+0x230>)
				frame[9] = i;  // plan no
 8006838:	7267      	strb	r7, [r4, #9]
				frame[4] = junctionId; // function no
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 800683e:	4b64      	ldr	r3, [pc, #400]	; (80069d0 <function15+0x234>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 8006844:	4b63      	ldr	r3, [pc, #396]	; (80069d4 <function15+0x238>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x0F; // function no
 800684a:	230f      	movs	r3, #15
 800684c:	71e3      	strb	r3, [r4, #7]
				frame[8] = dateID;  // plan no planOnHr
 800684e:	9b00      	ldr	r3, [sp, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	7223      	strb	r3, [r4, #8]
				frame[10] = '1';
 8006854:	2331      	movs	r3, #49	; 0x31
 8006856:	72a3      	strb	r3, [r4, #10]
				frame[11] = '1';
 8006858:	72e3      	strb	r3, [r4, #11]
				frame[12] = '1';
 800685a:	7323      	strb	r3, [r4, #12]
				frame[13] = '1';
 800685c:	7363      	strb	r3, [r4, #13]
				frame[14] = '1';
 800685e:	73a3      	strb	r3, [r4, #14]
				frame[15] = '1';
 8006860:	73e3      	strb	r3, [r4, #15]
				frame[16] = '1';
 8006862:	7423      	strb	r3, [r4, #16]
				frame[17] = '1';
 8006864:	7463      	strb	r3, [r4, #17]
				frame[18] = '1';  //'1'
 8006866:	74a3      	strb	r3, [r4, #18]
				frame[19] = '1';  //'0' ; //'5' ;
 8006868:	74e3      	strb	r3, [r4, #19]
				frame[20] = '1';  // '2' ;//'9' ;//'1' ;
 800686a:	7523      	strb	r3, [r4, #20]
				frame[21] = '1';  // '2' ;//'9' ;//'1' ;
 800686c:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 800686e:	f7fe fc35 	bl	80050dc <crcApi>
				frame[23] = 125;
 8006872:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 8006874:	43c0      	mvns	r0, r0
				frame[23] = 125;
 8006876:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 8006878:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 800687a:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 800687c:	f7fe fbd4 	bl	8005028 <clearBuffer>
				if(programFromBLE==1)
 8006880:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <function15+0x23c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006886:	f04f 0218 	mov.w	r2, #24
 800688a:	f241 3388 	movw	r3, #5000	; 0x1388
 800688e:	4621      	mov	r1, r4
				if(programFromBLE==1)
 8006890:	d179      	bne.n	8006986 <function15+0x1ea>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006892:	4852      	ldr	r0, [pc, #328]	; (80069dc <function15+0x240>)
 8006894:	f7fb fe24 	bl	80024e0 <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 8006898:	4951      	ldr	r1, [pc, #324]	; (80069e0 <function15+0x244>)
 800689a:	4850      	ldr	r0, [pc, #320]	; (80069dc <function15+0x240>)
 800689c:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80068a0:	221e      	movs	r2, #30
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80068a2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80069e0 <function15+0x244>
 80068a6:	f8df b140 	ldr.w	fp, [pc, #320]	; 80069e8 <function15+0x24c>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 80068aa:	f7fb fe76 	bl	800259a <HAL_UART_Receive>
				HAL_Delay(300);
 80068ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80068b2:	f7f9 fe87 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80068b6:	2200      	movs	r2, #0
 80068b8:	494a      	ldr	r1, [pc, #296]	; (80069e4 <function15+0x248>)
 80068ba:	4650      	mov	r0, sl
 80068bc:	f002 f964 	bl	8008b88 <msgParse>
 80068c0:	f8cb 0000 	str.w	r0, [fp]
		HAL_Delay(900);
 80068c4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80068c8:	f7f9 fe7c 	bl	80005c4 <HAL_Delay>
		if (!(signVal == 0)){
 80068cc:	f8db 4000 	ldr.w	r4, [fp]
 80068d0:	2c00      	cmp	r4, #0
 80068d2:	d069      	beq.n	80069a8 <function15+0x20c>
					+ crcApi3(signVal) == 0xFF) {
 80068d4:	4620      	mov	r0, r4
 80068d6:	f7ff f859 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80068da:	eb0a 0104 	add.w	r1, sl, r4
 80068de:	f891 e001 	ldrb.w	lr, [r1, #1]
 80068e2:	4471      	add	r1, lr
 80068e4:	7889      	ldrb	r1, [r1, #2]
					+ crcApi3(signVal) == 0xFF) {
 80068e6:	4408      	add	r0, r1
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80068e8:	28ff      	cmp	r0, #255	; 0xff
 80068ea:	d155      	bne.n	8006998 <function15+0x1fc>
				signVal = signVal + 2;
 80068ec:	1ca1      	adds	r1, r4, #2
				if ((aRxBuffer[signVal] == junctionId))
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <function15+0x230>)
 80068f0:	f81a 0001 	ldrb.w	r0, [sl, r1]
				signVal = signVal + 2;
 80068f4:	f8cb 1000 	str.w	r1, [fp]
				if ((aRxBuffer[signVal] == junctionId))
 80068f8:	7819      	ldrb	r1, [r3, #0]
 80068fa:	4288      	cmp	r0, r1
 80068fc:	d14c      	bne.n	8006998 <function15+0x1fc>
					signVal = signVal + 3;
 80068fe:	1d61      	adds	r1, r4, #5
 8006900:	f8cb 1000 	str.w	r1, [fp]
					if ((aRxBuffer[signVal] == 0x0F)) //function Number
 8006904:	f81a 3001 	ldrb.w	r3, [sl, r1]
							string[i] = aRxBuffer[signVal];
 8006908:	4835      	ldr	r0, [pc, #212]	; (80069e0 <function15+0x244>)
					if ((aRxBuffer[signVal] == 0x0F)) //function Number
 800690a:	2b0f      	cmp	r3, #15
						signVal = signVal + 1;
 800690c:	bf08      	it	eq
 800690e:	3406      	addeq	r4, #6
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <function15+0x24c>)
 8006912:	bf08      	it	eq
 8006914:	f8cb 4000 	streq.w	r4, [fp]
 8006918:	6819      	ldr	r1, [r3, #0]
							string[i] = aRxBuffer[signVal];
 800691a:	4c34      	ldr	r4, [pc, #208]	; (80069ec <function15+0x250>)
				i++;
 800691c:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 800691e:	4408      	add	r0, r1
 8006920:	f810 e003 	ldrb.w	lr, [r0, r3]
 8006924:	f803 e004 	strb.w	lr, [r3, r4]
						for (int i = 0; i < 6; i++) {
 8006928:	3301      	adds	r3, #1
 800692a:	2b06      	cmp	r3, #6
 800692c:	d1f8      	bne.n	8006920 <function15+0x184>
 800692e:	3106      	adds	r1, #6
					string[6] = 0xFF ;//
 8006930:	23ff      	movs	r3, #255	; 0xff
 8006932:	71a3      	strb	r3, [r4, #6]
 8006934:	f8cb 1000 	str.w	r1, [fp]
						SDcardWriteSeek("mapDate.txt", 7, (uint8_t *) string, seekCntWrite);
 8006938:	4643      	mov	r3, r8
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <function15+0x250>)
 800693c:	482c      	ldr	r0, [pc, #176]	; (80069f0 <function15+0x254>)
 800693e:	2107      	movs	r1, #7
 8006940:	f7fd ff6e 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("mapDate.txt", 100, 0);
 8006944:	2200      	movs	r2, #0
 8006946:	2164      	movs	r1, #100	; 0x64
 8006948:	4829      	ldr	r0, [pc, #164]	; (80069f0 <function15+0x254>)
 800694a:	f7fd ff45 	bl	80047d8 <SDcardReadSeek>
						seekCntForDayAndDate=seekCntWrite;
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <function15+0x258>)
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006950:	4829      	ldr	r0, [pc, #164]	; (80069f8 <function15+0x25c>)
 8006952:	2110      	movs	r1, #16
						seekCntWrite=seekCntWrite+7;
 8006954:	f108 0807 	add.w	r8, r8, #7
						seekCntForDayAndDate=seekCntWrite;
 8006958:	f8c3 8000 	str.w	r8, [r3]
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800695c:	f7f9 ffd5 	bl	800090a <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 8006960:	f7fe fb76 	bl	8005050 <clearaRxBuffer>
						clearBuffer4();
 8006964:	f7fe fb92 	bl	800508c <clearBuffer4>
						resmsg = 1;
 8006968:	2401      	movs	r4, #1
		for(int i=1; i< totalNoOfPlans+1;i++){
 800696a:	3701      	adds	r7, #1
 800696c:	e757      	b.n	800681e <function15+0x82>
		if (i == 1) {
 800696e:	2d01      	cmp	r5, #1
			dateSlotNo = i;
 8006970:	bf02      	ittt	eq
 8006972:	4b11      	ldreq	r3, [pc, #68]	; (80069b8 <function15+0x21c>)
 8006974:	701d      	strbeq	r5, [r3, #0]
			i++;
 8006976:	2502      	moveq	r5, #2
 8006978:	e72a      	b.n	80067d0 <function15+0x34>
			if (i == 1) {
 800697a:	2e01      	cmp	r6, #1
				dateSlotNo = i;
 800697c:	bf02      	ittt	eq
 800697e:	4b0e      	ldreq	r3, [pc, #56]	; (80069b8 <function15+0x21c>)
 8006980:	701e      	strbeq	r6, [r3, #0]
				i++;
 8006982:	2602      	moveq	r6, #2
 8006984:	e731      	b.n	80067ea <function15+0x4e>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8006986:	481d      	ldr	r0, [pc, #116]	; (80069fc <function15+0x260>)
 8006988:	f7fb fdaa 	bl	80024e0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 800698c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006990:	221e      	movs	r2, #30
 8006992:	4913      	ldr	r1, [pc, #76]	; (80069e0 <function15+0x244>)
 8006994:	4819      	ldr	r0, [pc, #100]	; (80069fc <function15+0x260>)
 8006996:	e784      	b.n	80068a2 <function15+0x106>
								clearaRxBuffer();
 8006998:	f7fe fb5a 	bl	8005050 <clearaRxBuffer>
								clearBuffer4();
 800699c:	f7fe fb76 	bl	800508c <clearBuffer4>
								return 0;
 80069a0:	2000      	movs	r0, #0
	return 1;
	else
		return 0;
}
 80069a2:	b003      	add	sp, #12
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				i = i - 1;
 80069a8:	3f01      	subs	r7, #1
				clearaRxBuffer();
 80069aa:	f7fe fb51 	bl	8005050 <clearaRxBuffer>
				clearBuffer4();
 80069ae:	f7fe fb6d 	bl	800508c <clearBuffer4>
 80069b2:	e7da      	b.n	800696a <function15+0x1ce>
 80069b4:	200000e4 	.word	0x200000e4
 80069b8:	200000bd 	.word	0x200000bd
 80069bc:	08009522 	.word	0x08009522
 80069c0:	200002f4 	.word	0x200002f4
 80069c4:	20000128 	.word	0x20000128
 80069c8:	20003ae1 	.word	0x20003ae1
 80069cc:	2000000d 	.word	0x2000000d
 80069d0:	2000010d 	.word	0x2000010d
 80069d4:	2000000c 	.word	0x2000000c
 80069d8:	2000367c 	.word	0x2000367c
 80069dc:	200010e8 	.word	0x200010e8
 80069e0:	2000134c 	.word	0x2000134c
 80069e4:	080094f7 	.word	0x080094f7
 80069e8:	200015c8 	.word	0x200015c8
 80069ec:	200052f2 	.word	0x200052f2
 80069f0:	080094d3 	.word	0x080094d3
 80069f4:	2000365c 	.word	0x2000365c
 80069f8:	40021000 	.word	0x40021000
 80069fc:	20000e10 	.word	0x20000e10
 8006a00:	200000bc 	.word	0x200000bc

08006a04 <function16>:

/*-------------------------------function 16---------------------------*/
/*------------------------------------getting map info for day--------------------------------------*/
int function16(void) {
 8006a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 1;
	int seekCnt=0;
	int seekCntWrite;
	if(noOfDateSlots ==0)
 8006a08:	4b6c      	ldr	r3, [pc, #432]	; (8006bbc <function16+0x1b8>)
 8006a0a:	781d      	ldrb	r5, [r3, #0]
 8006a0c:	b10d      	cbz	r5, 8006a12 <function16+0xe>
		seekCntWrite=0;
	else
		seekCntWrite=seekCntForDayAndDate;
 8006a0e:	4b6c      	ldr	r3, [pc, #432]	; (8006bc0 <function16+0x1bc>)
 8006a10:	681d      	ldr	r5, [r3, #0]
		/*-----------send frames-------------------------*/
				frame[0] = 126;
				frame[1] = 126;
				frame[2] = 0; // function no
				frame[3] = 18;
				frame[4] = junctionId; // function no
 8006a12:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8006c08 <function16+0x204>
		seekCntWrite=0;
 8006a16:	2601      	movs	r6, #1
 8006a18:	e01c      	b.n	8006a54 <function16+0x50>
			daySlotNo = i;
 8006a1a:	7026      	strb	r6, [r4, #0]
		clearframe();
 8006a1c:	f7fe faee 	bl	8004ffc <clearframe>
		clearReadBytes();
 8006a20:	f7fe faf6 	bl	8005010 <clearReadBytes>
		SDcardReadSeek("day.txt",7, seekCnt);
 8006a24:	2107      	movs	r1, #7
 8006a26:	4602      	mov	r2, r0
 8006a28:	4866      	ldr	r0, [pc, #408]	; (8006bc4 <function16+0x1c0>)
		dayID = readBytes[2];
 8006a2a:	4c67      	ldr	r4, [pc, #412]	; (8006bc8 <function16+0x1c4>)
//							Address = Address + 4;
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006a2c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8006c0c <function16+0x208>
		SDcardReadSeek("day.txt",7, seekCnt);
 8006a30:	f7fd fed2 	bl	80047d8 <SDcardReadSeek>
		dayID = readBytes[2];
 8006a34:	4b65      	ldr	r3, [pc, #404]	; (8006bcc <function16+0x1c8>)
		totalNoOfPlans = readBytes[4];
 8006a36:	4866      	ldr	r0, [pc, #408]	; (8006bd0 <function16+0x1cc>)
		dayID = readBytes[2];
 8006a38:	789a      	ldrb	r2, [r3, #2]
		totalNoOfPlans = readBytes[4];
 8006a3a:	791b      	ldrb	r3, [r3, #4]
		dayID = readBytes[2];
 8006a3c:	7022      	strb	r2, [r4, #0]
		totalNoOfPlans = readBytes[4];
 8006a3e:	7003      	strb	r3, [r0, #0]
		clearReadBytes();
 8006a40:	f7fe fae6 	bl	8005010 <clearReadBytes>
			i++;
 8006a44:	3601      	adds	r6, #1
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006a46:	2701      	movs	r7, #1
 8006a48:	46a1      	mov	r9, r4
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	f898 3000 	ldrb.w	r3, [r8]
 8006a50:	429f      	cmp	r7, r3
 8006a52:	dd10      	ble.n	8006a76 <function16+0x72>
	for (int i = 1; i < noOfDaySlots + 1;) {
 8006a54:	4f5f      	ldr	r7, [pc, #380]	; (8006bd4 <function16+0x1d0>)
 8006a56:	4c60      	ldr	r4, [pc, #384]	; (8006bd8 <function16+0x1d4>)
 8006a58:	783b      	ldrb	r3, [r7, #0]
 8006a5a:	2006      	movs	r0, #6
 8006a5c:	4370      	muls	r0, r6
 8006a5e:	429e      	cmp	r6, r3
 8006a60:	f1a0 0006 	sub.w	r0, r0, #6
 8006a64:	ddd9      	ble.n	8006a1a <function16+0x16>
//				return 0;
			}}
//	}

	}
	clearaRxBuffer();
 8006a66:	f7fe faf3 	bl	8005050 <clearaRxBuffer>
	if(noOfDaySlots ==	daySlotNo)
 8006a6a:	7838      	ldrb	r0, [r7, #0]
 8006a6c:	7823      	ldrb	r3, [r4, #0]
 8006a6e:	1ac3      	subs	r3, r0, r3
 8006a70:	4258      	negs	r0, r3
 8006a72:	4158      	adcs	r0, r3
 8006a74:	e09f      	b.n	8006bb6 <function16+0x1b2>
				frame[0] = 126;
 8006a76:	4c59      	ldr	r4, [pc, #356]	; (8006bdc <function16+0x1d8>)
 8006a78:	237e      	movs	r3, #126	; 0x7e
 8006a7a:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 8006a7c:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 8006a7e:	2300      	movs	r3, #0
 8006a80:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 8006a82:	2312      	movs	r3, #18
 8006a84:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 8006a86:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8a:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 8006a8c:	4b54      	ldr	r3, [pc, #336]	; (8006be0 <function16+0x1dc>)
				frame[9] = i;  // plan no
 8006a8e:	7267      	strb	r7, [r4, #9]
				frame[5] = programVersionNo; // junction no
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 8006a94:	4b53      	ldr	r3, [pc, #332]	; (8006be4 <function16+0x1e0>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x10; // function no
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	71e3      	strb	r3, [r4, #7]
				frame[8] = dayID;  // plan no planOnHr
 8006a9e:	f899 3000 	ldrb.w	r3, [r9]
 8006aa2:	7223      	strb	r3, [r4, #8]
				frame[10] = '0';
 8006aa4:	2330      	movs	r3, #48	; 0x30
 8006aa6:	72a3      	strb	r3, [r4, #10]
				frame[11] = '0';
 8006aa8:	72e3      	strb	r3, [r4, #11]
				frame[12] = '0';
 8006aaa:	7323      	strb	r3, [r4, #12]
				frame[13] = '0';
 8006aac:	7363      	strb	r3, [r4, #13]
				frame[14] = '0';
 8006aae:	73a3      	strb	r3, [r4, #14]
				frame[15] = '0';
 8006ab0:	73e3      	strb	r3, [r4, #15]
				frame[16] = '0';
 8006ab2:	7423      	strb	r3, [r4, #16]
				frame[17] = '0';
 8006ab4:	7463      	strb	r3, [r4, #17]
				frame[18] = '0';  //'1'
 8006ab6:	74a3      	strb	r3, [r4, #18]
				frame[19] = '0';  //'0' ; //'5' ;
 8006ab8:	74e3      	strb	r3, [r4, #19]
				frame[20] = '0';  // '2' ;//'9' ;//'1' ;
 8006aba:	7523      	strb	r3, [r4, #20]
				frame[21] = '0';  // '2' ;//'9' ;//'1' ;
 8006abc:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 8006abe:	f7fe fb0d 	bl	80050dc <crcApi>
				frame[23] = 125;
 8006ac2:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 8006ac4:	43c0      	mvns	r0, r0
				frame[23] = 125;
 8006ac6:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 8006ac8:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 8006aca:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 8006acc:	f7fe faac 	bl	8005028 <clearBuffer>
				if(programFromBLE==1)
 8006ad0:	4b45      	ldr	r3, [pc, #276]	; (8006be8 <function16+0x1e4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006ad6:	f04f 0218 	mov.w	r2, #24
 8006ada:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ade:	4621      	mov	r1, r4
				if(programFromBLE==1)
 8006ae0:	d15b      	bne.n	8006b9a <function16+0x196>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006ae2:	4842      	ldr	r0, [pc, #264]	; (8006bec <function16+0x1e8>)
 8006ae4:	f7fb fcfc 	bl	80024e0 <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 35, 0x2FFF);
 8006ae8:	4941      	ldr	r1, [pc, #260]	; (8006bf0 <function16+0x1ec>)
 8006aea:	4840      	ldr	r0, [pc, #256]	; (8006bec <function16+0x1e8>)
 8006aec:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8006af0:	2223      	movs	r2, #35	; 0x23
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 35, 0x1FFF);
 8006af2:	f7fb fd52 	bl	800259a <HAL_UART_Receive>
				HAL_Delay(300);
 8006af6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006afa:	f7f9 fd63 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8006afe:	4b3c      	ldr	r3, [pc, #240]	; (8006bf0 <function16+0x1ec>)
 8006b00:	493c      	ldr	r1, [pc, #240]	; (8006bf4 <function16+0x1f0>)
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 f83e 	bl	8008b88 <msgParse>
 8006b0c:	4c3a      	ldr	r4, [pc, #232]	; (8006bf8 <function16+0x1f4>)
 8006b0e:	6020      	str	r0, [r4, #0]
		HAL_Delay(900);
 8006b10:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006b14:	f7f9 fd56 	bl	80005c4 <HAL_Delay>
		signVal=4;
 8006b18:	2004      	movs	r0, #4
 8006b1a:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 8006b1c:	f7fe ff36 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	795a      	ldrb	r2, [r3, #5]
 8006b24:	441a      	add	r2, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	7992      	ldrb	r2, [r2, #6]
					+ crcApi3(signVal) == 0xFF) {
 8006b2a:	4410      	add	r0, r2
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006b2c:	28ff      	cmp	r0, #255	; 0xff
 8006b2e:	d13d      	bne.n	8006bac <function16+0x1a8>
				signVal = signVal + 2;
 8006b30:	2206      	movs	r2, #6
 8006b32:	6022      	str	r2, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId))
 8006b34:	7998      	ldrb	r0, [r3, #6]
 8006b36:	f89a 2000 	ldrb.w	r2, [sl]
 8006b3a:	4290      	cmp	r0, r2
 8006b3c:	d136      	bne.n	8006bac <function16+0x1a8>
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8006b3e:	7a5b      	ldrb	r3, [r3, #9]
							string[i] = aRxBuffer[signVal];
 8006b40:	482e      	ldr	r0, [pc, #184]	; (8006bfc <function16+0x1f8>)
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8006b42:	2b10      	cmp	r3, #16
					signVal = signVal + 3;
 8006b44:	f04f 0209 	mov.w	r2, #9
						signVal = signVal + 1;
 8006b48:	bf08      	it	eq
 8006b4a:	230a      	moveq	r3, #10
					signVal = signVal + 3;
 8006b4c:	6022      	str	r2, [r4, #0]
						signVal = signVal + 1;
 8006b4e:	bf08      	it	eq
 8006b50:	6023      	streq	r3, [r4, #0]
 8006b52:	6822      	ldr	r2, [r4, #0]
int function16(void) {
 8006b54:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 8006b56:	4411      	add	r1, r2
 8006b58:	f811 e003 	ldrb.w	lr, [r1, r3]
 8006b5c:	f803 e000 	strb.w	lr, [r3, r0]
						for (int i = 0; i < 6; i++) {
 8006b60:	3301      	adds	r3, #1
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d1f8      	bne.n	8006b58 <function16+0x154>
 8006b66:	3206      	adds	r2, #6
					string[6] = 0xFF ;//
 8006b68:	23ff      	movs	r3, #255	; 0xff
 8006b6a:	7183      	strb	r3, [r0, #6]
 8006b6c:	6022      	str	r2, [r4, #0]
						SDcardWriteSeek("mapDate.txt", 7, (uint8_t *) string, seekCntWrite);
 8006b6e:	462b      	mov	r3, r5
 8006b70:	4a22      	ldr	r2, [pc, #136]	; (8006bfc <function16+0x1f8>)
 8006b72:	4823      	ldr	r0, [pc, #140]	; (8006c00 <function16+0x1fc>)
 8006b74:	2107      	movs	r1, #7
 8006b76:	f7fd fe53 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("mapDate.txt", 100, 0);
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2164      	movs	r1, #100	; 0x64
 8006b7e:	4820      	ldr	r0, [pc, #128]	; (8006c00 <function16+0x1fc>)
 8006b80:	f7fd fe2a 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006b84:	2110      	movs	r1, #16
 8006b86:	4658      	mov	r0, fp
 8006b88:	f7f9 febf 	bl	800090a <HAL_GPIO_TogglePin>
						seekCntWrite=seekCntWrite+7;
 8006b8c:	3507      	adds	r5, #7
						clearaRxBuffer();
 8006b8e:	f7fe fa5f 	bl	8005050 <clearaRxBuffer>
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006b92:	3701      	adds	r7, #1
						clearBuffer4();
 8006b94:	f7fe fa7a 	bl	800508c <clearBuffer4>
 8006b98:	e758      	b.n	8006a4c <function16+0x48>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8006b9a:	481a      	ldr	r0, [pc, #104]	; (8006c04 <function16+0x200>)
 8006b9c:	f7fb fca0 	bl	80024e0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 35, 0x1FFF);
 8006ba0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006ba4:	2223      	movs	r2, #35	; 0x23
 8006ba6:	4912      	ldr	r1, [pc, #72]	; (8006bf0 <function16+0x1ec>)
 8006ba8:	4816      	ldr	r0, [pc, #88]	; (8006c04 <function16+0x200>)
 8006baa:	e7a2      	b.n	8006af2 <function16+0xee>
								clearaRxBuffer();
 8006bac:	f7fe fa50 	bl	8005050 <clearaRxBuffer>
								clearBuffer4();
 8006bb0:	f7fe fa6c 	bl	800508c <clearBuffer4>
								return 0;
 8006bb4:	2000      	movs	r0, #0
	return 1;
	else
	return 0;
}
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	200000e4 	.word	0x200000e4
 8006bc0:	2000365c 	.word	0x2000365c
 8006bc4:	0800952b 	.word	0x0800952b
 8006bc8:	200000be 	.word	0x200000be
 8006bcc:	200002f4 	.word	0x200002f4
 8006bd0:	20000128 	.word	0x20000128
 8006bd4:	200000e5 	.word	0x200000e5
 8006bd8:	200000bf 	.word	0x200000bf
 8006bdc:	20003ae1 	.word	0x20003ae1
 8006be0:	2000010d 	.word	0x2000010d
 8006be4:	2000000c 	.word	0x2000000c
 8006be8:	2000367c 	.word	0x2000367c
 8006bec:	200010e8 	.word	0x200010e8
 8006bf0:	2000134c 	.word	0x2000134c
 8006bf4:	080094f7 	.word	0x080094f7
 8006bf8:	200015c8 	.word	0x200015c8
 8006bfc:	200052f2 	.word	0x200052f2
 8006c00:	080094d3 	.word	0x080094d3
 8006c04:	20000e10 	.word	0x20000e10
 8006c08:	2000000d 	.word	0x2000000d
 8006c0c:	40021000 	.word	0x40021000

08006c10 <checkClearenceSide>:


	}


void checkClearenceSide(){
 8006c10:	b510      	push	{r4, lr}
	clearance_Side=0;
 8006c12:	4c14      	ldr	r4, [pc, #80]	; (8006c64 <checkClearenceSide+0x54>)
//----------------------------side 1---------------------//
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006c14:	4814      	ldr	r0, [pc, #80]	; (8006c68 <checkClearenceSide+0x58>)
	clearance_Side=0;
 8006c16:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
	clearance_Side=0;
 8006c1c:	7023      	strb	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006c1e:	f7f9 fe69 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c22:	b108      	cbz	r0, 8006c28 <checkClearenceSide+0x18>
		clearance_Side=1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	7023      	strb	r3, [r4, #0]
		}

//----------------------------side 2---------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))	{
 8006c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c2c:	480e      	ldr	r0, [pc, #56]	; (8006c68 <checkClearenceSide+0x58>)
 8006c2e:	f7f9 fe61 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c32:	b108      	cbz	r0, 8006c38 <checkClearenceSide+0x28>
			clearance_Side=2;
 8006c34:	2302      	movs	r3, #2
 8006c36:	7023      	strb	r3, [r4, #0]
		}

//----------------------------side 3--------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))	{
 8006c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c3c:	480a      	ldr	r0, [pc, #40]	; (8006c68 <checkClearenceSide+0x58>)
 8006c3e:	f7f9 fe59 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c42:	b108      	cbz	r0, 8006c48 <checkClearenceSide+0x38>
			clearance_Side=3;
 8006c44:	2303      	movs	r3, #3
 8006c46:	7023      	strb	r3, [r4, #0]
		}

//--------------------------side 4-----------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14))	{
 8006c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c4c:	4806      	ldr	r0, [pc, #24]	; (8006c68 <checkClearenceSide+0x58>)
 8006c4e:	f7f9 fe51 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c52:	b108      	cbz	r0, 8006c58 <checkClearenceSide+0x48>
			clearance_Side=4;
 8006c54:	2304      	movs	r3, #4
 8006c56:	7023      	strb	r3, [r4, #0]
		}
if(! (clearance_Side==0))
 8006c58:	7823      	ldrb	r3, [r4, #0]
 8006c5a:	b113      	cbz	r3, 8006c62 <checkClearenceSide+0x52>
{
	clearance_Mode=2;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <checkClearenceSide+0x5c>)
 8006c5e:	2202      	movs	r2, #2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	200000b4 	.word	0x200000b4
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	200051f4 	.word	0x200051f4

08006c70 <checkClearenceMode>:



}

void checkClearenceMode(){
 8006c70:	b510      	push	{r4, lr}
	clearance_Mode=1;
 8006c72:	4c11      	ldr	r4, [pc, #68]	; (8006cb8 <checkClearenceMode+0x48>)
//---------------------------- for jump---------------------//
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006c74:	4811      	ldr	r0, [pc, #68]	; (8006cbc <checkClearenceMode+0x4c>)
	clearance_Mode=1;
 8006c76:	2301      	movs	r3, #1
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006c78:	2180      	movs	r1, #128	; 0x80
	clearance_Mode=1;
 8006c7a:	7023      	strb	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006c7c:	f7f9 fe3a 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c80:	b108      	cbz	r0, 8006c86 <checkClearenceMode+0x16>
		clearance_Mode=4;
 8006c82:	2304      	movs	r3, #4
 8006c84:	7023      	strb	r3, [r4, #0]
		}

//---------------------------- for extend---------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))	{
 8006c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c8a:	480c      	ldr	r0, [pc, #48]	; (8006cbc <checkClearenceMode+0x4c>)
 8006c8c:	f7f9 fe32 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006c90:	b108      	cbz	r0, 8006c96 <checkClearenceMode+0x26>
			clearance_Mode=6;
 8006c92:	2306      	movs	r3, #6
 8006c94:	7023      	strb	r3, [r4, #0]
		}

//--------------------------- for modeChange--------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))	{
 8006c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c9a:	4808      	ldr	r0, [pc, #32]	; (8006cbc <checkClearenceMode+0x4c>)
 8006c9c:	f7f9 fe2a 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006ca0:	b108      	cbz	r0, 8006ca6 <checkClearenceMode+0x36>
			clearance_Mode=3;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	7023      	strb	r3, [r4, #0]
		}

//-------------------------- for shutdown-----------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))	{
 8006ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006caa:	4804      	ldr	r0, [pc, #16]	; (8006cbc <checkClearenceMode+0x4c>)
 8006cac:	f7f9 fe22 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006cb0:	b108      	cbz	r0, 8006cb6 <checkClearenceMode+0x46>
			clearance_Mode=5;
 8006cb2:	2305      	movs	r3, #5
 8006cb4:	7023      	strb	r3, [r4, #0]
 8006cb6:	bd10      	pop	{r4, pc}
 8006cb8:	200051f4 	.word	0x200051f4
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <checkFieldAction>:
void checkFieldAction(){
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if(clearance_Side==0) //no side is clear
 8006cc2:	4c17      	ldr	r4, [pc, #92]	; (8006d20 <checkFieldAction+0x60>)
 8006cc4:	4d17      	ldr	r5, [pc, #92]	; (8006d24 <checkFieldAction+0x64>)
 8006cc6:	4f18      	ldr	r7, [pc, #96]	; (8006d28 <checkFieldAction+0x68>)
 8006cc8:	4e18      	ldr	r6, [pc, #96]	; (8006d2c <checkFieldAction+0x6c>)
	checkClearenceSide();//check clear side
 8006cca:	f7ff ffa1 	bl	8006c10 <checkClearenceSide>
		if(clearance_Side==0) //no side is clear
 8006cce:	7823      	ldrb	r3, [r4, #0]
 8006cd0:	b9a3      	cbnz	r3, 8006cfc <checkFieldAction+0x3c>
      checkClearenceMode(); //check clearance mode
 8006cd2:	f7ff ffcd 	bl	8006c70 <checkClearenceMode>
			if(clearance_Mode==3) //if clearance mode is change mode
 8006cd6:	782b      	ldrb	r3, [r5, #0]
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d10f      	bne.n	8006cfc <checkFieldAction+0x3c>
				if(!(clearance_Mode==clearance_Mode_Last))
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d014      	beq.n	8006d0c <checkFieldAction+0x4c>
			changeMode=1;
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <checkFieldAction+0x70>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
		if(planMode==3){
 8006ce8:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <checkFieldAction+0x74>)
 8006cea:	7819      	ldrb	r1, [r3, #0]
 8006cec:	2903      	cmp	r1, #3
			planMode=1;
 8006cee:	bf08      	it	eq
 8006cf0:	701a      	strbeq	r2, [r3, #0]
			if(planMode==1)
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	2a01      	cmp	r2, #1
 8006cf6:	d109      	bne.n	8006d0c <checkFieldAction+0x4c>
				planMode=3;
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	701a      	strb	r2, [r3, #0]
			if(((clearance_Mode==1) && (clearance_Side==0)))//field request is not  coming
 8006cfc:	782b      	ldrb	r3, [r5, #0]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d105      	bne.n	8006d0e <checkFieldAction+0x4e>
 8006d02:	7822      	ldrb	r2, [r4, #0]
 8006d04:	b91a      	cbnz	r2, 8006d0e <checkFieldAction+0x4e>
					fieldActionFlag=0;
 8006d06:	6032      	str	r2, [r6, #0]
	clearance_Mode_Last=clearance_Mode;
 8006d08:	603b      	str	r3, [r7, #0]
	}
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(((clearance_Mode==1) && (clearance_Side==0)))//field request is not  coming
 8006d0c:	782b      	ldrb	r3, [r5, #0]
  		clearenceSide=clearance_Side;
 8006d0e:	7821      	ldrb	r1, [r4, #0]
				fieldActionFlag=1;
 8006d10:	2201      	movs	r2, #1
 8006d12:	6032      	str	r2, [r6, #0]
			clearenceMode=clearance_Mode;
 8006d14:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <checkFieldAction+0x78>)
 8006d16:	7013      	strb	r3, [r2, #0]
  		clearenceSide=clearance_Side;
 8006d18:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <checkFieldAction+0x7c>)
 8006d1a:	7011      	strb	r1, [r2, #0]
 8006d1c:	e7f4      	b.n	8006d08 <checkFieldAction+0x48>
 8006d1e:	bf00      	nop
 8006d20:	200000b4 	.word	0x200000b4
 8006d24:	200051f4 	.word	0x200051f4
 8006d28:	200000b0 	.word	0x200000b0
 8006d2c:	200000cc 	.word	0x200000cc
 8006d30:	20003634 	.word	0x20003634
 8006d34:	200051f2 	.word	0x200051f2
 8006d38:	200000b5 	.word	0x200000b5
 8006d3c:	200000b7 	.word	0x200000b7

08006d40 <laser>:
}



void laser()
{
 8006d40:	b510      	push	{r4, lr}

pin_High=0;
 8006d42:	4c11      	ldr	r4, [pc, #68]	; (8006d88 <laser+0x48>)

		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8006d44:	4811      	ldr	r0, [pc, #68]	; (8006d8c <laser+0x4c>)
pin_High=0;
 8006d46:	2300      	movs	r3, #0
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8006d48:	2110      	movs	r1, #16
pin_High=0;
 8006d4a:	6023      	str	r3, [r4, #0]
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8006d4c:	f7f9 fdd2 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006d50:	4623      	mov	r3, r4
 8006d52:	b908      	cbnz	r0, 8006d58 <laser+0x18>
		 {
			 pin_High=1;/*flag updated if pin is high  */
 8006d54:	2201      	movs	r2, #1
 8006d56:	6022      	str	r2, [r4, #0]

		 }

if(!(pin_High==1))
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	2a01      	cmp	r2, #1
 8006d5c:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <laser+0x50>)
 8006d5e:	d007      	beq.n	8006d70 <laser+0x30>
{
		 laserOn =0 ;
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <laser+0x54>)
 8006d62:	2100      	movs	r1, #0
 8006d64:	6001      	str	r1, [r0, #0]
	 pin_High=0;
	 lSec=10;
 8006d66:	480c      	ldr	r0, [pc, #48]	; (8006d98 <laser+0x58>)
	 pin_High=0;
 8006d68:	6019      	str	r1, [r3, #0]
	 lSec=10;
 8006d6a:	240a      	movs	r4, #10
 8006d6c:	6004      	str	r4, [r0, #0]
		 pin_HighLast=0;
 8006d6e:	6011      	str	r1, [r2, #0]
}
if(!(pin_HighLast==1))
 8006d70:	6811      	ldr	r1, [r2, #0]
 8006d72:	2901      	cmp	r1, #1
 8006d74:	d007      	beq.n	8006d86 <laser+0x46>
	 if(pin_High==1)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d104      	bne.n	8006d86 <laser+0x46>
	 {
    lSec=1;
		 pin_HighLast=1;
 8006d7c:	6013      	str	r3, [r2, #0]
    lSec=1;
 8006d7e:	4906      	ldr	r1, [pc, #24]	; (8006d98 <laser+0x58>)
		 laserOn =1 ;
 8006d80:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <laser+0x54>)
    lSec=1;
 8006d82:	600b      	str	r3, [r1, #0]
		 laserOn =1 ;
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	bd10      	pop	{r4, pc}
 8006d88:	20000104 	.word	0x20000104
 8006d8c:	40020400 	.word	0x40020400
 8006d90:	20000108 	.word	0x20000108
 8006d94:	200000dc 	.word	0x200000dc
 8006d98:	20000010 	.word	0x20000010

08006d9c <extend>:
}
}

void extend(){
 8006d9c:	b510      	push	{r4, lr}

 pinExtend_High=0;
 8006d9e:	4c12      	ldr	r4, [pc, #72]	; (8006de8 <extend+0x4c>)

		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8006da0:	4812      	ldr	r0, [pc, #72]	; (8006dec <extend+0x50>)
 pinExtend_High=0;
 8006da2:	2300      	movs	r3, #0
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8006da4:	2120      	movs	r1, #32
 pinExtend_High=0;
 8006da6:	6023      	str	r3, [r4, #0]
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8006da8:	f7f9 fda4 	bl	80008f4 <HAL_GPIO_ReadPin>
 8006dac:	4623      	mov	r3, r4
 8006dae:	b908      	cbnz	r0, 8006db4 <extend+0x18>
		 {
			 pinExtend_High=1;/*flag updated if pin is high  */
 8006db0:	2201      	movs	r2, #1
 8006db2:	6022      	str	r2, [r4, #0]

		 }

 if(!(pinExtend_High==1))
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	2a01      	cmp	r2, #1
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <extend+0x54>)
 8006dba:	d007      	beq.n	8006dcc <extend+0x30>
 {
		 pinExtend_On =0 ;
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <extend+0x58>)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6001      	str	r1, [r0, #0]
	 pinExtend_High=0;
	 lsSec=10;
 8006dc2:	480d      	ldr	r0, [pc, #52]	; (8006df8 <extend+0x5c>)
	 pinExtend_High=0;
 8006dc4:	6019      	str	r1, [r3, #0]
	 lsSec=10;
 8006dc6:	240a      	movs	r4, #10
 8006dc8:	6004      	str	r4, [r0, #0]
 		 pinExtend_HighLast=0;
 8006dca:	6011      	str	r1, [r2, #0]
}
 if(!(pinExtend_HighLast==1))
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	2901      	cmp	r1, #1
 8006dd0:	d008      	beq.n	8006de4 <extend+0x48>
	 if(pinExtend_High==1)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d105      	bne.n	8006de4 <extend+0x48>
	 {
     lsSec=3;
		 pinExtend_HighLast=1;
 8006dd8:	6013      	str	r3, [r2, #0]
     lsSec=3;
 8006dda:	4907      	ldr	r1, [pc, #28]	; (8006df8 <extend+0x5c>)
		 pinExtend_On =1 ;
 8006ddc:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <extend+0x58>)
     lsSec=3;
 8006dde:	2003      	movs	r0, #3
 8006de0:	6008      	str	r0, [r1, #0]
		 pinExtend_On =1 ;
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	bf00      	nop
 8006de8:	200000f8 	.word	0x200000f8
 8006dec:	40020400 	.word	0x40020400
 8006df0:	200000fc 	.word	0x200000fc
 8006df4:	20000100 	.word	0x20000100
 8006df8:	20000014 	.word	0x20000014

08006dfc <checkServerFieldAction>:
void checkServerFieldAction(){
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clearenceMode == 6) {
 8006dfe:	4c9c      	ldr	r4, [pc, #624]	; (8007070 <checkServerFieldAction+0x274>)
	checkFieldAction();
 8006e00:	f7ff ff5e 	bl	8006cc0 <checkFieldAction>
	if (clearenceMode == 6) {
 8006e04:	7823      	ldrb	r3, [r4, #0]
 8006e06:	2b06      	cmp	r3, #6
 8006e08:	d106      	bne.n	8006e18 <checkServerFieldAction+0x1c>
		if (!((count > 10) && (count < 20))) {
 8006e0a:	4b9a      	ldr	r3, [pc, #616]	; (8007074 <checkServerFieldAction+0x278>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3b0b      	subs	r3, #11
 8006e10:	2b08      	cmp	r3, #8
			clearenceMode = 1;
 8006e12:	bf84      	itt	hi
 8006e14:	2301      	movhi	r3, #1
 8006e16:	7023      	strbhi	r3, [r4, #0]
	if (fieldActionFlag == 0) { //request is not coming from field
 8006e18:	4b97      	ldr	r3, [pc, #604]	; (8007078 <checkServerFieldAction+0x27c>)
 8006e1a:	4898      	ldr	r0, [pc, #608]	; (800707c <checkServerFieldAction+0x280>)
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	f040 80e2 	bne.w	8006fe8 <checkServerFieldAction+0x1ec>
		if (checkServerJumpExtend == 0) {  //request is not from server
 8006e24:	6803      	ldr	r3, [r0, #0]
 8006e26:	b93b      	cbnz	r3, 8006e38 <checkServerFieldAction+0x3c>
			if ((extendCnt == 3) || (extendCnt > 3)) {
 8006e28:	4b95      	ldr	r3, [pc, #596]	; (8007080 <checkServerFieldAction+0x284>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	dd03      	ble.n	8006e38 <checkServerFieldAction+0x3c>
				extendCnt1 = 1;
 8006e30:	4a94      	ldr	r2, [pc, #592]	; (8007084 <checkServerFieldAction+0x288>)
				clearenceMode = 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	7023      	strb	r3, [r4, #0]
				extendCnt1 = 1;
 8006e36:	6013      	str	r3, [r2, #0]
	if (clearenceMode == 4) {
 8006e38:	7823      	ldrb	r3, [r4, #0]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d105      	bne.n	8006e4a <checkServerFieldAction+0x4e>
		if (count < 6) {
 8006e3e:	4b8d      	ldr	r3, [pc, #564]	; (8007074 <checkServerFieldAction+0x278>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b05      	cmp	r3, #5
			clearenceMode = 1;
 8006e44:	bfdc      	itt	le
 8006e46:	2301      	movle	r3, #1
 8006e48:	7023      	strble	r3, [r4, #0]
	if (clearenceMode==1)
 8006e4a:	7823      	ldrb	r3, [r4, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d138      	bne.n	8006ec2 <checkServerFieldAction+0xc6>
		count-- ;
 8006e50:	4a88      	ldr	r2, [pc, #544]	; (8007074 <checkServerFieldAction+0x278>)
 8006e52:	6813      	ldr	r3, [r2, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	6013      	str	r3, [r2, #0]
       Disp[0] = Disp[0] - 1 ;
 8006e58:	4b8b      	ldr	r3, [pc, #556]	; (8007088 <checkServerFieldAction+0x28c>)
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	3a01      	subs	r2, #1
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
       Disp[1] = Disp[1] - 1 ;
 8006e62:	785a      	ldrb	r2, [r3, #1]
 8006e64:	3a01      	subs	r2, #1
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	705a      	strb	r2, [r3, #1]
       Disp[2] = Disp[2] - 1 ;
 8006e6a:	789a      	ldrb	r2, [r3, #2]
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	709a      	strb	r2, [r3, #2]
       Disp[3] = Disp[3] - 1 ;
 8006e72:	78da      	ldrb	r2, [r3, #3]
 8006e74:	3a01      	subs	r2, #1
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	70da      	strb	r2, [r3, #3]
      if(lSec<9)
 8006e7a:	4b84      	ldr	r3, [pc, #528]	; (800708c <checkServerFieldAction+0x290>)
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	2a08      	cmp	r2, #8
			lSec=lSec-1;
 8006e80:	bfdc      	itt	le
 8006e82:	f102 32ff 	addle.w	r2, r2, #4294967295
 8006e86:	601a      	strle	r2, [r3, #0]
			if(lSec==0)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	b92a      	cbnz	r2, 8006e98 <checkServerFieldAction+0x9c>
lSec=10;
 8006e8c:	250a      	movs	r5, #10
 8006e8e:	601d      	str	r5, [r3, #0]
clearenceMode=4;
 8006e90:	2304      	movs	r3, #4
 8006e92:	7023      	strb	r3, [r4, #0]
 		 pin_HighLast=0;
 8006e94:	4b7e      	ldr	r3, [pc, #504]	; (8007090 <checkServerFieldAction+0x294>)
 8006e96:	601a      	str	r2, [r3, #0]
      if(lsSec<9)
 8006e98:	4b7e      	ldr	r3, [pc, #504]	; (8007094 <checkServerFieldAction+0x298>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	2a08      	cmp	r2, #8
			lsSec=lsSec-1;
 8006e9e:	bfdc      	itt	le
 8006ea0:	f102 32ff 	addle.w	r2, r2, #4294967295
 8006ea4:	601a      	strle	r2, [r3, #0]
			if(lsSec==0)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	b92a      	cbnz	r2, 8006eb6 <checkServerFieldAction+0xba>
lsSec=10;
 8006eaa:	250a      	movs	r5, #10
 8006eac:	601d      	str	r5, [r3, #0]
clearenceMode=6;
 8006eae:	2306      	movs	r3, #6
 8006eb0:	7023      	strb	r3, [r4, #0]
 		 pinExtend_HighLast=0;
 8006eb2:	4b79      	ldr	r3, [pc, #484]	; (8007098 <checkServerFieldAction+0x29c>)
 8006eb4:	601a      	str	r2, [r3, #0]
if(extendCnt1==1)
 8006eb6:	4b73      	ldr	r3, [pc, #460]	; (8007084 <checkServerFieldAction+0x288>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	2a01      	cmp	r2, #1
extendCnt1=0;
 8006ebc:	bf04      	itt	eq
 8006ebe:	2200      	moveq	r2, #0
 8006ec0:	601a      	streq	r2, [r3, #0]
if((checkServerJumpExtend==0)&&(fieldActionFlag==0))// request is not coming from server and field
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 8093 	bne.w	8006ff0 <checkServerFieldAction+0x1f4>
 8006eca:	2900      	cmp	r1, #0
 8006ecc:	f040 8090 	bne.w	8006ff0 <checkServerFieldAction+0x1f4>
	 		laser(); //request is coming from camera(for jump)
 8006ed0:	f7ff ff36 	bl	8006d40 <laser>
			extend();//request is coming from camera
 8006ed4:	f7ff ff62 	bl	8006d9c <extend>
if 	(!(clearenceModeLast==clearenceMode))
 8006ed8:	4d70      	ldr	r5, [pc, #448]	; (800709c <checkServerFieldAction+0x2a0>)
 8006eda:	7822      	ldrb	r2, [r4, #0]
 8006edc:	782b      	ldrb	r3, [r5, #0]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f000 8081 	beq.w	8006fe6 <checkServerFieldAction+0x1ea>
	if 	(clearenceModeLast==2){
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	f040 808c 	bne.w	8007002 <checkServerFieldAction+0x206>
if (clearenceMode==1)
 8006eea:	2a01      	cmp	r2, #1
 8006eec:	f040 8089 	bne.w	8007002 <checkServerFieldAction+0x206>
     Disp[0] = Disp[10]  ;
 8006ef0:	4b65      	ldr	r3, [pc, #404]	; (8007088 <checkServerFieldAction+0x28c>)
clearenceModeLast=1 ;
 8006ef2:	702a      	strb	r2, [r5, #0]
     Disp[0] = Disp[10]  ;
 8006ef4:	7a99      	ldrb	r1, [r3, #10]
 8006ef6:	b2c9      	uxtb	r1, r1
 8006ef8:	7019      	strb	r1, [r3, #0]
   Disp[1] = Disp[11]  ;
 8006efa:	7ad9      	ldrb	r1, [r3, #11]
 8006efc:	b2c9      	uxtb	r1, r1
 8006efe:	7059      	strb	r1, [r3, #1]
   Disp[2] = Disp[12] ;
 8006f00:	7b19      	ldrb	r1, [r3, #12]
 8006f02:	b2c9      	uxtb	r1, r1
 8006f04:	7099      	strb	r1, [r3, #2]
   Disp[3] = Disp[13]  ;
 8006f06:	7b59      	ldrb	r1, [r3, #13]
 8006f08:	b2c9      	uxtb	r1, r1
 8006f0a:	70d9      	strb	r1, [r3, #3]
   Disp[4] = Disp[14] ;
 8006f0c:	7b99      	ldrb	r1, [r3, #14]
 8006f0e:	b2c9      	uxtb	r1, r1
 8006f10:	7119      	strb	r1, [r3, #4]
     Disp[5] = Disp[15]  ;
 8006f12:	7bd9      	ldrb	r1, [r3, #15]
 8006f14:	b2c9      	uxtb	r1, r1
 8006f16:	7159      	strb	r1, [r3, #5]
   Disp[6] = Disp[16]  ;
 8006f18:	7c19      	ldrb	r1, [r3, #16]
 8006f1a:	b2c9      	uxtb	r1, r1
 8006f1c:	7199      	strb	r1, [r3, #6]
   Disp[7] = Disp[17] ;
 8006f1e:	7c59      	ldrb	r1, [r3, #17]
 8006f20:	b2c9      	uxtb	r1, r1
 8006f22:	71d9      	strb	r1, [r3, #7]
if (clearenceMode==4)
 8006f24:	7823      	ldrb	r3, [r4, #0]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d12b      	bne.n	8006f82 <checkServerFieldAction+0x186>
if (!((Disp[4]==0x84)||(Disp[4]==0x48)||(Disp[5]==0x84)||(Disp[5]==0x48)))
 8006f2a:	4b57      	ldr	r3, [pc, #348]	; (8007088 <checkServerFieldAction+0x28c>)
 8006f2c:	791a      	ldrb	r2, [r3, #4]
 8006f2e:	2a84      	cmp	r2, #132	; 0x84
 8006f30:	d027      	beq.n	8006f82 <checkServerFieldAction+0x186>
 8006f32:	791a      	ldrb	r2, [r3, #4]
 8006f34:	2a48      	cmp	r2, #72	; 0x48
 8006f36:	d024      	beq.n	8006f82 <checkServerFieldAction+0x186>
 8006f38:	795a      	ldrb	r2, [r3, #5]
 8006f3a:	2a84      	cmp	r2, #132	; 0x84
 8006f3c:	d021      	beq.n	8006f82 <checkServerFieldAction+0x186>
 8006f3e:	795a      	ldrb	r2, [r3, #5]
 8006f40:	2a48      	cmp	r2, #72	; 0x48
 8006f42:	d01e      	beq.n	8006f82 <checkServerFieldAction+0x186>
				if(count > 5){
 8006f44:	484b      	ldr	r0, [pc, #300]	; (8007074 <checkServerFieldAction+0x278>)
 8006f46:	6802      	ldr	r2, [r0, #0]
 8006f48:	2a05      	cmp	r2, #5
 8006f4a:	dd17      	ble.n	8006f7c <checkServerFieldAction+0x180>
					Disp[0] =Disp[0]-count  ;
 8006f4c:	7819      	ldrb	r1, [r3, #0]
					count =count-5;
 8006f4e:	3a05      	subs	r2, #5
					Disp[0] =Disp[0]-count  ;
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	1a89      	subs	r1, r1, r2
 8006f54:	b2c9      	uxtb	r1, r1
 8006f56:	7019      	strb	r1, [r3, #0]
   Disp[1] = Disp[1]-count  ;
 8006f58:	7859      	ldrb	r1, [r3, #1]
 8006f5a:	1a89      	subs	r1, r1, r2
 8006f5c:	b2c9      	uxtb	r1, r1
 8006f5e:	7059      	strb	r1, [r3, #1]
   Disp[2] = Disp[2]-count ;
 8006f60:	7899      	ldrb	r1, [r3, #2]
 8006f62:	1a89      	subs	r1, r1, r2
 8006f64:	b2c9      	uxtb	r1, r1
 8006f66:	7099      	strb	r1, [r3, #2]
   Disp[3] = Disp[3]-count ;
 8006f68:	78d9      	ldrb	r1, [r3, #3]
 8006f6a:	1a89      	subs	r1, r1, r2
 8006f6c:	b2c9      	uxtb	r1, r1
 8006f6e:	70d9      	strb	r1, [r3, #3]
   Disp[6] = Disp[6]-count;
 8006f70:	7999      	ldrb	r1, [r3, #6]
 8006f72:	1a8a      	subs	r2, r1, r2
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	719a      	strb	r2, [r3, #6]
				count =5;
 8006f78:	2305      	movs	r3, #5
 8006f7a:	6003      	str	r3, [r0, #0]
		 clearenceModeLast=1 ;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	702b      	strb	r3, [r5, #0]
			clearenceMode=1;
 8006f80:	7023      	strb	r3, [r4, #0]
if (clearenceMode==6)
 8006f82:	7823      	ldrb	r3, [r4, #0]
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d121      	bne.n	8006fcc <checkServerFieldAction+0x1d0>
if((count<20) && (count>10))
 8006f88:	4f3a      	ldr	r7, [pc, #232]	; (8007074 <checkServerFieldAction+0x278>)
 8006f8a:	6838      	ldr	r0, [r7, #0]
 8006f8c:	f1a0 030b 	sub.w	r3, r0, #11
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d81b      	bhi.n	8006fcc <checkServerFieldAction+0x1d0>
		if(extendCnt <3 )
 8006f94:	4e3a      	ldr	r6, [pc, #232]	; (8007080 <checkServerFieldAction+0x284>)
 8006f96:	6831      	ldr	r1, [r6, #0]
 8006f98:	2902      	cmp	r1, #2
 8006f9a:	dc17      	bgt.n	8006fcc <checkServerFieldAction+0x1d0>
	Disp[0] = Disp[0] + 4 ;
 8006f9c:	4b3a      	ldr	r3, [pc, #232]	; (8007088 <checkServerFieldAction+0x28c>)
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	3204      	adds	r2, #4
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
   Disp[1] = Disp[1] + 4 ;
 8006fa6:	785a      	ldrb	r2, [r3, #1]
 8006fa8:	3204      	adds	r2, #4
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	705a      	strb	r2, [r3, #1]
   Disp[2] = Disp[2] + 4 ;
 8006fae:	789a      	ldrb	r2, [r3, #2]
 8006fb0:	3204      	adds	r2, #4
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	709a      	strb	r2, [r3, #2]
   Disp[3] = Disp[3] + 4 ;
 8006fb6:	78da      	ldrb	r2, [r3, #3]
 8006fb8:	3204      	adds	r2, #4
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	70da      	strb	r2, [r3, #3]
	 clearenceModeLast=1 ;
 8006fbe:	2301      	movs	r3, #1
		 count = count + 4 ;
 8006fc0:	3004      	adds	r0, #4
	extendCnt++;
 8006fc2:	4419      	add	r1, r3
		 count = count + 4 ;
 8006fc4:	6038      	str	r0, [r7, #0]
	 clearenceModeLast=1 ;
 8006fc6:	702b      	strb	r3, [r5, #0]
			clearenceMode=1;
 8006fc8:	7023      	strb	r3, [r4, #0]
	extendCnt++;
 8006fca:	6031      	str	r1, [r6, #0]
if (clearenceMode==5)
 8006fcc:	7823      	ldrb	r3, [r4, #0]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d105      	bne.n	8006fde <checkServerFieldAction+0x1e2>
Disp[4] =0x00 ;
 8006fd2:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <checkServerFieldAction+0x28c>)
	 clearenceModeLast=5 ;
 8006fd4:	702b      	strb	r3, [r5, #0]
Disp[4] =0x00 ;
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	7111      	strb	r1, [r2, #4]
	 clearenceMode=5;
 8006fda:	7023      	strb	r3, [r4, #0]
Disp[5] =0x00 ;
 8006fdc:	7151      	strb	r1, [r2, #5]
	if (clearenceMode==1)
 8006fde:	7823      	ldrb	r3, [r4, #0]
 8006fe0:	2b01      	cmp	r3, #1
		clearenceModeLast=1 ;
 8006fe2:	bf08      	it	eq
 8006fe4:	702b      	strbeq	r3, [r5, #0]
 8006fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		extendCnt = 0;
 8006fe8:	4b25      	ldr	r3, [pc, #148]	; (8007080 <checkServerFieldAction+0x284>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e723      	b.n	8006e38 <checkServerFieldAction+0x3c>
				lsSec=10;
 8006ff0:	4a28      	ldr	r2, [pc, #160]	; (8007094 <checkServerFieldAction+0x298>)
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	6013      	str	r3, [r2, #0]
				lSec=10;
 8006ff6:	4a25      	ldr	r2, [pc, #148]	; (800708c <checkServerFieldAction+0x290>)
 8006ff8:	6013      	str	r3, [r2, #0]
				extendCnt=0;
 8006ffa:	4b21      	ldr	r3, [pc, #132]	; (8007080 <checkServerFieldAction+0x284>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e76a      	b.n	8006ed8 <checkServerFieldAction+0xdc>
if (clearenceMode==2)
 8007002:	2a02      	cmp	r2, #2
 8007004:	d18e      	bne.n	8006f24 <checkServerFieldAction+0x128>
     Disp[10] = Disp[0]  ;
 8007006:	4b20      	ldr	r3, [pc, #128]	; (8007088 <checkServerFieldAction+0x28c>)
     clearenceModeLast=2 ;
 8007008:	702a      	strb	r2, [r5, #0]
     Disp[10] = Disp[0]  ;
 800700a:	7819      	ldrb	r1, [r3, #0]
     secLast=sTime.Seconds;
 800700c:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <checkServerFieldAction+0x2a4>)
     Disp[10] = Disp[0]  ;
 800700e:	b2c9      	uxtb	r1, r1
 8007010:	7299      	strb	r1, [r3, #10]
   Disp[11] = Disp[1]  ;
 8007012:	7859      	ldrb	r1, [r3, #1]
 8007014:	b2c9      	uxtb	r1, r1
 8007016:	72d9      	strb	r1, [r3, #11]
   Disp[12] = Disp[2] ;
 8007018:	7899      	ldrb	r1, [r3, #2]
 800701a:	b2c9      	uxtb	r1, r1
 800701c:	7319      	strb	r1, [r3, #12]
   Disp[13] = Disp[3]  ;
 800701e:	78d9      	ldrb	r1, [r3, #3]
 8007020:	b2c9      	uxtb	r1, r1
 8007022:	7359      	strb	r1, [r3, #13]
   Disp[14] = Disp[4] ;
 8007024:	7919      	ldrb	r1, [r3, #4]
 8007026:	b2c9      	uxtb	r1, r1
 8007028:	7399      	strb	r1, [r3, #14]
     Disp[15] = Disp[5]  ;
 800702a:	7959      	ldrb	r1, [r3, #5]
 800702c:	b2c9      	uxtb	r1, r1
 800702e:	73d9      	strb	r1, [r3, #15]
   Disp[16] = Disp[6]  ;
 8007030:	7999      	ldrb	r1, [r3, #6]
 8007032:	b2c9      	uxtb	r1, r1
 8007034:	7419      	strb	r1, [r3, #16]
   Disp[17] = Disp[7] ;
 8007036:	79d9      	ldrb	r1, [r3, #7]
 8007038:	b2c9      	uxtb	r1, r1
 800703a:	7459      	strb	r1, [r3, #17]
     secLast=sTime.Seconds;
 800703c:	7891      	ldrb	r1, [r2, #2]
 800703e:	4a19      	ldr	r2, [pc, #100]	; (80070a4 <checkServerFieldAction+0x2a8>)
 8007040:	6011      	str	r1, [r2, #0]
	count=1 ;
 8007042:	490c      	ldr	r1, [pc, #48]	; (8007074 <checkServerFieldAction+0x278>)
 8007044:	2201      	movs	r2, #1
   Disp[0] = 1 ;
 8007046:	701a      	strb	r2, [r3, #0]
	count=1 ;
 8007048:	600a      	str	r2, [r1, #0]
   Disp[1] = 1 ;
 800704a:	705a      	strb	r2, [r3, #1]
   Disp[2] = 1 ;
 800704c:	709a      	strb	r2, [r3, #2]
   Disp[3] = 1 ;
 800704e:	70da      	strb	r2, [r3, #3]
   Disp[6] = 1 ;
 8007050:	719a      	strb	r2, [r3, #6]
switch (clearenceSide)
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <checkServerFieldAction+0x2ac>)
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	3a01      	subs	r2, #1
 8007058:	2a04      	cmp	r2, #4
 800705a:	d82f      	bhi.n	80070bc <checkServerFieldAction+0x2c0>
 800705c:	e8df f002 	tbb	[pc, r2]
 8007060:	34322603 	.word	0x34322603
 8007064:	38          	.byte	0x38
 8007065:	00          	.byte	0x00
Disp[4] =0x38 ;
 8007066:	2238      	movs	r2, #56	; 0x38
Disp[4] =0x83 ;
 8007068:	711a      	strb	r2, [r3, #4]
Disp[5] =0x88 ;
 800706a:	2288      	movs	r2, #136	; 0x88
 800706c:	e021      	b.n	80070b2 <checkServerFieldAction+0x2b6>
 800706e:	bf00      	nop
 8007070:	200000b5 	.word	0x200000b5
 8007074:	20003ad0 	.word	0x20003ad0
 8007078:	200000cc 	.word	0x200000cc
 800707c:	20003adc 	.word	0x20003adc
 8007080:	200000c4 	.word	0x200000c4
 8007084:	200000c8 	.word	0x200000c8
 8007088:	200010bd 	.word	0x200010bd
 800708c:	20000010 	.word	0x20000010
 8007090:	20000108 	.word	0x20000108
 8007094:	20000014 	.word	0x20000014
 8007098:	200000fc 	.word	0x200000fc
 800709c:	200000b6 	.word	0x200000b6
 80070a0:	20000ea4 	.word	0x20000ea4
 80070a4:	20000114 	.word	0x20000114
 80070a8:	200000b7 	.word	0x200000b7
Disp[4] =0x88 ;
 80070ac:	2288      	movs	r2, #136	; 0x88
 80070ae:	711a      	strb	r2, [r3, #4]
Disp[5] =0x38 ;
 80070b0:	2238      	movs	r2, #56	; 0x38
Disp[5] =0x83 ;
 80070b2:	715a      	strb	r2, [r3, #5]
Disp[7]=Disp[7]| 0x80 ;
 80070b4:	79da      	ldrb	r2, [r3, #7]
 80070b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
Disp[7]=Disp[7]| 0x03 ;
 80070ba:	71da      	strb	r2, [r3, #7]
	HAL_Delay(50);
 80070bc:	2032      	movs	r0, #50	; 0x32
 80070be:	f7f9 fa81 	bl	80005c4 <HAL_Delay>
 80070c2:	e72f      	b.n	8006f24 <checkServerFieldAction+0x128>
Disp[4] =0x83 ;
 80070c4:	2283      	movs	r2, #131	; 0x83
 80070c6:	e7cf      	b.n	8007068 <checkServerFieldAction+0x26c>
Disp[4] =0x88 ;
 80070c8:	2288      	movs	r2, #136	; 0x88
 80070ca:	711a      	strb	r2, [r3, #4]
Disp[5] =0x83 ;
 80070cc:	2283      	movs	r2, #131	; 0x83
 80070ce:	e7f0      	b.n	80070b2 <checkServerFieldAction+0x2b6>
Disp[4] =0x88 ;
 80070d0:	2288      	movs	r2, #136	; 0x88
 80070d2:	711a      	strb	r2, [r3, #4]
Disp[5] =0x88 ;
 80070d4:	715a      	strb	r2, [r3, #5]
Disp[7]=Disp[7]| 0x03 ;
 80070d6:	79da      	ldrb	r2, [r3, #7]
 80070d8:	f042 0203 	orr.w	r2, r2, #3
 80070dc:	e7ed      	b.n	80070ba <checkServerFieldAction+0x2be>
 80070de:	bf00      	nop

080070e0 <countNoOfMapDetails>:
 }


//HAL_UART_RxCpltCallback();

void countNoOfMapDetails(){
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
int counter=0;
	/*------------------checks the current date with dateSlot or with daySlot-------------*/
	  	/*------------------checking dateSlot---------date.txt-----*/
totalNoOfMap=0;
 80070e4:	4c17      	ldr	r4, [pc, #92]	; (8007144 <countNoOfMapDetails+0x64>)
	  	for(int i=1;i<noOfDateSlots+1;i++)
 80070e6:	4e18      	ldr	r6, [pc, #96]	; (8007148 <countNoOfMapDetails+0x68>)


	  	    readDateSD(counter);
	  		counter=counter+11;

						totalNoOfMap=totalNoOfMap+readBytes[9];
 80070e8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007150 <countNoOfMapDetails+0x70>
totalNoOfMap=0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	6023      	str	r3, [r4, #0]
	  	for(int i=1;i<noOfDateSlots+1;i++)
 80070f0:	2501      	movs	r5, #1
 80070f2:	270b      	movs	r7, #11
 80070f4:	7833      	ldrb	r3, [r6, #0]
 80070f6:	fb07 f005 	mul.w	r0, r7, r5
 80070fa:	429d      	cmp	r5, r3
 80070fc:	f1a0 000b 	sub.w	r0, r0, #11
 8007100:	dd0d      	ble.n	800711e <countNoOfMapDetails+0x3e>

	  	}

		counter=0;

		for(int i=1;i<noOfDaySlots+1;i++)
 8007102:	4e12      	ldr	r6, [pc, #72]	; (800714c <countNoOfMapDetails+0x6c>)
	  	{
			   readDaySD(counter);
			  	counter=counter+6;


			  	    totalNoOfMap=totalNoOfMap+readBytes[4];
 8007104:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8007150 <countNoOfMapDetails+0x70>
 8007108:	2501      	movs	r5, #1
 800710a:	2706      	movs	r7, #6
		for(int i=1;i<noOfDaySlots+1;i++)
 800710c:	7833      	ldrb	r3, [r6, #0]
 800710e:	fb07 f005 	mul.w	r0, r7, r5
 8007112:	429d      	cmp	r5, r3
 8007114:	f1a0 0006 	sub.w	r0, r0, #6
 8007118:	dd0a      	ble.n	8007130 <countNoOfMapDetails+0x50>


	  	}


}
 800711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  	    readDateSD(counter);
 800711e:	f7fd fffd 	bl	800511c <readDateSD>
						totalNoOfMap=totalNoOfMap+readBytes[9];
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007128:	4413      	add	r3, r2
 800712a:	6023      	str	r3, [r4, #0]
	  	for(int i=1;i<noOfDateSlots+1;i++)
 800712c:	3501      	adds	r5, #1
 800712e:	e7e1      	b.n	80070f4 <countNoOfMapDetails+0x14>
			   readDaySD(counter);
 8007130:	f7fe f800 	bl	8005134 <readDaySD>
			  	    totalNoOfMap=totalNoOfMap+readBytes[4];
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	f898 3004 	ldrb.w	r3, [r8, #4]
 800713a:	4413      	add	r3, r2
 800713c:	6023      	str	r3, [r4, #0]
		for(int i=1;i<noOfDaySlots+1;i++)
 800713e:	3501      	adds	r5, #1
 8007140:	e7e4      	b.n	800710c <countNoOfMapDetails+0x2c>
 8007142:	bf00      	nop
 8007144:	2000011c 	.word	0x2000011c
 8007148:	200000e4 	.word	0x200000e4
 800714c:	200000e5 	.word	0x200000e5
 8007150:	200002f4 	.word	0x200002f4

08007154 <function17>:
int function17(void) {
 8007154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	countNoOfMapDetails();
 8007158:	f7ff ffc2 	bl	80070e0 <countNoOfMapDetails>
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 800715c:	2501      	movs	r5, #1
				frame[4] = junctionId; // function no
 800715e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8007338 <function17+0x1e4>
	int phaseMapID=1;
 8007162:	46a9      	mov	r9, r5
	int seekCnt=0;
 8007164:	2700      	movs	r7, #0
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 8007166:	4b65      	ldr	r3, [pc, #404]	; (80072fc <function17+0x1a8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800716e:	429d      	cmp	r5, r3
 8007170:	f1a0 0007 	sub.w	r0, r0, #7
 8007174:	dd03      	ble.n	800717e <function17+0x2a>
	clearaRxBuffer();
 8007176:	f7fd ff6b 	bl	8005050 <clearaRxBuffer>
	return 1;
 800717a:	2001      	movs	r0, #1
 800717c:	e0bb      	b.n	80072f6 <function17+0x1a2>
		clearframe();
 800717e:	f7fd ff3d 	bl	8004ffc <clearframe>
		clearReadBytes();
 8007182:	f7fd ff45 	bl	8005010 <clearReadBytes>
		SDcardReadSeek("mapDate.txt", 100, seekCntWrite);
 8007186:	2164      	movs	r1, #100	; 0x64
 8007188:	4602      	mov	r2, r0
 800718a:	485d      	ldr	r0, [pc, #372]	; (8007300 <function17+0x1ac>)
 800718c:	f7fd fb24 	bl	80047d8 <SDcardReadSeek>
		map_ID = readBytes[4];
 8007190:	4b5c      	ldr	r3, [pc, #368]	; (8007304 <function17+0x1b0>)
 8007192:	791a      	ldrb	r2, [r3, #4]
 8007194:	9201      	str	r2, [sp, #4]
		totNoOfPhases = readBytes[5];
 8007196:	f893 b005 	ldrb.w	fp, [r3, #5]
		clearReadBytes();
 800719a:	f7fd ff39 	bl	8005010 <clearReadBytes>
		for(int i=1; i< totNoOfPhases+1;i++){
 800719e:	f04f 0801 	mov.w	r8, #1
 80071a2:	45d8      	cmp	r8, fp
 80071a4:	dd01      	ble.n	80071aa <function17+0x56>
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 80071a6:	3501      	adds	r5, #1
 80071a8:	e7dd      	b.n	8007166 <function17+0x12>
				frame[0] = 126;
 80071aa:	4c57      	ldr	r4, [pc, #348]	; (8007308 <function17+0x1b4>)
 80071ac:	237e      	movs	r3, #126	; 0x7e
 80071ae:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 80071b0:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 80071b2:	2300      	movs	r3, #0
 80071b4:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 80071b6:	2312      	movs	r3, #18
 80071b8:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 80071ba:	f89a 3000 	ldrb.w	r3, [sl]
 80071be:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 80071c0:	4b52      	ldr	r3, [pc, #328]	; (800730c <function17+0x1b8>)
				frame[9] = i;  // plan no
 80071c2:	f884 8009 	strb.w	r8, [r4, #9]
				frame[5] = programVersionNo; // junction no
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 80071ca:	4b51      	ldr	r3, [pc, #324]	; (8007310 <function17+0x1bc>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x11; // function no
 80071d0:	2311      	movs	r3, #17
 80071d2:	71e3      	strb	r3, [r4, #7]
				frame[8] = map_ID;  // plan no planOnHr
 80071d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80071d8:	7223      	strb	r3, [r4, #8]
				frame[10] = 0x01;
 80071da:	2301      	movs	r3, #1
 80071dc:	72a3      	strb	r3, [r4, #10]
				frame[11] = 0x01;
 80071de:	72e3      	strb	r3, [r4, #11]
				frame[12] = 0x01;
 80071e0:	7323      	strb	r3, [r4, #12]
				frame[13] = 0x01;
 80071e2:	7363      	strb	r3, [r4, #13]
				frame[14] = 0x01;
 80071e4:	73a3      	strb	r3, [r4, #14]
				frame[15] = 0x01;
 80071e6:	73e3      	strb	r3, [r4, #15]
				frame[16] = 0x01;
 80071e8:	7423      	strb	r3, [r4, #16]
				frame[17] = 0x01;
 80071ea:	7463      	strb	r3, [r4, #17]
				frame[18] = 0x01;  //'1'
 80071ec:	74a3      	strb	r3, [r4, #18]
				frame[19] = 0x01;  //'0' ; //'5' ;
 80071ee:	74e3      	strb	r3, [r4, #19]
				frame[20] = 0x01;  // '2' ;//'9' ;//'1' ;
 80071f0:	7523      	strb	r3, [r4, #20]
				frame[21] = 0x01;  // '2' ;//'9' ;//'1' ;
 80071f2:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 80071f4:	f7fd ff72 	bl	80050dc <crcApi>
				frame[23] = 125;
 80071f8:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 80071fa:	43c0      	mvns	r0, r0
				frame[23] = 125;
 80071fc:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 80071fe:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 8007200:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 8007202:	f7fd ff11 	bl	8005028 <clearBuffer>
				if(programFromBLE==1)
 8007206:	4b43      	ldr	r3, [pc, #268]	; (8007314 <function17+0x1c0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 800720c:	f04f 0218 	mov.w	r2, #24
 8007210:	f241 3388 	movw	r3, #5000	; 0x1388
 8007214:	4621      	mov	r1, r4
				if(programFromBLE==1)
 8007216:	d160      	bne.n	80072da <function17+0x186>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8007218:	483f      	ldr	r0, [pc, #252]	; (8007318 <function17+0x1c4>)
 800721a:	f7fb f961 	bl	80024e0 <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 800721e:	493f      	ldr	r1, [pc, #252]	; (800731c <function17+0x1c8>)
 8007220:	483d      	ldr	r0, [pc, #244]	; (8007318 <function17+0x1c4>)
 8007222:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8007226:	2228      	movs	r2, #40	; 0x28
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8007228:	4e3c      	ldr	r6, [pc, #240]	; (800731c <function17+0x1c8>)
 800722a:	4c3d      	ldr	r4, [pc, #244]	; (8007320 <function17+0x1cc>)
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 800722c:	f7fb f9b5 	bl	800259a <HAL_UART_Receive>
				HAL_Delay(300);
 8007230:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007234:	f7f9 f9c6 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8007238:	2200      	movs	r2, #0
 800723a:	493a      	ldr	r1, [pc, #232]	; (8007324 <function17+0x1d0>)
 800723c:	4630      	mov	r0, r6
 800723e:	f001 fca3 	bl	8008b88 <msgParse>
 8007242:	6020      	str	r0, [r4, #0]
		HAL_Delay(900);
 8007244:	f44f 7061 	mov.w	r0, #900	; 0x384
 8007248:	f7f9 f9bc 	bl	80005c4 <HAL_Delay>
		signVal=4;
 800724c:	2004      	movs	r0, #4
 800724e:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 8007250:	f7fe fb9c 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8007254:	7973      	ldrb	r3, [r6, #5]
 8007256:	4433      	add	r3, r6
 8007258:	46b6      	mov	lr, r6
 800725a:	799b      	ldrb	r3, [r3, #6]
					+ crcApi3(signVal) == 0xFF) {
 800725c:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 800725e:	28ff      	cmp	r0, #255	; 0xff
 8007260:	d144      	bne.n	80072ec <function17+0x198>
				signVal = signVal + 2;
 8007262:	2306      	movs	r3, #6
 8007264:	6023      	str	r3, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId))
 8007266:	79b2      	ldrb	r2, [r6, #6]
 8007268:	f89a 3000 	ldrb.w	r3, [sl]
 800726c:	429a      	cmp	r2, r3
 800726e:	d131      	bne.n	80072d4 <function17+0x180>
					signVal = signVal + 3;
 8007270:	2309      	movs	r3, #9
 8007272:	6023      	str	r3, [r4, #0]
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8007274:	7a73      	ldrb	r3, [r6, #9]
						string[0]=phaseMapID;
 8007276:	492c      	ldr	r1, [pc, #176]	; (8007328 <function17+0x1d4>)
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8007278:	2b10      	cmp	r3, #16
						signVal = signVal + 1;
 800727a:	bf04      	itt	eq
 800727c:	230a      	moveq	r3, #10
 800727e:	6023      	streq	r3, [r4, #0]
						signVal=signVal+1;
 8007280:	6822      	ldr	r2, [r4, #0]
						string[0]=phaseMapID;
 8007282:	f881 9000 	strb.w	r9, [r1]
						signVal=signVal+1;
 8007286:	f102 0c01 	add.w	ip, r2, #1
						for (int i = 1; i < 5; i++) {
 800728a:	2301      	movs	r3, #1
							string[i] = aRxBuffer[signVal];
 800728c:	460e      	mov	r6, r1
 800728e:	eb0c 0003 	add.w	r0, ip, r3
 8007292:	4470      	add	r0, lr
 8007294:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8007298:	5598      	strb	r0, [r3, r6]
						for (int i = 1; i < 5; i++) {
 800729a:	3301      	adds	r3, #1
 800729c:	2b05      	cmp	r3, #5
 800729e:	d1f6      	bne.n	800728e <function17+0x13a>
 80072a0:	3205      	adds	r2, #5
					string[5] = 0xFF ;//
 80072a2:	23ff      	movs	r3, #255	; 0xff
 80072a4:	714b      	strb	r3, [r1, #5]
 80072a6:	6022      	str	r2, [r4, #0]
						SDcardWriteSeek("mapPhase.txt", 6, (uint8_t *) string, seekCnt);
 80072a8:	463b      	mov	r3, r7
 80072aa:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <function17+0x1d4>)
 80072ac:	481f      	ldr	r0, [pc, #124]	; (800732c <function17+0x1d8>)
 80072ae:	2106      	movs	r1, #6
 80072b0:	f7fd fab6 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("mapPhase.txt", 6, seekCnt);
 80072b4:	463a      	mov	r2, r7
 80072b6:	2106      	movs	r1, #6
 80072b8:	481c      	ldr	r0, [pc, #112]	; (800732c <function17+0x1d8>)
 80072ba:	f7fd fa8d 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80072be:	2110      	movs	r1, #16
 80072c0:	481b      	ldr	r0, [pc, #108]	; (8007330 <function17+0x1dc>)
					phaseMapID++;
 80072c2:	f109 0901 	add.w	r9, r9, #1
						seekCnt=seekCnt+6;
 80072c6:	3706      	adds	r7, #6
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80072c8:	f7f9 fb1f 	bl	800090a <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 80072cc:	f7fd fec0 	bl	8005050 <clearaRxBuffer>
						clearBuffer4();
 80072d0:	f7fd fedc 	bl	800508c <clearBuffer4>
		for(int i=1; i< totNoOfPhases+1;i++){
 80072d4:	f108 0801 	add.w	r8, r8, #1
 80072d8:	e763      	b.n	80071a2 <function17+0x4e>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 80072da:	4816      	ldr	r0, [pc, #88]	; (8007334 <function17+0x1e0>)
 80072dc:	f7fb f900 	bl	80024e0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 80072e0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80072e4:	2228      	movs	r2, #40	; 0x28
 80072e6:	490d      	ldr	r1, [pc, #52]	; (800731c <function17+0x1c8>)
 80072e8:	4812      	ldr	r0, [pc, #72]	; (8007334 <function17+0x1e0>)
 80072ea:	e79d      	b.n	8007228 <function17+0xd4>
							clearaRxBuffer();
 80072ec:	f7fd feb0 	bl	8005050 <clearaRxBuffer>
							clearBuffer4();
 80072f0:	f7fd fecc 	bl	800508c <clearBuffer4>
							return 0;
 80072f4:	2000      	movs	r0, #0
}
 80072f6:	b003      	add	sp, #12
 80072f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fc:	2000011c 	.word	0x2000011c
 8007300:	080094d3 	.word	0x080094d3
 8007304:	200002f4 	.word	0x200002f4
 8007308:	20003ae1 	.word	0x20003ae1
 800730c:	2000010d 	.word	0x2000010d
 8007310:	2000000c 	.word	0x2000000c
 8007314:	2000367c 	.word	0x2000367c
 8007318:	200010e8 	.word	0x200010e8
 800731c:	2000134c 	.word	0x2000134c
 8007320:	200015c8 	.word	0x200015c8
 8007324:	080094f7 	.word	0x080094f7
 8007328:	200052f2 	.word	0x200052f2
 800732c:	080094df 	.word	0x080094df
 8007330:	40021000 	.word	0x40021000
 8007334:	20000e10 	.word	0x20000e10
 8007338:	2000000d 	.word	0x2000000d

0800733c <function18>:
int function18(){
 800733c:	b570      	push	{r4, r5, r6, lr}
				frame[0] = 126;
 800733e:	4c51      	ldr	r4, [pc, #324]	; (8007484 <function18+0x148>)
	countNoOfMapDetails();
 8007340:	f7ff fece 	bl	80070e0 <countNoOfMapDetails>
		clearframe();
 8007344:	f7fd fe5a 	bl	8004ffc <clearframe>
				frame[0] = 126;
 8007348:	237e      	movs	r3, #126	; 0x7e
 800734a:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 800734c:	7063      	strb	r3, [r4, #1]
				frame[2] = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	70a3      	strb	r3, [r4, #2]
				frame[3] = 14;
 8007352:	230e      	movs	r3, #14
 8007354:	70e3      	strb	r3, [r4, #3]
				frame[4] = 15;//junctionId; // function no
 8007356:	230f      	movs	r3, #15
 8007358:	7123      	strb	r3, [r4, #4]
				frame[5] = 21;//programVersionNo; // junction no
 800735a:	2315      	movs	r3, #21
 800735c:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 800735e:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <function18+0x14c>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x12; // function no
 8007364:	2312      	movs	r3, #18
 8007366:	71e3      	strb	r3, [r4, #7]
				frame[8] = 0x04;//noOfSides;  // plan no planOnHr
 8007368:	2304      	movs	r3, #4
 800736a:	7223      	strb	r3, [r4, #8]
				frame[9] =  0x01;
 800736c:	2301      	movs	r3, #1
 800736e:	7263      	strb	r3, [r4, #9]
				frame[10] = 0x01;
 8007370:	72a3      	strb	r3, [r4, #10]
				frame[11] = 0x01;
 8007372:	72e3      	strb	r3, [r4, #11]
				frame[12] = 0x01;
 8007374:	7323      	strb	r3, [r4, #12]
				frame[13] = 0x01;
 8007376:	7363      	strb	r3, [r4, #13]
				frame[14] = 0x01;
 8007378:	73a3      	strb	r3, [r4, #14]
				frame[15] = 0x01;
 800737a:	73e3      	strb	r3, [r4, #15]
				frame[16] = 0x01;
 800737c:	7423      	strb	r3, [r4, #16]
				frame[17] = 0x01;
 800737e:	7463      	strb	r3, [r4, #17]
				frame[18] = 0xFF - crcApi();  // junction no
 8007380:	f7fd feac 	bl	80050dc <crcApi>
				frame[19] = 125;
 8007384:	237d      	movs	r3, #125	; 0x7d
				frame[18] = 0xFF - crcApi();  // junction no
 8007386:	43c0      	mvns	r0, r0
				frame[19] = 125;
 8007388:	74e3      	strb	r3, [r4, #19]
				frame[20] = 125;
 800738a:	7523      	strb	r3, [r4, #20]
				frame[18] = 0xFF - crcApi();  // junction no
 800738c:	74a0      	strb	r0, [r4, #18]
				clearBuffer();
 800738e:	f7fd fe4b 	bl	8005028 <clearBuffer>
				if(programFromBLE==1)
 8007392:	4b3e      	ldr	r3, [pc, #248]	; (800748c <function18+0x150>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 8007398:	f04f 0214 	mov.w	r2, #20
 800739c:	f241 3388 	movw	r3, #5000	; 0x1388
 80073a0:	4621      	mov	r1, r4
				if(programFromBLE==1)
 80073a2:	d15e      	bne.n	8007462 <function18+0x126>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80073a4:	483a      	ldr	r0, [pc, #232]	; (8007490 <function18+0x154>)
 80073a6:	f7fb f89b 	bl	80024e0 <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 50, 0x2FFF);
 80073aa:	493a      	ldr	r1, [pc, #232]	; (8007494 <function18+0x158>)
 80073ac:	4838      	ldr	r0, [pc, #224]	; (8007490 <function18+0x154>)
 80073ae:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80073b2:	2232      	movs	r2, #50	; 0x32
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80073b4:	4e37      	ldr	r6, [pc, #220]	; (8007494 <function18+0x158>)
 80073b6:	4d38      	ldr	r5, [pc, #224]	; (8007498 <function18+0x15c>)
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 50, 0x1FFF);
 80073b8:	f7fb f8ef 	bl	800259a <HAL_UART_Receive>
				HAL_Delay(300);
 80073bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073c0:	f7f9 f900 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80073c4:	2200      	movs	r2, #0
 80073c6:	4935      	ldr	r1, [pc, #212]	; (800749c <function18+0x160>)
 80073c8:	4630      	mov	r0, r6
 80073ca:	f001 fbdd 	bl	8008b88 <msgParse>
 80073ce:	6028      	str	r0, [r5, #0]
		HAL_Delay(900);
 80073d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80073d4:	f7f9 f8f6 	bl	80005c4 <HAL_Delay>
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80073d8:	2200      	movs	r2, #0
 80073da:	4930      	ldr	r1, [pc, #192]	; (800749c <function18+0x160>)
 80073dc:	4630      	mov	r0, r6
 80073de:	f001 fbd3 	bl	8008b88 <msgParse>
 80073e2:	4604      	mov	r4, r0
 80073e4:	6028      	str	r0, [r5, #0]
		if (!(signVal == 0)){
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d044      	beq.n	8007474 <function18+0x138>
					+ crcApi3(signVal) == 0xFF) {
 80073ea:	f7fe facf 	bl	800598c <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80073ee:	1933      	adds	r3, r6, r4
 80073f0:	785a      	ldrb	r2, [r3, #1]
 80073f2:	4413      	add	r3, r2
 80073f4:	789b      	ldrb	r3, [r3, #2]
					+ crcApi3(signVal) == 0xFF) {
 80073f6:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80073f8:	28ff      	cmp	r0, #255	; 0xff
 80073fa:	d140      	bne.n	800747e <function18+0x142>
				signVal = signVal + 2;
 80073fc:	1ca3      	adds	r3, r4, #2
 80073fe:	602b      	str	r3, [r5, #0]
				if ((aRxBuffer[signVal] == junctionId))
 8007400:	5cf2      	ldrb	r2, [r6, r3]
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <function18+0x164>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d139      	bne.n	800747e <function18+0x142>
					signVal = signVal + 3;
 800740a:	1d63      	adds	r3, r4, #5
 800740c:	602b      	str	r3, [r5, #0]
					if ((aRxBuffer[signVal] == 0x12)) //function Number
 800740e:	5cf3      	ldrb	r3, [r6, r3]
							string[i] = aRxBuffer[signVal];
 8007410:	4824      	ldr	r0, [pc, #144]	; (80074a4 <function18+0x168>)
					if ((aRxBuffer[signVal] == 0x12)) //function Number
 8007412:	2b12      	cmp	r3, #18
						signVal = signVal + 1;
 8007414:	bf04      	itt	eq
 8007416:	3406      	addeq	r4, #6
 8007418:	602c      	streq	r4, [r5, #0]
 800741a:	682a      	ldr	r2, [r5, #0]
int function18(){
 800741c:	2301      	movs	r3, #1
							string[i] = aRxBuffer[signVal];
 800741e:	18d1      	adds	r1, r2, r3
 8007420:	4431      	add	r1, r6
 8007422:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8007426:	5419      	strb	r1, [r3, r0]
						for (int i = 1; i < 26; i++) {
 8007428:	3301      	adds	r3, #1
 800742a:	2b1a      	cmp	r3, #26
 800742c:	d1f7      	bne.n	800741e <function18+0xe2>
 800742e:	3219      	adds	r2, #25
					string[26] = 0xFF ;//
 8007430:	23ff      	movs	r3, #255	; 0xff
 8007432:	7683      	strb	r3, [r0, #26]
 8007434:	602a      	str	r2, [r5, #0]
						SDcardWriteSeek("SlaveD.txt", 27, (uint8_t *) string, seekCnt);
 8007436:	2300      	movs	r3, #0
 8007438:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <function18+0x168>)
 800743a:	481b      	ldr	r0, [pc, #108]	; (80074a8 <function18+0x16c>)
 800743c:	211b      	movs	r1, #27
 800743e:	f7fd f9ef 	bl	8004820 <SDcardWriteSeek>
						SDcardReadSeek("SlaveD.txt", 27, seekCnt);
 8007442:	2200      	movs	r2, #0
 8007444:	211b      	movs	r1, #27
 8007446:	4818      	ldr	r0, [pc, #96]	; (80074a8 <function18+0x16c>)
 8007448:	f7fd f9c6 	bl	80047d8 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800744c:	2110      	movs	r1, #16
 800744e:	4817      	ldr	r0, [pc, #92]	; (80074ac <function18+0x170>)
 8007450:	f7f9 fa5b 	bl	800090a <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 8007454:	f7fd fdfc 	bl	8005050 <clearaRxBuffer>
						clearBuffer4();
 8007458:	f7fd fe18 	bl	800508c <clearBuffer4>
						return 1 ;
 800745c:	2401      	movs	r4, #1
}
 800745e:	4620      	mov	r0, r4
 8007460:	bd70      	pop	{r4, r5, r6, pc}
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 8007462:	4813      	ldr	r0, [pc, #76]	; (80074b0 <function18+0x174>)
 8007464:	f7fb f83c 	bl	80024e0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 50, 0x1FFF);
 8007468:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800746c:	2232      	movs	r2, #50	; 0x32
 800746e:	4909      	ldr	r1, [pc, #36]	; (8007494 <function18+0x158>)
 8007470:	480f      	ldr	r0, [pc, #60]	; (80074b0 <function18+0x174>)
 8007472:	e79f      	b.n	80073b4 <function18+0x78>
							clearaRxBuffer();
 8007474:	f7fd fdec 	bl	8005050 <clearaRxBuffer>
							clearBuffer4();
 8007478:	f7fd fe08 	bl	800508c <clearBuffer4>
							return 0;
 800747c:	e7ef      	b.n	800745e <function18+0x122>
	clearaRxBuffer();
 800747e:	f7fd fde7 	bl	8005050 <clearaRxBuffer>
}
 8007482:	e7ec      	b.n	800745e <function18+0x122>
 8007484:	20003ae1 	.word	0x20003ae1
 8007488:	2000000c 	.word	0x2000000c
 800748c:	2000367c 	.word	0x2000367c
 8007490:	200010e8 	.word	0x200010e8
 8007494:	2000134c 	.word	0x2000134c
 8007498:	200015c8 	.word	0x200015c8
 800749c:	080094f7 	.word	0x080094f7
 80074a0:	2000000d 	.word	0x2000000d
 80074a4:	200052f2 	.word	0x200052f2
 80074a8:	080094ec 	.word	0x080094ec
 80074ac:	40021000 	.word	0x40021000
 80074b0:	20000e10 	.word	0x20000e10

080074b4 <currentDayAllPlan>:
void currentDayAllPlan(){
 80074b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
int cnt=0;
int enterLoop;
int ptr=0;
int mapCounter_Phase=0;
int phaseMapCnt2=0;
clearPlanDetailsArrayBuffer();
 80074b8:	f7fd fdfc 	bl	80050b4 <clearPlanDetailsArrayBuffer>
int mapCounter_Phase=0;
 80074bc:	2500      	movs	r5, #0
for(int i=1;i<totalNoOfMap+1;i++){
 80074be:	f8df b144 	ldr.w	fp, [pc, #324]	; 8007604 <currentDayAllPlan+0x150>
 80074c2:	2601      	movs	r6, #1
int ptr=0;
 80074c4:	46a8      	mov	r8, r5
int counter=0;
 80074c6:	46aa      	mov	sl, r5
for(int i=1;i<totalNoOfMap+1;i++){
 80074c8:	f8db 3000 	ldr.w	r3, [fp]
 80074cc:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 80074d0:	429e      	cmp	r6, r3
 80074d2:	f1a0 0007 	sub.w	r0, r0, #7
 80074d6:	dd02      	ble.n	80074de <currentDayAllPlan+0x2a>

}
}
counterOfPlan=ptr;
}
}
 80074d8:	b003      	add	sp, #12
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
clearReadBytes();
 80074de:	f7fd fd97 	bl	8005010 <clearReadBytes>
SDcardReadSeek("mapDate.txt", 7, cnt);
 80074e2:	2107      	movs	r1, #7
 80074e4:	4602      	mov	r2, r0
 80074e6:	4841      	ldr	r0, [pc, #260]	; (80075ec <currentDayAllPlan+0x138>)
phaseMapCnt2=readBytes[5];
 80074e8:	4c41      	ldr	r4, [pc, #260]	; (80075f0 <currentDayAllPlan+0x13c>)
 80074ea:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8007620 <currentDayAllPlan+0x16c>
SDcardReadSeek("mapDate.txt", 7, cnt);
 80074ee:	f7fd f973 	bl	80047d8 <SDcardReadSeek>
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 80074f2:	4940      	ldr	r1, [pc, #256]	; (80075f4 <currentDayAllPlan+0x140>)
phaseMapCnt2=readBytes[5];
 80074f4:	7962      	ldrb	r2, [r4, #5]
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 80074f6:	680b      	ldr	r3, [r1, #0]
if((dateID==readBytes[0])&&(dayID ==readBytes[1]))
 80074f8:	7820      	ldrb	r0, [r4, #0]
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 80074fa:	4413      	add	r3, r2
 80074fc:	600b      	str	r3, [r1, #0]
if((dateID==readBytes[0])&&(dayID ==readBytes[1]))
 80074fe:	4b3e      	ldr	r3, [pc, #248]	; (80075f8 <currentDayAllPlan+0x144>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	4298      	cmp	r0, r3
 8007504:	4621      	mov	r1, r4
 8007506:	d111      	bne.n	800752c <currentDayAllPlan+0x78>
 8007508:	f8df e104 	ldr.w	lr, [pc, #260]	; 8007610 <currentDayAllPlan+0x15c>
 800750c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8007510:	f89e e000 	ldrb.w	lr, [lr]
 8007514:	45f4      	cmp	ip, lr
 8007516:	d109      	bne.n	800752c <currentDayAllPlan+0x78>
planID=readBytes[2];
 8007518:	78a3      	ldrb	r3, [r4, #2]
 800751a:	f889 3000 	strb.w	r3, [r9]
mapID=readBytes[4];
 800751e:	4b37      	ldr	r3, [pc, #220]	; (80075fc <currentDayAllPlan+0x148>)
 8007520:	7920      	ldrb	r0, [r4, #4]
 8007522:	7018      	strb	r0, [r3, #0]
noOfPhases_Map=readBytes[5];
 8007524:	4b36      	ldr	r3, [pc, #216]	; (8007600 <currentDayAllPlan+0x14c>)
enterLoop=1;
 8007526:	2701      	movs	r7, #1
noOfPhases_Map=readBytes[5];
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e00d      	b.n	8007548 <currentDayAllPlan+0x94>
if(!((dateID==0)||(dayID == 0)))
 800752c:	2b00      	cmp	r3, #0
 800752e:	d057      	beq.n	80075e0 <currentDayAllPlan+0x12c>
 8007530:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8007610 <currentDayAllPlan+0x15c>
 8007534:	f89e e000 	ldrb.w	lr, [lr]
 8007538:	f1be 0f00 	cmp.w	lr, #0
 800753c:	d052      	beq.n	80075e4 <currentDayAllPlan+0x130>
if((dateID==readBytes[0])||(dayID ==readBytes[1])){
 800753e:	4298      	cmp	r0, r3
 8007540:	d0ea      	beq.n	8007518 <currentDayAllPlan+0x64>
 8007542:	7863      	ldrb	r3, [r4, #1]
 8007544:	4573      	cmp	r3, lr
 8007546:	d0e7      	beq.n	8007518 <currentDayAllPlan+0x64>
if(!((planID==0x00)&&(mapID==0x00)))
 8007548:	f899 3000 	ldrb.w	r3, [r9]
 800754c:	b91b      	cbnz	r3, 8007556 <currentDayAllPlan+0xa2>
 800754e:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <currentDayAllPlan+0x148>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d03f      	beq.n	80075d6 <currentDayAllPlan+0x122>
if(enterLoop==1)
 8007556:	2f01      	cmp	r7, #1
 8007558:	d13d      	bne.n	80075d6 <currentDayAllPlan+0x122>
 800755a:	463b      	mov	r3, r7
for(int i=1;i<totalNoOfMap+1;i++)
 800755c:	4a29      	ldr	r2, [pc, #164]	; (8007604 <currentDayAllPlan+0x150>)
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	4293      	cmp	r3, r2
 8007562:	dc38      	bgt.n	80075d6 <currentDayAllPlan+0x122>
 8007564:	9101      	str	r1, [sp, #4]
 8007566:	9300      	str	r3, [sp, #0]
clearReadBytes();
 8007568:	f7fd fd52 	bl	8005010 <clearReadBytes>
readPlanSD(counter);
 800756c:	4650      	mov	r0, sl
 800756e:	f7fd fded 	bl	800514c <readPlanSD>
if(planID==readBytes[0])
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	f899 2000 	ldrb.w	r2, [r9]
 8007578:	7808      	ldrb	r0, [r1, #0]
 800757a:	9b00      	ldr	r3, [sp, #0]
 800757c:	4282      	cmp	r2, r0
 counter=counter+19;
 800757e:	f10a 0a13 	add.w	sl, sl, #19
if(planID==readBytes[0])
 8007582:	d131      	bne.n	80075e8 <currentDayAllPlan+0x134>
	phaseMapCnt++;
 8007584:	4820      	ldr	r0, [pc, #128]	; (8007608 <currentDayAllPlan+0x154>)
 8007586:	6803      	ldr	r3, [r0, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	6003      	str	r3, [r0, #0]
	phaseMapArray[mapCounter_Phase]=dateID;
 800758c:	481a      	ldr	r0, [pc, #104]	; (80075f8 <currentDayAllPlan+0x144>)
 800758e:	4b1f      	ldr	r3, [pc, #124]	; (800760c <currentDayAllPlan+0x158>)
 8007590:	7800      	ldrb	r0, [r0, #0]
 8007592:	5558      	strb	r0, [r3, r5]
	phaseMapArray[mapCounter_Phase+1]=dayID;
 8007594:	442b      	add	r3, r5
 8007596:	481e      	ldr	r0, [pc, #120]	; (8007610 <currentDayAllPlan+0x15c>)
	phaseMapArray[mapCounter_Phase+2]=planID;
 8007598:	709a      	strb	r2, [r3, #2]
	phaseMapArray[mapCounter_Phase+3]=mapID;
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <currentDayAllPlan+0x148>)
	phaseMapArray[mapCounter_Phase+1]=dayID;
 800759c:	7800      	ldrb	r0, [r0, #0]
	phaseMapArray[mapCounter_Phase+3]=mapID;
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	70da      	strb	r2, [r3, #3]
	phaseMapArray[mapCounter_Phase+4]=noOfPhases_Map;
 80075a2:	4a17      	ldr	r2, [pc, #92]	; (8007600 <currentDayAllPlan+0x14c>)
	phaseMapArray[mapCounter_Phase+1]=dayID;
 80075a4:	7058      	strb	r0, [r3, #1]
	phaseMapArray[mapCounter_Phase+4]=noOfPhases_Map;
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	711a      	strb	r2, [r3, #4]
	phaseMapArray[mapCounter_Phase+5]=0xFF;
 80075aa:	22ff      	movs	r2, #255	; 0xff
 80075ac:	715a      	strb	r2, [r3, #5]
planDetailsArray[ptr+i]=readBytes[i];
 80075ae:	4a19      	ldr	r2, [pc, #100]	; (8007614 <currentDayAllPlan+0x160>)
	mapCounter_Phase=mapCounter_Phase+6;
 80075b0:	3506      	adds	r5, #6
for(int i=0;i<19;i++){
 80075b2:	2300      	movs	r3, #0
planDetailsArray[ptr+i]=readBytes[i];
 80075b4:	4442      	add	r2, r8
 80075b6:	5cc8      	ldrb	r0, [r1, r3]
 80075b8:	54d0      	strb	r0, [r2, r3]
for(int i=0;i<19;i++){
 80075ba:	3301      	adds	r3, #1
 80075bc:	2b13      	cmp	r3, #19
 80075be:	d1fa      	bne.n	80075b6 <currentDayAllPlan+0x102>
        planTime[j]= readBytes[j+2];
 80075c0:	4b15      	ldr	r3, [pc, #84]	; (8007618 <currentDayAllPlan+0x164>)
 80075c2:	78a2      	ldrb	r2, [r4, #2]
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	78e2      	ldrb	r2, [r4, #3]
 80075c8:	705a      	strb	r2, [r3, #1]
 80075ca:	7922      	ldrb	r2, [r4, #4]
 80075cc:	709a      	strb	r2, [r3, #2]
 80075ce:	7962      	ldrb	r2, [r4, #5]
 80075d0:	70da      	strb	r2, [r3, #3]
       ptr=ptr+19;
 80075d2:	f108 0813 	add.w	r8, r8, #19
counterOfPlan=ptr;
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <currentDayAllPlan+0x168>)
for(int i=1;i<totalNoOfMap+1;i++){
 80075d8:	3601      	adds	r6, #1
counterOfPlan=ptr;
 80075da:	f8c3 8000 	str.w	r8, [r3]
 80075de:	e773      	b.n	80074c8 <currentDayAllPlan+0x14>
enterLoop=0;
 80075e0:	461f      	mov	r7, r3
 80075e2:	e7b1      	b.n	8007548 <currentDayAllPlan+0x94>
 80075e4:	4677      	mov	r7, lr
 80075e6:	e7af      	b.n	8007548 <currentDayAllPlan+0x94>
for(int i=1;i<totalNoOfMap+1;i++)
 80075e8:	3301      	adds	r3, #1
 80075ea:	e7b7      	b.n	800755c <currentDayAllPlan+0xa8>
 80075ec:	080094d3 	.word	0x080094d3
 80075f0:	200002f4 	.word	0x200002f4
 80075f4:	200000f4 	.word	0x200000f4
 80075f8:	200000bc 	.word	0x200000bc
 80075fc:	200039cc 	.word	0x200039cc
 8007600:	2000373c 	.word	0x2000373c
 8007604:	2000011c 	.word	0x2000011c
 8007608:	200000f0 	.word	0x200000f0
 800760c:	20003684 	.word	0x20003684
 8007610:	200000be 	.word	0x200000be
 8007614:	20003b95 	.word	0x20003b95
 8007618:	20001128 	.word	0x20001128
 800761c:	200000b8 	.word	0x200000b8
 8007620:	20003631 	.word	0x20003631

08007624 <getCurrentPlanTotalNoOfPhases>:
//		}
//
//	}
//}

void getCurrentPlanTotalNoOfPhases(){
 8007624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
int cnt1=0;
int phaseId=0;
int mapID=0;
//int ptr=0;
/*----------get the current plan's , phaseMap from mapPhase.txt file-------- */
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007628:	2600      	movs	r6, #0
 800762a:	4c3b      	ldr	r4, [pc, #236]	; (8007718 <getCurrentPlanTotalNoOfPhases+0xf4>)
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
	{
		SDcardReadSeek("mapPhase.txt", 6, seekCnt);
		seekCnt=seekCnt+6;
		if(phaseMap==readBytes[1]){
 800762c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800773c <getCurrentPlanTotalNoOfPhases+0x118>
int counterOfList=0;
 8007630:	46b0      	mov	r8, r6
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007632:	4b3a      	ldr	r3, [pc, #232]	; (800771c <getCurrentPlanTotalNoOfPhases+0xf8>)
 8007634:	4d3a      	ldr	r5, [pc, #232]	; (8007720 <getCurrentPlanTotalNoOfPhases+0xfc>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	429e      	cmp	r6, r3
 800763a:	db11      	blt.n	8007660 <getCurrentPlanTotalNoOfPhases+0x3c>
     if(noOfPhasesInMapID==cnt1)
    	 break;
	}
	cnt=cnt+6;
}
SDcardReadSeek("phase.txt", 350, 0);
 800763c:	2200      	movs	r2, #0
 800763e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007642:	4838      	ldr	r0, [pc, #224]	; (8007724 <getCurrentPlanTotalNoOfPhases+0x100>)

//		EEPROM_ReadArray(readBytes,17,eepromAddress);
//		eepromAddress=eepromAddress+17;

		/*--------read phase from eeprom-------end-------*/
		if(phaseId==readBytes[3]){
 8007644:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800773c <getCurrentPlanTotalNoOfPhases+0x118>
SDcardReadSeek("phase.txt", 350, 0);
 8007648:	f7fd f8c6 	bl	80047d8 <SDcardReadSeek>
clearReadBytes();
 800764c:	f7fd fce0 	bl	8005010 <clearReadBytes>
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007650:	2600      	movs	r6, #0
counterOfList=0;
 8007652:	4637      	mov	r7, r6
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	429e      	cmp	r6, r3
 8007658:	db32      	blt.n	80076c0 <getCurrentPlanTotalNoOfPhases+0x9c>





}
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
 8007660:	682a      	ldr	r2, [r5, #0]
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 8007662:	7921      	ldrb	r1, [r4, #4]
 8007664:	4f30      	ldr	r7, [pc, #192]	; (8007728 <getCurrentPlanTotalNoOfPhases+0x104>)
	phaseMap=phaseMapArray[cnt+3];
 8007666:	78e3      	ldrb	r3, [r4, #3]
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 8007668:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8007740 <getCurrentPlanTotalNoOfPhases+0x11c>
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 800766c:	6039      	str	r1, [r7, #0]
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
 800766e:	440a      	add	r2, r1
 8007670:	602a      	str	r2, [r5, #0]
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 8007672:	2500      	movs	r5, #0
	cnt1=0;
 8007674:	46a9      	mov	r9, r5
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 8007676:	f8db 0000 	ldr.w	r0, [fp]
 800767a:	2106      	movs	r1, #6
 800767c:	4285      	cmp	r5, r0
 800767e:	fb01 f205 	mul.w	r2, r1, r5
 8007682:	dd02      	ble.n	800768a <getCurrentPlanTotalNoOfPhases+0x66>
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007684:	3601      	adds	r6, #1
 8007686:	3406      	adds	r4, #6
 8007688:	e7d3      	b.n	8007632 <getCurrentPlanTotalNoOfPhases+0xe>
		SDcardReadSeek("mapPhase.txt", 6, seekCnt);
 800768a:	4828      	ldr	r0, [pc, #160]	; (800772c <getCurrentPlanTotalNoOfPhases+0x108>)
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	f7fd f8a3 	bl	80047d8 <SDcardReadSeek>
		if(phaseMap==readBytes[1]){
 8007692:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d10c      	bne.n	80076b6 <getCurrentPlanTotalNoOfPhases+0x92>
				phaseMapIDList[i+counterOfList]=readBytes[i];
 800769c:	4924      	ldr	r1, [pc, #144]	; (8007730 <getCurrentPlanTotalNoOfPhases+0x10c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	4441      	add	r1, r8
 80076a2:	f81a 0002 	ldrb.w	r0, [sl, r2]
 80076a6:	5488      	strb	r0, [r1, r2]
			for(int i=0;i<6;i++)
 80076a8:	3201      	adds	r2, #1
 80076aa:	2a06      	cmp	r2, #6
 80076ac:	d1f9      	bne.n	80076a2 <getCurrentPlanTotalNoOfPhases+0x7e>
			counterOfList=counterOfList+6;
 80076ae:	f108 0806 	add.w	r8, r8, #6
			cnt1++;
 80076b2:	f109 0901 	add.w	r9, r9, #1
     if(noOfPhasesInMapID==cnt1)
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4591      	cmp	r9, r2
 80076ba:	d0e3      	beq.n	8007684 <getCurrentPlanTotalNoOfPhases+0x60>
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 80076bc:	3501      	adds	r5, #1
 80076be:	e7da      	b.n	8007676 <getCurrentPlanTotalNoOfPhases+0x52>
	eepromAddress=0;
 80076c0:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <getCurrentPlanTotalNoOfPhases+0x110>)
	phaseId=phaseMapIDList[cnt+2];
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <getCurrentPlanTotalNoOfPhases+0x10c>)
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 80076c4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8007744 <getCurrentPlanTotalNoOfPhases+0x120>
	eepromAddress=0;
 80076c8:	2400      	movs	r4, #0
 80076ca:	601c      	str	r4, [r3, #0]
 80076cc:	2306      	movs	r3, #6
 80076ce:	4373      	muls	r3, r6
	phaseId=phaseMapIDList[cnt+2];
 80076d0:	441a      	add	r2, r3
 80076d2:	f892 9002 	ldrb.w	r9, [r2, #2]
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 80076d6:	4a10      	ldr	r2, [pc, #64]	; (8007718 <getCurrentPlanTotalNoOfPhases+0xf4>)
 80076d8:	4413      	add	r3, r2
 80076da:	791a      	ldrb	r2, [r3, #4]
 80076dc:	4b12      	ldr	r3, [pc, #72]	; (8007728 <getCurrentPlanTotalNoOfPhases+0x104>)
 80076de:	601a      	str	r2, [r3, #0]
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 80076e0:	f89a 3000 	ldrb.w	r3, [sl]
 80076e4:	429c      	cmp	r4, r3
 80076e6:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 80076ea:	da11      	bge.n	8007710 <getCurrentPlanTotalNoOfPhases+0xec>
		SDcardReadSeek("phase.txt", 17, seekCnt);
 80076ec:	2111      	movs	r1, #17
 80076ee:	480d      	ldr	r0, [pc, #52]	; (8007724 <getCurrentPlanTotalNoOfPhases+0x100>)
 80076f0:	f7fd f872 	bl	80047d8 <SDcardReadSeek>
		if(phaseId==readBytes[3]){
 80076f4:	f898 3003 	ldrb.w	r3, [r8, #3]
 80076f8:	454b      	cmp	r3, r9
 80076fa:	d10b      	bne.n	8007714 <getCurrentPlanTotalNoOfPhases+0xf0>
				phaseList[i+counterOfList]=readBytes[i];
 80076fc:	4a0e      	ldr	r2, [pc, #56]	; (8007738 <getCurrentPlanTotalNoOfPhases+0x114>)
 80076fe:	2300      	movs	r3, #0
 8007700:	443a      	add	r2, r7
 8007702:	f818 1003 	ldrb.w	r1, [r8, r3]
 8007706:	54d1      	strb	r1, [r2, r3]
			for(int i=0;i<15;i++)
 8007708:	3301      	adds	r3, #1
 800770a:	2b0f      	cmp	r3, #15
 800770c:	d1f9      	bne.n	8007702 <getCurrentPlanTotalNoOfPhases+0xde>
			counterOfList=counterOfList+18;
 800770e:	3712      	adds	r7, #18
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007710:	3601      	adds	r6, #1
 8007712:	e79f      	b.n	8007654 <getCurrentPlanTotalNoOfPhases+0x30>
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 8007714:	3401      	adds	r4, #1
 8007716:	e7e3      	b.n	80076e0 <getCurrentPlanTotalNoOfPhases+0xbc>
 8007718:	20003684 	.word	0x20003684
 800771c:	200000f0 	.word	0x200000f0
 8007720:	20000124 	.word	0x20000124
 8007724:	08009533 	.word	0x08009533
 8007728:	200000e8 	.word	0x200000e8
 800772c:	080094df 	.word	0x080094df
 8007730:	200039fe 	.word	0x200039fe
 8007734:	200000c0 	.word	0x200000c0
 8007738:	200037d8 	.word	0x200037d8
 800773c:	200002f4 	.word	0x200002f4
 8007740:	200000f4 	.word	0x200000f4
 8007744:	20000120 	.word	0x20000120

08007748 <getCurrentPlanPhases>:


void getCurrentPlanPhases()
{
 8007748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int cnt3=0;
	uint8_t phaseMapID;



	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 800774c:	4b35      	ldr	r3, [pc, #212]	; (8007824 <getCurrentPlanPhases+0xdc>)
	{
		if(plan_ID==phaseMapArray[cnt+2])
 800774e:	4d36      	ldr	r5, [pc, #216]	; (8007828 <getCurrentPlanPhases+0xe0>)
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007750:	6819      	ldr	r1, [r3, #0]
		if(plan_ID==phaseMapArray[cnt+2])
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <getCurrentPlanPhases+0xe4>)
 8007754:	781c      	ldrb	r4, [r3, #0]
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007756:	2200      	movs	r2, #0
 8007758:	2006      	movs	r0, #6
 800775a:	428a      	cmp	r2, r1
 800775c:	fb00 f302 	mul.w	r3, r0, r2
 8007760:	da09      	bge.n	8007776 <getCurrentPlanPhases+0x2e>
		if(plan_ID==phaseMapArray[cnt+2])
 8007762:	442b      	add	r3, r5
 8007764:	789e      	ldrb	r6, [r3, #2]
 8007766:	42a6      	cmp	r6, r4
 8007768:	d146      	bne.n	80077f8 <getCurrentPlanPhases+0xb0>
		{
			mapIDForCurrentPhases=phaseMapArray[cnt+3];
 800776a:	4a31      	ldr	r2, [pc, #196]	; (8007830 <getCurrentPlanPhases+0xe8>)
 800776c:	78d9      	ldrb	r1, [r3, #3]
 800776e:	6011      	str	r1, [r2, #0]
			total_Phases=phaseMapArray[cnt+4];
 8007770:	791a      	ldrb	r2, [r3, #4]
 8007772:	4b30      	ldr	r3, [pc, #192]	; (8007834 <getCurrentPlanPhases+0xec>)
 8007774:	601a      	str	r2, [r3, #0]
			break;
		}
		cnt=cnt+6;
	}

	uint8_t loopCnt=totalNoOfPhasesInMapID;
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <getCurrentPlanPhases+0xf0>)
	for (int mi=0;mi<loopCnt;mi++){

		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
		{

			Map_IDCurrent[cnt3]=phaseMapIDList[cnt2+2];// phaseID
 8007778:	4830      	ldr	r0, [pc, #192]	; (800783c <getCurrentPlanPhases+0xf4>)
	uint8_t loopCnt=totalNoOfPhasesInMapID;
 800777a:	681f      	ldr	r7, [r3, #0]
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 800777c:	4b2c      	ldr	r3, [pc, #176]	; (8007830 <getCurrentPlanPhases+0xe8>)
	for (int mi=0;mi<loopCnt;mi++){
 800777e:	2200      	movs	r2, #0
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 8007780:	681d      	ldr	r5, [r3, #0]
 8007782:	4b2f      	ldr	r3, [pc, #188]	; (8007840 <getCurrentPlanPhases+0xf8>)
	int cnt3=0;
 8007784:	4611      	mov	r1, r2
	for (int mi=0;mi<loopCnt;mi++){
 8007786:	b2fc      	uxtb	r4, r7
 8007788:	42a2      	cmp	r2, r4
 800778a:	db37      	blt.n	80077fc <getCurrentPlanPhases+0xb4>




	cnt2=0;
	count=0;
 800778c:	4a2d      	ldr	r2, [pc, #180]	; (8007844 <getCurrentPlanPhases+0xfc>)
	{

//		cnt1=0;
//		count=0;
		phaseMapID=Map_IDCurrent[cnt2];
		for (int k=0;k<total_Phases;k++)// total no of phases
 800778e:	4929      	ldr	r1, [pc, #164]	; (8007834 <getCurrentPlanPhases+0xec>)
 8007790:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007848 <getCurrentPlanPhases+0x100>
//			if(mapIDForCurrentPhases==phaseList[counterOfList+2])
			if(phaseMapID==phaseList[counterOfList+3])
			{
				for(int l=0;l<15;l++)
				{
					currentPlanPhases[l+count]=phaseList[l+counterOfList-2];
 8007794:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800784c <getCurrentPlanPhases+0x104>
		for (int k=0;k<total_Phases;k++)// total no of phases
 8007798:	f8d1 e000 	ldr.w	lr, [r1]
 800779c:	9201      	str	r2, [sp, #4]
	count=0;
 800779e:	2300      	movs	r3, #0
 80077a0:	6013      	str	r3, [r2, #0]
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 80077a2:	4619      	mov	r1, r3
 80077a4:	4618      	mov	r0, r3
	int counterOfList=0;
 80077a6:	461d      	mov	r5, r3
	int cnt1=0;
 80077a8:	461c      	mov	r4, r3
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 80077aa:	42b8      	cmp	r0, r7
 80077ac:	da1e      	bge.n	80077ec <getCurrentPlanPhases+0xa4>
		phaseMapID=Map_IDCurrent[cnt2];
 80077ae:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80077b2:	4a22      	ldr	r2, [pc, #136]	; (800783c <getCurrentPlanPhases+0xf4>)
 80077b4:	f816 a002 	ldrb.w	sl, [r6, r2]
		for (int k=0;k<total_Phases;k++)// total no of phases
 80077b8:	2600      	movs	r6, #0
 80077ba:	4576      	cmp	r6, lr
 80077bc:	da14      	bge.n	80077e8 <getCurrentPlanPhases+0xa0>
 80077be:	eb05 0c08 	add.w	ip, r5, r8
			if(phaseMapID==phaseList[counterOfList+3])
 80077c2:	f89c b003 	ldrb.w	fp, [ip, #3]
 80077c6:	45d3      	cmp	fp, sl
 80077c8:	d126      	bne.n	8007818 <getCurrentPlanPhases+0xd0>
 80077ca:	2300      	movs	r3, #0
					currentPlanPhases[l+count]=phaseList[l+counterOfList-2];
 80077cc:	eb01 0609 	add.w	r6, r1, r9
 80077d0:	eb0c 0a03 	add.w	sl, ip, r3
 80077d4:	f81a ac02 	ldrb.w	sl, [sl, #-2]
 80077d8:	f806 a003 	strb.w	sl, [r6, r3]
				for(int l=0;l<15;l++)
 80077dc:	3301      	adds	r3, #1
 80077de:	2b0f      	cmp	r3, #15
 80077e0:	d1f6      	bne.n	80077d0 <getCurrentPlanPhases+0x88>

				}
				count=count+18;
 80077e2:	3112      	adds	r1, #18
				cnt1++;
 80077e4:	3401      	adds	r4, #1
				 break;
 80077e6:	2301      	movs	r3, #1
	//    	 break;
		}
		cnt2=cnt2+3;
		cnt=cnt+6;
//		counterOfList=counterOfList+18;
		     if(total_Phases==cnt1)
 80077e8:	4574      	cmp	r4, lr
 80077ea:	d118      	bne.n	800781e <getCurrentPlanPhases+0xd6>
 80077ec:	b10b      	cbz	r3, 80077f2 <getCurrentPlanPhases+0xaa>
 80077ee:	9b01      	ldr	r3, [sp, #4]
 80077f0:	6019      	str	r1, [r3, #0]





}
 80077f2:	b003      	add	sp, #12
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 80077f8:	3201      	adds	r2, #1
 80077fa:	e7ae      	b.n	800775a <getCurrentPlanPhases+0x12>
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 80077fc:	785e      	ldrb	r6, [r3, #1]
 80077fe:	42ae      	cmp	r6, r5
 8007800:	d107      	bne.n	8007812 <getCurrentPlanPhases+0xca>
			Map_IDCurrent[cnt3]=phaseMapIDList[cnt2+2];// phaseID
 8007802:	789e      	ldrb	r6, [r3, #2]
 8007804:	5446      	strb	r6, [r0, r1]
			Map_IDCurrent[cnt3+1]=phaseMapIDList[cnt2+3];//phaseMapId
 8007806:	1846      	adds	r6, r0, r1
 8007808:	f893 e003 	ldrb.w	lr, [r3, #3]
 800780c:	f886 e001 	strb.w	lr, [r6, #1]
			cnt3=cnt3+3;
 8007810:	3103      	adds	r1, #3
	for (int mi=0;mi<loopCnt;mi++){
 8007812:	3201      	adds	r2, #1
 8007814:	3306      	adds	r3, #6
 8007816:	e7b7      	b.n	8007788 <getCurrentPlanPhases+0x40>
			counterOfList=counterOfList+18;
 8007818:	3512      	adds	r5, #18
		for (int k=0;k<total_Phases;k++)// total no of phases
 800781a:	3601      	adds	r6, #1
 800781c:	e7cd      	b.n	80077ba <getCurrentPlanPhases+0x72>
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 800781e:	3001      	adds	r0, #1
 8007820:	e7c3      	b.n	80077aa <getCurrentPlanPhases+0x62>
 8007822:	bf00      	nop
 8007824:	200000f0 	.word	0x200000f0
 8007828:	20003684 	.word	0x20003684
 800782c:	20003630 	.word	0x20003630
 8007830:	200000e0 	.word	0x200000e0
 8007834:	2000012c 	.word	0x2000012c
 8007838:	20000124 	.word	0x20000124
 800783c:	20003d66 	.word	0x20003d66
 8007840:	200039fe 	.word	0x200039fe
 8007844:	20003ad0 	.word	0x20003ad0
 8007848:	200037d8 	.word	0x200037d8
 800784c:	20003c44 	.word	0x20003c44

08007850 <DetectChange>:

/*----------------detect which side is being changed and which bit-----------*/
unsigned char DetectChange(unsigned char currentSide13Color,unsigned char previousSide13Color)
//		,unsigned char currentSide24Color,unsigned char previousSide24Color)
{
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
//
//	uint8_t sideNo1,sideNo2,sideNo3,sideNo4,color;
//
//	/*------------ for side13--------------*/
static unsigned char val,i,ChangeByte13;
ChangeByte13=0;
 8007852:	4a10      	ldr	r2, [pc, #64]	; (8007894 <DetectChange+0x44>)
for(i=0;i<8;i++)
 8007854:	4c10      	ldr	r4, [pc, #64]	; (8007898 <DetectChange+0x48>)
ChangeByte13=0;
 8007856:	2300      	movs	r3, #0
 8007858:	7013      	strb	r3, [r2, #0]
for(i=0;i<8;i++)
 800785a:	7023      	strb	r3, [r4, #0]
 800785c:	461d      	mov	r5, r3
 800785e:	461f      	mov	r7, r3
 8007860:	461e      	mov	r6, r3
{
val = 0x01 << i;
 8007862:	f04f 0c01 	mov.w	ip, #1

if( (currentSide13Color & val) != (previousSide13Color & val) )
 8007866:	4041      	eors	r1, r0
for(i=0;i<8;i++)
 8007868:	fa5f fe83 	uxtb.w	lr, r3
 800786c:	f1be 0f08 	cmp.w	lr, #8
 8007870:	d106      	bne.n	8007880 <DetectChange+0x30>
 8007872:	b107      	cbz	r7, 8007876 <DetectChange+0x26>
 8007874:	7016      	strb	r6, [r2, #0]
 8007876:	b10d      	cbz	r5, 800787c <DetectChange+0x2c>
 8007878:	2308      	movs	r3, #8
 800787a:	7023      	strb	r3, [r4, #0]




return ChangeByte13;
}
 800787c:	7810      	ldrb	r0, [r2, #0]
 800787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
val = 0x01 << i;
 8007880:	fa0c f503 	lsl.w	r5, ip, r3
 8007884:	b2ed      	uxtb	r5, r5
if( (currentSide13Color & val) != (previousSide13Color & val) )
 8007886:	420d      	tst	r5, r1
ChangeByte13 |= val;
 8007888:	bf1c      	itt	ne
 800788a:	432e      	orrne	r6, r5
 800788c:	2701      	movne	r7, #1
 800788e:	3301      	adds	r3, #1
 8007890:	2501      	movs	r5, #1
 8007892:	e7e9      	b.n	8007868 <DetectChange+0x18>
 8007894:	200000ac 	.word	0x200000ac
 8007898:	200000d0 	.word	0x200000d0

0800789c <sideChange>:
}


void sideChange(char previousSide13Color,char currentSide13Color
		,char previousSide24Color,char currentSide24Color)
{
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	460c      	mov	r4, r1
	char sideNoChanged,color;



		/*-------check side13------*/
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 80078a2:	4601      	mov	r1, r0
 80078a4:	4620      	mov	r0, r4
{
 80078a6:	461d      	mov	r5, r3
 80078a8:	4690      	mov	r8, r2
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 80078aa:	f7ff ffd1 	bl	8007850 <DetectChange>
 80078ae:	4e1e      	ldr	r6, [pc, #120]	; (8007928 <sideChange+0x8c>)
 80078b0:	4f1e      	ldr	r7, [pc, #120]	; (800792c <sideChange+0x90>)
	    if(currentSide13Color==0x88){
 80078b2:	2c88      	cmp	r4, #136	; 0x88
	    	changedSide=0;
 80078b4:	bf0a      	itet	eq
 80078b6:	2300      	moveq	r3, #0
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 80078b8:	7030      	strbne	r0, [r6, #0]
	    	changedSide=0;
 80078ba:	7033      	strbeq	r3, [r6, #0]
//	    {
//	    	changedSide=2;
//	    }
//	    changedSide=1;

		if(!(changedSide==0))
 80078bc:	7833      	ldrb	r3, [r6, #0]
 80078be:	b183      	cbz	r3, 80078e2 <sideChange+0x46>
		{

			/*------side 1 is changed-----*/
					side= changedSide >> 4;
 80078c0:	091a      	lsrs	r2, r3, #4
 80078c2:	401c      	ands	r4, r3
 80078c4:	703a      	strb	r2, [r7, #0]
					if(side == 0)
					{
						sideNoChanged=3;
						color=currentSide13Color & changedSide;
 80078c6:	b2e4      	uxtb	r4, r4
					if(side == 0)
 80078c8:	b91a      	cbnz	r2, 80078d2 <sideChange+0x36>
			}

			break;

		case 3:
			if(color== 0x03)//for green
 80078ca:	2c03      	cmp	r4, #3
 80078cc:	d123      	bne.n	8007916 <sideChange+0x7a>
			{
				Disp[28]=planS3GT;
 80078ce:	4b18      	ldr	r3, [pc, #96]	; (8007930 <sideChange+0x94>)
 80078d0:	e002      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x30)//for green
 80078d2:	2c30      	cmp	r4, #48	; 0x30
 80078d4:	d117      	bne.n	8007906 <sideChange+0x6a>
            Disp[28]=planS1GT;
 80078d6:	4b17      	ldr	r3, [pc, #92]	; (8007934 <sideChange+0x98>)
			{
				Disp[28]=planS4GT;
			}
			if(color== 0x04) //for yellow
			{
				Disp[28]=planA4GT;
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	4b17      	ldr	r3, [pc, #92]	; (8007938 <sideChange+0x9c>)
 80078dc:	771a      	strb	r2, [r3, #28]
 80078de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			changedSide =DetectChange(currentSide24Color,previousSide24Color);
 80078e2:	4628      	mov	r0, r5
 80078e4:	4641      	mov	r1, r8
 80078e6:	f7ff ffb3 	bl	8007850 <DetectChange>
				side=changedSide >> 4;
 80078ea:	0903      	lsrs	r3, r0, #4
 80078ec:	4005      	ands	r5, r0
			changedSide =DetectChange(currentSide24Color,previousSide24Color);
 80078ee:	7030      	strb	r0, [r6, #0]
				side=changedSide >> 4;
 80078f0:	703b      	strb	r3, [r7, #0]
					color=currentSide24Color & changedSide;
 80078f2:	b2ed      	uxtb	r5, r5
				if(side == 0)
 80078f4:	b91b      	cbnz	r3, 80078fe <sideChange+0x62>
			if(color== 0x03)//for green
 80078f6:	2d03      	cmp	r5, #3
 80078f8:	d111      	bne.n	800791e <sideChange+0x82>
				Disp[28]=planS4GT;
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <sideChange+0xa0>)
 80078fc:	e7ec      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x30)//for green
 80078fe:	2d30      	cmp	r5, #48	; 0x30
 8007900:	d105      	bne.n	800790e <sideChange+0x72>
				Disp[28]=planS2GT;
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <sideChange+0xa4>)
 8007904:	e7e8      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x40) //for yellow
 8007906:	2c40      	cmp	r4, #64	; 0x40
 8007908:	d1e9      	bne.n	80078de <sideChange+0x42>
				Disp[28]=planA1GT ;
 800790a:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <sideChange+0xa8>)
 800790c:	e7e4      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x40) //for yellow
 800790e:	2d40      	cmp	r5, #64	; 0x40
 8007910:	d1e5      	bne.n	80078de <sideChange+0x42>
				Disp[28]=planA2GT;
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <sideChange+0xac>)
 8007914:	e7e0      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x04) //for yellow
 8007916:	2c04      	cmp	r4, #4
 8007918:	d1e1      	bne.n	80078de <sideChange+0x42>
				Disp[28]=planA3GT;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <sideChange+0xb0>)
 800791c:	e7dc      	b.n	80078d8 <sideChange+0x3c>
			if(color== 0x04) //for yellow
 800791e:	2d04      	cmp	r5, #4
 8007920:	d1dd      	bne.n	80078de <sideChange+0x42>
				Disp[28]=planA4GT;
 8007922:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <sideChange+0xb4>)
 8007924:	e7d8      	b.n	80078d8 <sideChange+0x3c>
 8007926:	bf00      	nop
 8007928:	200039cd 	.word	0x200039cd
 800792c:	200015e7 	.word	0x200015e7
 8007930:	200039fc 	.word	0x200039fc
 8007934:	200037bc 	.word	0x200037bc
 8007938:	200010bd 	.word	0x200010bd
 800793c:	20003c2b 	.word	0x20003c2b
 8007940:	200015ed 	.word	0x200015ed
 8007944:	20003c2c 	.word	0x20003c2c
 8007948:	200039f4 	.word	0x200039f4
 800794c:	20003ad6 	.word	0x20003ad6
 8007950:	20003ae0 	.word	0x20003ae0

08007954 <clearPrimaryAndSecByte>:

}


void clearPrimaryAndSecByte()
{
 8007954:	b530      	push	{r4, r5, lr}

	int x=0;
 8007956:	2300      	movs	r3, #0
	for(;x<6;x++)
	{
	primaryHorizontalByte[x] = 0x00;
 8007958:	4d08      	ldr	r5, [pc, #32]	; (800797c <clearPrimaryAndSecByte+0x28>)
	secondaryHorizontalByte[x] = 0x00;
 800795a:	4c09      	ldr	r4, [pc, #36]	; (8007980 <clearPrimaryAndSecByte+0x2c>)
	primaryVerticalByte[x] = 0x00;
 800795c:	4809      	ldr	r0, [pc, #36]	; (8007984 <clearPrimaryAndSecByte+0x30>)
	secondaryVerticalByte[x] =  0x00;
 800795e:	490a      	ldr	r1, [pc, #40]	; (8007988 <clearPrimaryAndSecByte+0x34>)
	primaryHorizontalByte[x] = 0x00;
 8007960:	461a      	mov	r2, r3
 8007962:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	secondaryHorizontalByte[x] = 0x00;
 8007966:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	primaryVerticalByte[x] = 0x00;
 800796a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	secondaryVerticalByte[x] =  0x00;
 800796e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(;x<6;x++)
 8007972:	3301      	adds	r3, #1
 8007974:	2b06      	cmp	r3, #6
 8007976:	d1f4      	bne.n	8007962 <clearPrimaryAndSecByte+0xe>

	}
}
 8007978:	bd30      	pop	{r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	20003644 	.word	0x20003644
 8007980:	200035f0 	.word	0x200035f0
 8007984:	200035d8 	.word	0x200035d8
 8007988:	200015f0 	.word	0x200015f0

0800798c <function8>:
	fileNo = 111;
 800798c:	4a76      	ldr	r2, [pc, #472]	; (8007b68 <function8+0x1dc>)
	frame[29] = secondaryVerticalByte[1];//VerticalSide3
 800798e:	4877      	ldr	r0, [pc, #476]	; (8007b6c <function8+0x1e0>)
	frame[30] = hundredPlaceSegment[1];
 8007990:	4977      	ldr	r1, [pc, #476]	; (8007b70 <function8+0x1e4>)
int function8() {
 8007992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fileNo = 111;
 8007996:	236f      	movs	r3, #111	; 0x6f
	frame[0] = 0x7E;
 8007998:	4c76      	ldr	r4, [pc, #472]	; (8007b74 <function8+0x1e8>)
	fileNo = 111;
 800799a:	7013      	strb	r3, [r2, #0]
	frame[0] = 0x7E;
 800799c:	227e      	movs	r2, #126	; 0x7e
 800799e:	7022      	strb	r2, [r4, #0]
	frame[1] = 0x7E;
 80079a0:	7062      	strb	r2, [r4, #1]
	frame[3] = 66;   //byte size 2
 80079a2:	2242      	movs	r2, #66	; 0x42
 80079a4:	70e2      	strb	r2, [r4, #3]
	frame[4] = junctionId;   //junction id
 80079a6:	4a74      	ldr	r2, [pc, #464]	; (8007b78 <function8+0x1ec>)
	frame[6] = fileNo;   //file_num
 80079a8:	71a3      	strb	r3, [r4, #6]
	frame[4] = junctionId;   //junction id
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	7122      	strb	r2, [r4, #4]
	frame[7] = 0x08;   //function num
 80079ae:	2308      	movs	r3, #8
	frame[5] = programVersionNo;   //program_version_number
 80079b0:	4a72      	ldr	r2, [pc, #456]	; (8007b7c <function8+0x1f0>)
	frame[7] = 0x08;   //function num
 80079b2:	71e3      	strb	r3, [r4, #7]
	frame[8] = Disp[0];   //side1
 80079b4:	4b72      	ldr	r3, [pc, #456]	; (8007b80 <function8+0x1f4>)
	frame[5] = programVersionNo;   //program_version_number
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	7162      	strb	r2, [r4, #5]
	frame[8] = Disp[0];   //side1
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	7222      	strb	r2, [r4, #8]
	frame[9] = Disp[1];   //side2
 80079be:	785a      	ldrb	r2, [r3, #1]
 80079c0:	7262      	strb	r2, [r4, #9]
	frame[10] = Disp[2];   //side3
 80079c2:	789a      	ldrb	r2, [r3, #2]
 80079c4:	72a2      	strb	r2, [r4, #10]
	frame[11] = Disp[3];   //side4
 80079c6:	78da      	ldrb	r2, [r3, #3]
 80079c8:	72e2      	strb	r2, [r4, #11]
	frame[13] = Disp[4];   //side13
 80079ca:	791a      	ldrb	r2, [r3, #4]
 80079cc:	7362      	strb	r2, [r4, #13]
	frame[14] =Disp[5];   //side24
 80079ce:	795a      	ldrb	r2, [r3, #5]
 80079d0:	73a2      	strb	r2, [r4, #14]
	frame[16] =Disp[25];//readBytes[12];   //padestrainTime
 80079d2:	7e5a      	ldrb	r2, [r3, #25]
 80079d4:	7422      	strb	r2, [r4, #16]
	frame[18] = Disp[25];//readBytes[1];   //planMode
 80079d6:	7e5b      	ldrb	r3, [r3, #25]
	frame[17] = plan_ID;//Disp[25];//readBytes[0];   //planNumb
 80079d8:	4a6a      	ldr	r2, [pc, #424]	; (8007b84 <function8+0x1f8>)
	frame[18] = Disp[25];//readBytes[1];   //planMode
 80079da:	74a3      	strb	r3, [r4, #18]
	frame[19] = clearenceMode;
 80079dc:	4b6a      	ldr	r3, [pc, #424]	; (8007b88 <function8+0x1fc>)
	frame[17] = plan_ID;//Disp[25];//readBytes[0];   //planNumb
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	7462      	strb	r2, [r4, #17]
	frame[2] = 0x00;   //byte size 1
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	f884 8002 	strb.w	r8, [r4, #2]
	frame[12] = 0;   //side5
 80079ea:	f884 800c 	strb.w	r8, [r4, #12]
	frame[15] =0;   //side5
 80079ee:	f884 800f 	strb.w	r8, [r4, #15]
	frame[19] = clearenceMode;
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	74e3      	strb	r3, [r4, #19]
	frame[20] = sTime.Hours ;
 80079f6:	4b65      	ldr	r3, [pc, #404]	; (8007b8c <function8+0x200>)
	frame[27] = primaryVerticalByte[1];//VerticalSide1
 80079f8:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8007bbc <function8+0x230>
	frame[20] = sTime.Hours ;
 80079fc:	781a      	ldrb	r2, [r3, #0]
	frame[21] = sTime.Minutes ;
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	7563      	strb	r3, [r4, #21]
	frame[22] = sDate.Date;
 8007a02:	4b63      	ldr	r3, [pc, #396]	; (8007b90 <function8+0x204>)
	frame[20] = sTime.Hours ;
 8007a04:	7522      	strb	r2, [r4, #20]
	frame[22] = sDate.Date;
 8007a06:	789a      	ldrb	r2, [r3, #2]
 8007a08:	75a2      	strb	r2, [r4, #22]
	frame[23] = sDate.Month;//'1'
 8007a0a:	785a      	ldrb	r2, [r3, #1]
	frame[24] = sDate.Year;//'0' ; //'5' ;
 8007a0c:	78db      	ldrb	r3, [r3, #3]
 8007a0e:	7623      	strb	r3, [r4, #24]
	frame[25] = phase_ID;
 8007a10:	4b60      	ldr	r3, [pc, #384]	; (8007b94 <function8+0x208>)
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007a12:	4d61      	ldr	r5, [pc, #388]	; (8007b98 <function8+0x20c>)
	frame[25] = phase_ID;
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	7663      	strb	r3, [r4, #25]
	frame[26] = 0x30;//primaryHorizontalByte[1];//aspectColorFeedback  HorizontalSide1
 8007a18:	2330      	movs	r3, #48	; 0x30
 8007a1a:	76a3      	strb	r3, [r4, #26]
	frame[27] = primaryVerticalByte[1];//VerticalSide1
 8007a1c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8007a20:	76e3      	strb	r3, [r4, #27]
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007a22:	686b      	ldr	r3, [r5, #4]
	frame[23] = sDate.Month;//'1'
 8007a24:	75e2      	strb	r2, [r4, #23]
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007a26:	7723      	strb	r3, [r4, #28]
	frame[31] = tenPlaceSegment[1];
 8007a28:	4a5c      	ldr	r2, [pc, #368]	; (8007b9c <function8+0x210>)
	frame[29] = secondaryVerticalByte[1];//VerticalSide3
 8007a2a:	6843      	ldr	r3, [r0, #4]
 8007a2c:	7763      	strb	r3, [r4, #29]
	frame[30] = hundredPlaceSegment[1];
 8007a2e:	684b      	ldr	r3, [r1, #4]
 8007a30:	77a3      	strb	r3, [r4, #30]
	frame[31] = tenPlaceSegment[1];
 8007a32:	6853      	ldr	r3, [r2, #4]
 8007a34:	77e3      	strb	r3, [r4, #31]
	frame[32] = unitPlaceSegment[1];
 8007a36:	4b5a      	ldr	r3, [pc, #360]	; (8007ba0 <function8+0x214>)
 8007a38:	685f      	ldr	r7, [r3, #4]
 8007a3a:	f884 7020 	strb.w	r7, [r4, #32]
	frame[33] = primaryHorizontalByte[2]; //side2  HorizontalSide2
 8007a3e:	4f59      	ldr	r7, [pc, #356]	; (8007ba4 <function8+0x218>)
 8007a40:	7a3e      	ldrb	r6, [r7, #8]
 8007a42:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	frame[34] = primaryVerticalByte[2];//  VerticalSide2
 8007a46:	f89e 6008 	ldrb.w	r6, [lr, #8]
 8007a4a:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
	frame[35] = secondaryHorizontalByte[2];
 8007a4e:	7a2e      	ldrb	r6, [r5, #8]
 8007a50:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
	frame[36] = secondaryVerticalByte[2];
 8007a54:	7a06      	ldrb	r6, [r0, #8]
 8007a56:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	frame[37] = hundredPlaceSegment[2];
 8007a5a:	7a0e      	ldrb	r6, [r1, #8]
 8007a5c:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
	frame[38] = tenPlaceSegment[2];
 8007a60:	7a16      	ldrb	r6, [r2, #8]
 8007a62:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
	frame[39] = unitPlaceSegment[2];
 8007a66:	7a1e      	ldrb	r6, [r3, #8]
 8007a68:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
	frame[40] = primaryHorizontalByte[3]; //side3
 8007a6c:	7b3e      	ldrb	r6, [r7, #12]
 8007a6e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
	frame[41] = primaryVerticalByte[3];
 8007a72:	f89e 600c 	ldrb.w	r6, [lr, #12]
 8007a76:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
	frame[42] = secondaryHorizontalByte[3];
 8007a7a:	7b2e      	ldrb	r6, [r5, #12]
 8007a7c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
	frame[43] = secondaryVerticalByte[3];
 8007a80:	7b06      	ldrb	r6, [r0, #12]
 8007a82:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
	frame[44] = hundredPlaceSegment[3];
 8007a86:	7b0e      	ldrb	r6, [r1, #12]
 8007a88:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
	frame[45] = tenPlaceSegment[3];
 8007a8c:	7b16      	ldrb	r6, [r2, #12]
 8007a8e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
	frame[46] = unitPlaceSegment[3];
 8007a92:	7b1e      	ldrb	r6, [r3, #12]
 8007a94:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
	frame[47] = primaryHorizontalByte[4]; //side4
 8007a98:	7c3e      	ldrb	r6, [r7, #16]
 8007a9a:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
	frame[48] = primaryVerticalByte[4];
 8007a9e:	f89e 6010 	ldrb.w	r6, [lr, #16]
 8007aa2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	frame[49] = secondaryHorizontalByte[4];
 8007aa6:	7c2e      	ldrb	r6, [r5, #16]
 8007aa8:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
	frame[50] = secondaryVerticalByte[4];
 8007aac:	7c06      	ldrb	r6, [r0, #16]
 8007aae:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    frame[51] = hundredPlaceSegment[4];
 8007ab2:	7c0e      	ldrb	r6, [r1, #16]
 8007ab4:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
    frame[52] = tenPlaceSegment[4];
 8007ab8:	7c16      	ldrb	r6, [r2, #16]
 8007aba:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    frame[53] = unitPlaceSegment[4];
 8007abe:	7c1e      	ldrb	r6, [r3, #16]
    frame[60] = unitPlaceSegment[5];
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    frame[61] =powerStatus;
 8007ac6:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <function8+0x21c>)
	frame[54] = primaryHorizontalByte[5]; //side5
 8007ac8:	697f      	ldr	r7, [r7, #20]
    frame[61] =powerStatus;
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    frame[62] =communicationStatus;
 8007ad0:	4b36      	ldr	r3, [pc, #216]	; (8007bac <function8+0x220>)
    frame[58] = hundredPlaceSegment[5];
 8007ad2:	6949      	ldr	r1, [r1, #20]
    frame[62] =communicationStatus;
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    frame[63] =mapIDForCurrentPhases;//side5
 8007ada:	4b35      	ldr	r3, [pc, #212]	; (8007bb0 <function8+0x224>)
    frame[59] = tenPlaceSegment[5];
 8007adc:	6952      	ldr	r2, [r2, #20]
    frame[63] =mapIDForCurrentPhases;//side5
 8007ade:	681b      	ldr	r3, [r3, #0]
	frame[54] = primaryHorizontalByte[5]; //side5
 8007ae0:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
	frame[56] = secondaryHorizontalByte[5];
 8007ae4:	696d      	ldr	r5, [r5, #20]
	frame[55] = primaryVerticalByte[5];
 8007ae6:	f8de 7014 	ldr.w	r7, [lr, #20]
	frame[57] = secondaryVerticalByte[5];
 8007aea:	6940      	ldr	r0, [r0, #20]
    frame[63] =mapIDForCurrentPhases;//side5
 8007aec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    frame[64] =1;
 8007af0:	2301      	movs	r3, #1
    frame[58] = hundredPlaceSegment[5];
 8007af2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    frame[59] = tenPlaceSegment[5];
 8007af6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
    frame[64] =1;
 8007afa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    frame[65] =1;
 8007afe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    frame[66] =1;
 8007b02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    frame[67] =1;
 8007b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    frame[68] =1;//TBD
 8007b0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    frame[69] =1;
 8007b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    frame[53] = unitPlaceSegment[4];
 8007b12:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
	frame[55] = primaryVerticalByte[5];
 8007b16:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
	frame[56] = secondaryHorizontalByte[5];
 8007b1a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	frame[57] = secondaryVerticalByte[5];
 8007b1e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007b22:	f7fd fadb 	bl	80050dc <crcApi>
	frame[71] = 0x7D;   // ending delimeter
 8007b26:	237d      	movs	r3, #125	; 0x7d
 8007b28:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	frame[72] = 0x7D;   //ending delimeter
 8007b2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	frame[73] = 0x0D;   // ending delimeter
 8007b30:	230d      	movs	r3, #13
 8007b32:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007b36:	43c0      	mvns	r0, r0
    frame[74] = 0x0A;   //ending delimeter
 8007b38:	230a      	movs	r3, #10
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007b3a:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    frame[74] = 0x0A;   //ending delimeter
 8007b3e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 72, 5000); //For ESP
 8007b42:	4621      	mov	r1, r4
 8007b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b48:	2248      	movs	r2, #72	; 0x48
 8007b4a:	481a      	ldr	r0, [pc, #104]	; (8007bb4 <function8+0x228>)
 8007b4c:	f7fa fcc8 	bl	80024e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) frame, 72, 5000); //For BLE
 8007b50:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b54:	2248      	movs	r2, #72	; 0x48
 8007b56:	4621      	mov	r1, r4
 8007b58:	4817      	ldr	r0, [pc, #92]	; (8007bb8 <function8+0x22c>)
 8007b5a:	f7fa fcc1 	bl	80024e0 <HAL_UART_Transmit>
	clearPrimaryAndSecByte();
 8007b5e:	f7ff fef9 	bl	8007954 <clearPrimaryAndSecByte>
}
 8007b62:	4640      	mov	r0, r8
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	2000000c 	.word	0x2000000c
 8007b6c:	200015f0 	.word	0x200015f0
 8007b70:	20003740 	.word	0x20003740
 8007b74:	20003ae1 	.word	0x20003ae1
 8007b78:	2000000d 	.word	0x2000000d
 8007b7c:	2000010d 	.word	0x2000010d
 8007b80:	200010bd 	.word	0x200010bd
 8007b84:	20003630 	.word	0x20003630
 8007b88:	200000b5 	.word	0x200000b5
 8007b8c:	20000ea4 	.word	0x20000ea4
 8007b90:	2000115a 	.word	0x2000115a
 8007b94:	20003acc 	.word	0x20003acc
 8007b98:	200035f0 	.word	0x200035f0
 8007b9c:	200037c0 	.word	0x200037c0
 8007ba0:	20001608 	.word	0x20001608
 8007ba4:	20003644 	.word	0x20003644
 8007ba8:	2000010c 	.word	0x2000010c
 8007bac:	2000007c 	.word	0x2000007c
 8007bb0:	200000e0 	.word	0x200000e0
 8007bb4:	20000e10 	.word	0x20000e10
 8007bb8:	200010e8 	.word	0x200010e8
 8007bbc:	200035d8 	.word	0x200035d8

08007bc0 <findSide>:
    side_1= side_1 << 4 ; //left shift 4 bit
    side_3= side13Color ^ side_1; //

    side_2= side24Color >> 4; // right shift 4 bit
    side_2=side_2 << 4 ; //left shift 4 bit
    side_4=  side24Color ^ sideNo2; //
 8007bc0:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <findSide+0x80>)
    side_1= side_1 << 4 ; //left shift 4 bit
 8007bc2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    side_4=  side24Color ^ sideNo2; //
 8007bc6:	781b      	ldrb	r3, [r3, #0]


    if(side_1==0x30) // green side1
 8007bc8:	2830      	cmp	r0, #48	; 0x30
{
 8007bca:	b510      	push	{r4, lr}
    side_2=side_2 << 4 ; //left shift 4 bit
 8007bcc:	f001 04f0 	and.w	r4, r1, #240	; 0xf0
    side_4=  side24Color ^ sideNo2; //
 8007bd0:	ea81 0103 	eor.w	r1, r1, r3
    if(side_1==0x30) // green side1
 8007bd4:	d128      	bne.n	8007c28 <findSide+0x68>
    {
       	Disp[28]=planS1GT;
 8007bd6:	4b1b      	ldr	r3, [pc, #108]	; (8007c44 <findSide+0x84>)
    	Disp[5]=Color[2];
    	phase_ID=Color[3];
    }
    if(side_1==0x40) // yellow side1
    {
    			Disp[28]=planA1GT;
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <findSide+0x88>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	7713      	strb	r3, [r2, #28]
    			Disp[4]=Color[1];
 8007bde:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <findSide+0x8c>)
 8007be0:	7858      	ldrb	r0, [r3, #1]
 8007be2:	7110      	strb	r0, [r2, #4]
    			Disp[5]=Color[2];
 8007be4:	7898      	ldrb	r0, [r3, #2]
 8007be6:	7150      	strb	r0, [r2, #5]
    			phase_ID=Color[3];
 8007be8:	78da      	ldrb	r2, [r3, #3]
 8007bea:	4b19      	ldr	r3, [pc, #100]	; (8007c50 <findSide+0x90>)
 8007bec:	701a      	strb	r2, [r3, #0]
    }

    if(side_2==0x30) // green side2
 8007bee:	2c30      	cmp	r4, #48	; 0x30
 8007bf0:	d11e      	bne.n	8007c30 <findSide+0x70>
     {
        Disp[28]=planS2GT;
 8007bf2:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <findSide+0x94>)
     	Disp[5]=Color[2];
     	phase_ID=Color[3];
     }
     if(side_2==0x40) // yellow side2
     {
     			Disp[28]=planA2GT;
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <findSide+0x88>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	7713      	strb	r3, [r2, #28]
     			Disp[4]=Color[1];
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <findSide+0x8c>)
 8007bfc:	7858      	ldrb	r0, [r3, #1]
 8007bfe:	7110      	strb	r0, [r2, #4]
     			Disp[5]=Color[2];
 8007c00:	7898      	ldrb	r0, [r3, #2]
 8007c02:	7150      	strb	r0, [r2, #5]
     			phase_ID=Color[3];
 8007c04:	78da      	ldrb	r2, [r3, #3]
 8007c06:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <findSide+0x90>)
 8007c08:	701a      	strb	r2, [r3, #0]
      			Disp[28]=planA3GT;
      			Disp[4]=Color[1];
      			Disp[5]=Color[2];
      			phase_ID=Color[3];
      }
      if(side_4==0x30) // green side4
 8007c0a:	2930      	cmp	r1, #48	; 0x30
 8007c0c:	d114      	bne.n	8007c38 <findSide+0x78>
       {
          	Disp[28]=planS4GT;
 8007c0e:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <findSide+0x98>)
       	Disp[5]=Color[2];
       	phase_ID=Color[3];
       }
       if(side_4==0x40) // yellow side4
       {
       			Disp[28]=planA4GT;
 8007c10:	4a0d      	ldr	r2, [pc, #52]	; (8007c48 <findSide+0x88>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	7713      	strb	r3, [r2, #28]
       			Disp[4]=Color[1];
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <findSide+0x8c>)
 8007c18:	7859      	ldrb	r1, [r3, #1]
 8007c1a:	7111      	strb	r1, [r2, #4]
       			Disp[5]=Color[2];
 8007c1c:	7899      	ldrb	r1, [r3, #2]
 8007c1e:	7151      	strb	r1, [r2, #5]
       			phase_ID=Color[3];
 8007c20:	78da      	ldrb	r2, [r3, #3]
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <findSide+0x90>)
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	bd10      	pop	{r4, pc}
    if(side_1==0x40) // yellow side1
 8007c28:	2840      	cmp	r0, #64	; 0x40
 8007c2a:	d1e0      	bne.n	8007bee <findSide+0x2e>
    			Disp[28]=planA1GT;
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <findSide+0x9c>)
 8007c2e:	e7d3      	b.n	8007bd8 <findSide+0x18>
     if(side_2==0x40) // yellow side2
 8007c30:	2c40      	cmp	r4, #64	; 0x40
 8007c32:	d1ea      	bne.n	8007c0a <findSide+0x4a>
     			Disp[28]=planA2GT;
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <findSide+0xa0>)
 8007c36:	e7dd      	b.n	8007bf4 <findSide+0x34>
       if(side_4==0x40) // yellow side4
 8007c38:	2940      	cmp	r1, #64	; 0x40
 8007c3a:	d1f4      	bne.n	8007c26 <findSide+0x66>
       			Disp[28]=planA4GT;
 8007c3c:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <findSide+0xa4>)
 8007c3e:	e7e7      	b.n	8007c10 <findSide+0x50>
 8007c40:	20003680 	.word	0x20003680
 8007c44:	200037bc 	.word	0x200037bc
 8007c48:	200010bd 	.word	0x200010bd
 8007c4c:	20005206 	.word	0x20005206
 8007c50:	20003acc 	.word	0x20003acc
 8007c54:	200015ed 	.word	0x200015ed
 8007c58:	20003c2b 	.word	0x20003c2b
 8007c5c:	20003c2c 	.word	0x20003c2c
 8007c60:	200039f4 	.word	0x200039f4
 8007c64:	20003ae0 	.word	0x20003ae0

08007c68 <resetVariables>:
}

void resetVariables()
{

	junctionId = 111;
 8007c68:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <resetVariables+0x54>)
 8007c6a:	226f      	movs	r2, #111	; 0x6f
 8007c6c:	701a      	strb	r2, [r3, #0]
	noOfDateSlots=0;
 8007c6e:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <resetVariables+0x58>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	7013      	strb	r3, [r2, #0]
	dateSlotNo=0;
 8007c74:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <resetVariables+0x5c>)
 8007c76:	7013      	strb	r3, [r2, #0]
	dateID=0;
 8007c78:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <resetVariables+0x60>)
 8007c7a:	7013      	strb	r3, [r2, #0]
	dayID=0;
 8007c7c:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <resetVariables+0x64>)
 8007c7e:	7013      	strb	r3, [r2, #0]
	totalNoOfPlans=0;
 8007c80:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <resetVariables+0x68>)
 8007c82:	7013      	strb	r3, [r2, #0]
	totalNoOfPhases=0;
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <resetVariables+0x6c>)
 8007c86:	7013      	strb	r3, [r2, #0]
	noOfDaySlots=0;
 8007c88:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <resetVariables+0x70>)
 8007c8a:	7013      	strb	r3, [r2, #0]
	daySlotNo=0;
 8007c8c:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <resetVariables+0x74>)
 8007c8e:	7013      	strb	r3, [r2, #0]
	noOfSides = 0;
 8007c90:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <resetVariables+0x78>)
 8007c92:	7013      	strb	r3, [r2, #0]
	noOfPlans = 0;
 8007c94:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <resetVariables+0x7c>)
 8007c96:	7013      	strb	r3, [r2, #0]
	noOfPhase = 0;
 8007c98:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <resetVariables+0x80>)
 8007c9a:	7013      	strb	r3, [r2, #0]
	programVersionNo = 0;
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <resetVariables+0x84>)
 8007c9e:	7013      	strb	r3, [r2, #0]
	programVersionNoLast = 0;
 8007ca0:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <resetVariables+0x88>)
 8007ca2:	7013      	strb	r3, [r2, #0]
	registrationStatus = 0;
 8007ca4:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <resetVariables+0x8c>)
 8007ca6:	7013      	strb	r3, [r2, #0]
	totalPhase=0;
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <resetVariables+0x90>)
 8007caa:	7013      	strb	r3, [r2, #0]
	padestarianTime = 10;
 8007cac:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <resetVariables+0x94>)
 8007cae:	210a      	movs	r1, #10
 8007cb0:	6011      	str	r1, [r2, #0]
	phaseMapCnt=0;
 8007cb2:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <resetVariables+0x98>)
 8007cb4:	6013      	str	r3, [r2, #0]
	phaseMapCnt1=0;//total no of phases in phase.txt
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <resetVariables+0x9c>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	4770      	bx	lr
 8007cbc:	2000000d 	.word	0x2000000d
 8007cc0:	200000e4 	.word	0x200000e4
 8007cc4:	200000bd 	.word	0x200000bd
 8007cc8:	200000bc 	.word	0x200000bc
 8007ccc:	200000be 	.word	0x200000be
 8007cd0:	20000128 	.word	0x20000128
 8007cd4:	20000120 	.word	0x20000120
 8007cd8:	200000e5 	.word	0x200000e5
 8007cdc:	200000bf 	.word	0x200000bf
 8007ce0:	200000ed 	.word	0x200000ed
 8007ce4:	200000ec 	.word	0x200000ec
 8007ce8:	200000e6 	.word	0x200000e6
 8007cec:	2000010d 	.word	0x2000010d
 8007cf0:	2000010e 	.word	0x2000010e
 8007cf4:	2000010f 	.word	0x2000010f
 8007cf8:	20000129 	.word	0x20000129
 8007cfc:	20000018 	.word	0x20000018
 8007d00:	200000f0 	.word	0x200000f0
 8007d04:	200000f4 	.word	0x200000f4

08007d08 <program3>:
void program3() {
 8007d08:	b538      	push	{r3, r4, r5, lr}
	resetVariables();
 8007d0a:	f7ff ffad 	bl	8007c68 <resetVariables>
	f_unlink ("infoN.txt");
 8007d0e:	4860      	ldr	r0, [pc, #384]	; (8007e90 <program3+0x188>)
			planNo = 1;
 8007d10:	4d60      	ldr	r5, [pc, #384]	; (8007e94 <program3+0x18c>)
	f_unlink ("infoN.txt");
 8007d12:	f7fc fb8f 	bl	8004434 <f_unlink>
	f_unlink ("date.txt");
 8007d16:	4860      	ldr	r0, [pc, #384]	; (8007e98 <program3+0x190>)
 8007d18:	f7fc fb8c 	bl	8004434 <f_unlink>
	f_unlink ("day.txt");
 8007d1c:	485f      	ldr	r0, [pc, #380]	; (8007e9c <program3+0x194>)
 8007d1e:	f7fc fb89 	bl	8004434 <f_unlink>
	f_unlink ("planN.txt");
 8007d22:	485f      	ldr	r0, [pc, #380]	; (8007ea0 <program3+0x198>)
 8007d24:	f7fc fb86 	bl	8004434 <f_unlink>
	f_unlink ("mapDate.txt");
 8007d28:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <program3+0x19c>)
 8007d2a:	f7fc fb83 	bl	8004434 <f_unlink>
	f_unlink ("mapDay.txt");
 8007d2e:	485e      	ldr	r0, [pc, #376]	; (8007ea8 <program3+0x1a0>)
 8007d30:	f7fc fb80 	bl	8004434 <f_unlink>
	f_unlink ("phase.txt");
 8007d34:	485d      	ldr	r0, [pc, #372]	; (8007eac <program3+0x1a4>)
 8007d36:	f7fc fb7d 	bl	8004434 <f_unlink>
	f_unlink ("mapPhase.txt");
 8007d3a:	485d      	ldr	r0, [pc, #372]	; (8007eb0 <program3+0x1a8>)
 8007d3c:	f7fc fb7a 	bl	8004434 <f_unlink>
	f_unlink ("SlaveD.txt");
 8007d40:	485c      	ldr	r0, [pc, #368]	; (8007eb4 <program3+0x1ac>)
 8007d42:	f7fc fb77 	bl	8004434 <f_unlink>
	int temp = 1;
 8007d46:	2401      	movs	r4, #1
		switch (temp) {
 8007d48:	1e63      	subs	r3, r4, #1
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	f200 809d 	bhi.w	8007e8a <program3+0x182>
 8007d50:	e8df f003 	tbb	[pc, r3]
 8007d54:	1b150f05 	.word	0x1b150f05
 8007d58:	45392f25 	.word	0x45392f25
 8007d5c:	594f      	.short	0x594f
			HAL_Delay(500);
 8007d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d62:	f7f8 fc2f 	bl	80005c4 <HAL_Delay>
			if(temp2 == function11N()) //basic info function
 8007d66:	f7fe f957 	bl	8006018 <function11N>
 8007d6a:	2801      	cmp	r0, #1
 8007d6c:	d1ec      	bne.n	8007d48 <program3+0x40>
				temp++;
 8007d6e:	2402      	movs	r4, #2
 8007d70:	e7ea      	b.n	8007d48 <program3+0x40>
			if (temp2 == function12()) //date slot function
 8007d72:	f7fe fa57 	bl	8006224 <function12>
 8007d76:	2801      	cmp	r0, #1
 8007d78:	d1f9      	bne.n	8007d6e <program3+0x66>
				temp++;
 8007d7a:	2403      	movs	r4, #3
 8007d7c:	e7e4      	b.n	8007d48 <program3+0x40>
			if (temp2 == function13()) //day slot function
 8007d7e:	f7fe fb31 	bl	80063e4 <function13>
 8007d82:	2801      	cmp	r0, #1
 8007d84:	d1f9      	bne.n	8007d7a <program3+0x72>
			temp++;
 8007d86:	2404      	movs	r4, #4
 8007d88:	e7de      	b.n	8007d48 <program3+0x40>
			HAL_Delay(500);
 8007d8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d8e:	f7f8 fc19 	bl	80005c4 <HAL_Delay>
			if (temp2 == function14())  //plan info function
 8007d92:	f7fe fc25 	bl	80065e0 <function14>
				temp++;
 8007d96:	2801      	cmp	r0, #1
 8007d98:	bf08      	it	eq
 8007d9a:	2405      	moveq	r4, #5
 8007d9c:	e7d4      	b.n	8007d48 <program3+0x40>
			HAL_Delay(500);
 8007d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007da2:	f7f8 fc0f 	bl	80005c4 <HAL_Delay>
			if (temp2 == function15()) // map date function
 8007da6:	f7fe fcf9 	bl	800679c <function15>
				temp++;
 8007daa:	2801      	cmp	r0, #1
 8007dac:	bf08      	it	eq
 8007dae:	2406      	moveq	r4, #6
 8007db0:	e7ca      	b.n	8007d48 <program3+0x40>
				HAL_Delay(500);
 8007db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007db6:	f7f8 fc05 	bl	80005c4 <HAL_Delay>
				if (temp2 == function16()) //map day function
 8007dba:	f7fe fe23 	bl	8006a04 <function16>
					temp++;
 8007dbe:	2801      	cmp	r0, #1
 8007dc0:	bf08      	it	eq
 8007dc2:	2407      	moveq	r4, #7
 8007dc4:	e7c0      	b.n	8007d48 <program3+0x40>
			HAL_Delay(500);
 8007dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dca:	f7f8 fbfb 	bl	80005c4 <HAL_Delay>
			planNo = 1;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	702b      	strb	r3, [r5, #0]
			if (temp2 == function_10())	//phase info
 8007dd2:	f7fd feb7 	bl	8005b44 <function_10>
				temp++;
 8007dd6:	2801      	cmp	r0, #1
 8007dd8:	bf08      	it	eq
 8007dda:	2408      	moveq	r4, #8
 8007ddc:	e7b4      	b.n	8007d48 <program3+0x40>
			HAL_Delay(500);
 8007dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007de2:	f7f8 fbef 	bl	80005c4 <HAL_Delay>
			if(temp2 == function17()) //phaseMap
 8007de6:	f7ff f9b5 	bl	8007154 <function17>
			temp++;
 8007dea:	2801      	cmp	r0, #1
 8007dec:	bf08      	it	eq
 8007dee:	2409      	moveq	r4, #9
 8007df0:	e7aa      	b.n	8007d48 <program3+0x40>
		   HAL_Delay(500);
 8007df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007df6:	f7f8 fbe5 	bl	80005c4 <HAL_Delay>
		   if (temp2 == function18())
 8007dfa:	f7ff fa9f 	bl	800733c <function18>
			temp++;
 8007dfe:	2801      	cmp	r0, #1
 8007e00:	bf08      	it	eq
 8007e02:	240a      	moveq	r4, #10
 8007e04:	e7a0      	b.n	8007d48 <program3+0x40>
			HAL_Delay(1000);
 8007e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e0a:	f7f8 fbdb 	bl	80005c4 <HAL_Delay>
			if (temp2 == function9())
 8007e0e:	f7fd fdd5 	bl	80059bc <function9>
 8007e12:	2801      	cmp	r0, #1
 8007e14:	d198      	bne.n	8007d48 <program3+0x40>
	string[0]=1;
 8007e16:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <program3+0x1b0>)
	SDcardWriteSeek("prog.txt", 5, (uint8_t *) string, 0);
 8007e18:	4828      	ldr	r0, [pc, #160]	; (8007ebc <program3+0x1b4>)
	string[0]=1;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	7013      	strb	r3, [r2, #0]
	string[1]=1;
 8007e1e:	7053      	strb	r3, [r2, #1]
	SDcardWriteSeek("prog.txt", 5, (uint8_t *) string, 0);
 8007e20:	2105      	movs	r1, #5
 8007e22:	2300      	movs	r3, #0
 8007e24:	f7fc fcfc 	bl	8004820 <SDcardWriteSeek>
		SDcardReadSeek("infoN.txt", 16, 0);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	4818      	ldr	r0, [pc, #96]	; (8007e90 <program3+0x188>)
 8007e2e:	f7fc fcd3 	bl	80047d8 <SDcardReadSeek>
		junctionId = readBytes[0];
 8007e32:	4b23      	ldr	r3, [pc, #140]	; (8007ec0 <program3+0x1b8>)
 8007e34:	4a23      	ldr	r2, [pc, #140]	; (8007ec4 <program3+0x1bc>)
 8007e36:	7819      	ldrb	r1, [r3, #0]
 8007e38:	7011      	strb	r1, [r2, #0]
		programVersionNo = readBytes[1];
 8007e3a:	4a23      	ldr	r2, [pc, #140]	; (8007ec8 <program3+0x1c0>)
 8007e3c:	7859      	ldrb	r1, [r3, #1]
 8007e3e:	7011      	strb	r1, [r2, #0]
		fileNo = readBytes[2];
 8007e40:	4a22      	ldr	r2, [pc, #136]	; (8007ecc <program3+0x1c4>)
 8007e42:	7899      	ldrb	r1, [r3, #2]
 8007e44:	7011      	strb	r1, [r2, #0]
		noOfSides = readBytes[4];
 8007e46:	4a22      	ldr	r2, [pc, #136]	; (8007ed0 <program3+0x1c8>)
 8007e48:	7919      	ldrb	r1, [r3, #4]
 8007e4a:	7011      	strb	r1, [r2, #0]
		noOfDateSlots = readBytes[5];
 8007e4c:	4a21      	ldr	r2, [pc, #132]	; (8007ed4 <program3+0x1cc>)
 8007e4e:	7959      	ldrb	r1, [r3, #5]
 8007e50:	7011      	strb	r1, [r2, #0]
		noOfDaySlots = readBytes[6];
 8007e52:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <program3+0x1d0>)
 8007e54:	7999      	ldrb	r1, [r3, #6]
 8007e56:	7011      	strb	r1, [r2, #0]
		noOfPlans = readBytes[7];
 8007e58:	4a20      	ldr	r2, [pc, #128]	; (8007edc <program3+0x1d4>)
 8007e5a:	79d9      	ldrb	r1, [r3, #7]
 8007e5c:	7011      	strb	r1, [r2, #0]
		padestarianTime = readBytes[8];
 8007e5e:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <program3+0x1d8>)
 8007e60:	7a19      	ldrb	r1, [r3, #8]
 8007e62:	6011      	str	r1, [r2, #0]
		side1PoleType = readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 8007e64:	4a1f      	ldr	r2, [pc, #124]	; (8007ee4 <program3+0x1dc>)
 8007e66:	7a99      	ldrb	r1, [r3, #10]
 8007e68:	6011      	str	r1, [r2, #0]
		side2PoleType = readBytes[11];
 8007e6a:	4a1f      	ldr	r2, [pc, #124]	; (8007ee8 <program3+0x1e0>)
 8007e6c:	7ad9      	ldrb	r1, [r3, #11]
 8007e6e:	6011      	str	r1, [r2, #0]
		side3PoleType = readBytes[12];
 8007e70:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <program3+0x1e4>)
 8007e72:	7b19      	ldrb	r1, [r3, #12]
 8007e74:	6011      	str	r1, [r2, #0]
		side4PoleType = readBytes[13];
 8007e76:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <program3+0x1e8>)
 8007e78:	7b59      	ldrb	r1, [r3, #13]
 8007e7a:	6011      	str	r1, [r2, #0]
		side5PoleType = readBytes[14];
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <program3+0x1ec>)
 8007e7e:	7b99      	ldrb	r1, [r3, #14]
 8007e80:	6011      	str	r1, [r2, #0]
		totalNoOfPhases=readBytes[9];
 8007e82:	7a5a      	ldrb	r2, [r3, #9]
 8007e84:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <program3+0x1f0>)
 8007e86:	701a      	strb	r2, [r3, #0]
}
 8007e88:	bd38      	pop	{r3, r4, r5, pc}
		if (temp == 11)
 8007e8a:	2c0b      	cmp	r4, #11
 8007e8c:	e7c2      	b.n	8007e14 <program3+0x10c>
 8007e8e:	bf00      	nop
 8007e90:	080094fc 	.word	0x080094fc
 8007e94:	20003acd 	.word	0x20003acd
 8007e98:	08009522 	.word	0x08009522
 8007e9c:	0800952b 	.word	0x0800952b
 8007ea0:	0800953d 	.word	0x0800953d
 8007ea4:	080094d3 	.word	0x080094d3
 8007ea8:	0800950e 	.word	0x0800950e
 8007eac:	08009533 	.word	0x08009533
 8007eb0:	080094df 	.word	0x080094df
 8007eb4:	080094ec 	.word	0x080094ec
 8007eb8:	200052f2 	.word	0x200052f2
 8007ebc:	08009519 	.word	0x08009519
 8007ec0:	200002f4 	.word	0x200002f4
 8007ec4:	2000000d 	.word	0x2000000d
 8007ec8:	2000010d 	.word	0x2000010d
 8007ecc:	2000000c 	.word	0x2000000c
 8007ed0:	200000ed 	.word	0x200000ed
 8007ed4:	200000e4 	.word	0x200000e4
 8007ed8:	200000e5 	.word	0x200000e5
 8007edc:	200000ec 	.word	0x200000ec
 8007ee0:	20000018 	.word	0x20000018
 8007ee4:	20001620 	.word	0x20001620
 8007ee8:	2000363c 	.word	0x2000363c
 8007eec:	200039f8 	.word	0x200039f8
 8007ef0:	20003ac8 	.word	0x20003ac8
 8007ef4:	200039f0 	.word	0x200039f0
 8007ef8:	20000120 	.word	0x20000120

08007efc <espCommunication>:
int espCommunication(){
 8007efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (msgUnPrcd3 == 1) {
 8007f00:	4f59      	ldr	r7, [pc, #356]	; (8008068 <espCommunication+0x16c>)
 8007f02:	f8d7 8000 	ldr.w	r8, [r7]
 8007f06:	f1b8 0f01 	cmp.w	r8, #1
 8007f0a:	f040 808b 	bne.w	8008024 <espCommunication+0x128>
		signVal = msgParse((uint8_t *) RecMsg3, "~~~~", 0);
 8007f0e:	4c57      	ldr	r4, [pc, #348]	; (800806c <espCommunication+0x170>)
 8007f10:	4957      	ldr	r1, [pc, #348]	; (8008070 <espCommunication+0x174>)
 8007f12:	4e58      	ldr	r6, [pc, #352]	; (8008074 <espCommunication+0x178>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fe36 	bl	8008b88 <msgParse>
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	6030      	str	r0, [r6, #0]
		if (!(signVal == 0)) {
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d07d      	beq.n	8008020 <espCommunication+0x124>
			if (RecMsg3[signVal + (RecMsg3[signVal + 1]) + 2] + crcApi4(signVal)
 8007f24:	f7fd fcfe 	bl	8005924 <crcApi4>
 8007f28:	1963      	adds	r3, r4, r5
 8007f2a:	785a      	ldrb	r2, [r3, #1]
 8007f2c:	441a      	add	r2, r3
 8007f2e:	7892      	ldrb	r2, [r2, #2]
 8007f30:	4410      	add	r0, r2
 8007f32:	28ff      	cmp	r0, #255	; 0xff
 8007f34:	d170      	bne.n	8008018 <espCommunication+0x11c>
				if (!(RecMsg3[signVal + 3] == programVersionNo)) {
 8007f36:	78d8      	ldrb	r0, [r3, #3]
 8007f38:	4b4f      	ldr	r3, [pc, #316]	; (8008078 <espCommunication+0x17c>)
				slave4Rsp = 1;
 8007f3a:	4a50      	ldr	r2, [pc, #320]	; (800807c <espCommunication+0x180>)
				if (!(RecMsg3[signVal + 3] == programVersionNo)) {
 8007f3c:	7819      	ldrb	r1, [r3, #0]
				slave4Rsp = 1;
 8007f3e:	f8c2 8000 	str.w	r8, [r2]
				if (!(RecMsg3[signVal++] == programVersionNo))
 8007f42:	1d2a      	adds	r2, r5, #4
 8007f44:	4288      	cmp	r0, r1
 8007f46:	4698      	mov	r8, r3
					programVersionNo = RecMsg3[signVal] - 1;
 8007f48:	bf18      	it	ne
 8007f4a:	5ca3      	ldrbne	r3, [r4, r2]
				if (RecMsg3[signVal++] == 1)
 8007f4c:	eb04 0205 	add.w	r2, r4, r5
					programVersionNo = RecMsg3[signVal] - 1;
 8007f50:	bf18      	it	ne
 8007f52:	f103 33ff 	addne.w	r3, r3, #4294967295
				if (RecMsg3[signVal++] == 1)
 8007f56:	7992      	ldrb	r2, [r2, #6]
					programVersionNo = RecMsg3[signVal] - 1;
 8007f58:	bf18      	it	ne
 8007f5a:	f888 3000 	strbne.w	r3, [r8]
				if (RecMsg3[signVal++] == 1)
 8007f5e:	1deb      	adds	r3, r5, #7
 8007f60:	2a01      	cmp	r2, #1
 8007f62:	6033      	str	r3, [r6, #0]
 8007f64:	d119      	bne.n	8007f9a <espCommunication+0x9e>
					if (RecMsg3[signVal++] == 1)
 8007f66:	5ce3      	ldrb	r3, [r4, r3]
 8007f68:	f105 0208 	add.w	r2, r5, #8
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	6032      	str	r2, [r6, #0]
 8007f70:	d113      	bne.n	8007f9a <espCommunication+0x9e>
						if (RecMsg3[signVal++] == 1)
 8007f72:	5ca2      	ldrb	r2, [r4, r2]
 8007f74:	f105 0309 	add.w	r3, r5, #9
 8007f78:	2a01      	cmp	r2, #1
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	d10d      	bne.n	8007f9a <espCommunication+0x9e>
							if (RecMsg3[signVal++] == 1) {
 8007f7e:	5ce3      	ldrb	r3, [r4, r3]
 8007f80:	350a      	adds	r5, #10
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	6035      	str	r5, [r6, #0]
 8007f86:	d108      	bne.n	8007f9a <espCommunication+0x9e>
								clearenceMode = 1;
 8007f88:	4a3d      	ldr	r2, [pc, #244]	; (8008080 <espCommunication+0x184>)
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8007f8a:	483e      	ldr	r0, [pc, #248]	; (8008084 <espCommunication+0x188>)
								clearenceMode = 1;
 8007f8c:	7013      	strb	r3, [r2, #0]
											checkServerJumpExtend=0;
 8007f8e:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <espCommunication+0x18c>)
 8007f90:	2200      	movs	r2, #0
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8007f92:	2102      	movs	r1, #2
											checkServerJumpExtend=0;
 8007f94:	601a      	str	r2, [r3, #0]
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8007f96:	f7f8 fcb3 	bl	8000900 <HAL_GPIO_WritePin>
				if (!(RecMsg3[7] == programVersionNo)) {
 8007f9a:	79e2      	ldrb	r2, [r4, #7]
 8007f9c:	f898 3000 	ldrb.w	r3, [r8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d009      	beq.n	8007fb8 <espCommunication+0xbc>
					program3();
 8007fa4:	f7ff feb0 	bl	8007d08 <program3>
										checkServerJumpExtend=0;
 8007fa8:	4b37      	ldr	r3, [pc, #220]	; (8008088 <espCommunication+0x18c>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
										isReprogrammed=1;
 8007fae:	4b37      	ldr	r3, [pc, #220]	; (800808c <espCommunication+0x190>)
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	6018      	str	r0, [r3, #0]
										return 1;
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (RecMsg3[9] == 8)
 8007fb8:	7a63      	ldrb	r3, [r4, #9]
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d142      	bne.n	8008044 <espCommunication+0x148>
					if ((!(RecMsg3[10] == 1))) {
 8007fbe:	7aa1      	ldrb	r1, [r4, #10]
 8007fc0:	2901      	cmp	r1, #1
 8007fc2:	d01f      	beq.n	8008004 <espCommunication+0x108>
										checkServerJumpExtend=0;
 8007fc4:	4d30      	ldr	r5, [pc, #192]	; (8008088 <espCommunication+0x18c>)
 8007fc6:	2200      	movs	r2, #0
						if (RecMsg3[10] == 5) {
 8007fc8:	2905      	cmp	r1, #5
										checkServerJumpExtend=0;
 8007fca:	602a      	str	r2, [r5, #0]
						if (RecMsg3[10] == 5) {
 8007fcc:	d12c      	bne.n	8008028 <espCommunication+0x12c>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	482c      	ldr	r0, [pc, #176]	; (8008084 <espCommunication+0x188>)
 8007fd4:	f7f8 fc94 	bl	8000900 <HAL_GPIO_WritePin>
							clearenceMode = RecMsg3[10];
 8007fd8:	4b29      	ldr	r3, [pc, #164]	; (8008080 <espCommunication+0x184>)
 8007fda:	7aa2      	ldrb	r2, [r4, #10]
 8007fdc:	701a      	strb	r2, [r3, #0]
							clearenceSide = RecMsg3[11];
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <espCommunication+0x194>)
 8007fe0:	7ae2      	ldrb	r2, [r4, #11]
 8007fe2:	701a      	strb	r2, [r3, #0]
						if (RecMsg3[10] == 3) {
 8007fe4:	7aa3      	ldrb	r3, [r4, #10]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d123      	bne.n	8008032 <espCommunication+0x136>
							changeMode = 1;
 8007fea:	4b2a      	ldr	r3, [pc, #168]	; (8008094 <espCommunication+0x198>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
							if (planMode == 2)							//3)
 8007ff0:	4b29      	ldr	r3, [pc, #164]	; (8008098 <espCommunication+0x19c>)
 8007ff2:	7819      	ldrb	r1, [r3, #0]
 8007ff4:	2902      	cmp	r1, #2
								planMode = 1;
 8007ff6:	bf08      	it	eq
 8007ff8:	701a      	strbeq	r2, [r3, #0]
							if (planMode == 1) {
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	2a01      	cmp	r2, #1
 8007ffe:	d101      	bne.n	8008004 <espCommunication+0x108>
								planMode = 2;							//3;
 8008000:	2202      	movs	r2, #2
 8008002:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2); //master
 8008004:	2104      	movs	r1, #4
 8008006:	481f      	ldr	r0, [pc, #124]	; (8008084 <espCommunication+0x188>)
 8008008:	f7f8 fc7f 	bl	800090a <HAL_GPIO_TogglePin>
				clearBuffer3();
 800800c:	f7fd f82a 	bl	8005064 <clearBuffer3>
				clearaRxBuffer3();
 8008010:	f7fd f832 	bl	8005078 <clearaRxBuffer3>
				msgUnPrcd3 = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	603b      	str	r3, [r7, #0]
			clearBuffer3();
 8008018:	f7fd f824 	bl	8005064 <clearBuffer3>
			clearaRxBuffer3();
 800801c:	f7fd f82c 	bl	8005078 <clearaRxBuffer3>
		msgUnPrcd3=0;
 8008020:	2300      	movs	r3, #0
 8008022:	603b      	str	r3, [r7, #0]
}
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008028:	2102      	movs	r1, #2
 800802a:	4816      	ldr	r0, [pc, #88]	; (8008084 <espCommunication+0x188>)
 800802c:	f7f8 fc68 	bl	8000900 <HAL_GPIO_WritePin>
 8008030:	e7d8      	b.n	8007fe4 <espCommunication+0xe8>
						if (RecMsg3[10] == 6) // extend request
 8008032:	2b06      	cmp	r3, #6
 8008034:	d10f      	bne.n	8008056 <espCommunication+0x15a>
							clearenceMode = RecMsg3[10];
 8008036:	4a12      	ldr	r2, [pc, #72]	; (8008080 <espCommunication+0x184>)
 8008038:	7013      	strb	r3, [r2, #0]
							clearenceSide = RecMsg3[11];
 800803a:	4b15      	ldr	r3, [pc, #84]	; (8008090 <espCommunication+0x194>)
 800803c:	7ae2      	ldrb	r2, [r4, #11]
 800803e:	701a      	strb	r2, [r3, #0]
											checkServerJumpExtend=1;
 8008040:	2301      	movs	r3, #1
 8008042:	602b      	str	r3, [r5, #0]
				if (RecMsg3[10] == 4) // jump request
 8008044:	7aa3      	ldrb	r3, [r4, #10]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d1dc      	bne.n	8008004 <espCommunication+0x108>
					clearenceMode = 4;
 800804a:	4a0d      	ldr	r2, [pc, #52]	; (8008080 <espCommunication+0x184>)
 800804c:	7013      	strb	r3, [r2, #0]
									checkServerJumpExtend=1;
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <espCommunication+0x18c>)
 8008050:	2201      	movs	r2, #1
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e7d6      	b.n	8008004 <espCommunication+0x108>
						if (RecMsg3[10] == 2) {
 8008056:	2b02      	cmp	r3, #2
 8008058:	d1f4      	bne.n	8008044 <espCommunication+0x148>
							clearenceMode = RecMsg3[10];
 800805a:	4a09      	ldr	r2, [pc, #36]	; (8008080 <espCommunication+0x184>)
 800805c:	7013      	strb	r3, [r2, #0]
							clearenceSide = RecMsg3[11];
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <espCommunication+0x194>)
 8008060:	7ae2      	ldrb	r2, [r4, #11]
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e7ee      	b.n	8008044 <espCommunication+0x148>
 8008066:	bf00      	nop
 8008068:	2000119c 	.word	0x2000119c
 800806c:	200056c2 	.word	0x200056c2
 8008070:	080094f7 	.word	0x080094f7
 8008074:	200015c8 	.word	0x200015c8
 8008078:	2000010d 	.word	0x2000010d
 800807c:	200000a4 	.word	0x200000a4
 8008080:	200000b5 	.word	0x200000b5
 8008084:	40021000 	.word	0x40021000
 8008088:	20003adc 	.word	0x20003adc
 800808c:	200000d8 	.word	0x200000d8
 8008090:	200000b7 	.word	0x200000b7
 8008094:	20003634 	.word	0x20003634
 8008098:	200051f2 	.word	0x200051f2

0800809c <BLECommunication>:
void BLECommunication(){
 800809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (msgUnPrcd1 == 1) {
 80080a0:	4f59      	ldr	r7, [pc, #356]	; (8008208 <BLECommunication+0x16c>)
 80080a2:	f8d7 8000 	ldr.w	r8, [r7]
 80080a6:	f1b8 0f01 	cmp.w	r8, #1
 80080aa:	f040 8087 	bne.w	80081bc <BLECommunication+0x120>
		signVal = msgParse((uint8_t *) RecMsg1, "~~~~", 0);
 80080ae:	4c57      	ldr	r4, [pc, #348]	; (800820c <BLECommunication+0x170>)
 80080b0:	4957      	ldr	r1, [pc, #348]	; (8008210 <BLECommunication+0x174>)
 80080b2:	4e58      	ldr	r6, [pc, #352]	; (8008214 <BLECommunication+0x178>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 fd66 	bl	8008b88 <msgParse>
 80080bc:	4605      	mov	r5, r0
 80080be:	6030      	str	r0, [r6, #0]
		if (!(signVal == 0)) {
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d07b      	beq.n	80081bc <BLECommunication+0x120>
			if (RecMsg1[signVal + (RecMsg1[signVal + 1]) + 2] + crcApi1(signVal)
 80080c4:	f7fd fc48 	bl	8005958 <crcApi1>
 80080c8:	1963      	adds	r3, r4, r5
 80080ca:	785a      	ldrb	r2, [r3, #1]
 80080cc:	441a      	add	r2, r3
 80080ce:	7892      	ldrb	r2, [r2, #2]
 80080d0:	4410      	add	r0, r2
 80080d2:	28ff      	cmp	r0, #255	; 0xff
 80080d4:	d16c      	bne.n	80081b0 <BLECommunication+0x114>
				if (!(RecMsg1[signVal + 3] == programVersionNo)) {
 80080d6:	78d8      	ldrb	r0, [r3, #3]
 80080d8:	4b4f      	ldr	r3, [pc, #316]	; (8008218 <BLECommunication+0x17c>)
				slave4Rsp = 1;
 80080da:	4a50      	ldr	r2, [pc, #320]	; (800821c <BLECommunication+0x180>)
				if (!(RecMsg1[signVal + 3] == programVersionNo)) {
 80080dc:	7819      	ldrb	r1, [r3, #0]
				slave4Rsp = 1;
 80080de:	f8c2 8000 	str.w	r8, [r2]
				if (!(RecMsg1[signVal++] == programVersionNo))
 80080e2:	1d2a      	adds	r2, r5, #4
 80080e4:	4288      	cmp	r0, r1
 80080e6:	4698      	mov	r8, r3
					programVersionNo = RecMsg1[signVal] - 1;
 80080e8:	bf18      	it	ne
 80080ea:	5ca3      	ldrbne	r3, [r4, r2]
				if (RecMsg1[signVal++] == 1)
 80080ec:	eb04 0205 	add.w	r2, r4, r5
					programVersionNo = RecMsg1[signVal] - 1;
 80080f0:	bf18      	it	ne
 80080f2:	f103 33ff 	addne.w	r3, r3, #4294967295
				if (RecMsg1[signVal++] == 1)
 80080f6:	7992      	ldrb	r2, [r2, #6]
					programVersionNo = RecMsg1[signVal] - 1;
 80080f8:	bf18      	it	ne
 80080fa:	f888 3000 	strbne.w	r3, [r8]
				if (RecMsg1[signVal++] == 1)
 80080fe:	1deb      	adds	r3, r5, #7
 8008100:	2a01      	cmp	r2, #1
 8008102:	6033      	str	r3, [r6, #0]
 8008104:	d119      	bne.n	800813a <BLECommunication+0x9e>
					if (RecMsg1[signVal++] == 1)
 8008106:	5ce3      	ldrb	r3, [r4, r3]
 8008108:	f105 0208 	add.w	r2, r5, #8
 800810c:	2b01      	cmp	r3, #1
 800810e:	6032      	str	r2, [r6, #0]
 8008110:	d113      	bne.n	800813a <BLECommunication+0x9e>
						if (RecMsg1[signVal++] == 1)
 8008112:	5ca2      	ldrb	r2, [r4, r2]
 8008114:	f105 0309 	add.w	r3, r5, #9
 8008118:	2a01      	cmp	r2, #1
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	d10d      	bne.n	800813a <BLECommunication+0x9e>
							if (RecMsg1[signVal++] == 1) {
 800811e:	5ce3      	ldrb	r3, [r4, r3]
 8008120:	350a      	adds	r5, #10
 8008122:	2b01      	cmp	r3, #1
 8008124:	6035      	str	r5, [r6, #0]
 8008126:	d108      	bne.n	800813a <BLECommunication+0x9e>
								clearenceMode = 1;
 8008128:	4a3d      	ldr	r2, [pc, #244]	; (8008220 <BLECommunication+0x184>)
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800812a:	483e      	ldr	r0, [pc, #248]	; (8008224 <BLECommunication+0x188>)
								clearenceMode = 1;
 800812c:	7013      	strb	r3, [r2, #0]
											checkServerJumpExtend=0;
 800812e:	4b3e      	ldr	r3, [pc, #248]	; (8008228 <BLECommunication+0x18c>)
 8008130:	2200      	movs	r2, #0
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008132:	2102      	movs	r1, #2
											checkServerJumpExtend=0;
 8008134:	601a      	str	r2, [r3, #0]
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008136:	f7f8 fbe3 	bl	8000900 <HAL_GPIO_WritePin>
				if (!(RecMsg1[7] == programVersionNo)) {
 800813a:	79e2      	ldrb	r2, [r4, #7]
 800813c:	f898 3000 	ldrb.w	r3, [r8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d004      	beq.n	800814e <BLECommunication+0xb2>
					program3();
 8008144:	f7ff fde0 	bl	8007d08 <program3>
										checkServerJumpExtend=0;
 8008148:	4b37      	ldr	r3, [pc, #220]	; (8008228 <BLECommunication+0x18c>)
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
				if (RecMsg1[9] == 8)
 800814e:	7a63      	ldrb	r3, [r4, #9]
 8008150:	2b08      	cmp	r3, #8
 8008152:	d145      	bne.n	80081e0 <BLECommunication+0x144>
					if ((!(RecMsg1[10] == 1))) {
 8008154:	7aa1      	ldrb	r1, [r4, #10]
 8008156:	2901      	cmp	r1, #1
 8008158:	d020      	beq.n	800819c <BLECommunication+0x100>
										checkServerJumpExtend=0;
 800815a:	4d33      	ldr	r5, [pc, #204]	; (8008228 <BLECommunication+0x18c>)
 800815c:	2200      	movs	r2, #0
						if (RecMsg1[10] == 5) {
 800815e:	2905      	cmp	r1, #5
										checkServerJumpExtend=0;
 8008160:	602a      	str	r2, [r5, #0]
						if (RecMsg1[10] == 5) {
 8008162:	d12d      	bne.n	80081c0 <BLECommunication+0x124>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8008164:	2201      	movs	r2, #1
 8008166:	2102      	movs	r1, #2
 8008168:	482e      	ldr	r0, [pc, #184]	; (8008224 <BLECommunication+0x188>)
 800816a:	f7f8 fbc9 	bl	8000900 <HAL_GPIO_WritePin>
							clearenceMode = 9;
 800816e:	4b2c      	ldr	r3, [pc, #176]	; (8008220 <BLECommunication+0x184>)
 8008170:	2209      	movs	r2, #9
 8008172:	701a      	strb	r2, [r3, #0]
							clearenceSide = RecMsg3[11];
 8008174:	4b2d      	ldr	r3, [pc, #180]	; (800822c <BLECommunication+0x190>)
 8008176:	7ada      	ldrb	r2, [r3, #11]
 8008178:	4b2d      	ldr	r3, [pc, #180]	; (8008230 <BLECommunication+0x194>)
 800817a:	701a      	strb	r2, [r3, #0]
						if (RecMsg1[10] == 3) {
 800817c:	7aa3      	ldrb	r3, [r4, #10]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d123      	bne.n	80081ca <BLECommunication+0x12e>
							changeMode = 1;
 8008182:	4b2c      	ldr	r3, [pc, #176]	; (8008234 <BLECommunication+0x198>)
 8008184:	2201      	movs	r2, #1
 8008186:	601a      	str	r2, [r3, #0]
							if (planMode == 2)							//3)
 8008188:	4b2b      	ldr	r3, [pc, #172]	; (8008238 <BLECommunication+0x19c>)
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	2902      	cmp	r1, #2
								planMode = 1;
 800818e:	bf08      	it	eq
 8008190:	701a      	strbeq	r2, [r3, #0]
							if (planMode == 1) {
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	2a01      	cmp	r2, #1
 8008196:	d101      	bne.n	800819c <BLECommunication+0x100>
								planMode = 2;							//3;
 8008198:	2202      	movs	r2, #2
 800819a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2); //master
 800819c:	2104      	movs	r1, #4
 800819e:	4821      	ldr	r0, [pc, #132]	; (8008224 <BLECommunication+0x188>)
 80081a0:	f7f8 fbb3 	bl	800090a <HAL_GPIO_TogglePin>
				clearBuffer3();
 80081a4:	f7fc ff5e 	bl	8005064 <clearBuffer3>
				clearaRxBuffer3();
 80081a8:	f7fc ff66 	bl	8005078 <clearaRxBuffer3>
				msgUnPrcd1 = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	603b      	str	r3, [r7, #0]
			clearBuffer3();
 80081b0:	f7fc ff58 	bl	8005064 <clearBuffer3>
			clearaRxBuffer3();
 80081b4:	f7fc ff60 	bl	8005078 <clearaRxBuffer3>
			msgUnPrcd1 = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80081c0:	2102      	movs	r1, #2
 80081c2:	4818      	ldr	r0, [pc, #96]	; (8008224 <BLECommunication+0x188>)
 80081c4:	f7f8 fb9c 	bl	8000900 <HAL_GPIO_WritePin>
 80081c8:	e7d8      	b.n	800817c <BLECommunication+0xe0>
						if (RecMsg1[10] == 6) // extend request
 80081ca:	2b06      	cmp	r3, #6
 80081cc:	d111      	bne.n	80081f2 <BLECommunication+0x156>
							clearenceMode = RecMsg3[10];
 80081ce:	4b17      	ldr	r3, [pc, #92]	; (800822c <BLECommunication+0x190>)
 80081d0:	4a13      	ldr	r2, [pc, #76]	; (8008220 <BLECommunication+0x184>)
 80081d2:	7a99      	ldrb	r1, [r3, #10]
 80081d4:	7011      	strb	r1, [r2, #0]
							clearenceSide = RecMsg3[11];
 80081d6:	7ada      	ldrb	r2, [r3, #11]
 80081d8:	4b15      	ldr	r3, [pc, #84]	; (8008230 <BLECommunication+0x194>)
 80081da:	701a      	strb	r2, [r3, #0]
											checkServerJumpExtend=1;
 80081dc:	2301      	movs	r3, #1
 80081de:	602b      	str	r3, [r5, #0]
				if (RecMsg1[10] == 4) // jump request
 80081e0:	7aa3      	ldrb	r3, [r4, #10]
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d1da      	bne.n	800819c <BLECommunication+0x100>
					clearenceMode = 4;
 80081e6:	4a0e      	ldr	r2, [pc, #56]	; (8008220 <BLECommunication+0x184>)
 80081e8:	7013      	strb	r3, [r2, #0]
									checkServerJumpExtend=1;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <BLECommunication+0x18c>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e7d4      	b.n	800819c <BLECommunication+0x100>
						if (RecMsg1[10] == 2) {
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d1f4      	bne.n	80081e0 <BLECommunication+0x144>
							clearenceMode = RecMsg3[10];
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <BLECommunication+0x190>)
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <BLECommunication+0x184>)
 80081fa:	7a99      	ldrb	r1, [r3, #10]
 80081fc:	7011      	strb	r1, [r2, #0]
							clearenceSide = RecMsg3[11];
 80081fe:	7ada      	ldrb	r2, [r3, #11]
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <BLECommunication+0x194>)
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e7ec      	b.n	80081e0 <BLECommunication+0x144>
 8008206:	bf00      	nop
 8008208:	20001434 	.word	0x20001434
 800820c:	200057bc 	.word	0x200057bc
 8008210:	080094f7 	.word	0x080094f7
 8008214:	200015c8 	.word	0x200015c8
 8008218:	2000010d 	.word	0x2000010d
 800821c:	200000a4 	.word	0x200000a4
 8008220:	200000b5 	.word	0x200000b5
 8008224:	40021000 	.word	0x40021000
 8008228:	20003adc 	.word	0x20003adc
 800822c:	200056c2 	.word	0x200056c2
 8008230:	200000b7 	.word	0x200000b7
 8008234:	20003634 	.word	0x20003634
 8008238:	200051f2 	.word	0x200051f2

0800823c <extractSlaveInfo>:


}

void extractSlaveInfo()
{
 800823c:	b508      	push	{r3, lr}

int seekCnt =0;
/*-------------------read SD card begins-------------------*/
	SDcardReadSeek("SlaveD.txt", 27, seekCnt);
 800823e:	2200      	movs	r2, #0
 8008240:	4806      	ldr	r0, [pc, #24]	; (800825c <extractSlaveInfo+0x20>)
 8008242:	211b      	movs	r1, #27
 8008244:	f7fc fac8 	bl	80047d8 <SDcardReadSeek>

   for(int i=0;i<26;i++)
   {
	  slaveDetails[i]= readBytes[i];
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <extractSlaveInfo+0x24>)
 800824a:	4806      	ldr	r0, [pc, #24]	; (8008264 <extractSlaveInfo+0x28>)
   for(int i=0;i<26;i++)
 800824c:	2300      	movs	r3, #0
	  slaveDetails[i]= readBytes[i];
 800824e:	5c19      	ldrb	r1, [r3, r0]
 8008250:	5499      	strb	r1, [r3, r2]
   for(int i=0;i<26;i++)
 8008252:	3301      	adds	r3, #1
 8008254:	2b1a      	cmp	r3, #26
 8008256:	d1fa      	bne.n	800824e <extractSlaveInfo+0x12>





}
 8008258:	bd08      	pop	{r3, pc}
 800825a:	bf00      	nop
 800825c:	080094ec 	.word	0x080094ec
 8008260:	20001637 	.word	0x20001637
 8008264:	200002f4 	.word	0x200002f4

08008268 <populatePrimaryHVSecondaryHV>:
void  populatePrimaryHVSecondaryHV()
{
 8008268:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*----------------Separating the values of sides------------------*/

	sideNo1= Disp[4] >> 4; // right shift 4 bit side13
 800826a:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <populatePrimaryHVSecondaryHV+0x58>)
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 800826c:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <populatePrimaryHVSecondaryHV+0x5c>)
	sideNo1= Disp[4] >> 4; // right shift 4 bit side13
 800826e:	791f      	ldrb	r7, [r3, #4]
	sideNo3=  Disp[4] ^ sideNo1; //
    sideNo3=sideNo3 << 4;
 8008270:	4915      	ldr	r1, [pc, #84]	; (80082c8 <populatePrimaryHVSecondaryHV+0x60>)

	sideNo2= Disp[5] >> 4; // right shift 4 bit
	sideNo2=sideNo2 << 4 ; //left shift 4 bit
 8008272:	4816      	ldr	r0, [pc, #88]	; (80082cc <populatePrimaryHVSecondaryHV+0x64>)
//	sideNo4=  Disp[5] ^ sideNo2; //
//	sideNo4_1= sideNo4 << 4;
//	sideNo4_1=sideNo4 | sideNo4_1;


  primaryHorizontalByte[1]=sideNo1;
 8008274:	4e16      	ldr	r6, [pc, #88]	; (80082d0 <populatePrimaryHVSecondaryHV+0x68>)
  primaryVerticalByte[1]=sideNo1;
 8008276:	4d17      	ldr	r5, [pc, #92]	; (80082d4 <populatePrimaryHVSecondaryHV+0x6c>)
  secondaryHorizontalByte[1]=sideNo3;
 8008278:	4c17      	ldr	r4, [pc, #92]	; (80082d8 <populatePrimaryHVSecondaryHV+0x70>)
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 800827a:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 800827e:	6017      	str	r7, [r2, #0]
	sideNo3=  Disp[4] ^ sideNo1; //
 8008280:	791a      	ldrb	r2, [r3, #4]
  primaryHorizontalByte[1]=sideNo1;
 8008282:	6077      	str	r7, [r6, #4]
	sideNo3=  Disp[4] ^ sideNo1; //
 8008284:	407a      	eors	r2, r7
    sideNo3=sideNo3 << 4;
 8008286:	0112      	lsls	r2, r2, #4
 8008288:	600a      	str	r2, [r1, #0]
	sideNo2= Disp[5] >> 4; // right shift 4 bit
 800828a:	7959      	ldrb	r1, [r3, #5]
	sideNo4=  Disp[5] ^ sideNo2; //
 800828c:	795b      	ldrb	r3, [r3, #5]
  primaryVerticalByte[1]=sideNo1;
 800828e:	606f      	str	r7, [r5, #4]
	sideNo2=sideNo2 << 4 ; //left shift 4 bit
 8008290:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8008294:	6001      	str	r1, [r0, #0]
	sideNo4=  Disp[5] ^ sideNo2; //
 8008296:	404b      	eors	r3, r1
	sideNo4=sideNo4 << 4;
 8008298:	4810      	ldr	r0, [pc, #64]	; (80082dc <populatePrimaryHVSecondaryHV+0x74>)
  secondaryHorizontalByte[1]=sideNo3;
 800829a:	6062      	str	r2, [r4, #4]
	sideNo4=sideNo4 << 4;
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	6003      	str	r3, [r0, #0]
  secondaryVerticalByte[1]=sideNo3;
 80082a0:	480f      	ldr	r0, [pc, #60]	; (80082e0 <populatePrimaryHVSecondaryHV+0x78>)

  primaryHorizontalByte[2]=sideNo2;
 80082a2:	60b1      	str	r1, [r6, #8]
  secondaryVerticalByte[1]=sideNo3;
 80082a4:	6042      	str	r2, [r0, #4]
  primaryVerticalByte[2]=sideNo2;
 80082a6:	60a9      	str	r1, [r5, #8]
  secondaryHorizontalByte[2]=sideNo4;
 80082a8:	60a3      	str	r3, [r4, #8]
  secondaryVerticalByte[2]=sideNo4;
 80082aa:	6083      	str	r3, [r0, #8]

  primaryHorizontalByte[3]=sideNo3;
 80082ac:	60f2      	str	r2, [r6, #12]
  primaryVerticalByte[3]=sideNo3;
 80082ae:	60ea      	str	r2, [r5, #12]
  secondaryHorizontalByte[3]=sideNo1;
 80082b0:	60e7      	str	r7, [r4, #12]
  secondaryVerticalByte[3]=sideNo1;
 80082b2:	60c7      	str	r7, [r0, #12]


  primaryHorizontalByte[4]=sideNo4;
 80082b4:	6133      	str	r3, [r6, #16]
  primaryVerticalByte[4]=sideNo4;
 80082b6:	612b      	str	r3, [r5, #16]
  secondaryHorizontalByte[4]=sideNo2;
 80082b8:	6121      	str	r1, [r4, #16]
  secondaryVerticalByte[4]=sideNo2;
 80082ba:	6101      	str	r1, [r0, #16]
 80082bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082be:	bf00      	nop
 80082c0:	200010bd 	.word	0x200010bd
 80082c4:	200015e8 	.word	0x200015e8
 80082c8:	20003ad8 	.word	0x20003ad8
 80082cc:	20003680 	.word	0x20003680
 80082d0:	20003644 	.word	0x20003644
 80082d4:	200035d8 	.word	0x200035d8
 80082d8:	200035f0 	.word	0x200035f0
 80082dc:	20001658 	.word	0x20001658
 80082e0:	200015f0 	.word	0x200015f0

080082e4 <phaseInfoData>:
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 80082e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	clearenceMode=1;
 80082e8:	f04f 0901 	mov.w	r9, #1
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 80082ec:	460c      	mov	r4, r1
	uint32_t AddressOfPhase1=0;
 80082ee:	f04f 0800 	mov.w	r8, #0
	clearenceMode=1;
 80082f2:	46ca      	mov	sl, r9
	checkServerJumpExtend=0;
 80082f4:	4a5d      	ldr	r2, [pc, #372]	; (800846c <phaseInfoData+0x188>)
    lSec=10;
 80082f6:	495e      	ldr	r1, [pc, #376]	; (8008470 <phaseInfoData+0x18c>)
    count=Disp[28];
 80082f8:	4d5e      	ldr	r5, [pc, #376]	; (8008474 <phaseInfoData+0x190>)
 80082fa:	4e5f      	ldr	r6, [pc, #380]	; (8008478 <phaseInfoData+0x194>)
    	  if(!(secLast == sec1))
 80082fc:	4f5f      	ldr	r7, [pc, #380]	; (800847c <phaseInfoData+0x198>)
	checkServerJumpExtend=0;
 80082fe:	2300      	movs	r3, #0
 8008300:	6013      	str	r3, [r2, #0]
	extendCnt=0;
 8008302:	4a5f      	ldr	r2, [pc, #380]	; (8008480 <phaseInfoData+0x19c>)
 8008304:	6013      	str	r3, [r2, #0]
	extendCnt1=0;
 8008306:	4a5f      	ldr	r2, [pc, #380]	; (8008484 <phaseInfoData+0x1a0>)
 8008308:	6013      	str	r3, [r2, #0]
	clearenceMode=1;
 800830a:	4a5f      	ldr	r2, [pc, #380]	; (8008488 <phaseInfoData+0x1a4>)
 800830c:	f882 a000 	strb.w	sl, [r2]
	clearenceModeLast=1;
 8008310:	4a5e      	ldr	r2, [pc, #376]	; (800848c <phaseInfoData+0x1a8>)
 8008312:	f882 a000 	strb.w	sl, [r2]
    lSec=10;
 8008316:	220a      	movs	r2, #10
 8008318:	600a      	str	r2, [r1, #0]
    lsSec=10;
 800831a:	495d      	ldr	r1, [pc, #372]	; (8008490 <phaseInfoData+0x1ac>)
 800831c:	600a      	str	r2, [r1, #0]
    pin_HighLast=0;
 800831e:	4a5d      	ldr	r2, [pc, #372]	; (8008494 <phaseInfoData+0x1b0>)
 8008320:	6013      	str	r3, [r2, #0]
	pinExtend_HighLast=0;
 8008322:	4a5d      	ldr	r2, [pc, #372]	; (8008498 <phaseInfoData+0x1b4>)
 8008324:	6013      	str	r3, [r2, #0]
    count=Disp[28];
 8008326:	7f2b      	ldrb	r3, [r5, #28]
 8008328:	6033      	str	r3, [r6, #0]
			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800832a:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80084e0 <phaseInfoData+0x1fc>
			 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 800832e:	495b      	ldr	r1, [pc, #364]	; (800849c <phaseInfoData+0x1b8>)
 8008330:	485b      	ldr	r0, [pc, #364]	; (80084a0 <phaseInfoData+0x1bc>)
 8008332:	2201      	movs	r2, #1
 8008334:	f7fa f991 	bl	800265a <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);//for slave through LORA
 8008338:	2201      	movs	r2, #1
 800833a:	495a      	ldr	r1, [pc, #360]	; (80084a4 <phaseInfoData+0x1c0>)
 800833c:	485a      	ldr	r0, [pc, #360]	; (80084a8 <phaseInfoData+0x1c4>)
 800833e:	f7fa f98c 	bl	800265a <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer4,1);//For slave through RS485
 8008342:	2201      	movs	r2, #1
 8008344:	4959      	ldr	r1, [pc, #356]	; (80084ac <phaseInfoData+0x1c8>)
 8008346:	485a      	ldr	r0, [pc, #360]	; (80084b0 <phaseInfoData+0x1cc>)
 8008348:	f7fa f987 	bl	800265a <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);//For BLE
 800834c:	2201      	movs	r2, #1
 800834e:	4959      	ldr	r1, [pc, #356]	; (80084b4 <phaseInfoData+0x1d0>)
 8008350:	4859      	ldr	r0, [pc, #356]	; (80084b8 <phaseInfoData+0x1d4>)
 8008352:	f7fa f982 	bl	800265a <HAL_UART_Receive_IT>
			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008356:	2200      	movs	r2, #0
 8008358:	4958      	ldr	r1, [pc, #352]	; (80084bc <phaseInfoData+0x1d8>)
 800835a:	4658      	mov	r0, fp
 800835c:	f7f9 fb7a 	bl	8001a54 <HAL_RTC_GetDate>
			 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008360:	4957      	ldr	r1, [pc, #348]	; (80084c0 <phaseInfoData+0x1dc>)
 8008362:	2200      	movs	r2, #0
 8008364:	4658      	mov	r0, fp
 8008366:	f7f9 fb4d 	bl	8001a04 <HAL_RTC_GetTime>
      if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5))
 800836a:	2120      	movs	r1, #32
 800836c:	4855      	ldr	r0, [pc, #340]	; (80084c4 <phaseInfoData+0x1e0>)
 800836e:	f7f8 fac1 	bl	80008f4 <HAL_GPIO_ReadPin>
 8008372:	b108      	cbz	r0, 8008378 <phaseInfoData+0x94>
    	  BLECommunication();
 8008374:	f7ff fe92 	bl	800809c <BLECommunication>
    	  espCommunication();
 8008378:	f7ff fdc0 	bl	8007efc <espCommunication>
    	  if(isReprogrammed==1)
 800837c:	4b52      	ldr	r3, [pc, #328]	; (80084c8 <phaseInfoData+0x1e4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d06f      	beq.n	8008464 <phaseInfoData+0x180>
    	  sendMsgToSlave();//through uart2 and uart6
 8008384:	f7fd f85c 	bl	8005440 <sendMsgToSlave>
    	  slaveResponse();
 8008388:	f7fd f9cc 	bl	8005724 <slaveResponse>
    	  populatePrimaryHVSecondaryHV();
 800838c:	f7ff ff6c 	bl	8008268 <populatePrimaryHVSecondaryHV>
    	  if(!(secLast == sec1))
 8008390:	4b4e      	ldr	r3, [pc, #312]	; (80084cc <phaseInfoData+0x1e8>)
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	4291      	cmp	r1, r2
 800839a:	d00c      	beq.n	80083b6 <phaseInfoData+0xd2>
    		  checkServerFieldAction();
 800839c:	f7fe fd2e 	bl	8006dfc <checkServerFieldAction>
    		  function8();
 80083a0:	f7ff faf4 	bl	800798c <function8>
    		  if(clearenceMode==1)
 80083a4:	4b38      	ldr	r3, [pc, #224]	; (8008488 <phaseInfoData+0x1a4>)
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	d101      	bne.n	80083b2 <phaseInfoData+0xce>
    		 if(count==0)
 80083ae:	6832      	ldr	r2, [r6, #0]
 80083b0:	b162      	cbz	r2, 80083cc <phaseInfoData+0xe8>
    	  secLast=sec1;
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	603b      	str	r3, [r7, #0]
    		if(changeMode==1){
 80083b6:	4b46      	ldr	r3, [pc, #280]	; (80084d0 <phaseInfoData+0x1ec>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	2a01      	cmp	r2, #1
 80083bc:	d1b7      	bne.n	800832e <phaseInfoData+0x4a>
    			changeMode=0;
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
    			blinker();
 80083c2:	f000 f90b 	bl	80085dc <blinker>
 80083c6:	e7b0      	b.n	800832a <phaseInfoData+0x46>
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 80083c8:	46b8      	mov	r8, r7
 80083ca:	e793      	b.n	80082f4 <phaseInfoData+0x10>
		AddressOfPhase1=AddressOfPhase1+4;
 80083cc:	f108 0704 	add.w	r7, r8, #4
		if(phaseNo==Color[AddressOfPhase1])
 80083d0:	4e40      	ldr	r6, [pc, #256]	; (80084d4 <phaseInfoData+0x1f0>)
		phase_No=phaseNo;
 80083d2:	f8df b120 	ldr.w	fp, [pc, #288]	; 80084f4 <phaseInfoData+0x210>
		if(phaseNo==Color[AddressOfPhase1])
 80083d6:	5df3      	ldrb	r3, [r6, r7]
		phaseNo++;
 80083d8:	3401      	adds	r4, #1
 80083da:	b2e4      	uxtb	r4, r4
		if(phaseNo==Color[AddressOfPhase1])
 80083dc:	42a3      	cmp	r3, r4
		phase_No=phaseNo;
 80083de:	f8cb 4000 	str.w	r4, [fp]
		if(phaseNo==Color[AddressOfPhase1])
 80083e2:	d114      	bne.n	800840e <phaseInfoData+0x12a>
 80083e4:	9601      	str	r6, [sp, #4]
			countDown();
 80083e6:	f7fc fef5 	bl	80051d4 <countDown>
			Disp[4]=Color[AddressOfPhase1+1];  //side13
 80083ea:	9b01      	ldr	r3, [sp, #4]
			side13Last=Disp[4];
 80083ec:	7928      	ldrb	r0, [r5, #4]
			side24Last=Disp[5];
 80083ee:	796a      	ldrb	r2, [r5, #5]
			Disp[4]=Color[AddressOfPhase1+1];  //side13
 80083f0:	4498      	add	r8, r3
 80083f2:	f898 3005 	ldrb.w	r3, [r8, #5]
 80083f6:	712b      	strb	r3, [r5, #4]
			Disp[5]=Color[AddressOfPhase1+2];  //side24
 80083f8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80083fc:	716b      	strb	r3, [r5, #5]
			phase_ID=Color[AddressOfPhase1+3]; //PhaseID
 80083fe:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <phaseInfoData+0x1f4>)
 8008400:	f898 1007 	ldrb.w	r1, [r8, #7]
 8008404:	7019      	strb	r1, [r3, #0]
	        sideChange(side13Last,Disp[4],side24Last,Disp[5]);
 8008406:	7929      	ldrb	r1, [r5, #4]
 8008408:	796b      	ldrb	r3, [r5, #5]
 800840a:	f7ff fa47 	bl	800789c <sideChange>
		if(phaseNo >totalPhase )
 800840e:	4b33      	ldr	r3, [pc, #204]	; (80084dc <phaseInfoData+0x1f8>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	42a3      	cmp	r3, r4
 8008414:	d20b      	bcs.n	800842e <phaseInfoData+0x14a>
			phase_No=phaseNo;
 8008416:	f8cb 9000 	str.w	r9, [fp]
			clearDispBuffer() ;
 800841a:	f7fc fe0f 	bl	800503c <clearDispBuffer>
			countDown();
 800841e:	f7fc fed9 	bl	80051d4 <countDown>
			findSide(Color[1],Color[2]);
 8008422:	78b1      	ldrb	r1, [r6, #2]
 8008424:	7870      	ldrb	r0, [r6, #1]
 8008426:	f7ff fbcb 	bl	8007bc0 <findSide>
			phaseNo=1;
 800842a:	2401      	movs	r4, #1
			AddressOfPhase1=0;
 800842c:	2700      	movs	r7, #0
			HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800842e:	2200      	movs	r2, #0
 8008430:	4923      	ldr	r1, [pc, #140]	; (80084c0 <phaseInfoData+0x1dc>)
 8008432:	482b      	ldr	r0, [pc, #172]	; (80084e0 <phaseInfoData+0x1fc>)
 8008434:	f7f9 fae6 	bl	8001a04 <HAL_RTC_GetTime>
			if(!(sDate.Date == DateLast))
 8008438:	4b20      	ldr	r3, [pc, #128]	; (80084bc <phaseInfoData+0x1d8>)
 800843a:	789a      	ldrb	r2, [r3, #2]
 800843c:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <phaseInfoData+0x200>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d001      	beq.n	8008448 <phaseInfoData+0x164>
					getDateAndTimeFromGPS();
 8008444:	f7fd fd96 	bl	8005f74 <getDateAndTimeFromGPS>
			     if (sTime.Hours==planOffHr)
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <phaseInfoData+0x1dc>)
 800844a:	4a27      	ldr	r2, [pc, #156]	; (80084e8 <phaseInfoData+0x204>)
 800844c:	7819      	ldrb	r1, [r3, #0]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	4291      	cmp	r1, r2
			    	 if(sTime.Minutes>planOffM)
 8008452:	bf01      	itttt	eq
 8008454:	785a      	ldrbeq	r2, [r3, #1]
 8008456:	4b25      	ldreq	r3, [pc, #148]	; (80084ec <phaseInfoData+0x208>)
 8008458:	781b      	ldrbeq	r3, [r3, #0]
 800845a:	429a      	cmpeq	r2, r3
 800845c:	d9b4      	bls.n	80083c8 <phaseInfoData+0xe4>
			    		returnMode=1;
 800845e:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <phaseInfoData+0x20c>)
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	2001      	movs	r0, #1
 8008466:	b003      	add	sp, #12
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	20003adc 	.word	0x20003adc
 8008470:	20000010 	.word	0x20000010
 8008474:	200010bd 	.word	0x200010bd
 8008478:	20003ad0 	.word	0x20003ad0
 800847c:	20000114 	.word	0x20000114
 8008480:	200000c4 	.word	0x200000c4
 8008484:	200000c8 	.word	0x200000c8
 8008488:	200000b5 	.word	0x200000b5
 800848c:	200000b6 	.word	0x200000b6
 8008490:	20000014 	.word	0x20000014
 8008494:	20000108 	.word	0x20000108
 8008498:	200000fc 	.word	0x200000fc
 800849c:	20000fdc 	.word	0x20000fdc
 80084a0:	20000e10 	.word	0x20000e10
 80084a4:	2000134c 	.word	0x2000134c
 80084a8:	2000130c 	.word	0x2000130c
 80084ac:	20001438 	.word	0x20001438
 80084b0:	20001584 	.word	0x20001584
 80084b4:	20001224 	.word	0x20001224
 80084b8:	200010e8 	.word	0x200010e8
 80084bc:	2000115a 	.word	0x2000115a
 80084c0:	20000ea4 	.word	0x20000ea4
 80084c4:	40021000 	.word	0x40021000
 80084c8:	200000d8 	.word	0x200000d8
 80084cc:	20000154 	.word	0x20000154
 80084d0:	20003634 	.word	0x20003634
 80084d4:	20005206 	.word	0x20005206
 80084d8:	20003acc 	.word	0x20003acc
 80084dc:	20000129 	.word	0x20000129
 80084e0:	20001168 	.word	0x20001168
 80084e4:	200015ec 	.word	0x200015ec
 80084e8:	200051f0 	.word	0x200051f0
 80084ec:	20003ad7 	.word	0x20003ad7
 80084f0:	20000110 	.word	0x20000110
 80084f4:	200039d0 	.word	0x200039d0

080084f8 <signal>:
	for(int m=1;m<total_Phases+1;)
 80084f8:	4b2d      	ldr	r3, [pc, #180]	; (80085b0 <signal+0xb8>)
 80084fa:	492e      	ldr	r1, [pc, #184]	; (80085b4 <signal+0xbc>)
 80084fc:	f8d3 c000 	ldr.w	ip, [r3]
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 8008500:	4b2d      	ldr	r3, [pc, #180]	; (80085b8 <signal+0xc0>)
{
 8008502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 8008506:	f8d3 8000 	ldr.w	r8, [r3]
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 800850a:	4b2c      	ldr	r3, [pc, #176]	; (80085bc <signal+0xc4>)
 800850c:	4f2c      	ldr	r7, [pc, #176]	; (80085c0 <signal+0xc8>)
 800850e:	f8d3 9000 	ldr.w	r9, [r3]
			Color[cntr2]=m;
 8008512:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80085c4 <signal+0xcc>
    int cntr2=0;
 8008516:	2300      	movs	r3, #0
	for(int m=1;m<total_Phases+1;)
 8008518:	2201      	movs	r2, #1
    int cntr1=0;
 800851a:	461c      	mov	r4, r3
    int phaseID=0;
 800851c:	4618      	mov	r0, r3
	for(int m=1;m<total_Phases+1;)
 800851e:	4562      	cmp	r2, ip
 8008520:	dd1e      	ble.n	8008560 <signal+0x68>
	findSide(Color[1],Color[2]);
 8008522:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <signal+0xcc>)
    phaseNo=1;
 8008524:	4c28      	ldr	r4, [pc, #160]	; (80085c8 <signal+0xd0>)
	findSide(Color[1],Color[2]);
 8008526:	7858      	ldrb	r0, [r3, #1]
 8008528:	7899      	ldrb	r1, [r3, #2]
 800852a:	f7ff fb49 	bl	8007bc0 <findSide>
    phaseNo=1;
 800852e:	2101      	movs	r1, #1
 8008530:	7021      	strb	r1, [r4, #0]
	clearDispBuffer();
 8008532:	f7fc fd83 	bl	800503c <clearDispBuffer>
	phase_No=1;
 8008536:	4b25      	ldr	r3, [pc, #148]	; (80085cc <signal+0xd4>)
 8008538:	6019      	str	r1, [r3, #0]
	countDown();
 800853a:	f7fc fe4b 	bl	80051d4 <countDown>
	extractSlaveInfo();
 800853e:	f7ff fe7d 	bl	800823c <extractSlaveInfo>
	phaseInfoData(planNo,phaseNo);
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <signal+0xd8>)
 8008544:	7821      	ldrb	r1, [r4, #0]
 8008546:	7818      	ldrb	r0, [r3, #0]
 8008548:	f7ff fecc 	bl	80082e4 <phaseInfoData>
	if(isReprogrammed==1)
 800854c:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <signal+0xdc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d02a      	beq.n	80085aa <signal+0xb2>
    if(returnMode==1)
 8008554:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <signal+0xe0>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d026      	beq.n	80085aa <signal+0xb2>
}
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 8008560:	784d      	ldrb	r5, [r1, #1]
 8008562:	4545      	cmp	r5, r8
 8008564:	d117      	bne.n	8008596 <signal+0x9e>
 8008566:	790d      	ldrb	r5, [r1, #4]
 8008568:	42aa      	cmp	r2, r5
 800856a:	d114      	bne.n	8008596 <signal+0x9e>
		phaseID=phaseMapIDList[cnt+2];//phaseID
 800856c:	7888      	ldrb	r0, [r1, #2]
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 800856e:	2501      	movs	r5, #1
 8008570:	454d      	cmp	r5, r9
 8008572:	da10      	bge.n	8008596 <signal+0x9e>
		if(phaseID==currentPlanPhases[cntr1+5])
 8008574:	193e      	adds	r6, r7, r4
 8008576:	f896 a005 	ldrb.w	sl, [r6, #5]
 800857a:	4550      	cmp	r0, sl
 800857c:	d112      	bne.n	80085a4 <signal+0xac>
			Color[cntr2+1]=currentPlanPhases[cntr1+12]; //side 13
 800857e:	eb0e 0503 	add.w	r5, lr, r3
 8008582:	f896 a00c 	ldrb.w	sl, [r6, #12]
			Color[cntr2+2]=currentPlanPhases[cntr1+13]; //side24
 8008586:	7b76      	ldrb	r6, [r6, #13]
			Color[cntr2]=m;
 8008588:	f80e 2003 	strb.w	r2, [lr, r3]
			Color[cntr2+1]=currentPlanPhases[cntr1+12]; //side 13
 800858c:	f885 a001 	strb.w	sl, [r5, #1]
			Color[cntr2+2]=currentPlanPhases[cntr1+13]; //side24
 8008590:	70ae      	strb	r6, [r5, #2]
			Color[cntr2+3]=phaseID;
 8008592:	70e8      	strb	r0, [r5, #3]
			cntr2=cntr2+4;
 8008594:	3304      	adds	r3, #4
	if(phaseID==currentPlanPhases[cntr1+5])
 8008596:	193d      	adds	r5, r7, r4
 8008598:	3106      	adds	r1, #6
 800859a:	796d      	ldrb	r5, [r5, #5]
 800859c:	42a8      	cmp	r0, r5
		m++;
 800859e:	bf08      	it	eq
 80085a0:	3201      	addeq	r2, #1
 80085a2:	e7bc      	b.n	800851e <signal+0x26>
		cntr1=cntr1+18;
 80085a4:	3412      	adds	r4, #18
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 80085a6:	3501      	adds	r5, #1
 80085a8:	e7e2      	b.n	8008570 <signal+0x78>
 80085aa:	2001      	movs	r0, #1
}
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	2000012c 	.word	0x2000012c
 80085b4:	200039fe 	.word	0x200039fe
 80085b8:	200000e0 	.word	0x200000e0
 80085bc:	20000124 	.word	0x20000124
 80085c0:	20003c44 	.word	0x20003c44
 80085c4:	20005206 	.word	0x20005206
 80085c8:	20003738 	.word	0x20003738
 80085cc:	200039d0 	.word	0x200039d0
 80085d0:	20003acd 	.word	0x20003acd
 80085d4:	200000d8 	.word	0x200000d8
 80085d8:	20000110 	.word	0x20000110

080085dc <blinker>:
void blinker(){
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80085e0:	4f40      	ldr	r7, [pc, #256]	; (80086e4 <blinker+0x108>)
 80085e2:	4e41      	ldr	r6, [pc, #260]	; (80086e8 <blinker+0x10c>)
int on=0;
 80085e4:	2500      	movs	r5, #0
		 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 80085e6:	2201      	movs	r2, #1
 80085e8:	4940      	ldr	r1, [pc, #256]	; (80086ec <blinker+0x110>)
 80085ea:	4841      	ldr	r0, [pc, #260]	; (80086f0 <blinker+0x114>)
	if(changeMode==1)
 80085ec:	4c41      	ldr	r4, [pc, #260]	; (80086f4 <blinker+0x118>)
		 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 80085ee:	f7fa f834 	bl	800265a <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);//for slave through LORA
 80085f2:	2201      	movs	r2, #1
 80085f4:	4940      	ldr	r1, [pc, #256]	; (80086f8 <blinker+0x11c>)
 80085f6:	4841      	ldr	r0, [pc, #260]	; (80086fc <blinker+0x120>)
 80085f8:	f7fa f82f 	bl	800265a <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer4,1);//For slave through RS485
 80085fc:	2201      	movs	r2, #1
 80085fe:	4940      	ldr	r1, [pc, #256]	; (8008700 <blinker+0x124>)
 8008600:	4840      	ldr	r0, [pc, #256]	; (8008704 <blinker+0x128>)
 8008602:	f7fa f82a 	bl	800265a <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);//For BLE
 8008606:	2201      	movs	r2, #1
 8008608:	493f      	ldr	r1, [pc, #252]	; (8008708 <blinker+0x12c>)
 800860a:	4840      	ldr	r0, [pc, #256]	; (800870c <blinker+0x130>)
 800860c:	f7fa f825 	bl	800265a <HAL_UART_Receive_IT>
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008610:	2200      	movs	r2, #0
 8008612:	4639      	mov	r1, r7
 8008614:	4630      	mov	r0, r6
 8008616:	f7f9 fa1d 	bl	8001a54 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800861a:	2200      	movs	r2, #0
 800861c:	493c      	ldr	r1, [pc, #240]	; (8008710 <blinker+0x134>)
 800861e:	4630      	mov	r0, r6
 8008620:	f7f9 f9f0 	bl	8001a04 <HAL_RTC_GetTime>
	if(changeMode==1)
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d103      	bne.n	8008632 <blinker+0x56>
			changeMode=0;
 800862a:	2300      	movs	r3, #0
 800862c:	6023      	str	r3, [r4, #0]
				signal();
 800862e:	f7ff ff63 	bl	80084f8 <signal>
	 if (!(secLast == sec1)) {
 8008632:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8008728 <blinker+0x14c>
 8008636:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800872c <blinker+0x150>
		espCommunication();
 800863a:	f7ff fc5f 	bl	8007efc <espCommunication>
		sendMsgToSlave();
 800863e:	f7fc feff 	bl	8005440 <sendMsgToSlave>
		slaveResponse();
 8008642:	f7fd f86f 	bl	8005724 <slaveResponse>
	 if (!(secLast == sec1)) {
 8008646:	f8d8 2000 	ldr.w	r2, [r8]
 800864a:	f8d9 3000 	ldr.w	r3, [r9]
 800864e:	429a      	cmp	r2, r3
 8008650:	d018      	beq.n	8008684 <blinker+0xa8>
 8008652:	4b30      	ldr	r3, [pc, #192]	; (8008714 <blinker+0x138>)
 8008654:	2211      	movs	r2, #17
			Disp[0] = 0x11;
 8008656:	701a      	strb	r2, [r3, #0]
			Disp[1] = Disp[0];
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	705a      	strb	r2, [r3, #1]
			Disp[2] = Disp[1];
 800865e:	785a      	ldrb	r2, [r3, #1]
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	709a      	strb	r2, [r3, #2]
			Disp[3] = Disp[2];
 8008664:	789a      	ldrb	r2, [r3, #2]
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	70da      	strb	r2, [r3, #3]
		 if(on==0){
 800866a:	bb25      	cbnz	r5, 80086b6 <blinker+0xda>
			Disp[4] = 0x44; //01000100	;
 800866c:	2244      	movs	r2, #68	; 0x44
 800866e:	711a      	strb	r2, [r3, #4]
			Disp[5] = 0x44; //01000100	;
 8008670:	715a      	strb	r2, [r3, #5]
			Disp[6] = 0x0A;
 8008672:	220a      	movs	r2, #10
 8008674:	719a      	strb	r2, [r3, #6]
			on=1;
 8008676:	2501      	movs	r5, #1
			function8();
 8008678:	f7ff f988 	bl	800798c <function8>
			secLast = sec1;
 800867c:	f8d9 3000 	ldr.w	r3, [r9]
 8008680:	f8c8 3000 	str.w	r3, [r8]
	 HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008684:	2200      	movs	r2, #0
 8008686:	4917      	ldr	r1, [pc, #92]	; (80086e4 <blinker+0x108>)
 8008688:	4630      	mov	r0, r6
 800868a:	f7f9 f9e3 	bl	8001a54 <HAL_RTC_GetDate>
	if(!(sDate.Date == DateLast))
 800868e:	4b22      	ldr	r3, [pc, #136]	; (8008718 <blinker+0x13c>)
 8008690:	78ba      	ldrb	r2, [r7, #2]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d001      	beq.n	800869c <blinker+0xc0>
			getDateAndTimeFromGPS();
 8008698:	f7fd fc6c 	bl	8005f74 <getDateAndTimeFromGPS>
	if (sTime.Hours==(planOffHr)){
 800869c:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <blinker+0x134>)
 800869e:	491f      	ldr	r1, [pc, #124]	; (800871c <blinker+0x140>)
 80086a0:	7813      	ldrb	r3, [r2, #0]
 80086a2:	7809      	ldrb	r1, [r1, #0]
 80086a4:	428b      	cmp	r3, r1
 80086a6:	d10d      	bne.n	80086c4 <blinker+0xe8>
		if (sTime.Minutes>planOffM)
 80086a8:	7851      	ldrb	r1, [r2, #1]
 80086aa:	4a1d      	ldr	r2, [pc, #116]	; (8008720 <blinker+0x144>)
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	4291      	cmp	r1, r2
 80086b0:	d909      	bls.n	80086c6 <blinker+0xea>
 80086b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				Disp[4] = 0x12; //00000000	;
 80086b6:	2212      	movs	r2, #18
 80086b8:	711a      	strb	r2, [r3, #4]
				Disp[5] = 0x12; //00000000	;
 80086ba:	715a      	strb	r2, [r3, #5]
				Disp[6] = 0x0A;
 80086bc:	220a      	movs	r2, #10
 80086be:	719a      	strb	r2, [r3, #6]
				on=0;
 80086c0:	2500      	movs	r5, #0
 80086c2:	e7d9      	b.n	8008678 <blinker+0x9c>
		if (sTime.Hours>(planOffHr))
 80086c4:	d80b      	bhi.n	80086de <blinker+0x102>
			if (sTime.Hours<(planOnHr))
 80086c6:	4a17      	ldr	r2, [pc, #92]	; (8008724 <blinker+0x148>)
 80086c8:	7812      	ldrb	r2, [r2, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d807      	bhi.n	80086de <blinker+0x102>
			if(changeMode==1){
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d188      	bne.n	80085e6 <blinker+0xa>
			changeMode=0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	6023      	str	r3, [r4, #0]
			signal();
 80086d8:	f7ff ff0e 	bl	80084f8 <signal>
 80086dc:	e783      	b.n	80085e6 <blinker+0xa>
 80086de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e2:	bf00      	nop
 80086e4:	2000115a 	.word	0x2000115a
 80086e8:	20001168 	.word	0x20001168
 80086ec:	20000fdc 	.word	0x20000fdc
 80086f0:	20000e10 	.word	0x20000e10
 80086f4:	20003634 	.word	0x20003634
 80086f8:	2000134c 	.word	0x2000134c
 80086fc:	2000130c 	.word	0x2000130c
 8008700:	20001438 	.word	0x20001438
 8008704:	20001584 	.word	0x20001584
 8008708:	20001224 	.word	0x20001224
 800870c:	200010e8 	.word	0x200010e8
 8008710:	20000ea4 	.word	0x20000ea4
 8008714:	200010bd 	.word	0x200010bd
 8008718:	200015ec 	.word	0x200015ec
 800871c:	200051f0 	.word	0x200051f0
 8008720:	20003ad7 	.word	0x20003ad7
 8008724:	20002625 	.word	0x20002625
 8008728:	20000114 	.word	0x20000114
 800872c:	20000154 	.word	0x20000154

08008730 <planDetailSD>:
	incCnt=incCnt-19;
 8008730:	4a32      	ldr	r2, [pc, #200]	; (80087fc <planDetailSD+0xcc>)
 8008732:	6813      	ldr	r3, [r2, #0]
int planDetailSD(int planNo) {
 8008734:	b510      	push	{r4, lr}
	incCnt=incCnt-19;
 8008736:	f1a3 0113 	sub.w	r1, r3, #19
 800873a:	6011      	str	r1, [r2, #0]
	plan_ID = planDetailsArray[incCnt+1];
 800873c:	4a30      	ldr	r2, [pc, #192]	; (8008800 <planDetailSD+0xd0>)
	planMode = planDetailsArray[incCnt+16];
 800873e:	4c31      	ldr	r4, [pc, #196]	; (8008804 <planDetailSD+0xd4>)
	plan_ID = planDetailsArray[incCnt+1];
 8008740:	4413      	add	r3, r2
 8008742:	4a31      	ldr	r2, [pc, #196]	; (8008808 <planDetailSD+0xd8>)
 8008744:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8008748:	7011      	strb	r1, [r2, #0]
	planOnHr = planDetailsArray[incCnt+2];
 800874a:	4a30      	ldr	r2, [pc, #192]	; (800880c <planDetailSD+0xdc>)
 800874c:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 8008750:	7011      	strb	r1, [r2, #0]
	planOnM = planDetailsArray[incCnt+3];
 8008752:	4a2f      	ldr	r2, [pc, #188]	; (8008810 <planDetailSD+0xe0>)
 8008754:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8008758:	7011      	strb	r1, [r2, #0]
	planOffHr = planDetailsArray[incCnt+4];
 800875a:	4a2e      	ldr	r2, [pc, #184]	; (8008814 <planDetailSD+0xe4>)
 800875c:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 8008760:	7011      	strb	r1, [r2, #0]
	planOffM = planDetailsArray[incCnt+5];
 8008762:	4a2d      	ldr	r2, [pc, #180]	; (8008818 <planDetailSD+0xe8>)
 8008764:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8008768:	7011      	strb	r1, [r2, #0]
	planS1GT = planDetailsArray[incCnt+6];
 800876a:	4a2c      	ldr	r2, [pc, #176]	; (800881c <planDetailSD+0xec>)
 800876c:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8008770:	7011      	strb	r1, [r2, #0]
	planS2GT = planDetailsArray[incCnt+7];
 8008772:	4a2b      	ldr	r2, [pc, #172]	; (8008820 <planDetailSD+0xf0>)
 8008774:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8008778:	7011      	strb	r1, [r2, #0]
	planS3GT = planDetailsArray[incCnt+8];
 800877a:	4a2a      	ldr	r2, [pc, #168]	; (8008824 <planDetailSD+0xf4>)
 800877c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8008780:	7011      	strb	r1, [r2, #0]
	planS4GT = planDetailsArray[incCnt+9];
 8008782:	4a29      	ldr	r2, [pc, #164]	; (8008828 <planDetailSD+0xf8>)
 8008784:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8008788:	7011      	strb	r1, [r2, #0]
	planS5GT = planDetailsArray[incCnt+10];
 800878a:	4a28      	ldr	r2, [pc, #160]	; (800882c <planDetailSD+0xfc>)
 800878c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8008790:	7011      	strb	r1, [r2, #0]
	planA1GT = planDetailsArray[incCnt+11];
 8008792:	4a27      	ldr	r2, [pc, #156]	; (8008830 <planDetailSD+0x100>)
 8008794:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8008798:	7011      	strb	r1, [r2, #0]
	planA2GT = planDetailsArray[incCnt+12];
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <planDetailSD+0x104>)
 800879c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 80087a0:	7011      	strb	r1, [r2, #0]
	planA3GT = planDetailsArray[incCnt+13];
 80087a2:	4a25      	ldr	r2, [pc, #148]	; (8008838 <planDetailSD+0x108>)
 80087a4:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 80087a8:	7011      	strb	r1, [r2, #0]
	planA4GT = planDetailsArray[incCnt+14];
 80087aa:	4a24      	ldr	r2, [pc, #144]	; (800883c <planDetailSD+0x10c>)
 80087ac:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 80087b0:	7011      	strb	r1, [r2, #0]
	planA5GT = planDetailsArray[incCnt+15];
 80087b2:	4a23      	ldr	r2, [pc, #140]	; (8008840 <planDetailSD+0x110>)
 80087b4:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80087b8:	7011      	strb	r1, [r2, #0]
	planMode = planDetailsArray[incCnt+16];
 80087ba:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80087be:	7022      	strb	r2, [r4, #0]
	noOfPhase = planDetailsArray[incCnt+17];
 80087c0:	4a20      	ldr	r2, [pc, #128]	; (8008844 <planDetailSD+0x114>)
 80087c2:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80087c6:	7013      	strb	r3, [r2, #0]
	totalPhase=noOfPhase;
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <planDetailSD+0x118>)
 80087ca:	7013      	strb	r3, [r2, #0]
	getCurrentPlanTotalNoOfPhases(); //get the total no of phases in current dat/date plan and save it in phaseList[].
 80087cc:	f7fe ff2a 	bl	8007624 <getCurrentPlanTotalNoOfPhases>
	getCurrentPlanPhases();
 80087d0:	f7fe ffba 	bl	8007748 <getCurrentPlanPhases>
		if (planMode == 1 )
 80087d4:	7823      	ldrb	r3, [r4, #0]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d10a      	bne.n	80087f0 <planDetailSD+0xc0>
			blinker();
 80087da:	f7ff feff 	bl	80085dc <blinker>
		 if(returnMode==1)
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <planDetailSD+0x11c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d007      	beq.n	80087f6 <planDetailSD+0xc6>
		 if(isReprogrammed==1)
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <planDetailSD+0x120>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d003      	beq.n	80087f6 <planDetailSD+0xc6>
}
 80087ee:	bd10      	pop	{r4, pc}
			signal();
 80087f0:	f7ff fe82 	bl	80084f8 <signal>
 80087f4:	e7f3      	b.n	80087de <planDetailSD+0xae>
 80087f6:	2001      	movs	r0, #1
}
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	200000d4 	.word	0x200000d4
 8008800:	20003b95 	.word	0x20003b95
 8008804:	200051f2 	.word	0x200051f2
 8008808:	20003630 	.word	0x20003630
 800880c:	20002625 	.word	0x20002625
 8008810:	200039ee 	.word	0x200039ee
 8008814:	200051f0 	.word	0x200051f0
 8008818:	20003ad7 	.word	0x20003ad7
 800881c:	200037bc 	.word	0x200037bc
 8008820:	200015ed 	.word	0x200015ed
 8008824:	200039fc 	.word	0x200039fc
 8008828:	20003c2b 	.word	0x20003c2b
 800882c:	2000001d 	.word	0x2000001d
 8008830:	20003c2c 	.word	0x20003c2c
 8008834:	200039f4 	.word	0x200039f4
 8008838:	20003ad6 	.word	0x20003ad6
 800883c:	20003ae0 	.word	0x20003ae0
 8008840:	2000001c 	.word	0x2000001c
 8008844:	200000e6 	.word	0x200000e6
 8008848:	20000129 	.word	0x20000129
 800884c:	20000110 	.word	0x20000110
 8008850:	200000d8 	.word	0x200000d8

08008854 <init4>:
	 returnMode=0;
 8008854:	4ba2      	ldr	r3, [pc, #648]	; (8008ae0 <init4+0x28c>)
void init4(void) {
 8008856:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 returnMode=0;
 800885a:	2500      	movs	r5, #0
 800885c:	601d      	str	r5, [r3, #0]
     isReprogrammed=0;
 800885e:	4ba1      	ldr	r3, [pc, #644]	; (8008ae4 <init4+0x290>)
     isProgrammed = readBytes[0];
 8008860:	4ca1      	ldr	r4, [pc, #644]	; (8008ae8 <init4+0x294>)
     isReprogrammed=0;
 8008862:	601d      	str	r5, [r3, #0]
     clearReadBytes();
 8008864:	f7fc fbd4 	bl	8005010 <clearReadBytes>
     SDcardReadSeek("prog.txt", 3, 0);
 8008868:	462a      	mov	r2, r5
 800886a:	2103      	movs	r1, #3
 800886c:	489f      	ldr	r0, [pc, #636]	; (8008aec <init4+0x298>)
 800886e:	f7fb ffb3 	bl	80047d8 <SDcardReadSeek>
     isProgrammed = readBytes[0];
 8008872:	7820      	ldrb	r0, [r4, #0]
     clearReadBytes();
 8008874:	f7fc fbcc 	bl	8005010 <clearReadBytes>
     if(isProgrammed==1){
 8008878:	2801      	cmp	r0, #1
 800887a:	d104      	bne.n	8008886 <init4+0x32>
	SDcardReadSeek("infoN.txt", 16, 0);
 800887c:	462a      	mov	r2, r5
 800887e:	2110      	movs	r1, #16
 8008880:	489b      	ldr	r0, [pc, #620]	; (8008af0 <init4+0x29c>)
 8008882:	f7fb ffa9 	bl	80047d8 <SDcardReadSeek>
	junctionId = readBytes[0];
 8008886:	4a9b      	ldr	r2, [pc, #620]	; (8008af4 <init4+0x2a0>)
 8008888:	7823      	ldrb	r3, [r4, #0]
	programVersionNo = readBytes[1];
 800888a:	4e9b      	ldr	r6, [pc, #620]	; (8008af8 <init4+0x2a4>)
	junctionId = readBytes[0];
 800888c:	7013      	strb	r3, [r2, #0]
	programVersionNo = readBytes[1];
 800888e:	7862      	ldrb	r2, [r4, #1]
 8008890:	7032      	strb	r2, [r6, #0]
	fileNo = readBytes[2];
 8008892:	4a9a      	ldr	r2, [pc, #616]	; (8008afc <init4+0x2a8>)
 8008894:	78a1      	ldrb	r1, [r4, #2]
 8008896:	7011      	strb	r1, [r2, #0]
	noOfSides = readBytes[4];
 8008898:	4a99      	ldr	r2, [pc, #612]	; (8008b00 <init4+0x2ac>)
 800889a:	7921      	ldrb	r1, [r4, #4]
 800889c:	7011      	strb	r1, [r2, #0]
	noOfDateSlots = readBytes[5];
 800889e:	4999      	ldr	r1, [pc, #612]	; (8008b04 <init4+0x2b0>)
 80088a0:	7962      	ldrb	r2, [r4, #5]
 80088a2:	700a      	strb	r2, [r1, #0]
	noOfDaySlots = readBytes[6];
 80088a4:	4a98      	ldr	r2, [pc, #608]	; (8008b08 <init4+0x2b4>)
 80088a6:	79a0      	ldrb	r0, [r4, #6]
 80088a8:	7010      	strb	r0, [r2, #0]
	noOfPlans = readBytes[7];
 80088aa:	4898      	ldr	r0, [pc, #608]	; (8008b0c <init4+0x2b8>)
 80088ac:	79e5      	ldrb	r5, [r4, #7]
 80088ae:	7005      	strb	r5, [r0, #0]
	padestarianTime = readBytes[8];
 80088b0:	4897      	ldr	r0, [pc, #604]	; (8008b10 <init4+0x2bc>)
 80088b2:	7a25      	ldrb	r5, [r4, #8]
 80088b4:	6005      	str	r5, [r0, #0]
	side1PoleType = readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 80088b6:	4897      	ldr	r0, [pc, #604]	; (8008b14 <init4+0x2c0>)
 80088b8:	7aa5      	ldrb	r5, [r4, #10]
 80088ba:	6005      	str	r5, [r0, #0]
	side2PoleType = readBytes[11];
 80088bc:	4896      	ldr	r0, [pc, #600]	; (8008b18 <init4+0x2c4>)
 80088be:	7ae5      	ldrb	r5, [r4, #11]
 80088c0:	6005      	str	r5, [r0, #0]
	side3PoleType = readBytes[12];
 80088c2:	4896      	ldr	r0, [pc, #600]	; (8008b1c <init4+0x2c8>)
 80088c4:	7b25      	ldrb	r5, [r4, #12]
 80088c6:	6005      	str	r5, [r0, #0]
	side4PoleType = readBytes[13];
 80088c8:	4895      	ldr	r0, [pc, #596]	; (8008b20 <init4+0x2cc>)
 80088ca:	7b65      	ldrb	r5, [r4, #13]
 80088cc:	6005      	str	r5, [r0, #0]
	side5PoleType = readBytes[14];
 80088ce:	4895      	ldr	r0, [pc, #596]	; (8008b24 <init4+0x2d0>)
 80088d0:	7ba5      	ldrb	r5, [r4, #14]
 80088d2:	6005      	str	r5, [r0, #0]
	if (junctionId == 0xFF || junctionId == 0x00)
 80088d4:	3b01      	subs	r3, #1
	totalNoOfPhases=readBytes[9];
 80088d6:	4894      	ldr	r0, [pc, #592]	; (8008b28 <init4+0x2d4>)
 80088d8:	7a65      	ldrb	r5, [r4, #9]
 80088da:	7005      	strb	r5, [r0, #0]
	if (junctionId == 0xFF || junctionId == 0x00)
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2bfd      	cmp	r3, #253	; 0xfd
 80088e0:	468a      	mov	sl, r1
 80088e2:	4691      	mov	r9, r2
 80088e4:	4d91      	ldr	r5, [pc, #580]	; (8008b2c <init4+0x2d8>)
 80088e6:	d931      	bls.n	800894c <init4+0xf8>
	     if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5))
 80088e8:	2120      	movs	r1, #32
 80088ea:	4891      	ldr	r0, [pc, #580]	; (8008b30 <init4+0x2dc>)
 80088ec:	f7f8 f802 	bl	80008f4 <HAL_GPIO_ReadPin>
 80088f0:	4b90      	ldr	r3, [pc, #576]	; (8008b34 <init4+0x2e0>)
 80088f2:	b348      	cbz	r0, 8008948 <init4+0xf4>
	    	  programFromBLE=1;
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
	     program3();
 80088f8:	f7ff fa06 	bl	8007d08 <program3>
	programVersionNoLast = programVersionNo;
 80088fc:	4b8e      	ldr	r3, [pc, #568]	; (8008b38 <init4+0x2e4>)
 80088fe:	7832      	ldrb	r2, [r6, #0]
 8008900:	701a      	strb	r2, [r3, #0]
  	 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008902:	498e      	ldr	r1, [pc, #568]	; (8008b3c <init4+0x2e8>)
 8008904:	488e      	ldr	r0, [pc, #568]	; (8008b40 <init4+0x2ec>)
  		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008906:	4f89      	ldr	r7, [pc, #548]	; (8008b2c <init4+0x2d8>)
 8008908:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8008b40 <init4+0x2ec>
  	 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800890c:	2200      	movs	r2, #0
 800890e:	f7f9 f879 	bl	8001a04 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008912:	2200      	movs	r2, #0
 8008914:	4985      	ldr	r1, [pc, #532]	; (8008b2c <init4+0x2d8>)
 8008916:	488a      	ldr	r0, [pc, #552]	; (8008b40 <init4+0x2ec>)
 8008918:	f7f9 f89c 	bl	8001a54 <HAL_RTC_GetDate>
  	while (sDate.Year==0){
 800891c:	78ee      	ldrb	r6, [r5, #3]
 800891e:	b31e      	cbz	r6, 8008968 <init4+0x114>
  	dayID = 0xFE;
 8008920:	4b88      	ldr	r3, [pc, #544]	; (8008b44 <init4+0x2f0>)
  	dateID = 0xFE;
 8008922:	4f89      	ldr	r7, [pc, #548]	; (8008b48 <init4+0x2f4>)
  		 dateSlot[j]= readBytes[j+3];
 8008924:	4e89      	ldr	r6, [pc, #548]	; (8008b4c <init4+0x2f8>)
  	dateID = 0xFE;
 8008926:	22fe      	movs	r2, #254	; 0xfe
 8008928:	703a      	strb	r2, [r7, #0]
  	dayID = 0xFE;
 800892a:	701a      	strb	r2, [r3, #0]
  	for(int i=1;i<noOfDateSlots+1;i++)
 800892c:	f04f 0b01 	mov.w	fp, #1
 8008930:	4698      	mov	r8, r3
 8008932:	220b      	movs	r2, #11
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	fb02 f00b 	mul.w	r0, r2, fp
 800893c:	459b      	cmp	fp, r3
 800893e:	f1a0 000b 	sub.w	r0, r0, #11
 8008942:	dd19      	ble.n	8008978 <init4+0x124>
  	noOfPlansN = 0xFE;
 8008944:	26fe      	movs	r6, #254	; 0xfe
 8008946:	e037      	b.n	80089b8 <init4+0x164>
	    	  programFromBLE=0;
 8008948:	6018      	str	r0, [r3, #0]
 800894a:	e7d5      	b.n	80088f8 <init4+0xa4>
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800894c:	2200      	movs	r2, #0
 800894e:	4629      	mov	r1, r5
 8008950:	487b      	ldr	r0, [pc, #492]	; (8008b40 <init4+0x2ec>)
 8008952:	f7f9 f87f 	bl	8001a54 <HAL_RTC_GetDate>
		if((sDate.Year==0))
 8008956:	78eb      	ldrb	r3, [r5, #3]
 8008958:	b913      	cbnz	r3, 8008960 <init4+0x10c>
		function9();
 800895a:	f7fd f82f 	bl	80059bc <function9>
 800895e:	e7cd      	b.n	80088fc <init4+0xa8>
			DateLast=sDate.Date;
 8008960:	4b7b      	ldr	r3, [pc, #492]	; (8008b50 <init4+0x2fc>)
 8008962:	78aa      	ldrb	r2, [r5, #2]
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e7c9      	b.n	80088fc <init4+0xa8>
  		function9();
 8008968:	f7fd f828 	bl	80059bc <function9>
  		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800896c:	4632      	mov	r2, r6
 800896e:	4639      	mov	r1, r7
 8008970:	4640      	mov	r0, r8
 8008972:	f7f9 f86f 	bl	8001a54 <HAL_RTC_GetDate>
 8008976:	e7d1      	b.n	800891c <init4+0xc8>
 8008978:	9201      	str	r2, [sp, #4]
  	    readDateSD(counter);
 800897a:	f7fc fbcf 	bl	800511c <readDateSD>
  	for(int j=0;j<6;j++){
 800897e:	9a01      	ldr	r2, [sp, #4]
 8008980:	2300      	movs	r3, #0
  		 dateSlot[j]= readBytes[j+3];
 8008982:	18e1      	adds	r1, r4, r3
 8008984:	78c9      	ldrb	r1, [r1, #3]
 8008986:	5599      	strb	r1, [r3, r6]
  	for(int j=0;j<6;j++){
 8008988:	3301      	adds	r3, #1
 800898a:	2b06      	cmp	r3, #6
 800898c:	d1f9      	bne.n	8008982 <init4+0x12e>
if(dateSlot[5]==sDate.Year)//comparing present year with ToYear
 800898e:	7971      	ldrb	r1, [r6, #5]
 8008990:	78eb      	ldrb	r3, [r5, #3]
 8008992:	4299      	cmp	r1, r3
 8008994:	d166      	bne.n	8008a64 <init4+0x210>
	if(dateSlot[4] >= sDate.Month)//comparing present month with ToMonth
 8008996:	786b      	ldrb	r3, [r5, #1]
 8008998:	7931      	ldrb	r1, [r6, #4]
 800899a:	4299      	cmp	r1, r3
 800899c:	d36d      	bcc.n	8008a7a <init4+0x226>
		if(dateSlot[1] <= sDate.Month)//comparing present month with FromMonth
 800899e:	7871      	ldrb	r1, [r6, #1]
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d86a      	bhi.n	8008a7a <init4+0x226>
			if(dateSlot[3] >= sDate.Date)//comparing present day with ToDay
 80089a4:	78ab      	ldrb	r3, [r5, #2]
 80089a6:	78f1      	ldrb	r1, [r6, #3]
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d366      	bcc.n	8008a7a <init4+0x226>
				if(dateSlot[0] <= sDate.Date)//comparing present day with FromDay
 80089ac:	7831      	ldrb	r1, [r6, #0]
 80089ae:	4299      	cmp	r1, r3
 80089b0:	d863      	bhi.n	8008a7a <init4+0x226>
					dateID=readBytes[2];
 80089b2:	78a3      	ldrb	r3, [r4, #2]
					noOfPlansN=readBytes[9];
 80089b4:	7a66      	ldrb	r6, [r4, #9]
					dateID=readBytes[2];
 80089b6:	703b      	strb	r3, [r7, #0]
if(dateID==0xFE) //if means the present date is not coming in date slot and we have to find it in day
 80089b8:	783b      	ldrb	r3, [r7, #0]
 80089ba:	2bfe      	cmp	r3, #254	; 0xfe
 80089bc:	d115      	bne.n	80089ea <init4+0x196>
 80089be:	f04f 0a01 	mov.w	sl, #1
 80089c2:	f04f 0b06 	mov.w	fp, #6
	for(int i=1;i<noOfDaySlots+1;i++)
 80089c6:	f899 3000 	ldrb.w	r3, [r9]
 80089ca:	fb0b f00a 	mul.w	r0, fp, sl
 80089ce:	459a      	cmp	sl, r3
 80089d0:	f1a0 0006 	sub.w	r0, r0, #6
 80089d4:	dc09      	bgt.n	80089ea <init4+0x196>
		   readDaySD(counter);
 80089d6:	f7fc fbad 	bl	8005134 <readDaySD>
		  	if(sDate.WeekDay==readBytes[3])
 80089da:	782a      	ldrb	r2, [r5, #0]
 80089dc:	78e3      	ldrb	r3, [r4, #3]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d14e      	bne.n	8008a80 <init4+0x22c>
		  		dayID=readBytes[2];
 80089e2:	78a3      	ldrb	r3, [r4, #2]
		  		noOfPlansN=readBytes[4];
 80089e4:	7926      	ldrb	r6, [r4, #4]
		  		dayID=readBytes[2];
 80089e6:	f888 3000 	strb.w	r3, [r8]
if((dayID==0xFE)&&(dateID==0xFE))
 80089ea:	f898 3000 	ldrb.w	r3, [r8]
 80089ee:	2bfe      	cmp	r3, #254	; 0xfe
 80089f0:	d116      	bne.n	8008a20 <init4+0x1cc>
 80089f2:	783b      	ldrb	r3, [r7, #0]
 80089f4:	2bfe      	cmp	r3, #254	; 0xfe
 80089f6:	d113      	bne.n	8008a20 <init4+0x1cc>
 80089f8:	2501      	movs	r5, #1
 80089fa:	f04f 0a06 	mov.w	sl, #6
	for(int i=1;i<noOfDaySlots+1;i++)
 80089fe:	f899 3000 	ldrb.w	r3, [r9]
 8008a02:	fb0a f005 	mul.w	r0, sl, r5
 8008a06:	429d      	cmp	r5, r3
 8008a08:	f1a0 0006 	sub.w	r0, r0, #6
 8008a0c:	dc08      	bgt.n	8008a20 <init4+0x1cc>
		   readDaySD(counter);
 8008a0e:	f7fc fb91 	bl	8005134 <readDaySD>
		  	if(0==readBytes[2]){
 8008a12:	78a3      	ldrb	r3, [r4, #2]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d136      	bne.n	8008a86 <init4+0x232>
		  		noOfPlansN=readBytes[4];
 8008a18:	7926      	ldrb	r6, [r4, #4]
		  		dateID=0;
 8008a1a:	703b      	strb	r3, [r7, #0]
		  		dayID=readBytes[2];
 8008a1c:	f888 3000 	strb.w	r3, [r8]
countNoOfMapDetails();
 8008a20:	f7fe fb5e 	bl	80070e0 <countNoOfMapDetails>
currentDayAllPlan();
 8008a24:	f7fe fd46 	bl	80074b4 <currentDayAllPlan>
clearPlanTimeBuffer();
 8008a28:	f7fc fb4e 	bl	80050c8 <clearPlanTimeBuffer>
HAL_Delay(50);
 8008a2c:	2032      	movs	r0, #50	; 0x32
 8008a2e:	f7f7 fdc9 	bl	80005c4 <HAL_Delay>
eepromAddress=4001;
 8008a32:	4b48      	ldr	r3, [pc, #288]	; (8008b54 <init4+0x300>)
EEPROM_WriteArray(planDetailsArray,counterOfPlan,eepromAddress);
 8008a34:	4848      	ldr	r0, [pc, #288]	; (8008b58 <init4+0x304>)
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008a36:	4d49      	ldr	r5, [pc, #292]	; (8008b5c <init4+0x308>)
eepromAddress=4001;
 8008a38:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8008a3c:	601a      	str	r2, [r3, #0]
EEPROM_WriteArray(planDetailsArray,counterOfPlan,eepromAddress);
 8008a3e:	4b48      	ldr	r3, [pc, #288]	; (8008b60 <init4+0x30c>)
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	f7fb ff7d 	bl	8004940 <EEPROM_WriteArray>
 8008a46:	4b47      	ldr	r3, [pc, #284]	; (8008b64 <init4+0x310>)
if (sTime.Hours>planTime[2])
 8008a48:	4a3c      	ldr	r2, [pc, #240]	; (8008b3c <init4+0x2e8>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008a4c:	f8df c108 	ldr.w	ip, [pc, #264]	; 8008b58 <init4+0x304>
if (sTime.Hours>planTime[2])
 8008a50:	7817      	ldrb	r7, [r2, #0]
if   (sTime.Minutes < planTime[1])
 8008a52:	f892 e001 	ldrb.w	lr, [r2, #1]
for(int i=1;i<noOfPlansN+1;i++)
 8008a56:	2401      	movs	r4, #1
 8008a58:	2200      	movs	r2, #0
 8008a5a:	42a6      	cmp	r6, r4
 8008a5c:	da15      	bge.n	8008a8a <init4+0x236>
 8008a5e:	b38a      	cbz	r2, 8008ac4 <init4+0x270>
 8008a60:	6018      	str	r0, [r3, #0]
 8008a62:	e02f      	b.n	8008ac4 <init4+0x270>
if(dateSlot[5]>sDate.Year)//comparing present year with ToYear
 8008a64:	d909      	bls.n	8008a7a <init4+0x226>
	if(dateSlot[2]== sDate.Year)//comparing present year with FromYear
 8008a66:	78b1      	ldrb	r1, [r6, #2]
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d106      	bne.n	8008a7a <init4+0x226>
		if(dateSlot[1]==sDate.Month)//comparing present month with FromMonth
 8008a6c:	7871      	ldrb	r1, [r6, #1]
 8008a6e:	786b      	ldrb	r3, [r5, #1]
 8008a70:	4299      	cmp	r1, r3
 8008a72:	d102      	bne.n	8008a7a <init4+0x226>
			if(dateSlot[0] <= sDate.Date)//comparing present day with FromDay
 8008a74:	7831      	ldrb	r1, [r6, #0]
 8008a76:	78ab      	ldrb	r3, [r5, #2]
 8008a78:	e799      	b.n	80089ae <init4+0x15a>
  	for(int i=1;i<noOfDateSlots+1;i++)
 8008a7a:	f10b 0b01 	add.w	fp, fp, #1
 8008a7e:	e759      	b.n	8008934 <init4+0xe0>
	for(int i=1;i<noOfDaySlots+1;i++)
 8008a80:	f10a 0a01 	add.w	sl, sl, #1
 8008a84:	e79f      	b.n	80089c6 <init4+0x172>
	for(int i=1;i<noOfDaySlots+1;i++)
 8008a86:	3501      	adds	r5, #1
 8008a88:	e7b9      	b.n	80089fe <init4+0x1aa>
 8008a8a:	2200      	movs	r2, #0
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008a8c:	1881      	adds	r1, r0, r2
 8008a8e:	4461      	add	r1, ip
 8008a90:	7889      	ldrb	r1, [r1, #2]
 8008a92:	5551      	strb	r1, [r2, r5]
	  for(int j=0;j<4;j++){
 8008a94:	3201      	adds	r2, #1
 8008a96:	2a04      	cmp	r2, #4
 8008a98:	d1f8      	bne.n	8008a8c <init4+0x238>
if (sTime.Hours>planTime[2])
 8008a9a:	78aa      	ldrb	r2, [r5, #2]
 8008a9c:	4297      	cmp	r7, r2
	       incCnt=incCnt+19;
 8008a9e:	f100 0013 	add.w	r0, r0, #19
if (sTime.Hours>planTime[2])
 8008aa2:	d819      	bhi.n	8008ad8 <init4+0x284>
if (sTime.Hours==planTime[2])
 8008aa4:	d105      	bne.n	8008ab2 <init4+0x25e>
if   (sTime.Minutes < planTime[1])
 8008aa6:	7869      	ldrb	r1, [r5, #1]
 8008aa8:	458e      	cmp	lr, r1
 8008aaa:	d201      	bcs.n	8008ab0 <init4+0x25c>
 8008aac:	6018      	str	r0, [r3, #0]
 8008aae:	e007      	b.n	8008ac0 <init4+0x26c>
else if(sTime.Minutes > planTime[1])
 8008ab0:	d812      	bhi.n	8008ad8 <init4+0x284>
if (sTime.Hours==planTime[0])
 8008ab2:	7829      	ldrb	r1, [r5, #0]
 8008ab4:	428f      	cmp	r7, r1
 8008ab6:	d10c      	bne.n	8008ad2 <init4+0x27e>
 8008ab8:	6018      	str	r0, [r3, #0]
{if (!(sTime.Minutes <= planTime[1]))
 8008aba:	786b      	ldrb	r3, [r5, #1]
 8008abc:	4573      	cmp	r3, lr
 8008abe:	d201      	bcs.n	8008ac4 <init4+0x270>
			   planNo=i;
 8008ac0:	4b29      	ldr	r3, [pc, #164]	; (8008b68 <init4+0x314>)
 8008ac2:	701c      	strb	r4, [r3, #0]
planDetailSD(planNo);
 8008ac4:	4b28      	ldr	r3, [pc, #160]	; (8008b68 <init4+0x314>)
 8008ac6:	7818      	ldrb	r0, [r3, #0]
}
 8008ac8:	b003      	add	sp, #12
 8008aca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
planDetailSD(planNo);
 8008ace:	f7ff be2f 	b.w	8008730 <planDetailSD>
  if (sTime.Hours>planTime[0])
 8008ad2:	d901      	bls.n	8008ad8 <init4+0x284>
	   if (sTime.Hours< planTime[2]){
 8008ad4:	4297      	cmp	r7, r2
 8008ad6:	d3e9      	bcc.n	8008aac <init4+0x258>
for(int i=1;i<noOfPlansN+1;i++)
 8008ad8:	3401      	adds	r4, #1
 8008ada:	2201      	movs	r2, #1
 8008adc:	e7bd      	b.n	8008a5a <init4+0x206>
 8008ade:	bf00      	nop
 8008ae0:	20000110 	.word	0x20000110
 8008ae4:	200000d8 	.word	0x200000d8
 8008ae8:	200002f4 	.word	0x200002f4
 8008aec:	08009519 	.word	0x08009519
 8008af0:	080094fc 	.word	0x080094fc
 8008af4:	2000000d 	.word	0x2000000d
 8008af8:	2000010d 	.word	0x2000010d
 8008afc:	2000000c 	.word	0x2000000c
 8008b00:	200000ed 	.word	0x200000ed
 8008b04:	200000e4 	.word	0x200000e4
 8008b08:	200000e5 	.word	0x200000e5
 8008b0c:	200000ec 	.word	0x200000ec
 8008b10:	20000018 	.word	0x20000018
 8008b14:	20001620 	.word	0x20001620
 8008b18:	2000363c 	.word	0x2000363c
 8008b1c:	200039f8 	.word	0x200039f8
 8008b20:	20003ac8 	.word	0x20003ac8
 8008b24:	200039f0 	.word	0x200039f0
 8008b28:	20000120 	.word	0x20000120
 8008b2c:	2000115a 	.word	0x2000115a
 8008b30:	40021000 	.word	0x40021000
 8008b34:	2000367c 	.word	0x2000367c
 8008b38:	2000010e 	.word	0x2000010e
 8008b3c:	20000ea4 	.word	0x20000ea4
 8008b40:	20001168 	.word	0x20001168
 8008b44:	200000be 	.word	0x200000be
 8008b48:	200000bc 	.word	0x200000bc
 8008b4c:	20003d44 	.word	0x20003d44
 8008b50:	200015ec 	.word	0x200015ec
 8008b54:	200000c0 	.word	0x200000c0
 8008b58:	20003b95 	.word	0x20003b95
 8008b5c:	20001128 	.word	0x20001128
 8008b60:	200000b8 	.word	0x200000b8
 8008b64:	200000d4 	.word	0x200000d4
 8008b68:	20003acd 	.word	0x20003acd

08008b6c <clearStringNsign>:


		void clearStringNsign(void)
		{
int a =0 ;
	for (a=0;a<100;a++)
 8008b6c:	2300      	movs	r3, #0
		{
string[a]=0;
 8008b6e:	4804      	ldr	r0, [pc, #16]	; (8008b80 <clearStringNsign+0x14>)
sign[a]=0;
 8008b70:	4904      	ldr	r1, [pc, #16]	; (8008b84 <clearStringNsign+0x18>)
string[a]=0;
 8008b72:	461a      	mov	r2, r3
 8008b74:	541a      	strb	r2, [r3, r0]
sign[a]=0;
 8008b76:	545a      	strb	r2, [r3, r1]
	for (a=0;a<100;a++)
 8008b78:	3301      	adds	r3, #1
 8008b7a:	2b64      	cmp	r3, #100	; 0x64
 8008b7c:	d1fa      	bne.n	8008b74 <clearStringNsign+0x8>
}
}
 8008b7e:	4770      	bx	lr
 8008b80:	200052f2 	.word	0x200052f2
 8008b84:	2000527f 	.word	0x2000527f

08008b88 <msgParse>:
	{
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	460f      	mov	r7, r1
	 signCntr = 0 ;
 8008b90:	4c29      	ldr	r4, [pc, #164]	; (8008c38 <msgParse+0xb0>)
	 clearStringNsign();
 8008b92:	f7ff ffeb 	bl	8008b6c <clearStringNsign>
	 msgCntr =  0 ;
 8008b96:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <msgParse+0xb4>)
	 signCntr = 0 ;
 8008b98:	2200      	movs	r2, #0
 8008b9a:	8022      	strh	r2, [r4, #0]
	 msgCntr =  0 ;
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	3001      	adds	r0, #1
	  while(*SPtr == '\0'){
 8008ba4:	7811      	ldrb	r1, [r2, #0]
 8008ba6:	b329      	cbz	r1, 8008bf4 <msgParse+0x6c>
 8008ba8:	4e25      	ldr	r6, [pc, #148]	; (8008c40 <msgParse+0xb8>)
 8008baa:	3a01      	subs	r2, #1
		while(*SPtr != '\0') {
 8008bac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008bb0:	bb21      	cbnz	r1, 8008bfc <msgParse+0x74>
      string[msgCntr] =  '\0' ;
 8008bb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bb6:	54b1      	strb	r1, [r6, r2]
 8008bb8:	1e79      	subs	r1, r7, #1
 8008bba:	4f22      	ldr	r7, [pc, #136]	; (8008c44 <msgParse+0xbc>)
      while(*sigPtr != '\0') {
 8008bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
      sign[signCntr] =  *sigPtr ;
 8008bc0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8008bc4:	54b8      	strb	r0, [r7, r2]
      while(*sigPtr != '\0') {
 8008bc6:	b9f8      	cbnz	r0, 8008c08 <msgParse+0x80>
 8008bc8:	1c6a      	adds	r2, r5, #1
	 signCntr = 0 ;
 8008bca:	8020      	strh	r0, [r4, #0]
 8008bcc:	b292      	uxth	r2, r2
	 msgCntr = pointer ;
 8008bce:	4601      	mov	r1, r0
            if(string[msgCntr]!=sign[signCntr])
 8008bd0:	1e55      	subs	r5, r2, #1
 8008bd2:	b22d      	sxth	r5, r5
 8008bd4:	f816 e005 	ldrb.w	lr, [r6, r5]
 8008bd8:	5c7d      	ldrb	r5, [r7, r1]
 8008bda:	45ae      	cmp	lr, r5
 8008bdc:	b215      	sxth	r5, r2
 8008bde:	d01b      	beq.n	8008c18 <msgParse+0x90>
                if (string[msgCntr]=='\0')
 8008be0:	f816 e005 	ldrb.w	lr, [r6, r5]
 8008be4:	f1be 0f00 	cmp.w	lr, #0
 8008be8:	d111      	bne.n	8008c0e <msgParse+0x86>
 8008bea:	801d      	strh	r5, [r3, #0]
 8008bec:	b100      	cbz	r0, 8008bf0 <msgParse+0x68>
 8008bee:	8021      	strh	r1, [r4, #0]
                 return 0 ;
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   msgCntr++;
 8008bf4:	881a      	ldrh	r2, [r3, #0]
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e7d1      	b.n	8008ba0 <msgParse+0x18>
      string[msgCntr] =  *SPtr ;
 8008bfc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008c00:	5431      	strb	r1, [r6, r0]
      msgCntr++;
 8008c02:	3001      	adds	r0, #1
 8008c04:	8018      	strh	r0, [r3, #0]
 8008c06:	e7d1      	b.n	8008bac <msgParse+0x24>
      signCntr++;
 8008c08:	3201      	adds	r2, #1
 8008c0a:	8022      	strh	r2, [r4, #0]
 8008c0c:	e7d6      	b.n	8008bbc <msgParse+0x34>
				signCntr = 0 ;  // Reset signature counter
 8008c0e:	2100      	movs	r1, #0
 8008c10:	3201      	adds	r2, #1
 8008c12:	b292      	uxth	r2, r2
 8008c14:	2001      	movs	r0, #1
 8008c16:	e7db      	b.n	8008bd0 <msgParse+0x48>
            signCntr++ ;
 8008c18:	3101      	adds	r1, #1
 8008c1a:	b209      	sxth	r1, r1
            msgCntr++ ;
 8008c1c:	4628      	mov	r0, r5
                if (sign[signCntr]=='\0')
 8008c1e:	f817 e001 	ldrb.w	lr, [r7, r1]
 8008c22:	f1be 0f00 	cmp.w	lr, #0
 8008c26:	d102      	bne.n	8008c2e <msgParse+0xa6>
 8008c28:	801d      	strh	r5, [r3, #0]
 8008c2a:	8021      	strh	r1, [r4, #0]
 8008c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (string[msgCntr]=='\0')
 8008c2e:	5d70      	ldrb	r0, [r6, r5]
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1ed      	bne.n	8008c10 <msgParse+0x88>
 8008c34:	801d      	strh	r5, [r3, #0]
 8008c36:	e7da      	b.n	8008bee <msgParse+0x66>
 8008c38:	20000132 	.word	0x20000132
 8008c3c:	20000130 	.word	0x20000130
 8008c40:	200052f2 	.word	0x200052f2
 8008c44:	2000527f 	.word	0x2000527f

08008c48 <SD_CheckStatus.isra.0>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
 8008c48:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8008c4a:	4c06      	ldr	r4, [pc, #24]	; (8008c64 <SD_CheckStatus.isra.0+0x1c>)
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008c50:	f7fb fe38 	bl	80048c4 <BSP_SD_GetCardState>
 8008c54:	4623      	mov	r3, r4
 8008c56:	b918      	cbnz	r0, 8008c60 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008c58:	7822      	ldrb	r2, [r4, #0]
 8008c5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c5e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8008c60:	7818      	ldrb	r0, [r3, #0]
}
 8008c62:	bd10      	pop	{r4, pc}
 8008c64:	2000001e 	.word	0x2000001e

08008c68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008c68:	b510      	push	{r4, lr}
Stat = STA_NOINIT;  
 8008c6a:	4c05      	ldr	r4, [pc, #20]	; (8008c80 <SD_initialize+0x18>)
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	7023      	strb	r3, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008c70:	f7fb fdf8 	bl	8004864 <BSP_SD_Init>
 8008c74:	b910      	cbnz	r0, 8008c7c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8008c76:	f7ff ffe7 	bl	8008c48 <SD_CheckStatus.isra.0>
 8008c7a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008c7c:	7820      	ldrb	r0, [r4, #0]
}
 8008c7e:	bd10      	pop	{r4, pc}
 8008c80:	2000001e 	.word	0x2000001e

08008c84 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8008c84:	f7ff bfe0 	b.w	8008c48 <SD_CheckStatus.isra.0>

08008c88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008c88:	b508      	push	{r3, lr}
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
 8008c94:	f7fb fdf6 	bl	8004884 <BSP_SD_ReadBlocks>
 8008c98:	b920      	cbnz	r0, 8008ca4 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008c9a:	f7fb fe13 	bl	80048c4 <BSP_SD_GetCardState>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1fb      	bne.n	8008c9a <SD_read+0x12>
 8008ca2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008ca4:	2001      	movs	r0, #1
}
 8008ca6:	bd08      	pop	{r3, pc}

08008ca8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ca8:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <SD_ioctl+0x4c>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	07db      	lsls	r3, r3, #31
{
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008cb4:	d41b      	bmi.n	8008cee <SD_ioctl+0x46>

  switch (cmd)
 8008cb6:	2903      	cmp	r1, #3
 8008cb8:	d803      	bhi.n	8008cc2 <SD_ioctl+0x1a>
 8008cba:	e8df f001 	tbb	[pc, r1]
 8008cbe:	0510      	.short	0x0510
 8008cc0:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8008cc2:	2004      	movs	r0, #4
  }

  return res;
}
 8008cc4:	b008      	add	sp, #32
 8008cc6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008cc8:	4668      	mov	r0, sp
 8008cca:	f7fb fe05 	bl	80048d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008cce:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	e004      	b.n	8008cde <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8008cd4:	4668      	mov	r0, sp
 8008cd6:	f7fb fdff 	bl	80048d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008cda:	9b07      	ldr	r3, [sp, #28]
 8008cdc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e7f0      	b.n	8008cc4 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8008ce2:	4668      	mov	r0, sp
 8008ce4:	f7fb fdf8 	bl	80048d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008ce8:	9b07      	ldr	r3, [sp, #28]
 8008cea:	0a5b      	lsrs	r3, r3, #9
 8008cec:	e7f0      	b.n	8008cd0 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008cee:	2003      	movs	r0, #3
 8008cf0:	e7e8      	b.n	8008cc4 <SD_ioctl+0x1c>
 8008cf2:	bf00      	nop
 8008cf4:	2000001e 	.word	0x2000001e

08008cf8 <SD_write>:
{
 8008cf8:	b508      	push	{r3, lr}
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	f7fb fdce 	bl	80048a4 <BSP_SD_WriteBlocks>
 8008d08:	b920      	cbnz	r0, 8008d14 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8008d0a:	f7fb fddb 	bl	80048c4 <BSP_SD_GetCardState>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d1fb      	bne.n	8008d0a <SD_write+0x12>
 8008d12:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008d14:	2001      	movs	r0, #1
}
 8008d16:	bd08      	pop	{r3, pc}

08008d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d18:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_MspInit+0x3c>)
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	9100      	str	r1, [sp, #0]
 8008d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d26:	645a      	str	r2, [r3, #68]	; 0x44
 8008d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008d2e:	9200      	str	r2, [sp, #0]
 8008d30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d32:	9101      	str	r1, [sp, #4]
 8008d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d42:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008d44:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d46:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008d48:	f7f7 fc50 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d4c:	b003      	add	sp, #12
 8008d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d52:	bf00      	nop
 8008d54:	40023800 	.word	0x40023800

08008d58 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8008d58:	6802      	ldr	r2, [r0, #0]
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <HAL_CRC_MspInit+0x28>)
 8008d5c:	429a      	cmp	r2, r3
{
 8008d5e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008d60:	d10b      	bne.n	8008d7a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <HAL_CRC_MspInit+0x2c>)
 8008d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008d7a:	b002      	add	sp, #8
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40023000 	.word	0x40023000
 8008d84:	40023800 	.word	0x40023800

08008d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d88:	b530      	push	{r4, r5, lr}
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d8e:	2214      	movs	r2, #20
 8008d90:	2100      	movs	r1, #0
 8008d92:	a803      	add	r0, sp, #12
 8008d94:	f000 fb30 	bl	80093f8 <memset>
  if(hi2c->Instance==I2C1)
 8008d98:	6822      	ldr	r2, [r4, #0]
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <HAL_I2C_MspInit+0x68>)
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d124      	bne.n	8008dea <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008da0:	4c14      	ldr	r4, [pc, #80]	; (8008df4 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008da2:	4815      	ldr	r0, [pc, #84]	; (8008df8 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008da4:	2500      	movs	r5, #0
 8008da6:	9501      	str	r5, [sp, #4]
 8008da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008daa:	f043 0302 	orr.w	r3, r3, #2
 8008dae:	6323      	str	r3, [r4, #48]	; 0x30
 8008db0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008dbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008dc0:	2312      	movs	r3, #18
 8008dc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dcc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008dce:	2304      	movs	r3, #4
 8008dd0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd2:	f7f7 fcaf 	bl	8000734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008dd6:	9502      	str	r5, [sp, #8]
 8008dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dde:	6423      	str	r3, [r4, #64]	; 0x40
 8008de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008de6:	9302      	str	r3, [sp, #8]
 8008de8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008dea:	b009      	add	sp, #36	; 0x24
 8008dec:	bd30      	pop	{r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	40005400 	.word	0x40005400
 8008df4:	40023800 	.word	0x40023800
 8008df8:	40020400 	.word	0x40020400

08008dfc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8008dfc:	6802      	ldr	r2, [r0, #0]
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_RTC_MspInit+0x10>)
 8008e00:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008e02:	bf02      	ittt	eq
 8008e04:	4b02      	ldreq	r3, [pc, #8]	; (8008e10 <HAL_RTC_MspInit+0x14>)
 8008e06:	2201      	moveq	r2, #1
 8008e08:	601a      	streq	r2, [r3, #0]
 8008e0a:	4770      	bx	lr
 8008e0c:	40002800 	.word	0x40002800
 8008e10:	42470e3c 	.word	0x42470e3c

08008e14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e18:	4604      	mov	r4, r0
 8008e1a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e1c:	2214      	movs	r2, #20
 8008e1e:	2100      	movs	r1, #0
 8008e20:	a803      	add	r0, sp, #12
 8008e22:	f000 fae9 	bl	80093f8 <memset>
  if(hsd->Instance==SDIO)
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	4b28      	ldr	r3, [pc, #160]	; (8008ecc <HAL_SD_MspInit+0xb8>)
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d14a      	bne.n	8008ec4 <HAL_SD_MspInit+0xb0>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008e2e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8008e32:	2400      	movs	r4, #0
 8008e34:	9400      	str	r4, [sp, #0]
 8008e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e38:	4825      	ldr	r0, [pc, #148]	; (8008ed0 <HAL_SD_MspInit+0xbc>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e3e:	645a      	str	r2, [r3, #68]	; 0x44
 8008e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e46:	9200      	str	r2, [sp, #0]
 8008e48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e4a:	9401      	str	r4, [sp, #4]
 8008e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4e:	f042 0204 	orr.w	r2, r2, #4
 8008e52:	631a      	str	r2, [r3, #48]	; 0x30
 8008e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e56:	f002 0204 	and.w	r2, r2, #4
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e5e:	9402      	str	r4, [sp, #8]
 8008e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e62:	f042 0208 	orr.w	r2, r2, #8
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008e6e:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e72:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e74:	2603      	movs	r6, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e78:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e7e:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e82:	eb0d 0105 	add.w	r1, sp, r5
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008e86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e88:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e8c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008e8e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e90:	f7f7 fc50 	bl	8000734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e98:	eb0d 0105 	add.w	r1, sp, r5
 8008e9c:	480c      	ldr	r0, [pc, #48]	; (8008ed0 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ea4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008ea6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ea8:	f7f7 fc44 	bl	8000734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008eac:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008eae:	eb0d 0105 	add.w	r1, sp, r5
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <HAL_SD_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008eb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eb6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008eb8:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ebc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008ebe:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ec0:	f7f7 fc38 	bl	8000734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008ec4:	b008      	add	sp, #32
 8008ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eca:	bf00      	nop
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40020800 	.word	0x40020800
 8008ed4:	40020c00 	.word	0x40020c00

08008ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee0:	2214      	movs	r2, #20
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	a809      	add	r0, sp, #36	; 0x24
 8008ee6:	f000 fa87 	bl	80093f8 <memset>
  if(huart->Instance==USART1)
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	4a6a      	ldr	r2, [pc, #424]	; (8009098 <HAL_UART_MspInit+0x1c0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d12e      	bne.n	8008f50 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ef2:	4b6a      	ldr	r3, [pc, #424]	; (800909c <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ef4:	486a      	ldr	r0, [pc, #424]	; (80090a0 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	9400      	str	r4, [sp, #0]
 8008efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efc:	f042 0210 	orr.w	r2, r2, #16
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
 8008f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f04:	f002 0210 	and.w	r2, r2, #16
 8008f08:	9200      	str	r2, [sp, #0]
 8008f0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f0c:	9401      	str	r4, [sp, #4]
 8008f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f10:	f042 0202 	orr.w	r2, r2, #2
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008f20:	23c0      	movs	r3, #192	; 0xc0
 8008f22:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f24:	2302      	movs	r3, #2
 8008f26:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f30:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f32:	2307      	movs	r3, #7
 8008f34:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f36:	f7f7 fbfd 	bl	8000734 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f3a:	2025      	movs	r0, #37	; 0x25
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4621      	mov	r1, r4
 8008f40:	f7f7 fb66 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f44:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008f46:	f7f7 fb97 	bl	8000678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8008f4a:	b00e      	add	sp, #56	; 0x38
 8008f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART2)
 8008f50:	4a54      	ldr	r2, [pc, #336]	; (80090a4 <HAL_UART_MspInit+0x1cc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d12a      	bne.n	8008fac <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f56:	4b51      	ldr	r3, [pc, #324]	; (800909c <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f58:	4853      	ldr	r0, [pc, #332]	; (80090a8 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	9402      	str	r4, [sp, #8]
 8008f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
 8008f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f68:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8008f6c:	9202      	str	r2, [sp, #8]
 8008f6e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f70:	9403      	str	r4, [sp, #12]
 8008f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	631a      	str	r2, [r3, #48]	; 0x30
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008f84:	2360      	movs	r3, #96	; 0x60
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f90:	2303      	movs	r3, #3
 8008f92:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f94:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008f96:	2307      	movs	r3, #7
 8008f98:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f9a:	f7f7 fbcb 	bl	8000734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008f9e:	2026      	movs	r0, #38	; 0x26
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	f7f7 fb34 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008fa8:	2026      	movs	r0, #38	; 0x26
 8008faa:	e7cc      	b.n	8008f46 <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART3)
 8008fac:	4a3f      	ldr	r2, [pc, #252]	; (80090ac <HAL_UART_MspInit+0x1d4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d143      	bne.n	800903a <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008fb2:	4b3a      	ldr	r3, [pc, #232]	; (800909c <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fb4:	483a      	ldr	r0, [pc, #232]	; (80090a0 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	9404      	str	r4, [sp, #16]
 8008fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8008fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fc4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8008fc8:	9204      	str	r2, [sp, #16]
 8008fca:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fcc:	9405      	str	r4, [sp, #20]
 8008fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd0:	f042 0202 	orr.w	r2, r2, #2
 8008fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8008fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd8:	f002 0202 	and.w	r2, r2, #2
 8008fdc:	9205      	str	r2, [sp, #20]
 8008fde:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008fe0:	9406      	str	r4, [sp, #24]
 8008fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe4:	f042 0208 	orr.w	r2, r2, #8
 8008fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	9306      	str	r3, [sp, #24]
 8008ff2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ff4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ffc:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ffe:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009000:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009002:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009006:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800900a:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800900c:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800900e:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009010:	f7f7 fb90 	bl	8000734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009014:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009018:	a909      	add	r1, sp, #36	; 0x24
 800901a:	4823      	ldr	r0, [pc, #140]	; (80090a8 <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009022:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009024:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009026:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009028:	f7f7 fb84 	bl	8000734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800902c:	2027      	movs	r0, #39	; 0x27
 800902e:	4622      	mov	r2, r4
 8009030:	4621      	mov	r1, r4
 8009032:	f7f7 faed 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009036:	2027      	movs	r0, #39	; 0x27
 8009038:	e785      	b.n	8008f46 <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART6)
 800903a:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <HAL_UART_MspInit+0x1d8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d184      	bne.n	8008f4a <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009042:	481c      	ldr	r0, [pc, #112]	; (80090b4 <HAL_UART_MspInit+0x1dc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8009044:	2400      	movs	r4, #0
 8009046:	9407      	str	r4, [sp, #28]
 8009048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800904a:	f042 0220 	orr.w	r2, r2, #32
 800904e:	645a      	str	r2, [r3, #68]	; 0x44
 8009050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009052:	f002 0220 	and.w	r2, r2, #32
 8009056:	9207      	str	r2, [sp, #28]
 8009058:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800905a:	9408      	str	r4, [sp, #32]
 800905c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905e:	f042 0204 	orr.w	r2, r2, #4
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	9308      	str	r3, [sp, #32]
 800906c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800906e:	23c0      	movs	r3, #192	; 0xc0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009072:	2302      	movs	r3, #2
 8009074:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009076:	2301      	movs	r3, #1
 8009078:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800907a:	2303      	movs	r3, #3
 800907c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800907e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009080:	2308      	movs	r3, #8
 8009082:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009084:	f7f7 fb56 	bl	8000734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8009088:	2047      	movs	r0, #71	; 0x47
 800908a:	4622      	mov	r2, r4
 800908c:	4621      	mov	r1, r4
 800908e:	f7f7 fabf 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009092:	2047      	movs	r0, #71	; 0x47
 8009094:	e757      	b.n	8008f46 <HAL_UART_MspInit+0x6e>
 8009096:	bf00      	nop
 8009098:	40011000 	.word	0x40011000
 800909c:	40023800 	.word	0x40023800
 80090a0:	40020400 	.word	0x40020400
 80090a4:	40004400 	.word	0x40004400
 80090a8:	40020c00 	.word	0x40020c00
 80090ac:	40004800 	.word	0x40004800
 80090b0:	40011400 	.word	0x40011400
 80090b4:	40020800 	.word	0x40020800

080090b8 <NMI_Handler>:
 80090b8:	4770      	bx	lr

080090ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090ba:	e7fe      	b.n	80090ba <HardFault_Handler>

080090bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090bc:	e7fe      	b.n	80090bc <MemManage_Handler>

080090be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80090be:	e7fe      	b.n	80090be <BusFault_Handler>

080090c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090c0:	e7fe      	b.n	80090c0 <UsageFault_Handler>

080090c2 <SVC_Handler>:
 80090c2:	4770      	bx	lr

080090c4 <DebugMon_Handler>:
 80090c4:	4770      	bx	lr

080090c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090c6:	4770      	bx	lr

080090c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	          TimingDelay_Decrement();
 80090ca:	f7fb ff65 	bl	8004f98 <TimingDelay_Decrement>
			  TimingDelay_Decrement1();
 80090ce:	f7fb ff6d 	bl	8004fac <TimingDelay_Decrement1>
			  TimingDelay_Decrement3();
 80090d2:	f7fb ff75 	bl	8004fc0 <TimingDelay_Decrement3>
			  TimingDelay_Decrement4();
 80090d6:	f7fb ff7d 	bl	8004fd4 <TimingDelay_Decrement4>
			  TimingDelay_Decrement5();
 80090da:	f7fb ff85 	bl	8004fe8 <TimingDelay_Decrement5>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090de:	f7f7 fa39 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /*for uart6*/
       	if (TimingDelay<2) //if timming delay is less than 2
 80090e2:	4b1e      	ldr	r3, [pc, #120]	; (800915c <SysTick_Handler+0x94>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d809      	bhi.n	80090fe <SysTick_Handler+0x36>
       		{
       		if (flag2==1)  //flag is 1 (flag tells that has msg came)
 80090ea:	491d      	ldr	r1, [pc, #116]	; (8009160 <SysTick_Handler+0x98>)
 80090ec:	680a      	ldr	r2, [r1, #0]
 80090ee:	2a01      	cmp	r2, #1
 80090f0:	d105      	bne.n	80090fe <SysTick_Handler+0x36>
       			{
       //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
       //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
       //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

             flag2= 0 ;
 80090f2:	2300      	movs	r3, #0
 80090f4:	600b      	str	r3, [r1, #0]
       		  msgUnPrcd = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 80090f6:	491b      	ldr	r1, [pc, #108]	; (8009164 <SysTick_Handler+0x9c>)
 80090f8:	600a      	str	r2, [r1, #0]
       		  RxCount2 = 0 ;
 80090fa:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <SysTick_Handler+0xa0>)
 80090fc:	8013      	strh	r3, [r2, #0]
       //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

       }
       }
        /*for uart1*/
         	if (TimingDelay1<2) //if timming delay is less than 2
 80090fe:	4b1b      	ldr	r3, [pc, #108]	; (800916c <SysTick_Handler+0xa4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d809      	bhi.n	800911a <SysTick_Handler+0x52>
         		{
         		if (flag1==1)  //flag is 1 (flag tells that has msg came)
 8009106:	491a      	ldr	r1, [pc, #104]	; (8009170 <SysTick_Handler+0xa8>)
 8009108:	680a      	ldr	r2, [r1, #0]
 800910a:	2a01      	cmp	r2, #1
 800910c:	d105      	bne.n	800911a <SysTick_Handler+0x52>
         			{
         //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
         //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
         //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

               flag1= 0 ;
 800910e:	2300      	movs	r3, #0
 8009110:	600b      	str	r3, [r1, #0]
         		  msgUnPrcd1 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009112:	4918      	ldr	r1, [pc, #96]	; (8009174 <SysTick_Handler+0xac>)
 8009114:	600a      	str	r2, [r1, #0]
         		  RxCount1 = 0 ;
 8009116:	4a18      	ldr	r2, [pc, #96]	; (8009178 <SysTick_Handler+0xb0>)
 8009118:	8013      	strh	r3, [r2, #0]
         //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

         }
         }
            /*for uart3*/
              	if (TimingDelay3<2) //if timming delay is less than 2
 800911a:	4b18      	ldr	r3, [pc, #96]	; (800917c <SysTick_Handler+0xb4>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d80d      	bhi.n	800913e <SysTick_Handler+0x76>
              		{
              		if (flag3==1)  //flag is 1 (flag tells that has msg came)
 8009122:	4817      	ldr	r0, [pc, #92]	; (8009180 <SysTick_Handler+0xb8>)
 8009124:	6801      	ldr	r1, [r0, #0]
 8009126:	2901      	cmp	r1, #1
 8009128:	d109      	bne.n	800913e <SysTick_Handler+0x76>
              			{
              //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
              //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
              //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);
              			pointerOfArray=RxCount3;
 800912a:	4a16      	ldr	r2, [pc, #88]	; (8009184 <SysTick_Handler+0xbc>)
 800912c:	4c16      	ldr	r4, [pc, #88]	; (8009188 <SysTick_Handler+0xc0>)
 800912e:	8813      	ldrh	r3, [r2, #0]
 8009130:	b29b      	uxth	r3, r3
 8009132:	6023      	str	r3, [r4, #0]

                    flag3= 0 ;
 8009134:	2300      	movs	r3, #0
 8009136:	6003      	str	r3, [r0, #0]
              		  msgUnPrcd3 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009138:	4814      	ldr	r0, [pc, #80]	; (800918c <SysTick_Handler+0xc4>)
              		  RxCount3 = 0 ;
 800913a:	8013      	strh	r3, [r2, #0]
              		  msgUnPrcd3 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 800913c:	6001      	str	r1, [r0, #0]
              //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

              }
              }
                /*for uart2*/
                  	if (TimingDelay4<2) //if timming delay is less than 2
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <SysTick_Handler+0xc8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d809      	bhi.n	800915a <SysTick_Handler+0x92>
                  		{
                  		if (flag4==1)  //flag is 1 (flag tells that has msg came)
 8009146:	4913      	ldr	r1, [pc, #76]	; (8009194 <SysTick_Handler+0xcc>)
 8009148:	680a      	ldr	r2, [r1, #0]
 800914a:	2a01      	cmp	r2, #1
 800914c:	d105      	bne.n	800915a <SysTick_Handler+0x92>
                  			{
                  //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
                  //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
                  //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

                        flag4= 0 ;
 800914e:	2300      	movs	r3, #0
 8009150:	600b      	str	r3, [r1, #0]
                  		  msgUnPrcd4 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009152:	4911      	ldr	r1, [pc, #68]	; (8009198 <SysTick_Handler+0xd0>)
 8009154:	600a      	str	r2, [r1, #0]
                  		  RxCount4 = 0 ;
 8009156:	4a11      	ldr	r2, [pc, #68]	; (800919c <SysTick_Handler+0xd4>)
 8009158:	8013      	strh	r3, [r2, #0]
 800915a:	bd10      	pop	{r4, pc}
 800915c:	20000ec4 	.word	0x20000ec4
 8009160:	20000140 	.word	0x20000140
 8009164:	20000fd4 	.word	0x20000fd4
 8009168:	20000136 	.word	0x20000136
 800916c:	200015cc 	.word	0x200015cc
 8009170:	2000013c 	.word	0x2000013c
 8009174:	20001434 	.word	0x20001434
 8009178:	20000134 	.word	0x20000134
 800917c:	20000e08 	.word	0x20000e08
 8009180:	20000144 	.word	0x20000144
 8009184:	20000138 	.word	0x20000138
 8009188:	200058b8 	.word	0x200058b8
 800918c:	2000119c 	.word	0x2000119c
 8009190:	20001580 	.word	0x20001580
 8009194:	20000148 	.word	0x20000148
 8009198:	20000ebc 	.word	0x20000ebc
 800919c:	2000013a 	.word	0x2000013a

080091a0 <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80091a0:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <USART1_IRQHandler+0x44>)
 80091a2:	220a      	movs	r2, #10
{
 80091a4:	b510      	push	{r4, lr}
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80091a6:	601a      	str	r2, [r3, #0]
  	if(flag1==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <USART1_IRQHandler+0x48>)
 80091aa:	4c10      	ldr	r4, [pc, #64]	; (80091ec <USART1_IRQHandler+0x4c>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	b99a      	cbnz	r2, 80091d8 <USART1_IRQHandler+0x38>
  {
  RxCount1 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 80091b0:	8022      	strh	r2, [r4, #0]
  flag1=1;   		//UART is active in process of receiving a messege
 80091b2:	2201      	movs	r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
//	msgTime = 0 ;
  }
	else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
		RxCount1++;

	if (RxCount1>150)
 80091b6:	8822      	ldrh	r2, [r4, #0]
//		comCount=1;
//		comCount=2;

  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80091b8:	480d      	ldr	r0, [pc, #52]	; (80091f0 <USART1_IRQHandler+0x50>)
	if (RxCount1>150)
 80091ba:	b292      	uxth	r2, r2
 80091bc:	2a96      	cmp	r2, #150	; 0x96
		flag1=0 ;
 80091be:	bf82      	ittt	hi
 80091c0:	2200      	movhi	r2, #0
 80091c2:	601a      	strhi	r2, [r3, #0]
		RxCount1 = 0 ;
 80091c4:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart1);
 80091c6:	f7f9 faaf 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  RecMsg1[RxCount1]=aRxBuffer1[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 80091ca:	4a0a      	ldr	r2, [pc, #40]	; (80091f4 <USART1_IRQHandler+0x54>)
 80091cc:	8823      	ldrh	r3, [r4, #0]
 80091ce:	7811      	ldrb	r1, [r2, #0]
 80091d0:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <USART1_IRQHandler+0x58>)
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	54d1      	strb	r1, [r2, r3]
 80091d6:	bd10      	pop	{r4, pc}
		RxCount1++;
 80091d8:	8822      	ldrh	r2, [r4, #0]
 80091da:	3201      	adds	r2, #1
 80091dc:	b292      	uxth	r2, r2
 80091de:	8022      	strh	r2, [r4, #0]
 80091e0:	e7e9      	b.n	80091b6 <USART1_IRQHandler+0x16>
 80091e2:	bf00      	nop
 80091e4:	200015cc 	.word	0x200015cc
 80091e8:	2000013c 	.word	0x2000013c
 80091ec:	20000134 	.word	0x20000134
 80091f0:	200010e8 	.word	0x200010e8
 80091f4:	20001224 	.word	0x20001224
 80091f8:	200057bc 	.word	0x200057bc

080091fc <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80091fc:	4b10      	ldr	r3, [pc, #64]	; (8009240 <USART2_IRQHandler+0x44>)
 80091fe:	220a      	movs	r2, #10
{
 8009200:	b510      	push	{r4, lr}
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009202:	601a      	str	r2, [r3, #0]
				  	if(flag4==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <USART2_IRQHandler+0x48>)
 8009206:	4c10      	ldr	r4, [pc, #64]	; (8009248 <USART2_IRQHandler+0x4c>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	b99a      	cbnz	r2, 8009234 <USART2_IRQHandler+0x38>
				  {
				  RxCount4 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 800920c:	8022      	strh	r2, [r4, #0]
				  flag4=1;   		//UART is active in process of receiving a messege
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount4++;

					if (RxCount4>150)
 8009212:	8822      	ldrh	r2, [r4, #0]
				//		comCount=1;
				//		comCount=2;

				  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009214:	480d      	ldr	r0, [pc, #52]	; (800924c <USART2_IRQHandler+0x50>)
					if (RxCount4>150)
 8009216:	b292      	uxth	r2, r2
 8009218:	2a96      	cmp	r2, #150	; 0x96
						flag4=0 ;
 800921a:	bf82      	ittt	hi
 800921c:	2200      	movhi	r2, #0
 800921e:	601a      	strhi	r2, [r3, #0]
						RxCount4 = 0 ;
 8009220:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart2);
 8009222:	f7f9 fa81 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  RecMsg4[RxCount4]=aRxBuffer4[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <USART2_IRQHandler+0x54>)
 8009228:	8823      	ldrh	r3, [r4, #0]
 800922a:	7811      	ldrb	r1, [r2, #0]
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <USART2_IRQHandler+0x58>)
 800922e:	b29b      	uxth	r3, r3
 8009230:	54d1      	strb	r1, [r2, r3]
 8009232:	bd10      	pop	{r4, pc}
						RxCount4++;
 8009234:	8822      	ldrh	r2, [r4, #0]
 8009236:	3201      	adds	r2, #1
 8009238:	b292      	uxth	r2, r2
 800923a:	8022      	strh	r2, [r4, #0]
 800923c:	e7e9      	b.n	8009212 <USART2_IRQHandler+0x16>
 800923e:	bf00      	nop
 8009240:	20001580 	.word	0x20001580
 8009244:	20000148 	.word	0x20000148
 8009248:	2000013a 	.word	0x2000013a
 800924c:	20001584 	.word	0x20001584
 8009250:	20001438 	.word	0x20001438
 8009254:	200053d4 	.word	0x200053d4

08009258 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009258:	4b10      	ldr	r3, [pc, #64]	; (800929c <USART3_IRQHandler+0x44>)
 800925a:	220a      	movs	r2, #10
{
 800925c:	b510      	push	{r4, lr}
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 800925e:	601a      	str	r2, [r3, #0]
				  	if(flag3==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <USART3_IRQHandler+0x48>)
 8009262:	4c10      	ldr	r4, [pc, #64]	; (80092a4 <USART3_IRQHandler+0x4c>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	b99a      	cbnz	r2, 8009290 <USART3_IRQHandler+0x38>
				  {
				  RxCount3 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8009268:	8022      	strh	r2, [r4, #0]
				  flag3=1;   		//UART is active in process of receiving a messege
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount3++;

					if (RxCount3>50)
 800926e:	8822      	ldrh	r2, [r4, #0]
				//		comCount=2;

				  }

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009270:	480d      	ldr	r0, [pc, #52]	; (80092a8 <USART3_IRQHandler+0x50>)
					if (RxCount3>50)
 8009272:	b292      	uxth	r2, r2
 8009274:	2a32      	cmp	r2, #50	; 0x32
						flag3=0 ;
 8009276:	bf82      	ittt	hi
 8009278:	2200      	movhi	r2, #0
 800927a:	601a      	strhi	r2, [r3, #0]
						RxCount3 = 0 ;
 800927c:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart3);
 800927e:	f7f9 fa53 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  RecMsg3[RxCount3]=aRxBuffer3[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8009282:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <USART3_IRQHandler+0x54>)
 8009284:	8823      	ldrh	r3, [r4, #0]
 8009286:	7811      	ldrb	r1, [r2, #0]
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <USART3_IRQHandler+0x58>)
 800928a:	b29b      	uxth	r3, r3
 800928c:	54d1      	strb	r1, [r2, r3]
 800928e:	bd10      	pop	{r4, pc}
						RxCount3++;
 8009290:	8822      	ldrh	r2, [r4, #0]
 8009292:	3201      	adds	r2, #1
 8009294:	b292      	uxth	r2, r2
 8009296:	8022      	strh	r2, [r4, #0]
 8009298:	e7e9      	b.n	800926e <USART3_IRQHandler+0x16>
 800929a:	bf00      	nop
 800929c:	20000e08 	.word	0x20000e08
 80092a0:	20000144 	.word	0x20000144
 80092a4:	20000138 	.word	0x20000138
 80092a8:	20000e10 	.word	0x20000e10
 80092ac:	20000fdc 	.word	0x20000fdc
 80092b0:	200056c2 	.word	0x200056c2

080092b4 <USART6_IRQHandler>:
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 80092b4:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <USART6_IRQHandler+0x44>)
 80092b6:	220a      	movs	r2, #10
{
 80092b8:	b510      	push	{r4, lr}
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 80092ba:	601a      	str	r2, [r3, #0]
				  	if(flag2==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 80092bc:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <USART6_IRQHandler+0x48>)
 80092be:	4c10      	ldr	r4, [pc, #64]	; (8009300 <USART6_IRQHandler+0x4c>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	b99a      	cbnz	r2, 80092ec <USART6_IRQHandler+0x38>
				  {
				  RxCount2 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 80092c4:	8022      	strh	r2, [r4, #0]
				  flag2=1;   		//UART is active in process of receiving a messege
 80092c6:	2201      	movs	r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount2++;

					if (RxCount2>50)
 80092ca:	8822      	ldrh	r2, [r4, #0]
				//		comCount=1;
				//		comCount=2;

				  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80092cc:	480d      	ldr	r0, [pc, #52]	; (8009304 <USART6_IRQHandler+0x50>)
					if (RxCount2>50)
 80092ce:	b292      	uxth	r2, r2
 80092d0:	2a32      	cmp	r2, #50	; 0x32
						flag2=0 ;
 80092d2:	bf82      	ittt	hi
 80092d4:	2200      	movhi	r2, #0
 80092d6:	601a      	strhi	r2, [r3, #0]
						RxCount2 = 0 ;
 80092d8:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart6);
 80092da:	f7f9 fa25 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  RecMsg2[RxCount2]=aRxBuffer[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 80092de:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <USART6_IRQHandler+0x54>)
 80092e0:	8823      	ldrh	r3, [r4, #0]
 80092e2:	7811      	ldrb	r1, [r2, #0]
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <USART6_IRQHandler+0x58>)
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	54d1      	strb	r1, [r2, r3]
 80092ea:	bd10      	pop	{r4, pc}
						RxCount2++;
 80092ec:	8822      	ldrh	r2, [r4, #0]
 80092ee:	3201      	adds	r2, #1
 80092f0:	b292      	uxth	r2, r2
 80092f2:	8022      	strh	r2, [r4, #0]
 80092f4:	e7e9      	b.n	80092ca <USART6_IRQHandler+0x16>
 80092f6:	bf00      	nop
 80092f8:	20000ec4 	.word	0x20000ec4
 80092fc:	20000140 	.word	0x20000140
 8009300:	20000136 	.word	0x20000136
 8009304:	2000130c 	.word	0x2000130c
 8009308:	2000134c 	.word	0x2000134c
 800930c:	200054ce 	.word	0x200054ce

08009310 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009310:	490f      	ldr	r1, [pc, #60]	; (8009350 <SystemInit+0x40>)
 8009312:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009316:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <SystemInit+0x44>)
 8009320:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009322:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8009324:	f042 0201 	orr.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800932a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009332:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009336:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009338:	4a07      	ldr	r2, [pc, #28]	; (8009358 <SystemInit+0x48>)
 800933a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009342:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009344:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009346:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800934a:	608b      	str	r3, [r1, #8]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	e000ed00 	.word	0xe000ed00
 8009354:	40023800 	.word	0x40023800
 8009358:	24003010 	.word	0x24003010

0800935c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800935c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009394 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009362:	e003      	b.n	800936c <LoopCopyDataInit>

08009364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800936a:	3104      	adds	r1, #4

0800936c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800936c:	480b      	ldr	r0, [pc, #44]	; (800939c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800936e:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009374:	d3f6      	bcc.n	8009364 <CopyDataInit>
  ldr  r2, =_sbss
 8009376:	4a0b      	ldr	r2, [pc, #44]	; (80093a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009378:	e002      	b.n	8009380 <LoopFillZerobss>

0800937a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800937a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800937c:	f842 3b04 	str.w	r3, [r2], #4

08009380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009384:	d3f9      	bcc.n	800937a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009386:	f7ff ffc3 	bl	8009310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800938a:	f000 f811 	bl	80093b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800938e:	f7fb fc59 	bl	8004c44 <main>
  bx  lr    
 8009392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009394:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009398:	08009588 	.word	0x08009588
  ldr  r0, =_sdata
 800939c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80093a0:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80093a4:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80093a8:	200058bc 	.word	0x200058bc

080093ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093ac:	e7fe      	b.n	80093ac <ADC_IRQHandler>
	...

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4e0d      	ldr	r6, [pc, #52]	; (80093e8 <__libc_init_array+0x38>)
 80093b4:	4c0d      	ldr	r4, [pc, #52]	; (80093ec <__libc_init_array+0x3c>)
 80093b6:	1ba4      	subs	r4, r4, r6
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	2500      	movs	r5, #0
 80093bc:	42a5      	cmp	r5, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	4e0b      	ldr	r6, [pc, #44]	; (80093f0 <__libc_init_array+0x40>)
 80093c2:	4c0c      	ldr	r4, [pc, #48]	; (80093f4 <__libc_init_array+0x44>)
 80093c4:	f000 f832 	bl	800942c <_init>
 80093c8:	1ba4      	subs	r4, r4, r6
 80093ca:	10a4      	asrs	r4, r4, #2
 80093cc:	2500      	movs	r5, #0
 80093ce:	42a5      	cmp	r5, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093d8:	4798      	blx	r3
 80093da:	3501      	adds	r5, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093e2:	4798      	blx	r3
 80093e4:	3501      	adds	r5, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	08009580 	.word	0x08009580
 80093ec:	08009580 	.word	0x08009580
 80093f0:	08009580 	.word	0x08009580
 80093f4:	08009584 	.word	0x08009584

080093f8 <memset>:
 80093f8:	4402      	add	r2, r0
 80093fa:	4603      	mov	r3, r0
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d100      	bne.n	8009402 <memset+0xa>
 8009400:	4770      	bx	lr
 8009402:	f803 1b01 	strb.w	r1, [r3], #1
 8009406:	e7f9      	b.n	80093fc <memset+0x4>

08009408 <strncmp>:
 8009408:	b510      	push	{r4, lr}
 800940a:	b16a      	cbz	r2, 8009428 <strncmp+0x20>
 800940c:	3901      	subs	r1, #1
 800940e:	1884      	adds	r4, r0, r2
 8009410:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009414:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009418:	4293      	cmp	r3, r2
 800941a:	d103      	bne.n	8009424 <strncmp+0x1c>
 800941c:	42a0      	cmp	r0, r4
 800941e:	d001      	beq.n	8009424 <strncmp+0x1c>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f5      	bne.n	8009410 <strncmp+0x8>
 8009424:	1a98      	subs	r0, r3, r2
 8009426:	bd10      	pop	{r4, pc}
 8009428:	4610      	mov	r0, r2
 800942a:	bd10      	pop	{r4, pc}

0800942c <_init>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr

08009438 <_fini>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	bf00      	nop
 800943c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943e:	bc08      	pop	{r3}
 8009440:	469e      	mov	lr, r3
 8009442:	4770      	bx	lr
