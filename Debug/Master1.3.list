
Master1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  080098e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  8 .bss          000058b8  20000024  20000024  00020024  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200058dc  200058dc  00020024  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a173  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004f61  00000000  00000000  0004a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012b5b  00000000  00000000  0004f128  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  00061c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023b8  00000000  00000000  000631b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d649  00000000  00000000  00065568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006cf4  00000000  00000000  00072bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000798a5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000040b4  00000000  00000000  00079924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009788 	.word	0x08009788

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08009788 	.word	0x08009788

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8d0 	bl	8000694 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f884 	bl	8000610 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000020 	.word	0x20000020
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f855 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f008 fd94 	bl	8009074 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <HAL_IncTick+0x4c>)
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <HAL_IncTick+0x50>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]

      millisec++;
      millisec1++;
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <HAL_IncTick+0x54>)
  uwTick += uwTickFreq;
 800055e:	440b      	add	r3, r1
      millisec++;
 8000560:	4912      	ldr	r1, [pc, #72]	; (80005ac <HAL_IncTick+0x58>)
  uwTick += uwTickFreq;
 8000562:	6013      	str	r3, [r2, #0]
      millisec++;
 8000564:	680b      	ldr	r3, [r1, #0]
      millisec1++;
 8000566:	6802      	ldr	r2, [r0, #0]
      millisec++;
 8000568:	3301      	adds	r3, #1
      millisec1++;
 800056a:	3201      	adds	r2, #1
      if(millisec > 1000)
 800056c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      millisec1++;
 8000570:	6002      	str	r2, [r0, #0]
      millisec++;
 8000572:	600b      	str	r3, [r1, #0]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_IncTick+0x5c>)
      if(millisec > 1000)
 8000576:	dd04      	ble.n	8000582 <HAL_IncTick+0x2e>
      {
    	  sec1++;
 8000578:	6813      	ldr	r3, [r2, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	6013      	str	r3, [r2, #0]
    	  millisec=0;
 800057e:	2300      	movs	r3, #0
 8000580:	600b      	str	r3, [r1, #0]
      }
      if(sec1>60){
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	2b3c      	cmp	r3, #60	; 0x3c
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_IncTick+0x60>)
 8000588:	dd04      	ble.n	8000594 <HAL_IncTick+0x40>
    	  min++;
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	3101      	adds	r1, #1
 800058e:	6019      	str	r1, [r3, #0]
   	   sec1=0;
 8000590:	2100      	movs	r1, #0
 8000592:	6011      	str	r1, [r2, #0]
      }
      if(min>60)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	2a3c      	cmp	r2, #60	; 0x3c
      {
    	  min=0;
 8000598:	bfc4      	itt	gt
 800059a:	2200      	movgt	r2, #0
 800059c:	601a      	strgt	r2, [r3, #0]
 800059e:	4770      	bx	lr
 80005a0:	20000150 	.word	0x20000150
 80005a4:	20000000 	.word	0x20000000
 80005a8:	2000014c 	.word	0x2000014c
 80005ac:	20000158 	.word	0x20000158
 80005b0:	20000154 	.word	0x20000154
 80005b4:	20000088 	.word	0x20000088

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000150 	.word	0x20000150

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005cc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	bf1c      	itt	ne
 80005d0:	4b05      	ldrne	r3, [pc, #20]	; (80005e8 <HAL_Delay+0x24>)
 80005d2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005d6:	bf18      	it	ne
 80005d8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	f7ff ffed 	bl	80005b8 <HAL_GetTick>
 80005de:	1b40      	subs	r0, r0, r5
 80005e0:	4284      	cmp	r4, r0
 80005e2:	d8fa      	bhi.n	80005da <HAL_Delay+0x16>
  {
  }
}
 80005e4:	bd38      	pop	{r3, r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	0200      	lsls	r0, r0, #8
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000606:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	68dc      	ldr	r4, [r3, #12]
 8000616:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	2b04      	cmp	r3, #4
 8000622:	bf28      	it	cs
 8000624:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000626:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 0501 	mov.w	r5, #1
 800062c:	fa05 f303 	lsl.w	r3, r5, r3
 8000630:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000634:	bf8c      	ite	hi
 8000636:	3c03      	subhi	r4, #3
 8000638:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063a:	4019      	ands	r1, r3
 800063c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063e:	fa05 f404 	lsl.w	r4, r5, r4
 8000642:	3c01      	subs	r4, #1
 8000644:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000646:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	ea42 0201 	orr.w	r2, r2, r1
 800064c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	bfad      	iteet	ge
 8000652:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	f000 000f 	andlt.w	r0, r0, #15
 800065a:	4b06      	ldrlt	r3, [pc, #24]	; (8000674 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	bfb5      	itete	lt
 8000662:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	e000ed14 	.word	0xe000ed14

08000678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000678:	2800      	cmp	r0, #0
 800067a:	db08      	blt.n	800068e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067c:	0942      	lsrs	r2, r0, #5
 800067e:	2301      	movs	r3, #1
 8000680:	f000 001f 	and.w	r0, r0, #31
 8000684:	fa03 f000 	lsl.w	r0, r3, r0
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <HAL_NVIC_EnableIRQ+0x18>)
 800068a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100

08000694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	3801      	subs	r0, #1
 8000696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069a:	d20a      	bcs.n	80006b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	21f0      	movs	r1, #240	; 0xf0
 80006a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006c0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80006c2:	4604      	mov	r4, r0
 80006c4:	b160      	cbz	r0, 80006e0 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80006c6:	7943      	ldrb	r3, [r0, #5]
 80006c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006cc:	b913      	cbnz	r3, 80006d4 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006ce:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006d0:	f008 fcf0 	bl	80090b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80006d4:	2302      	movs	r3, #2
 80006d6:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006d8:	2301      	movs	r3, #1
 80006da:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80006dc:	2000      	movs	r0, #0
 80006de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
}
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <HAL_CRC_Calculate>:
{
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006e4:	2302      	movs	r3, #2
{
 80006e6:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006e8:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80006ea:	6803      	ldr	r3, [r0, #0]
 80006ec:	689c      	ldr	r4, [r3, #8]
 80006ee:	f044 0401 	orr.w	r4, r4, #1
 80006f2:	609c      	str	r4, [r3, #8]
 80006f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80006f8:	4291      	cmp	r1, r2
 80006fa:	d104      	bne.n	8000706 <HAL_CRC_Calculate+0x22>
  {
    hcrc->Instance->DR = pBuffer[index];
  }
  temp = hcrc->Instance->DR;
 80006fc:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006fe:	2201      	movs	r2, #1
 8000700:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8000706:	f851 4b04 	ldr.w	r4, [r1], #4
 800070a:	601c      	str	r4, [r3, #0]
 800070c:	e7f4      	b.n	80006f8 <HAL_CRC_Calculate+0x14>

0800070e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800070e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000712:	2b02      	cmp	r3, #2
 8000714:	d003      	beq.n	800071e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800071e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000720:	2305      	movs	r3, #5
 8000722:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000726:	6813      	ldr	r3, [r2, #0]
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800072e:	2000      	movs	r0, #0
}
 8000730:	4770      	bx	lr
	...

08000734 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000734:	4908      	ldr	r1, [pc, #32]	; (8000758 <FLASH_Program_DoubleWord+0x24>)
{
 8000736:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000738:	690c      	ldr	r4, [r1, #16]
 800073a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800073e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000740:	690c      	ldr	r4, [r1, #16]
 8000742:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000746:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000748:	690c      	ldr	r4, [r1, #16]
 800074a:	f044 0401 	orr.w	r4, r4, #1
 800074e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000750:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000752:	6043      	str	r3, [r0, #4]
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	40023c00 	.word	0x40023c00

0800075c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <FLASH_Program_Word+0x20>)
 800075e:	691a      	ldr	r2, [r3, #16]
 8000760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000764:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000766:	691a      	ldr	r2, [r3, #16]
 8000768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800076c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800076e:	691a      	ldr	r2, [r3, #16]
 8000770:	f042 0201 	orr.w	r2, r2, #1
 8000774:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000776:	6001      	str	r1, [r0, #0]
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023c00 	.word	0x40023c00

08000780 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <FLASH_Program_HalfWord+0x20>)
 8000782:	691a      	ldr	r2, [r3, #16]
 8000784:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000788:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000790:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	f042 0201 	orr.w	r2, r2, #1
 8000798:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800079a:	8001      	strh	r1, [r0, #0]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023c00 	.word	0x40023c00

080007a4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <FLASH_SetErrorCode+0x6c>)
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	06d2      	lsls	r2, r2, #27
 80007aa:	d506      	bpl.n	80007ba <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007ac:	4919      	ldr	r1, [pc, #100]	; (8000814 <FLASH_SetErrorCode+0x70>)
 80007ae:	69ca      	ldr	r2, [r1, #28]
 80007b0:	f042 0210 	orr.w	r2, r2, #16
 80007b4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80007b6:	2210      	movs	r2, #16
 80007b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	0690      	lsls	r0, r2, #26
 80007be:	d506      	bpl.n	80007ce <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80007c0:	4914      	ldr	r1, [pc, #80]	; (8000814 <FLASH_SetErrorCode+0x70>)
 80007c2:	69ca      	ldr	r2, [r1, #28]
 80007c4:	f042 0208 	orr.w	r2, r2, #8
 80007c8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80007ca:	2220      	movs	r2, #32
 80007cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <FLASH_SetErrorCode+0x6c>)
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	0651      	lsls	r1, r2, #25
 80007d4:	d506      	bpl.n	80007e4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80007d6:	490f      	ldr	r1, [pc, #60]	; (8000814 <FLASH_SetErrorCode+0x70>)
 80007d8:	69ca      	ldr	r2, [r1, #28]
 80007da:	f042 0204 	orr.w	r2, r2, #4
 80007de:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	0612      	lsls	r2, r2, #24
 80007e8:	d506      	bpl.n	80007f8 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80007ea:	490a      	ldr	r1, [pc, #40]	; (8000814 <FLASH_SetErrorCode+0x70>)
 80007ec:	69ca      	ldr	r2, [r1, #28]
 80007ee:	f042 0202 	orr.w	r2, r2, #2
 80007f2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <FLASH_SetErrorCode+0x6c>)
 80007fa:	68d3      	ldr	r3, [r2, #12]
 80007fc:	079b      	lsls	r3, r3, #30
 80007fe:	d506      	bpl.n	800080e <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000800:	4904      	ldr	r1, [pc, #16]	; (8000814 <FLASH_SetErrorCode+0x70>)
 8000802:	69cb      	ldr	r3, [r1, #28]
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800080a:	2302      	movs	r3, #2
 800080c:	60d3      	str	r3, [r2, #12]
 800080e:	4770      	bx	lr
 8000810:	40023c00 	.word	0x40023c00
 8000814:	2000015c 	.word	0x2000015c

08000818 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_FLASH_Unlock+0x1c>)
 800081a:	691a      	ldr	r2, [r3, #16]
 800081c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800081e:	bfbf      	itttt	lt
 8000820:	4a05      	ldrlt	r2, [pc, #20]	; (8000838 <HAL_FLASH_Unlock+0x20>)
 8000822:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000824:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000828:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800082a:	bfba      	itte	lt
 800082c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800082e:	0fc0      	lsrlt	r0, r0, #31
 8000830:	2000      	movge	r0, #0
}
 8000832:	4770      	bx	lr
 8000834:	40023c00 	.word	0x40023c00
 8000838:	45670123 	.word	0x45670123

0800083c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_FLASH_Lock+0x10>)
 800083e:	6913      	ldr	r3, [r2, #16]
 8000840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000844:	6113      	str	r3, [r2, #16]
}
 8000846:	2000      	movs	r0, #0
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023c00 	.word	0x40023c00

08000850 <FLASH_WaitForLastOperation>:
{ 
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000854:	4c12      	ldr	r4, [pc, #72]	; (80008a0 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000856:	2200      	movs	r2, #0
{ 
 8000858:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800085a:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800085c:	f7ff feac 	bl	80005b8 <HAL_GetTick>
 8000860:	4626      	mov	r6, r4
 8000862:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000864:	68e3      	ldr	r3, [r4, #12]
 8000866:	03da      	lsls	r2, r3, #15
 8000868:	d40c      	bmi.n	8000884 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800086a:	68e3      	ldr	r3, [r4, #12]
 800086c:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800086e:	bf44      	itt	mi
 8000870:	2301      	movmi	r3, #1
 8000872:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000874:	68f0      	ldr	r0, [r6, #12]
 8000876:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800087a:	d002      	beq.n	8000882 <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 800087c:	f7ff ff92 	bl	80007a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000880:	2001      	movs	r0, #1
}  
 8000882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000884:	1c69      	adds	r1, r5, #1
 8000886:	d0ed      	beq.n	8000864 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000888:	b90d      	cbnz	r5, 800088e <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 800088a:	2003      	movs	r0, #3
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800088e:	f7ff fe93 	bl	80005b8 <HAL_GetTick>
 8000892:	1bc0      	subs	r0, r0, r7
 8000894:	4285      	cmp	r5, r0
 8000896:	d2e5      	bcs.n	8000864 <FLASH_WaitForLastOperation+0x14>
 8000898:	e7f7      	b.n	800088a <FLASH_WaitForLastOperation+0x3a>
 800089a:	bf00      	nop
 800089c:	2000015c 	.word	0x2000015c
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_FLASH_Program>:
{
 80008a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80008a8:	4d20      	ldr	r5, [pc, #128]	; (800092c <HAL_FLASH_Program+0x88>)
{
 80008aa:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80008ac:	7e2b      	ldrb	r3, [r5, #24]
 80008ae:	2b01      	cmp	r3, #1
{
 80008b0:	4607      	mov	r7, r0
 80008b2:	460e      	mov	r6, r1
 80008b4:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80008b6:	d035      	beq.n	8000924 <HAL_FLASH_Program+0x80>
 80008b8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008ba:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80008be:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008c0:	f7ff ffc6 	bl	8000850 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008c4:	b9b0      	cbnz	r0, 80008f4 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80008c6:	b9cf      	cbnz	r7, 80008fc <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_FLASH_Program+0x8c>)
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80008d2:	691a      	ldr	r2, [r3, #16]
 80008d4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80008d6:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80008d8:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80008da:	f042 0201 	orr.w	r2, r2, #1
 80008de:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80008e0:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008e6:	f7ff ffb3 	bl	8000850 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80008ea:	4a11      	ldr	r2, [pc, #68]	; (8000930 <HAL_FLASH_Program+0x8c>)
 80008ec:	6913      	ldr	r3, [r2, #16]
 80008ee:	f023 0301 	bic.w	r3, r3, #1
 80008f2:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80008f4:	2300      	movs	r3, #0
 80008f6:	762b      	strb	r3, [r5, #24]
  return status;
 80008f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008fc:	2f01      	cmp	r7, #1
 80008fe:	d104      	bne.n	800090a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000900:	b2a1      	uxth	r1, r4
 8000902:	4630      	mov	r0, r6
 8000904:	f7ff ff3c 	bl	8000780 <FLASH_Program_HalfWord>
 8000908:	e7eb      	b.n	80008e2 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800090a:	2f02      	cmp	r7, #2
 800090c:	d104      	bne.n	8000918 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800090e:	4621      	mov	r1, r4
 8000910:	4630      	mov	r0, r6
 8000912:	f7ff ff23 	bl	800075c <FLASH_Program_Word>
 8000916:	e7e4      	b.n	80008e2 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000918:	4622      	mov	r2, r4
 800091a:	4643      	mov	r3, r8
 800091c:	4630      	mov	r0, r6
 800091e:	f7ff ff09 	bl	8000734 <FLASH_Program_DoubleWord>
 8000922:	e7de      	b.n	80008e2 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000924:	2002      	movs	r0, #2
}
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800092a:	bf00      	nop
 800092c:	2000015c 	.word	0x2000015c
 8000930:	40023c00 	.word	0x40023c00

08000934 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000934:	b139      	cbz	r1, 8000946 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000936:	2901      	cmp	r1, #1
 8000938:	d01c      	beq.n	8000974 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800093a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800093c:	bf0c      	ite	eq
 800093e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000942:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <FLASH_Erase_Sector+0x48>)
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800094e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	4311      	orrs	r1, r2
 8000954:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800095c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	f042 0202 	orr.w	r2, r2, #2
 8000964:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000968:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800096a:	691a      	ldr	r2, [r3, #16]
 800096c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	e7e5      	b.n	8000946 <FLASH_Erase_Sector+0x12>
 800097a:	bf00      	nop
 800097c:	40023c00 	.word	0x40023c00

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000984:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000986:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000988:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000b38 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098c:	4a68      	ldr	r2, [pc, #416]	; (8000b30 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000b3c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000992:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000994:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000996:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800099c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80009a4:	45b6      	cmp	lr, r6
 80009a6:	f040 80ae 	bne.w	8000b06 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009aa:	684c      	ldr	r4, [r1, #4]
 80009ac:	f024 0710 	bic.w	r7, r4, #16
 80009b0:	2f02      	cmp	r7, #2
 80009b2:	d116      	bne.n	80009e2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80009b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80009b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009c0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009c8:	f04f 0c0f 	mov.w	ip, #15
 80009cc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009d0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009d4:	690d      	ldr	r5, [r1, #16]
 80009d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80009da:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009de:	f8ca 5020 	str.w	r5, [sl, #32]
 80009e2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009e6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009e8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ec:	fa05 f50a 	lsl.w	r5, r5, sl
 80009f0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009f6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009fa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fe:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a00:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a04:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a06:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0a:	d811      	bhi.n	8000a30 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a0e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a12:	68cf      	ldr	r7, [r1, #12]
 8000a14:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a18:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a1c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a1e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a20:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a24:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a28:	409f      	lsls	r7, r3
 8000a2a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a2e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a30:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a32:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a34:	688f      	ldr	r7, [r1, #8]
 8000a36:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a3a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a3c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a3e:	00e5      	lsls	r5, r4, #3
 8000a40:	d561      	bpl.n	8000b06 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	f04f 0b00 	mov.w	fp, #0
 8000a46:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a4a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4e:	4d39      	ldr	r5, [pc, #228]	; (8000b34 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a50:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a54:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a58:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a5c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a60:	9703      	str	r7, [sp, #12]
 8000a62:	9f03      	ldr	r7, [sp, #12]
 8000a64:	f023 0703 	bic.w	r7, r3, #3
 8000a68:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a6c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a70:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a74:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a78:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a7c:	f04f 0e0f 	mov.w	lr, #15
 8000a80:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a84:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a86:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a8a:	d043      	beq.n	8000b14 <HAL_GPIO_Init+0x194>
 8000a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	d041      	beq.n	8000b18 <HAL_GPIO_Init+0x198>
 8000a94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a98:	42a8      	cmp	r0, r5
 8000a9a:	d03f      	beq.n	8000b1c <HAL_GPIO_Init+0x19c>
 8000a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa0:	42a8      	cmp	r0, r5
 8000aa2:	d03d      	beq.n	8000b20 <HAL_GPIO_Init+0x1a0>
 8000aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa8:	42a8      	cmp	r0, r5
 8000aaa:	d03b      	beq.n	8000b24 <HAL_GPIO_Init+0x1a4>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d03b      	beq.n	8000b28 <HAL_GPIO_Init+0x1a8>
 8000ab0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ab4:	42a8      	cmp	r0, r5
 8000ab6:	d039      	beq.n	8000b2c <HAL_GPIO_Init+0x1ac>
 8000ab8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000abc:	42a8      	cmp	r0, r5
 8000abe:	bf14      	ite	ne
 8000ac0:	2508      	movne	r5, #8
 8000ac2:	2507      	moveq	r5, #7
 8000ac4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ac8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000acc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ace:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	bf0c      	ite	eq
 8000ad8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ada:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000adc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ade:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	bf0c      	ite	eq
 8000ae6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ae8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000aea:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aec:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000af2:	bf0c      	ite	eq
 8000af4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000af6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000af8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000afa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000afe:	bf54      	ite	pl
 8000b00:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b02:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b04:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	3301      	adds	r3, #1
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	f47f af44 	bne.w	8000996 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b0e:	b005      	add	sp, #20
 8000b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b14:	465d      	mov	r5, fp
 8000b16:	e7d5      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b18:	2501      	movs	r5, #1
 8000b1a:	e7d3      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b1c:	2502      	movs	r5, #2
 8000b1e:	e7d1      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b20:	2503      	movs	r5, #3
 8000b22:	e7cf      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b24:	2504      	movs	r5, #4
 8000b26:	e7cd      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b28:	2505      	movs	r5, #5
 8000b2a:	e7cb      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b2c:	2506      	movs	r5, #6
 8000b2e:	e7c9      	b.n	8000ac4 <HAL_GPIO_Init+0x144>
 8000b30:	40013c00 	.word	0x40013c00
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40021400 	.word	0x40021400

08000b40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b40:	6903      	ldr	r3, [r0, #16]
 8000b42:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b44:	bf14      	ite	ne
 8000b46:	2001      	movne	r0, #1
 8000b48:	2000      	moveq	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b4c:	b10a      	cbz	r2, 8000b52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b4e:	6181      	str	r1, [r0, #24]
 8000b50:	4770      	bx	lr
 8000b52:	0409      	lsls	r1, r1, #16
 8000b54:	e7fb      	b.n	8000b4e <HAL_GPIO_WritePin+0x2>

08000b56 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b56:	6943      	ldr	r3, [r0, #20]
 8000b58:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b5c:	bf08      	it	eq
 8000b5e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b60:	6181      	str	r1, [r0, #24]
 8000b62:	4770      	bx	lr

08000b64 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b64:	6801      	ldr	r1, [r0, #0]
 8000b66:	694b      	ldr	r3, [r1, #20]
 8000b68:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	d010      	beq.n	8000b94 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b72:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000b76:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b78:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000b7a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b80:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b84:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b86:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000b90:	2001      	movs	r0, #1
 8000b92:	4770      	bx	lr
  }
  return HAL_OK;
 8000b94:	4618      	mov	r0, r3
}
 8000b96:	4770      	bx	lr

08000b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ba2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000ba6:	b28e      	uxth	r6, r1
 8000ba8:	6825      	ldr	r5, [r4, #0]
 8000baa:	f1b8 0f01 	cmp.w	r8, #1
 8000bae:	bf0c      	ite	eq
 8000bb0:	696b      	ldreq	r3, [r5, #20]
 8000bb2:	69ab      	ldrne	r3, [r5, #24]
 8000bb4:	ea36 0303 	bics.w	r3, r6, r3
 8000bb8:	bf14      	ite	ne
 8000bba:	2001      	movne	r0, #1
 8000bbc:	2000      	moveq	r0, #0
 8000bbe:	b908      	cbnz	r0, 8000bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000bc4:	696b      	ldr	r3, [r5, #20]
 8000bc6:	055a      	lsls	r2, r3, #21
 8000bc8:	d516      	bpl.n	8000bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bd2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000bd6:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000bd8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000bde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000be2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000be6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000be8:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000bec:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000bee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000bf8:	1c7b      	adds	r3, r7, #1
 8000bfa:	d0d5      	beq.n	8000ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bfc:	f7ff fcdc 	bl	80005b8 <HAL_GetTick>
 8000c00:	eba0 0009 	sub.w	r0, r0, r9
 8000c04:	4287      	cmp	r7, r0
 8000c06:	d301      	bcc.n	8000c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000c08:	2f00      	cmp	r7, #0
 8000c0a:	d1cd      	bne.n	8000ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c0c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c0e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c10:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c1c:	f042 0220 	orr.w	r2, r2, #32
 8000c20:	e7e4      	b.n	8000bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000c22 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000c22:	b570      	push	{r4, r5, r6, lr}
 8000c24:	4604      	mov	r4, r0
 8000c26:	460d      	mov	r5, r1
 8000c28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	075b      	lsls	r3, r3, #29
 8000c30:	d501      	bpl.n	8000c36 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c32:	2000      	movs	r0, #0
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff ff94 	bl	8000b64 <I2C_IsAcknowledgeFailed>
 8000c3c:	b9a8      	cbnz	r0, 8000c6a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000c3e:	1c6a      	adds	r2, r5, #1
 8000c40:	d0f3      	beq.n	8000c2a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c42:	f7ff fcb9 	bl	80005b8 <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	d301      	bcc.n	8000c50 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d1ec      	bne.n	8000c2a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c50:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c52:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c54:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c64:	f042 0220 	orr.w	r2, r2, #32
 8000c68:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000c6a:	2001      	movs	r0, #1
}
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}

08000c6e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c6e:	b570      	push	{r4, r5, r6, lr}
 8000c70:	4604      	mov	r4, r0
 8000c72:	460d      	mov	r5, r1
 8000c74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c76:	6820      	ldr	r0, [r4, #0]
 8000c78:	6943      	ldr	r3, [r0, #20]
 8000c7a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000c7e:	d001      	beq.n	8000c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c84:	6942      	ldr	r2, [r0, #20]
 8000c86:	06d2      	lsls	r2, r2, #27
 8000c88:	d50e      	bpl.n	8000ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c8a:	f06f 0210 	mvn.w	r2, #16
 8000c8e:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c90:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c92:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000c9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c9e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ca0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ca8:	f7ff fc86 	bl	80005b8 <HAL_GetTick>
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	42a8      	cmp	r0, r5
 8000cb0:	d801      	bhi.n	8000cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d1df      	bne.n	8000c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cb6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cb8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000cc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cc6:	f042 0220 	orr.w	r2, r2, #32
 8000cca:	e7e8      	b.n	8000c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000ccc <I2C_WaitOnFlagUntilTimeout>:
{
 8000ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4690      	mov	r8, r2
 8000cd6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cd8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000cdc:	b28d      	uxth	r5, r1
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	f1b9 0f01 	cmp.w	r9, #1
 8000ce4:	bf0c      	ite	eq
 8000ce6:	695b      	ldreq	r3, [r3, #20]
 8000ce8:	699b      	ldrne	r3, [r3, #24]
 8000cea:	ea35 0303 	bics.w	r3, r5, r3
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	4543      	cmp	r3, r8
 8000cf6:	d002      	beq.n	8000cfe <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000cf8:	2000      	movs	r0, #0
}
 8000cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cfe:	1c7b      	adds	r3, r7, #1
 8000d00:	d0ed      	beq.n	8000cde <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d02:	f7ff fc59 	bl	80005b8 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	4287      	cmp	r7, r0
 8000d0a:	d301      	bcc.n	8000d10 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000d0c:	2f00      	cmp	r7, #0
 8000d0e:	d1e6      	bne.n	8000cde <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d10:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d12:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d14:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d24:	f042 0220 	orr.w	r2, r2, #32
 8000d28:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000d30 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460d      	mov	r5, r1
 8000d36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	061b      	lsls	r3, r3, #24
 8000d3e:	d501      	bpl.n	8000d44 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff ff0d 	bl	8000b64 <I2C_IsAcknowledgeFailed>
 8000d4a:	b9a8      	cbnz	r0, 8000d78 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000d4c:	1c6a      	adds	r2, r5, #1
 8000d4e:	d0f3      	beq.n	8000d38 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d50:	f7ff fc32 	bl	80005b8 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	4285      	cmp	r5, r0
 8000d58:	d301      	bcc.n	8000d5e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d1ec      	bne.n	8000d38 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d5e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d60:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d62:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000d78:	2001      	movs	r0, #1
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}

08000d7c <I2C_RequestMemoryWrite>:
{
 8000d7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000d80:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d82:	6802      	ldr	r2, [r0, #0]
{
 8000d84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000d86:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
{
 8000d90:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d92:	9600      	str	r6, [sp, #0]
 8000d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d96:	2200      	movs	r2, #0
 8000d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000d9c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d9e:	f7ff ff95 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 8000da2:	b118      	cbz	r0, 8000dac <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
}
 8000da6:	b004      	add	sp, #16
 8000da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000dac:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000db0:	4918      	ldr	r1, [pc, #96]	; (8000e14 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000db2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000db6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000db8:	4620      	mov	r0, r4
 8000dba:	4633      	mov	r3, r6
 8000dbc:	f7ff feec 	bl	8000b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d1ef      	bne.n	8000da4 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	9003      	str	r0, [sp, #12]
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	9203      	str	r2, [sp, #12]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dd0:	4632      	mov	r2, r6
 8000dd2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dd4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff ffaa 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ddc:	b140      	cbz	r0, 8000df0 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000de0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000de2:	bf01      	itttt	eq
 8000de4:	6822      	ldreq	r2, [r4, #0]
 8000de6:	6813      	ldreq	r3, [r2, #0]
 8000de8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000dec:	6013      	streq	r3, [r2, #0]
 8000dee:	e7d9      	b.n	8000da4 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000df0:	f1b8 0f01 	cmp.w	r8, #1
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	d102      	bne.n	8000dfe <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000df8:	b2ed      	uxtb	r5, r5
 8000dfa:	611d      	str	r5, [r3, #16]
 8000dfc:	e7d3      	b.n	8000da6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000dfe:	0a2a      	lsrs	r2, r5, #8
 8000e00:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e04:	4632      	mov	r2, r6
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff ff92 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1e6      	bne.n	8000dde <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	e7f1      	b.n	8000df8 <I2C_RequestMemoryWrite+0x7c>
 8000e14:	00010002 	.word	0x00010002

08000e18 <I2C_RequestMemoryRead>:
{
 8000e18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e1c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e1e:	6803      	ldr	r3, [r0, #0]
{
 8000e20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000e22:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e2a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e32:	601a      	str	r2, [r3, #0]
{
 8000e34:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e36:	9500      	str	r5, [sp, #0]
 8000e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000e40:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e42:	f7ff ff43 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 8000e46:	b118      	cbz	r0, 8000e50 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
}
 8000e4a:	b004      	add	sp, #16
 8000e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e50:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e52:	492b      	ldr	r1, [pc, #172]	; (8000f00 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e54:	b2ff      	uxtb	r7, r7
 8000e56:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000e5a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	462b      	mov	r3, r5
 8000e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e62:	f7ff fe99 	bl	8000b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d1ee      	bne.n	8000e48 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	9003      	str	r0, [sp, #12]
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	9203      	str	r2, [sp, #12]
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e76:	462a      	mov	r2, r5
 8000e78:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e7a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ff57 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e82:	b140      	cbz	r0, 8000e96 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e86:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e88:	bf01      	itttt	eq
 8000e8a:	6822      	ldreq	r2, [r4, #0]
 8000e8c:	6813      	ldreq	r3, [r2, #0]
 8000e8e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000e92:	6013      	streq	r3, [r2, #0]
 8000e94:	e7d8      	b.n	8000e48 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e96:	f1b8 0f01 	cmp.w	r8, #1
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	d125      	bne.n	8000eea <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e9e:	b2f6      	uxtb	r6, r6
 8000ea0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ea2:	462a      	mov	r2, r5
 8000ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff42 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8000eac:	4602      	mov	r2, r0
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d1e8      	bne.n	8000e84 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000eb2:	6821      	ldr	r1, [r4, #0]
 8000eb4:	680b      	ldr	r3, [r1, #0]
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	9500      	str	r5, [sp, #0]
 8000ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ec6:	f7ff ff01 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d1bc      	bne.n	8000e48 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000ece:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000ed4:	f047 0701 	orr.w	r7, r7, #1
 8000ed8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000eda:	4620      	mov	r0, r4
 8000edc:	462b      	mov	r3, r5
 8000ede:	f7ff fe5b 	bl	8000b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8000ee2:	3000      	adds	r0, #0
 8000ee4:	bf18      	it	ne
 8000ee6:	2001      	movne	r0, #1
 8000ee8:	e7af      	b.n	8000e4a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000eea:	0a32      	lsrs	r2, r6, #8
 8000eec:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff ff1c 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1c3      	bne.n	8000e84 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	e7ce      	b.n	8000e9e <I2C_RequestMemoryRead+0x86>
 8000f00:	00010002 	.word	0x00010002

08000f04 <HAL_I2C_Init>:
{
 8000f04:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000f06:	4604      	mov	r4, r0
 8000f08:	b908      	cbnz	r0, 8000f0e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f16:	b91b      	cbnz	r3, 8000f20 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000f18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000f1c:	f008 f8e2 	bl	80090e4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000f20:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f22:	2324      	movs	r3, #36	; 0x24
 8000f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f30:	f000 fc72 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f34:	6865      	ldr	r5, [r4, #4]
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <HAL_I2C_Init+0x138>)
 8000f38:	429d      	cmp	r5, r3
 8000f3a:	d84d      	bhi.n	8000fd8 <HAL_I2C_Init+0xd4>
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_I2C_Init+0x13c>)
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	d9e3      	bls.n	8000f0a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f42:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f44:	493f      	ldr	r1, [pc, #252]	; (8001044 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f46:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f48:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f54:	6a13      	ldr	r3, [r2, #32]
 8000f56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5a:	3101      	adds	r1, #1
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f60:	69d1      	ldr	r1, [r2, #28]
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <HAL_I2C_Init+0x138>)
 8000f64:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f68:	429d      	cmp	r5, r3
 8000f6a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f6e:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f72:	d848      	bhi.n	8001006 <HAL_I2C_Init+0x102>
 8000f74:	006d      	lsls	r5, r5, #1
 8000f76:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f7a:	3001      	adds	r0, #1
 8000f7c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	bf38      	it	cc
 8000f84:	2304      	movcc	r3, #4
 8000f86:	430b      	orrs	r3, r1
 8000f88:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f8a:	6811      	ldr	r1, [r2, #0]
 8000f8c:	6a20      	ldr	r0, [r4, #32]
 8000f8e:	69e3      	ldr	r3, [r4, #28]
 8000f90:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f94:	4303      	orrs	r3, r0
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f9a:	6891      	ldr	r1, [r2, #8]
 8000f9c:	68e0      	ldr	r0, [r4, #12]
 8000f9e:	6923      	ldr	r3, [r4, #16]
 8000fa0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fae:	68d1      	ldr	r1, [r2, #12]
 8000fb0:	69a0      	ldr	r0, [r4, #24]
 8000fb2:	6963      	ldr	r3, [r4, #20]
 8000fb4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000fc8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fca:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_I2C_Init+0x144>)
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d995      	bls.n	8000f0a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fde:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fe0:	4e18      	ldr	r6, [pc, #96]	; (8001044 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fe2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fe4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fec:	4333      	orrs	r3, r6
 8000fee:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ff0:	6a13      	ldr	r3, [r2, #32]
 8000ff2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ff6:	4371      	muls	r1, r6
 8000ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ffc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001000:	fbb1 f1f6 	udiv	r1, r1, r6
 8001004:	e7a9      	b.n	8000f5a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001006:	68a3      	ldr	r3, [r4, #8]
 8001008:	b953      	cbnz	r3, 8001020 <HAL_I2C_Init+0x11c>
 800100a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800100e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001012:	1c43      	adds	r3, r0, #1
 8001014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001018:	b16b      	cbz	r3, 8001036 <HAL_I2C_Init+0x132>
 800101a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101e:	e7b2      	b.n	8000f86 <HAL_I2C_Init+0x82>
 8001020:	2319      	movs	r3, #25
 8001022:	436b      	muls	r3, r5
 8001024:	fbb0 f0f3 	udiv	r0, r0, r3
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102e:	b113      	cbz	r3, 8001036 <HAL_I2C_Init+0x132>
 8001030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001034:	e7a7      	b.n	8000f86 <HAL_I2C_Init+0x82>
 8001036:	2301      	movs	r3, #1
 8001038:	e7a5      	b.n	8000f86 <HAL_I2C_Init+0x82>
 800103a:	bf00      	nop
 800103c:	000186a0 	.word	0x000186a0
 8001040:	001e847f 	.word	0x001e847f
 8001044:	000f4240 	.word	0x000f4240
 8001048:	003d08ff 	.word	0x003d08ff

0800104c <HAL_I2C_Mem_Write>:
{
 800104c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001050:	4604      	mov	r4, r0
 8001052:	4699      	mov	r9, r3
 8001054:	460f      	mov	r7, r1
 8001056:	4690      	mov	r8, r2
 8001058:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800105a:	f7ff faad 	bl	80005b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001062:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001064:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001066:	d003      	beq.n	8001070 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001068:	2002      	movs	r0, #2
}
 800106a:	b003      	add	sp, #12
 800106c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001070:	9000      	str	r0, [sp, #0]
 8001072:	2319      	movs	r3, #25
 8001074:	2201      	movs	r2, #1
 8001076:	493b      	ldr	r1, [pc, #236]	; (8001164 <HAL_I2C_Mem_Write+0x118>)
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fe27 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 800107e:	2800      	cmp	r0, #0
 8001080:	d1f2      	bne.n	8001068 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001082:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001086:	2b01      	cmp	r3, #1
 8001088:	d0ee      	beq.n	8001068 <HAL_I2C_Mem_Write+0x1c>
 800108a:	2301      	movs	r3, #1
 800108c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001096:	bf5e      	ittt	pl
 8001098:	681a      	ldrpl	r2, [r3, #0]
 800109a:	f042 0201 	orrpl.w	r2, r2, #1
 800109e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010a8:	2321      	movs	r3, #33	; 0x21
 80010aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80010b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010ba:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010bc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80010c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010c4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_I2C_Mem_Write+0x11c>)
 80010c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010ca:	9501      	str	r5, [sp, #4]
 80010cc:	9600      	str	r6, [sp, #0]
 80010ce:	464b      	mov	r3, r9
 80010d0:	4642      	mov	r2, r8
 80010d2:	4639      	mov	r1, r7
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff fe51 	bl	8000d7c <I2C_RequestMemoryWrite>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d02a      	beq.n	8001134 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80010de:	2001      	movs	r0, #1
 80010e0:	e7c3      	b.n	800106a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e2:	f7ff fe25 	bl	8000d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80010e6:	b140      	cbz	r0, 80010fa <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ea:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ec:	bf01      	itttt	eq
 80010ee:	6822      	ldreq	r2, [r4, #0]
 80010f0:	6813      	ldreq	r3, [r2, #0]
 80010f2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80010f6:	6013      	streq	r3, [r2, #0]
 80010f8:	e7f1      	b.n	80010de <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010fc:	6827      	ldr	r7, [r4, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001104:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001106:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001108:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800110a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800110c:	3a01      	subs	r2, #1
 800110e:	b292      	uxth	r2, r2
 8001110:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001112:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001114:	1e48      	subs	r0, r1, #1
 8001116:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001118:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800111a:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800111c:	d50a      	bpl.n	8001134 <HAL_I2C_Mem_Write+0xe8>
 800111e:	b148      	cbz	r0, 8001134 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001120:	785a      	ldrb	r2, [r3, #1]
 8001122:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001124:	3302      	adds	r3, #2
 8001126:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800112a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800112c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800112e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001130:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001132:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001134:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001136:	462a      	mov	r2, r5
 8001138:	4631      	mov	r1, r6
 800113a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1d0      	bne.n	80010e2 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001140:	f7ff fd6f 	bl	8000c22 <I2C_WaitOnBTFFlagUntilTimeout>
 8001144:	2800      	cmp	r0, #0
 8001146:	d1cf      	bne.n	80010e8 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001150:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001152:	2320      	movs	r3, #32
 8001154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001158:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800115c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001160:	e783      	b.n	800106a <HAL_I2C_Mem_Write+0x1e>
 8001162:	bf00      	nop
 8001164:	00100002 	.word	0x00100002
 8001168:	ffff0000 	.word	0xffff0000

0800116c <HAL_I2C_Mem_Read>:
{
 800116c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001170:	4604      	mov	r4, r0
 8001172:	b087      	sub	sp, #28
 8001174:	4699      	mov	r9, r3
 8001176:	460d      	mov	r5, r1
 8001178:	4690      	mov	r8, r2
 800117a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fa1c 	bl	80005b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001180:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001184:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001186:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001188:	d004      	beq.n	8001194 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800118a:	2502      	movs	r5, #2
}
 800118c:	4628      	mov	r0, r5
 800118e:	b007      	add	sp, #28
 8001190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001194:	9000      	str	r0, [sp, #0]
 8001196:	2319      	movs	r3, #25
 8001198:	2201      	movs	r2, #1
 800119a:	4977      	ldr	r1, [pc, #476]	; (8001378 <HAL_I2C_Mem_Read+0x20c>)
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff fd95 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d1f1      	bne.n	800118a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80011a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d0ed      	beq.n	800118a <HAL_I2C_Mem_Read+0x1e>
 80011ae:	2301      	movs	r3, #1
 80011b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80011ba:	bf5e      	ittt	pl
 80011bc:	681a      	ldrpl	r2, [r3, #0]
 80011be:	f042 0201 	orrpl.w	r2, r2, #1
 80011c2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ca:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011cc:	2322      	movs	r3, #34	; 0x22
 80011ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011d2:	2340      	movs	r3, #64	; 0x40
 80011d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80011dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011de:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80011e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_I2C_Mem_Read+0x210>)
 80011ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011ee:	4629      	mov	r1, r5
 80011f0:	9601      	str	r6, [sp, #4]
 80011f2:	9700      	str	r7, [sp, #0]
 80011f4:	464b      	mov	r3, r9
 80011f6:	4642      	mov	r2, r8
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff fe0d 	bl	8000e18 <I2C_RequestMemoryRead>
 80011fe:	4605      	mov	r5, r0
 8001200:	b108      	cbz	r0, 8001206 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8001202:	2501      	movs	r5, #1
 8001204:	e7c2      	b.n	800118c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001206:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	b992      	cbnz	r2, 8001232 <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800120c:	9002      	str	r0, [sp, #8]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	9202      	str	r2, [sp, #8]
 8001216:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001220:	2320      	movs	r3, #32
 8001222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001226:	2300      	movs	r3, #0
 8001228:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800122c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001230:	e7ac      	b.n	800118c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001232:	2a01      	cmp	r2, #1
 8001234:	d12c      	bne.n	8001290 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800123c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800123e:	9003      	str	r0, [sp, #12]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	9203      	str	r2, [sp, #12]
 8001248:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001250:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001252:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001380 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8001256:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e1      	beq.n	8001220 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800125c:	2b03      	cmp	r3, #3
 800125e:	d86e      	bhi.n	800133e <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8001260:	2b01      	cmp	r3, #1
 8001262:	d12d      	bne.n	80012c0 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001264:	4632      	mov	r2, r6
 8001266:	4639      	mov	r1, r7
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fd00 	bl	8000c6e <I2C_WaitOnRXNEFlagUntilTimeout>
 800126e:	2800      	cmp	r0, #0
 8001270:	d1c7      	bne.n	8001202 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001276:	6912      	ldr	r2, [r2, #16]
 8001278:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800127a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001280:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001282:	3b01      	subs	r3, #1
 8001284:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001288:	3b01      	subs	r3, #1
 800128a:	b29b      	uxth	r3, r3
 800128c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800128e:	e7e2      	b.n	8001256 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8001290:	2a02      	cmp	r2, #2
 8001292:	d10e      	bne.n	80012b2 <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800129a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012a2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012a4:	9004      	str	r0, [sp, #16]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	9204      	str	r2, [sp, #16]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	9304      	str	r3, [sp, #16]
 80012ae:	9b04      	ldr	r3, [sp, #16]
 80012b0:	e7cf      	b.n	8001252 <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b2:	9005      	str	r0, [sp, #20]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	9205      	str	r2, [sp, #20]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	9305      	str	r3, [sp, #20]
 80012bc:	9b05      	ldr	r3, [sp, #20]
 80012be:	e7c8      	b.n	8001252 <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 80012c0:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012c2:	9600      	str	r6, [sp, #0]
 80012c4:	463b      	mov	r3, r7
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4641      	mov	r1, r8
 80012cc:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80012ce:	d119      	bne.n	8001304 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012d0:	f7ff fcfc 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d194      	bne.n	8001202 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012e0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80012e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ea:	1c53      	adds	r3, r2, #1
 80012ec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80012ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012f0:	3b01      	subs	r3, #1
 80012f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80012f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012fc:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	7053      	strb	r3, [r2, #1]
 8001302:	e7ba      	b.n	800127a <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001304:	f7ff fce2 	bl	8000ccc <I2C_WaitOnFlagUntilTimeout>
 8001308:	4602      	mov	r2, r0
 800130a:	2800      	cmp	r0, #0
 800130c:	f47f af79 	bne.w	8001202 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001318:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800131a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001320:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001322:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001324:	3301      	adds	r3, #1
 8001326:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001328:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800132a:	3b01      	subs	r3, #1
 800132c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800132e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001330:	3b01      	subs	r3, #1
 8001332:	b29b      	uxth	r3, r3
 8001334:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001336:	4641      	mov	r1, r8
 8001338:	463b      	mov	r3, r7
 800133a:	4620      	mov	r0, r4
 800133c:	e7c8      	b.n	80012d0 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133e:	4632      	mov	r2, r6
 8001340:	4639      	mov	r1, r7
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff fc93 	bl	8000c6e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001348:	2800      	cmp	r0, #0
 800134a:	f47f af5a 	bne.w	8001202 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001352:	6912      	ldr	r2, [r2, #16]
 8001354:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001356:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001358:	1c53      	adds	r3, r2, #1
 800135a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800135c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800135e:	3b01      	subs	r3, #1
 8001360:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001362:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001364:	3b01      	subs	r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	6959      	ldr	r1, [r3, #20]
 800136e:	0749      	lsls	r1, r1, #29
 8001370:	f57f af71 	bpl.w	8001256 <HAL_I2C_Mem_Read+0xea>
 8001374:	e7c3      	b.n	80012fe <HAL_I2C_Mem_Read+0x192>
 8001376:	bf00      	nop
 8001378:	00100002 	.word	0x00100002
 800137c:	ffff0000 	.word	0xffff0000
 8001380:	00010004 	.word	0x00010004

08001384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	4604      	mov	r4, r0
 800138a:	b918      	cbnz	r0, 8001394 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800138c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800138e:	b002      	add	sp, #8
 8001390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	07dd      	lsls	r5, r3, #31
 8001398:	d410      	bmi.n	80013bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	0798      	lsls	r0, r3, #30
 800139e:	d458      	bmi.n	8001452 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	071a      	lsls	r2, r3, #28
 80013a4:	f100 809a 	bmi.w	80014dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	075b      	lsls	r3, r3, #29
 80013ac:	f100 80b8 	bmi.w	8001520 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b0:	69a2      	ldr	r2, [r4, #24]
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	f040 8119 	bne.w	80015ea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e8      	b.n	800138e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013bc:	4ba6      	ldr	r3, [pc, #664]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	f002 020c 	and.w	r2, r2, #12
 80013c4:	2a04      	cmp	r2, #4
 80013c6:	d007      	beq.n	80013d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2a08      	cmp	r2, #8
 80013d0:	d10a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	0259      	lsls	r1, r3, #9
 80013d6:	d507      	bpl.n	80013e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4b9f      	ldr	r3, [pc, #636]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	039a      	lsls	r2, r3, #14
 80013de:	d5dc      	bpl.n	800139a <HAL_RCC_OscConfig+0x16>
 80013e0:	6863      	ldr	r3, [r4, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1d9      	bne.n	800139a <HAL_RCC_OscConfig+0x16>
 80013e6:	e7d1      	b.n	800138c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	4d9b      	ldr	r5, [pc, #620]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d111      	bne.n	8001416 <HAL_RCC_OscConfig+0x92>
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013fa:	f7ff f8dd 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4d96      	ldr	r5, [pc, #600]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001400:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	039b      	lsls	r3, r3, #14
 8001406:	d4c8      	bmi.n	800139a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff f8d6 	bl	80005b8 <HAL_GetTick>
 800140c:	1b80      	subs	r0, r0, r6
 800140e:	2864      	cmp	r0, #100	; 0x64
 8001410:	d9f7      	bls.n	8001402 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e7bb      	b.n	800138e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141a:	d104      	bne.n	8001426 <HAL_RCC_OscConfig+0xa2>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	e7e5      	b.n	80013f2 <HAL_RCC_OscConfig+0x6e>
 8001426:	682a      	ldr	r2, [r5, #0]
 8001428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800142c:	602a      	str	r2, [r5, #0]
 800142e:	682a      	ldr	r2, [r5, #0]
 8001430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001434:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1df      	bne.n	80013fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800143a:	f7ff f8bd 	bl	80005b8 <HAL_GetTick>
 800143e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	039f      	lsls	r7, r3, #14
 8001444:	d5a9      	bpl.n	800139a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001446:	f7ff f8b7 	bl	80005b8 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2864      	cmp	r0, #100	; 0x64
 800144e:	d9f7      	bls.n	8001440 <HAL_RCC_OscConfig+0xbc>
 8001450:	e7df      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	f012 0f0c 	tst.w	r2, #12
 800145a:	d007      	beq.n	800146c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	2a08      	cmp	r2, #8
 8001464:	d111      	bne.n	800148a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	025e      	lsls	r6, r3, #9
 800146a:	d40e      	bmi.n	800148a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146c:	4b7a      	ldr	r3, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	0795      	lsls	r5, r2, #30
 8001472:	d502      	bpl.n	800147a <HAL_RCC_OscConfig+0xf6>
 8001474:	68e2      	ldr	r2, [r4, #12]
 8001476:	2a01      	cmp	r2, #1
 8001478:	d188      	bne.n	800138c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6921      	ldr	r1, [r4, #16]
 800147e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001482:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001486:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001488:	e78a      	b.n	80013a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800148a:	68e2      	ldr	r2, [r4, #12]
 800148c:	4b73      	ldr	r3, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x2d8>)
 800148e:	b1b2      	cbz	r2, 80014be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001494:	f7ff f890 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	4d6f      	ldr	r5, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800149a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	0798      	lsls	r0, r3, #30
 80014a0:	d507      	bpl.n	80014b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	6922      	ldr	r2, [r4, #16]
 80014a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	e776      	b.n	80013a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff f881 	bl	80005b8 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d9ef      	bls.n	800149c <HAL_RCC_OscConfig+0x118>
 80014bc:	e7a9      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80014be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c0:	f7ff f87a 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c4:	4d64      	ldr	r5, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80014c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	0799      	lsls	r1, r3, #30
 80014cc:	f57f af68 	bpl.w	80013a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff f872 	bl	80005b8 <HAL_GetTick>
 80014d4:	1b80      	subs	r0, r0, r6
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0x144>
 80014da:	e79a      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014dc:	6962      	ldr	r2, [r4, #20]
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <HAL_RCC_OscConfig+0x2dc>)
 80014e0:	b17a      	cbz	r2, 8001502 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014e6:	f7ff f867 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4d5b      	ldr	r5, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80014ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014f0:	079f      	lsls	r7, r3, #30
 80014f2:	f53f af59 	bmi.w	80013a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff f85f 	bl	80005b8 <HAL_GetTick>
 80014fa:	1b80      	subs	r0, r0, r6
 80014fc:	2802      	cmp	r0, #2
 80014fe:	d9f6      	bls.n	80014ee <HAL_RCC_OscConfig+0x16a>
 8001500:	e787      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001502:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001504:	f7ff f858 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4d53      	ldr	r5, [pc, #332]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800150a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800150e:	0798      	lsls	r0, r3, #30
 8001510:	f57f af4a 	bpl.w	80013a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff f850 	bl	80005b8 <HAL_GetTick>
 8001518:	1b80      	subs	r0, r0, r6
 800151a:	2802      	cmp	r0, #2
 800151c:	d9f6      	bls.n	800150c <HAL_RCC_OscConfig+0x188>
 800151e:	e778      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 8001522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001524:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001528:	d128      	bne.n	800157c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800153e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4d48      	ldr	r5, [pc, #288]	; (8001664 <HAL_RCC_OscConfig+0x2e0>)
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	05d9      	lsls	r1, r3, #23
 8001546:	d51b      	bpl.n	8001580 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001548:	68a3      	ldr	r3, [r4, #8]
 800154a:	4d43      	ldr	r5, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 800154c:	2b01      	cmp	r3, #1
 800154e:	d127      	bne.n	80015a0 <HAL_RCC_OscConfig+0x21c>
 8001550:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001558:	f7ff f82e 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	4d3e      	ldr	r5, [pc, #248]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800155e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001566:	079b      	lsls	r3, r3, #30
 8001568:	d539      	bpl.n	80015de <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800156a:	2e00      	cmp	r6, #0
 800156c:	f43f af20 	beq.w	80013b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4a39      	ldr	r2, [pc, #228]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 8001572:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	e719      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800157c:	2600      	movs	r6, #0
 800157e:	e7df      	b.n	8001540 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001588:	f7ff f816 	bl	80005b8 <HAL_GetTick>
 800158c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	682b      	ldr	r3, [r5, #0]
 8001590:	05da      	lsls	r2, r3, #23
 8001592:	d4d9      	bmi.n	8001548 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001594:	f7ff f810 	bl	80005b8 <HAL_GetTick>
 8001598:	1bc0      	subs	r0, r0, r7
 800159a:	2802      	cmp	r0, #2
 800159c:	d9f7      	bls.n	800158e <HAL_RCC_OscConfig+0x20a>
 800159e:	e738      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d104      	bne.n	80015ae <HAL_RCC_OscConfig+0x22a>
 80015a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	672b      	str	r3, [r5, #112]	; 0x70
 80015ac:	e7d0      	b.n	8001550 <HAL_RCC_OscConfig+0x1cc>
 80015ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	672a      	str	r2, [r5, #112]	; 0x70
 80015b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015b8:	f022 0204 	bic.w	r2, r2, #4
 80015bc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ca      	bne.n	8001558 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80015c2:	f7fe fff9 	bl	80005b8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015ce:	0798      	lsls	r0, r3, #30
 80015d0:	d5cb      	bpl.n	800156a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7fe fff1 	bl	80005b8 <HAL_GetTick>
 80015d6:	1bc0      	subs	r0, r0, r7
 80015d8:	4540      	cmp	r0, r8
 80015da:	d9f7      	bls.n	80015cc <HAL_RCC_OscConfig+0x248>
 80015dc:	e719      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7fe ffeb 	bl	80005b8 <HAL_GetTick>
 80015e2:	1bc0      	subs	r0, r0, r7
 80015e4:	4540      	cmp	r0, r8
 80015e6:	d9bd      	bls.n	8001564 <HAL_RCC_OscConfig+0x1e0>
 80015e8:	e713      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4d1b      	ldr	r5, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
 80015ec:	68ab      	ldr	r3, [r5, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	f43f aeca 	beq.w	800138c <HAL_RCC_OscConfig+0x8>
 80015f8:	4e1b      	ldr	r6, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x2e4>)
 80015fa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015fe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	d134      	bne.n	800166c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001602:	f7fe ffd9 	bl	80005b8 <HAL_GetTick>
 8001606:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	0199      	lsls	r1, r3, #6
 800160c:	d41e      	bmi.n	800164c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	6a22      	ldr	r2, [r4, #32]
 8001610:	69e3      	ldr	r3, [r4, #28]
 8001612:	4313      	orrs	r3, r2
 8001614:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001616:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800161a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800161c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4c0d      	ldr	r4, [pc, #52]	; (8001658 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001624:	0852      	lsrs	r2, r2, #1
 8001626:	3a01      	subs	r2, #1
 8001628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800162c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800162e:	2301      	movs	r3, #1
 8001630:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001632:	f7fe ffc1 	bl	80005b8 <HAL_GetTick>
 8001636:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	019a      	lsls	r2, r3, #6
 800163c:	f53f aebc 	bmi.w	80013b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7fe ffba 	bl	80005b8 <HAL_GetTick>
 8001644:	1b40      	subs	r0, r0, r5
 8001646:	2802      	cmp	r0, #2
 8001648:	d9f6      	bls.n	8001638 <HAL_RCC_OscConfig+0x2b4>
 800164a:	e6e2      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7fe ffb4 	bl	80005b8 <HAL_GetTick>
 8001650:	1bc0      	subs	r0, r0, r7
 8001652:	2802      	cmp	r0, #2
 8001654:	d9d8      	bls.n	8001608 <HAL_RCC_OscConfig+0x284>
 8001656:	e6dc      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
 8001658:	40023800 	.word	0x40023800
 800165c:	42470000 	.word	0x42470000
 8001660:	42470e80 	.word	0x42470e80
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800166c:	f7fe ffa4 	bl	80005b8 <HAL_GetTick>
 8001670:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	f57f ae9f 	bpl.w	80013b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7fe ff9d 	bl	80005b8 <HAL_GetTick>
 800167e:	1b00      	subs	r0, r0, r4
 8001680:	2802      	cmp	r0, #2
 8001682:	d9f6      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ee>
 8001684:	e6c5      	b.n	8001412 <HAL_RCC_OscConfig+0x8e>
 8001686:	bf00      	nop

08001688 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001688:	4913      	ldr	r1, [pc, #76]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800168a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800168c:	688b      	ldr	r3, [r1, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b04      	cmp	r3, #4
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
 8001696:	2b08      	cmp	r3, #8
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800169c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x58>)
 80016a0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	bf14      	ite	ne
 80016ae:	480c      	ldrne	r0, [pc, #48]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	480a      	ldreq	r0, [pc, #40]	; (80016dc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016b6:	bf18      	it	ne
 80016b8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	fba1 0100 	umull	r0, r1, r1, r0
 80016c2:	f7fe fd81 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016ce:	3301      	adds	r3, #1
 80016d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80016d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	007a1200 	.word	0x007a1200

080016e4 <HAL_RCC_ClockConfig>:
{
 80016e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016ea:	4604      	mov	r4, r0
 80016ec:	b910      	cbnz	r0, 80016f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_ClockConfig+0x124>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f002 020f 	and.w	r2, r2, #15
 80016fc:	428a      	cmp	r2, r1
 80016fe:	d328      	bcc.n	8001752 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	6821      	ldr	r1, [r4, #0]
 8001702:	078f      	lsls	r7, r1, #30
 8001704:	d42d      	bmi.n	8001762 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	07c8      	lsls	r0, r1, #31
 8001708:	d440      	bmi.n	800178c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_ClockConfig+0x124>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f002 020f 	and.w	r2, r2, #15
 8001712:	4295      	cmp	r5, r2
 8001714:	d366      	bcc.n	80017e4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	0751      	lsls	r1, r2, #29
 800171a:	d46c      	bmi.n	80017f6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	0713      	lsls	r3, r2, #28
 800171e:	d507      	bpl.n	8001730 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001720:	4a3a      	ldr	r2, [pc, #232]	; (800180c <HAL_RCC_ClockConfig+0x128>)
 8001722:	6921      	ldr	r1, [r4, #16]
 8001724:	6893      	ldr	r3, [r2, #8]
 8001726:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800172a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800172e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001730:	f7ff ffaa 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_ClockConfig+0x128>)
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_RCC_ClockConfig+0x12c>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	40d8      	lsrs	r0, r3
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x130>)
 8001744:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f7fe fec6 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	b2ca      	uxtb	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	4299      	cmp	r1, r3
 800175e:	d1c6      	bne.n	80016ee <HAL_RCC_ClockConfig+0xa>
 8001760:	e7ce      	b.n	8001700 <HAL_RCC_ClockConfig+0x1c>
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	bf1e      	ittt	ne
 800176a:	689a      	ldrne	r2, [r3, #8]
 800176c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001770:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001772:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	bf42      	ittt	mi
 8001776:	689a      	ldrmi	r2, [r3, #8]
 8001778:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800177c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68a0      	ldr	r0, [r4, #8]
 8001782:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001786:	4302      	orrs	r2, r0
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	e7bc      	b.n	8001706 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_ClockConfig+0x128>)
 8001790:	2a01      	cmp	r2, #1
 8001792:	d11d      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	d0a8      	beq.n	80016ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4e1b      	ldr	r6, [pc, #108]	; (800180c <HAL_RCC_ClockConfig+0x128>)
 800179e:	68b3      	ldr	r3, [r6, #8]
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80017a8:	f7fe ff06 	bl	80005b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80017b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	68b3      	ldr	r3, [r6, #8]
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017be:	d0a4      	beq.n	800170a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7fe fefa 	bl	80005b8 <HAL_GetTick>
 80017c4:	1bc0      	subs	r0, r0, r7
 80017c6:	4540      	cmp	r0, r8
 80017c8:	d9f3      	bls.n	80017b2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
}
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d0:	1e91      	subs	r1, r2, #2
 80017d2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	d802      	bhi.n	80017de <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017dc:	e7dd      	b.n	800179a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	f013 0f02 	tst.w	r3, #2
 80017e2:	e7da      	b.n	800179a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e4:	b2ea      	uxtb	r2, r5
 80017e6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	429d      	cmp	r5, r3
 80017f0:	f47f af7d 	bne.w	80016ee <HAL_RCC_ClockConfig+0xa>
 80017f4:	e78f      	b.n	8001716 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f6:	4905      	ldr	r1, [pc, #20]	; (800180c <HAL_RCC_ClockConfig+0x128>)
 80017f8:	68e0      	ldr	r0, [r4, #12]
 80017fa:	688b      	ldr	r3, [r1, #8]
 80017fc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001800:	4303      	orrs	r3, r0
 8001802:	608b      	str	r3, [r1, #8]
 8001804:	e78a      	b.n	800171c <HAL_RCC_ClockConfig+0x38>
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	080098bc 	.word	0x080098bc
 8001814:	20000020 	.word	0x20000020

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_RCC_GetPCLK1Freq+0x14>)
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x18>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001826:	6810      	ldr	r0, [r2, #0]
}
 8001828:	40d8      	lsrs	r0, r3
 800182a:	4770      	bx	lr
 800182c:	40023800 	.word	0x40023800
 8001830:	080098cc 	.word	0x080098cc
 8001834:	20000020 	.word	0x20000020

08001838 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_GetPCLK2Freq+0x14>)
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x18>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001846:	6810      	ldr	r0, [r2, #0]
}
 8001848:	40d8      	lsrs	r0, r3
 800184a:	4770      	bx	lr
 800184c:	40023800 	.word	0x40023800
 8001850:	080098cc 	.word	0x080098cc
 8001854:	20000020 	.word	0x20000020

08001858 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	f013 0f05 	tst.w	r3, #5
{
 800185e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001860:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001862:	d105      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001864:	6828      	ldr	r0, [r5, #0]
 8001866:	f010 0002 	ands.w	r0, r0, #2
 800186a:	d128      	bne.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 800186c:	b003      	add	sp, #12
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001870:	4c41      	ldr	r4, [pc, #260]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001872:	4e42      	ldr	r6, [pc, #264]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001878:	f7fe fe9e 	bl	80005b8 <HAL_GetTick>
 800187c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800187e:	6833      	ldr	r3, [r6, #0]
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	d415      	bmi.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001884:	68ab      	ldr	r3, [r5, #8]
 8001886:	686a      	ldr	r2, [r5, #4]
 8001888:	071b      	lsls	r3, r3, #28
 800188a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800188e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001892:	2301      	movs	r3, #1
 8001894:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001896:	f7fe fe8f 	bl	80005b8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800189a:	4c38      	ldr	r4, [pc, #224]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 800189c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	0118      	lsls	r0, r3, #4
 80018a2:	d4df      	bmi.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80018a4:	f7fe fe88 	bl	80005b8 <HAL_GetTick>
 80018a8:	1b80      	subs	r0, r0, r6
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9f7      	bls.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x46>
 80018ae:	e004      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80018b0:	f7fe fe82 	bl	80005b8 <HAL_GetTick>
 80018b4:	1bc0      	subs	r0, r0, r7
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9e1      	bls.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
 80018bc:	e7d6      	b.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80018c4:	4c2e      	ldr	r4, [pc, #184]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80018e0:	f7fe fe6a 	bl	80005b8 <HAL_GetTick>
 80018e4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	05d9      	lsls	r1, r3, #23
 80018ea:	d51b      	bpl.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ec:	4c23      	ldr	r4, [pc, #140]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80018ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018f4:	d11c      	bne.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f6:	68eb      	ldr	r3, [r5, #12]
 80018f8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80018fc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001900:	4a1e      	ldr	r2, [pc, #120]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001902:	d134      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001904:	6891      	ldr	r1, [r2, #8]
 8001906:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800190a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800190e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001912:	4301      	orrs	r1, r0
 8001914:	6091      	str	r1, [r2, #8]
 8001916:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	430b      	orrs	r3, r1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e7a3      	b.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7fe fe48 	bl	80005b8 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2802      	cmp	r0, #2
 800192c:	d9db      	bls.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800192e:	e7c4      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001930:	68ea      	ldr	r2, [r5, #12]
 8001932:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001936:	4293      	cmp	r3, r2
 8001938:	d0dd      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800193a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800193e:	2101      	movs	r1, #1
 8001940:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001946:	2100      	movs	r1, #0
 8001948:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800194a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800194c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800194e:	07da      	lsls	r2, r3, #31
 8001950:	d5d1      	bpl.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001952:	f7fe fe31 	bl	80005b8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800195a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800195e:	079b      	lsls	r3, r3, #30
 8001960:	d4c9      	bmi.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe fe29 	bl	80005b8 <HAL_GetTick>
 8001966:	1b80      	subs	r0, r0, r6
 8001968:	42b8      	cmp	r0, r7
 800196a:	d9f7      	bls.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x104>
 800196c:	e7a5      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800196e:	6891      	ldr	r1, [r2, #8]
 8001970:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001974:	e7ce      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001976:	bf00      	nop
 8001978:	42470068 	.word	0x42470068
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000
 8001984:	42470e40 	.word	0x42470e40

08001988 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001988:	6802      	ldr	r2, [r0, #0]
{
 800198a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800198c:	68d3      	ldr	r3, [r2, #12]
 800198e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001992:	60d3      	str	r3, [r2, #12]
{
 8001994:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001996:	f7fe fe0f 	bl	80005b8 <HAL_GetTick>
 800199a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	069b      	lsls	r3, r3, #26
 80019a2:	d501      	bpl.n	80019a8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80019a4:	2000      	movs	r0, #0
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80019a8:	f7fe fe06 	bl	80005b8 <HAL_GetTick>
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019b2:	d9f3      	bls.n	800199c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80019b4:	2003      	movs	r0, #3
}
 80019b6:	bd38      	pop	{r3, r4, r5, pc}

080019b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80019b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80019ba:	6803      	ldr	r3, [r0, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	0652      	lsls	r2, r2, #25
{
 80019c0:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80019c2:	d501      	bpl.n	80019c8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80019c4:	2000      	movs	r0, #0
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80019ce:	f7fe fdf3 	bl	80005b8 <HAL_GetTick>
 80019d2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	065b      	lsls	r3, r3, #25
 80019da:	d4f3      	bmi.n	80019c4 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80019dc:	f7fe fdec 	bl	80005b8 <HAL_GetTick>
 80019e0:	1b40      	subs	r0, r0, r5
 80019e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019e6:	d9f5      	bls.n	80019d4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80019e8:	2003      	movs	r0, #3
}
 80019ea:	bd38      	pop	{r3, r4, r5, pc}

080019ec <HAL_RTC_Init>:
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80019ee:	4604      	mov	r4, r0
 80019f0:	b1b8      	cbz	r0, 8001a22 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80019f2:	7f43      	ldrb	r3, [r0, #29]
 80019f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f8:	b913      	cbnz	r3, 8001a00 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80019fa:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80019fc:	f007 fbac 	bl	8009158 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	22ca      	movs	r2, #202	; 0xca
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
 8001a0a:	2253      	movs	r2, #83	; 0x53
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ffd2 	bl	80019b8 <RTC_EnterInitMode>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	4605      	mov	r5, r0
 8001a18:	b128      	cbz	r0, 8001a26 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001a22:	2501      	movs	r5, #1
 8001a24:	e02e      	b.n	8001a84 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a26:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a28:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a2a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a32:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a34:	6862      	ldr	r2, [r4, #4]
 8001a36:	6899      	ldr	r1, [r3, #8]
 8001a38:	4302      	orrs	r2, r0
 8001a3a:	6960      	ldr	r0, [r4, #20]
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a42:	68e2      	ldr	r2, [r4, #12]
 8001a44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	68a1      	ldr	r1, [r4, #8]
 8001a4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a56:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	069b      	lsls	r3, r3, #26
 8001a5c:	d405      	bmi.n	8001a6a <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff ff92 	bl	8001988 <HAL_RTC_WaitForSynchro>
 8001a64:	b108      	cbz	r0, 8001a6a <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	e7d7      	b.n	8001a1a <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a6a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a6c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a7c:	22ff      	movs	r2, #255	; 0xff
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001a80:	2301      	movs	r3, #1
 8001a82:	7763      	strb	r3, [r4, #29]
}
 8001a84:	4628      	mov	r0, r5
 8001a86:	bd38      	pop	{r3, r4, r5, pc}

08001a88 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001a88:	2300      	movs	r3, #0

  while(Value >= 10U)
 8001a8a:	2809      	cmp	r0, #9
 8001a8c:	d803      	bhi.n	8001a96 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001a8e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001a92:	b2c0      	uxtb	r0, r0
 8001a94:	4770      	bx	lr
    Value -= 10U;
 8001a96:	380a      	subs	r0, #10
    bcdhigh++;
 8001a98:	3301      	adds	r3, #1
    Value -= 10U;
 8001a9a:	b2c0      	uxtb	r0, r0
 8001a9c:	e7f5      	b.n	8001a8a <RTC_ByteToBcd2+0x2>

08001a9e <HAL_RTC_SetTime>:
{
 8001a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001aa0:	7f03      	ldrb	r3, [r0, #28]
 8001aa2:	2b01      	cmp	r3, #1
{
 8001aa4:	4606      	mov	r6, r0
 8001aa6:	460f      	mov	r7, r1
 8001aa8:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001aac:	d02f      	beq.n	8001b0e <HAL_RTC_SetTime+0x70>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	7703      	strb	r3, [r0, #28]
 8001ab2:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ab4:	7745      	strb	r5, [r0, #29]
 8001ab6:	7808      	ldrb	r0, [r1, #0]
 8001ab8:	784d      	ldrb	r5, [r1, #1]
 8001aba:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001abc:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001abe:	bb42      	cbnz	r2, 8001b12 <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ac0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001ac4:	bf08      	it	eq
 8001ac6:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ac8:	f7ff ffde 	bl	8001a88 <RTC_ByteToBcd2>
 8001acc:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f7ff ffda 	bl	8001a88 <RTC_ByteToBcd2>
 8001ad4:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff ffd6 	bl	8001a88 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001adc:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ae2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001ae6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001aea:	6833      	ldr	r3, [r6, #0]
 8001aec:	22ca      	movs	r2, #202	; 0xca
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
 8001af0:	2253      	movs	r2, #83	; 0x53
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff ff5f 	bl	80019b8 <RTC_EnterInitMode>
 8001afa:	6833      	ldr	r3, [r6, #0]
 8001afc:	4605      	mov	r5, r0
 8001afe:	b1a8      	cbz	r0, 8001b2c <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b00:	22ff      	movs	r2, #255	; 0xff
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b04:	2304      	movs	r3, #4
 8001b06:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001b0c:	2501      	movs	r5, #1
}
 8001b0e:	4628      	mov	r0, r5
 8001b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b12:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001b16:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001b1a:	bf08      	it	eq
 8001b1c:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001b1e:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001b22:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001b24:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001b26:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001b2a:	e7de      	b.n	8001aea <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b2c:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8001b30:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001b34:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001b36:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b38:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001b3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b3e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	4302      	orrs	r2, r0
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b50:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	069b      	lsls	r3, r3, #26
 8001b56:	d40a      	bmi.n	8001b6e <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f7ff ff15 	bl	8001988 <HAL_RTC_WaitForSynchro>
 8001b5e:	b130      	cbz	r0, 8001b6e <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b60:	6833      	ldr	r3, [r6, #0]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b66:	2304      	movs	r3, #4
 8001b68:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001b6a:	7735      	strb	r5, [r6, #28]
 8001b6c:	e7ce      	b.n	8001b0c <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b6e:	6833      	ldr	r3, [r6, #0]
 8001b70:	22ff      	movs	r2, #255	; 0xff
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001b74:	2301      	movs	r3, #1
 8001b76:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001b7c:	e7c7      	b.n	8001b0e <HAL_RTC_SetTime+0x70>

08001b7e <HAL_RTC_SetDate>:
{
 8001b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001b80:	7f03      	ldrb	r3, [r0, #28]
 8001b82:	2b01      	cmp	r3, #1
{
 8001b84:	4605      	mov	r5, r0
 8001b86:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001b8a:	d030      	beq.n	8001bee <HAL_RTC_SetDate+0x70>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b90:	7746      	strb	r6, [r0, #29]
 8001b92:	784b      	ldrb	r3, [r1, #1]
 8001b94:	78c8      	ldrb	r0, [r1, #3]
 8001b96:	788e      	ldrb	r6, [r1, #2]
 8001b98:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d148      	bne.n	8001c30 <HAL_RTC_SetDate+0xb2>
 8001b9e:	06da      	lsls	r2, r3, #27
 8001ba0:	d503      	bpl.n	8001baa <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001ba2:	f023 0310 	bic.w	r3, r3, #16
 8001ba6:	330a      	adds	r3, #10
 8001ba8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001baa:	f7ff ff6d 	bl	8001a88 <RTC_ByteToBcd2>
 8001bae:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001bb0:	7848      	ldrb	r0, [r1, #1]
 8001bb2:	f7ff ff69 	bl	8001a88 <RTC_ByteToBcd2>
 8001bb6:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f7ff ff65 	bl	8001a88 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001bbe:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001bc2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001bc6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	22ca      	movs	r2, #202	; 0xca
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
 8001bd0:	2253      	movs	r2, #83	; 0x53
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f7ff feef 	bl	80019b8 <RTC_EnterInitMode>
 8001bda:	682b      	ldr	r3, [r5, #0]
 8001bdc:	4606      	mov	r6, r0
 8001bde:	b140      	cbz	r0, 8001bf2 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001be0:	22ff      	movs	r2, #255	; 0xff
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001be4:	2304      	movs	r3, #4
 8001be6:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001be8:	2300      	movs	r3, #0
 8001bea:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8001bec:	2601      	movs	r6, #1
}
 8001bee:	4630      	mov	r0, r6
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001bf2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001bf6:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001bfa:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c02:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	d40a      	bmi.n	8001c20 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff febc 	bl	8001988 <HAL_RTC_WaitForSynchro>
 8001c10:	b130      	cbz	r0, 8001c20 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001c1c:	772e      	strb	r6, [r5, #28]
 8001c1e:	e7e5      	b.n	8001bec <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	22ff      	movs	r2, #255	; 0xff
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c26:	2301      	movs	r3, #1
 8001c28:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8001c2e:	e7de      	b.n	8001bee <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c36:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c38:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001c3c:	e7c5      	b.n	8001bca <HAL_RTC_SetDate+0x4c>

08001c3e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001c3e:	0903      	lsrs	r3, r0, #4
 8001c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001c44:	f000 000f 	and.w	r0, r0, #15
 8001c48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001c4c:	b2c0      	uxtb	r0, r0
 8001c4e:	4770      	bx	lr

08001c50 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c54:	6048      	str	r0, [r1, #4]
{
 8001c56:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001c58:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001c5a:	681d      	ldr	r5, [r3, #0]
 8001c5c:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8001c60:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001c64:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001c68:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001c6a:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001c6c:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001c70:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001c74:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001c78:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001c7c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001c7e:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001c80:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001c82:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001c84:	b952      	cbnz	r2, 8001c9c <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001c86:	f7ff ffda 	bl	8001c3e <RTC_Bcd2ToByte>
 8001c8a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ffd6 	bl	8001c3e <RTC_Bcd2ToByte>
 8001c92:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001c94:	4628      	mov	r0, r5
 8001c96:	f7ff ffd2 	bl	8001c3e <RTC_Bcd2ToByte>
 8001c9a:	7088      	strb	r0, [r1, #2]
}
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}

08001ca0 <HAL_RTC_GetDate>:
{
 8001ca0:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001ca2:	6803      	ldr	r3, [r0, #0]
 8001ca4:	685c      	ldr	r4, [r3, #4]
 8001ca6:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8001caa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001cae:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001cb0:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001cb4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001cb8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001cbc:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001cbe:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001cc0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001cc2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8001cc4:	b952      	cbnz	r2, 8001cdc <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001cc6:	f7ff ffba 	bl	8001c3e <RTC_Bcd2ToByte>
 8001cca:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7ff ffb6 	bl	8001c3e <RTC_Bcd2ToByte>
 8001cd2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff ffb2 	bl	8001c3e <RTC_Bcd2ToByte>
 8001cda:	7088      	strb	r0, [r1, #2]
}
 8001cdc:	2000      	movs	r0, #0
 8001cde:	bd38      	pop	{r3, r4, r5, pc}

08001ce0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	4691      	mov	r9, r2
 8001cec:	4698      	mov	r8, r3
 8001cee:	9e10      	ldr	r6, [sp, #64]	; 0x40
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7fe fc62 	bl	80005b8 <HAL_GetTick>
 8001cf4:	4607      	mov	r7, r0
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001cf6:	b92d      	cbnz	r5, 8001d04 <HAL_SD_ReadBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001cfe:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e010      	b.n	8001d26 <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001d04:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001d08:	b2c0      	uxtb	r0, r0
 8001d0a:	2801      	cmp	r0, #1
 8001d0c:	f040 80c3 	bne.w	8001e96 <HAL_SD_ReadBlocks+0x1b6>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d12:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d16:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d18:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d1c:	d906      	bls.n	8001d2c <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d24:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8001d26:	b007      	add	sp, #28
 8001d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001d32:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001d36:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d38:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001d3e:	bf18      	it	ne
 8001d40:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d44:	f000 fff1 	bl	8002d2a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d48:	b150      	cbz	r0, 8001d60 <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d54:	4318      	orrs	r0, r3
 8001d56:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001d5e:	e7e2      	b.n	8001d26 <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d66:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001d6a:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d6c:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d6e:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d70:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d74:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 8001d78:	4669      	mov	r1, sp
 8001d7a:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d7c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d7e:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d82:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001d86:	f000 ffbd 	bl	8002d04 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001d8a:	45d0      	cmp	r8, sl
 8001d8c:	d90a      	bls.n	8001da4 <HAL_SD_ReadBlocks+0xc4>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001d8e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001d92:	4649      	mov	r1, r9
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	f000 fff8 	bl	8002d8a <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d1d5      	bne.n	8001d4a <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001d9e:	f240 3a2a 	movw	sl, #810	; 0x32a
 8001da2:	e027      	b.n	8001df4 <HAL_SD_ReadBlocks+0x114>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001da4:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001da8:	4649      	mov	r1, r9
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	f000 ffd5 	bl	8002d5a <SDMMC_CmdReadSingleBlock>
 8001db0:	e7f3      	b.n	8001d9a <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	d50b      	bpl.n	8001dce <HAL_SD_ReadBlocks+0xee>
 8001db6:	f1a5 0904 	sub.w	r9, r5, #4
 8001dba:	f105 0b1c 	add.w	fp, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	f000 fee2 	bl	8002b88 <SDIO_ReadFIFO>
 8001dc4:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 8001dc8:	45d9      	cmp	r9, fp
 8001dca:	d1f8      	bne.n	8001dbe <HAL_SD_ReadBlocks+0xde>
        tempbuff += 8U;
 8001dcc:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001dce:	b966      	cbnz	r6, 8001dea <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001de6:	2003      	movs	r0, #3
 8001de8:	e79d      	b.n	8001d26 <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001dea:	f7fe fbe5 	bl	80005b8 <HAL_GetTick>
 8001dee:	1bc0      	subs	r0, r0, r7
 8001df0:	4286      	cmp	r6, r0
 8001df2:	d9ed      	bls.n	8001dd0 <HAL_SD_ReadBlocks+0xf0>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001df4:	6820      	ldr	r0, [r4, #0]
 8001df6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001df8:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001dfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001dfe:	d0d8      	beq.n	8001db2 <HAL_SD_ReadBlocks+0xd2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	d509      	bpl.n	8001e18 <HAL_SD_ReadBlocks+0x138>
 8001e04:	f1b8 0f01 	cmp.w	r8, #1
 8001e08:	d906      	bls.n	8001e18 <HAL_SD_ReadBlocks+0x138>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d003      	beq.n	8001e18 <HAL_SD_ReadBlocks+0x138>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e10:	f001 f804 	bl	8002e1c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d198      	bne.n	8001d4a <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	0710      	lsls	r0, r2, #28
 8001e1e:	d507      	bpl.n	8001e30 <HAL_SD_ReadBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e20:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e28:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e2e:	e793      	b.n	8001d58 <HAL_SD_ReadBlocks+0x78>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e32:	0791      	lsls	r1, r2, #30
 8001e34:	d506      	bpl.n	8001e44 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001e3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	e7f3      	b.n	8001e2c <HAL_SD_ReadBlocks+0x14c>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e46:	0692      	lsls	r2, r2, #26
 8001e48:	d518      	bpl.n	8001e7c <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001e50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	e7e9      	b.n	8001e2c <HAL_SD_ReadBlocks+0x14c>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001e58:	f000 fe96 	bl	8002b88 <SDIO_ReadFIFO>
 8001e5c:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001e60:	b93e      	cbnz	r6, 8001e72 <HAL_SD_ReadBlocks+0x192>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e70:	e7dc      	b.n	8001e2c <HAL_SD_ReadBlocks+0x14c>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001e72:	f7fe fba1 	bl	80005b8 <HAL_GetTick>
 8001e76:	1bc0      	subs	r0, r0, r7
 8001e78:	4286      	cmp	r6, r0
 8001e7a:	d9f2      	bls.n	8001e62 <HAL_SD_ReadBlocks+0x182>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e80:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8001e84:	d1e8      	bne.n	8001e58 <HAL_SD_ReadBlocks+0x178>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e86:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e8a:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8001e92:	4618      	mov	r0, r3
 8001e94:	e747      	b.n	8001d26 <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e9c:	e72f      	b.n	8001cfe <HAL_SD_ReadBlocks+0x1e>

08001e9e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4691      	mov	r9, r2
 8001eaa:	461e      	mov	r6, r3
 8001eac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001eae:	f7fe fb83 	bl	80005b8 <HAL_GetTick>
 8001eb2:	4680      	mov	r8, r0
  uint32_t count = 0U;
  uint32_t *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001eb4:	b92d      	cbnz	r5, 8001ec2 <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ebc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e010      	b.n	8001ee4 <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001ec2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001ec6:	b2c0      	uxtb	r0, r0
 8001ec8:	2801      	cmp	r0, #1
 8001eca:	f040 809f 	bne.w	800200c <HAL_SD_WriteBlocks+0x16e>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ece:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ed0:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed4:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ed6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001eda:	d906      	bls.n	8001eea <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8001ee4:	b006      	add	sp, #24
 8001ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001ef0:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001ef4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ef6:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001efc:	bf18      	it	ne
 8001efe:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f02:	f000 ff12 	bl	8002d2a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f06:	b150      	cbz	r0, 8001f1e <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f12:	4318      	orrs	r0, r3
 8001f14:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f16:	2001      	movs	r0, #1
 8001f18:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001f1c:	e7e2      	b.n	8001ee4 <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8001f1e:	2e01      	cmp	r6, #1
 8001f20:	d935      	bls.n	8001f8e <HAL_SD_WriteBlocks+0xf0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001f22:	2320      	movs	r3, #32
 8001f24:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001f26:	4649      	mov	r1, r9
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f000 ff5e 	bl	8002dea <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d1ea      	bne.n	8001f08 <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001f38:	0273      	lsls	r3, r6, #9
 8001f3a:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f3c:	2390      	movs	r3, #144	; 0x90
 8001f3e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001f40:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f42:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001f44:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 8001f46:	4669      	mov	r1, sp
 8001f48:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001f4a:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001f4c:	f000 feda 	bl	8002d04 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f50:	f240 3a1a 	movw	sl, #794	; 0x31a
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f58:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f5e:	d01d      	beq.n	8001f9c <HAL_SD_WriteBlocks+0xfe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f60:	05dd      	lsls	r5, r3, #23
 8001f62:	d508      	bpl.n	8001f76 <HAL_SD_WriteBlocks+0xd8>
 8001f64:	2e01      	cmp	r6, #1
 8001f66:	d906      	bls.n	8001f76 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d003      	beq.n	8001f76 <HAL_SD_WriteBlocks+0xd8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f6e:	f000 ff55 	bl	8002e1c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d1c8      	bne.n	8001f08 <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	0711      	lsls	r1, r2, #28
 8001f7c:	d52d      	bpl.n	8001fda <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f86:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001f8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f8c:	e7c3      	b.n	8001f16 <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001f8e:	2310      	movs	r3, #16
 8001f90:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001f92:	4649      	mov	r1, r9
 8001f94:	6820      	ldr	r0, [r4, #0]
 8001f96:	f000 ff10 	bl	8002dba <SDMMC_CmdWriteSingleBlock>
 8001f9a:	e7c8      	b.n	8001f2e <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001f9c:	045b      	lsls	r3, r3, #17
 8001f9e:	d509      	bpl.n	8001fb4 <HAL_SD_WriteBlocks+0x116>
 8001fa0:	46a9      	mov	r9, r5
 8001fa2:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	f109 0904 	add.w	r9, r9, #4
 8001fac:	f000 fdef 	bl	8002b8e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001fb0:	454d      	cmp	r5, r9
 8001fb2:	d1f7      	bne.n	8001fa4 <HAL_SD_WriteBlocks+0x106>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001fb4:	b957      	cbnz	r7, 8001fcc <HAL_SD_WriteBlocks+0x12e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001fbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fc0:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001fc8:	2003      	movs	r0, #3
 8001fca:	e78b      	b.n	8001ee4 <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001fcc:	f7fe faf4 	bl	80005b8 <HAL_GetTick>
 8001fd0:	eba0 0008 	sub.w	r0, r0, r8
 8001fd4:	4287      	cmp	r7, r0
 8001fd6:	d8bd      	bhi.n	8001f54 <HAL_SD_WriteBlocks+0xb6>
 8001fd8:	e7ed      	b.n	8001fb6 <HAL_SD_WriteBlocks+0x118>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fdc:	0792      	lsls	r2, r2, #30
 8001fde:	d506      	bpl.n	8001fee <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fe0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	e7cd      	b.n	8001f8a <HAL_SD_WriteBlocks+0xec>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001fee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ff0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ff4:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001ffa:	d003      	beq.n	8002004 <HAL_SD_WriteBlocks+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	e7c2      	b.n	8001f8a <HAL_SD_WriteBlocks+0xec>
    hsd->State = HAL_SD_STATE_READY;
 8002004:	2301      	movs	r3, #1
 8002006:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800200a:	e76b      	b.n	8001ee4 <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800200c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800200e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002012:	e753      	b.n	8001ebc <HAL_SD_WriteBlocks+0x1e>

08002014 <HAL_SD_GetCardCSD>:
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  uint32_t tmp = 0U;
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002014:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002016:	0f9a      	lsrs	r2, r3, #30
 8002018:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800201a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800201e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002020:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8002024:	708a      	strb	r2, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
  pCSD->TAAC = (uint8_t)tmp;
 8002026:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800202a:	70ca      	strb	r2, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
  pCSD->NSAC = (uint8_t)tmp;
 800202c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002030:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8002032:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002034:	714b      	strb	r3, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002036:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002038:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	80ca      	strh	r2, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800203e:	88ca      	ldrh	r2, [r1, #6]
{
 8002040:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002042:	b292      	uxth	r2, r2
 8002044:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8002048:	4322      	orrs	r2, r4
 800204a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800204c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8002050:	720a      	strb	r2, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002052:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002056:	09d4      	lsrs	r4, r2, #7
 8002058:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800205a:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800205e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002060:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8002064:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002066:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800206a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800206c:	2400      	movs	r4, #0
 800206e:	734c      	strb	r4, [r1, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002070:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002072:	2c00      	cmp	r4, #0
 8002074:	f040 8083 	bne.w	800217e <HAL_SD_GetCardCSD+0x16a>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002078:	0292      	lsls	r2, r2, #10
 800207a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800207e:	610a      	str	r2, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize |= (tmp) << 2U;
 8002080:	690a      	ldr	r2, [r1, #16]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002088:	4313      	orrs	r3, r2
 800208a:	610b      	str	r3, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800208c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800208e:	690b      	ldr	r3, [r1, #16]
 8002090:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002094:	610b      	str	r3, [r1, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002096:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800209a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800209c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80020a0:	754b      	strb	r3, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80020a2:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80020a6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80020a8:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80020ac:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80020ae:	0bd3      	lsrs	r3, r2, #15
 80020b0:	f003 0306 	and.w	r3, r3, #6
 80020b4:	760b      	strb	r3, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80020b6:	7e0c      	ldrb	r4, [r1, #24]
 80020b8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80020bc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80020c0:	4322      	orrs	r2, r4
 80020c2:	760a      	strb	r2, [r1, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80020c4:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80020c6:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80020c8:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80020ca:	3402      	adds	r4, #2
 80020cc:	40a2      	lsls	r2, r4
 80020ce:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80020d0:	7a0d      	ldrb	r5, [r1, #8]
 80020d2:	2401      	movs	r4, #1
 80020d4:	40ac      	lsls	r4, r5
 80020d6:	6584      	str	r4, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80020d8:	0a64      	lsrs	r4, r4, #9
 80020da:	4362      	muls	r2, r4
 80020dc:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80020e2:	6602      	str	r2, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80020e4:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80020ee:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80020f0:	768b      	strb	r3, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80020f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80020f4:	7e8a      	ldrb	r2, [r1, #26]
 80020f6:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80020fa:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80020fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002100:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002102:	76cb      	strb	r3, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002104:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002106:	0fda      	lsrs	r2, r3, #31
 8002108:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800210a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800210e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002110:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002114:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002116:	0d9a      	lsrs	r2, r3, #22
 8002118:	f002 020c 	and.w	r2, r2, #12
 800211c:	77ca      	strb	r2, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800211e:	7fca      	ldrb	r2, [r1, #31]
 8002120:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8002124:	4302      	orrs	r2, r0
 8002126:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002128:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800212c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8002130:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002132:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8002136:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800213a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800213e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002142:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002146:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800214a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800214e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002152:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002156:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800215a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800215e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8002162:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002166:	f3c3 2201 	ubfx	r2, r3, #8, #2
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800216a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 800216e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002172:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  
  return HAL_OK;
}
 800217c:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800217e:	2c01      	cmp	r4, #1
 8002180:	d11a      	bne.n	80021b8 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002188:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800218a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 800218c:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800218e:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8002190:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002194:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8002196:	690c      	ldr	r4, [r1, #16]
 8002198:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800219c:	4322      	orrs	r2, r4
 800219e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80021a0:	690a      	ldr	r2, [r1, #16]
 80021a2:	0292      	lsls	r2, r2, #10
 80021a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a8:	6542      	str	r2, [r0, #84]	; 0x54
 80021aa:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80021ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80021b4:	6582      	str	r2, [r0, #88]	; 0x58
 80021b6:	e794      	b.n	80020e2 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80021b8:	6803      	ldr	r3, [r0, #0]
 80021ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80021c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd30      	pop	{r4, r5, pc}
	...

080021d4 <HAL_SD_InitCard>:
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80021d8:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80021da:	2376      	movs	r3, #118	; 0x76
 80021dc:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80021de:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021e0:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 80021e2:	ab0a      	add	r3, sp, #40	; 0x28
{
 80021e4:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 80021e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 80021ee:	4e6f      	ldr	r6, [pc, #444]	; (80023ac <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80021f0:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80021f2:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021f4:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 80021f6:	ab07      	add	r3, sp, #28
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	f000 fca8 	bl	8002b50 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8002200:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8002202:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	f000 fcc7 	bl	8002b98 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800220a:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 800220c:	2002      	movs	r0, #2
 800220e:	f7fe f9d9 	bl	80005c4 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002212:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002214:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002216:	f000 fe33 	bl	8002e80 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800221a:	4606      	mov	r6, r0
 800221c:	b968      	cbnz	r0, 800223a <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800221e:	6820      	ldr	r0, [r4, #0]
 8002220:	f000 fe56 	bl	8002ed0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002224:	b380      	cbz	r0, 8002288 <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002226:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002228:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800222c:	9b06      	ldr	r3, [sp, #24]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	42ab      	cmp	r3, r5
 8002232:	9206      	str	r2, [sp, #24]
 8002234:	d108      	bne.n	8002248 <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002236:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 800223a:	2001      	movs	r0, #1
 800223c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002240:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002242:	430e      	orrs	r6, r1
 8002244:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002246:	e081      	b.n	800234c <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002248:	2100      	movs	r1, #0
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	f000 fe78 	bl	8002f40 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002250:	4601      	mov	r1, r0
 8002252:	b110      	cbz	r0, 800225a <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002254:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8002258:	e7ef      	b.n	800223a <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	f000 fe88 	bl	8002f70 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002260:	4601      	mov	r1, r0
 8002262:	2800      	cmp	r0, #0
 8002264:	d1f6      	bne.n	8002254 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002266:	6820      	ldr	r0, [r4, #0]
 8002268:	f000 fcb1 	bl	8002bce <SDIO_GetResponse>
    while(validvoltage == 0U)
 800226c:	2800      	cmp	r0, #0
 800226e:	dadd      	bge.n	800222c <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002270:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002272:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002274:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8002276:	2301      	movs	r3, #1
 8002278:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800227c:	f000 fc90 	bl	8002ba0 <SDIO_GetPowerState>
 8002280:	bb10      	cbnz	r0, 80022c8 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002282:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002286:	e06b      	b.n	8002360 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002288:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800228a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800228e:	9b06      	ldr	r3, [sp, #24]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	42ab      	cmp	r3, r5
 8002294:	9206      	str	r2, [sp, #24]
 8002296:	d0ce      	beq.n	8002236 <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002298:	2100      	movs	r1, #0
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	f000 fe50 	bl	8002f40 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80022a0:	4606      	mov	r6, r0
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d1c9      	bne.n	800223a <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80022a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	f000 fe60 	bl	8002f70 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80022b0:	4606      	mov	r6, r0
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d1c1      	bne.n	800223a <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80022b6:	4601      	mov	r1, r0
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	f000 fc88 	bl	8002bce <SDIO_GetResponse>
    while(validvoltage == 0U)
 80022be:	0fc3      	lsrs	r3, r0, #31
 80022c0:	d0e5      	beq.n	800228e <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80022c2:	0042      	lsls	r2, r0, #1
 80022c4:	d5d4      	bpl.n	8002270 <HAL_SD_InitCard+0x9c>
 80022c6:	e7d4      	b.n	8002272 <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80022c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d01a      	beq.n	8002304 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	f000 fe67 	bl	8002fa2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80022d4:	4605      	mov	r5, r0
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d142      	bne.n	8002360 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80022da:	4601      	mov	r1, r0
 80022dc:	6820      	ldr	r0, [r4, #0]
 80022de:	f000 fc76 	bl	8002bce <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80022e2:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80022e4:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80022e6:	6820      	ldr	r0, [r4, #0]
 80022e8:	f000 fc71 	bl	8002bce <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80022ec:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80022ee:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	f000 fc6c 	bl	8002bce <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80022f6:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80022f8:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	f000 fc67 	bl	8002bce <SDIO_GetResponse>
 8002300:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002304:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002306:	2b03      	cmp	r3, #3
 8002308:	d122      	bne.n	8002350 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800230a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800230c:	2b03      	cmp	r3, #3
 800230e:	d12e      	bne.n	800236e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002310:	2104      	movs	r1, #4
 8002312:	6820      	ldr	r0, [r4, #0]
 8002314:	f000 fc5b 	bl	8002bce <SDIO_GetResponse>
 8002318:	0d00      	lsrs	r0, r0, #20
 800231a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800231c:	a90d      	add	r1, sp, #52	; 0x34
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff fe78 	bl	8002014 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002324:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	0412      	lsls	r2, r2, #16
 800232a:	2300      	movs	r3, #0
 800232c:	f000 fd90 	bl	8002e50 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002330:	4605      	mov	r5, r0
 8002332:	b9a8      	cbnz	r0, 8002360 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8002334:	f104 0310 	add.w	r3, r4, #16
 8002338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800233c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002340:	1d23      	adds	r3, r4, #4
 8002342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	f000 fc03 	bl	8002b50 <SDIO_Init>
  return HAL_OK;
 800234a:	4628      	mov	r0, r5
}
 800234c:	b019      	add	sp, #100	; 0x64
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002350:	f10d 0116 	add.w	r1, sp, #22
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	f000 fe4f 	bl	8002ff8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800235a:	4605      	mov	r5, r0
 800235c:	2800      	cmp	r0, #0
 800235e:	d0d4      	beq.n	800230a <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8002360:	2001      	movs	r0, #1
 8002362:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002368:	431d      	orrs	r5, r3
 800236a:	63a5      	str	r5, [r4, #56]	; 0x38
 800236c:	e7ee      	b.n	800234c <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 800236e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8002372:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	0409      	lsls	r1, r1, #16
 8002378:	f000 fe28 	bl	8002fcc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800237c:	4605      	mov	r5, r0
 800237e:	2800      	cmp	r0, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002382:	4601      	mov	r1, r0
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	f000 fc22 	bl	8002bce <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800238a:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800238c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f000 fc1d 	bl	8002bce <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002394:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002396:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002398:	6820      	ldr	r0, [r4, #0]
 800239a:	f000 fc18 	bl	8002bce <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800239e:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023a0:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	f000 fc13 	bl	8002bce <SDIO_GetResponse>
 80023a8:	6720      	str	r0, [r4, #112]	; 0x70
 80023aa:	e7b1      	b.n	8002310 <HAL_SD_InitCard+0x13c>
 80023ac:	422580a0 	.word	0x422580a0

080023b0 <HAL_SD_Init>:
{
 80023b0:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80023b2:	4604      	mov	r4, r0
 80023b4:	b1a0      	cbz	r0, 80023e0 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80023b6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80023ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023be:	b913      	cbnz	r3, 80023c6 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 80023c0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80023c2:	f006 fed5 	bl	8009170 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80023c6:	2303      	movs	r3, #3
 80023c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff ff01 	bl	80021d4 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d2:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 80023d4:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d6:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80023d8:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80023da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80023de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023e0:	2001      	movs	r0, #1
}
 80023e2:	bd10      	pop	{r4, pc}

080023e4 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80023e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023e6:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80023e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80023ea:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80023ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80023ee:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80023f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023f2:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80023f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f6:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80023f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80023fa:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80023fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80023fe:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002400:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002402:	61cb      	str	r3, [r1, #28]
}
 8002404:	2000      	movs	r0, #0
 8002406:	4770      	bx	lr

08002408 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002408:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800240a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800240c:	0409      	lsls	r1, r1, #16
{
 800240e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002410:	6800      	ldr	r0, [r0, #0]
 8002412:	f000 fe45 	bl	80030a0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002416:	4601      	mov	r1, r0
 8002418:	b928      	cbnz	r0, 8002426 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	f000 fbd7 	bl	8002bce <SDIO_GetResponse>
  return cardstate;
 8002420:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002424:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002428:	4319      	orrs	r1, r3
 800242a:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800242c:	2000      	movs	r0, #0
 800242e:	e7f7      	b.n	8002420 <HAL_SD_GetCardState+0x18>

08002430 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002438:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002442:	2320      	movs	r3, #32
 8002444:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002448:	4770      	bx	lr
	...

0800244c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002450:	6806      	ldr	r6, [r0, #0]
 8002452:	68c2      	ldr	r2, [r0, #12]
 8002454:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002456:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245c:	4313      	orrs	r3, r2
 800245e:	6133      	str	r3, [r6, #16]
{
 8002460:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002462:	6883      	ldr	r3, [r0, #8]
 8002464:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002466:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002468:	4303      	orrs	r3, r0
 800246a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800246c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002470:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002472:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002476:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002478:	4313      	orrs	r3, r2
 800247a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800247c:	6973      	ldr	r3, [r6, #20]
 800247e:	69a2      	ldr	r2, [r4, #24]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248a:	6173      	str	r3, [r6, #20]
 800248c:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248e:	d17c      	bne.n	800258a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002490:	429e      	cmp	r6, r3
 8002492:	d003      	beq.n	800249c <UART_SetConfig+0x50>
 8002494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002498:	429e      	cmp	r6, r3
 800249a:	d144      	bne.n	8002526 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800249c:	f7ff f9cc 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80024a0:	2519      	movs	r5, #25
 80024a2:	fb05 f300 	mul.w	r3, r5, r0
 80024a6:	6860      	ldr	r0, [r4, #4]
 80024a8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024ac:	0040      	lsls	r0, r0, #1
 80024ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80024b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80024b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ba:	f7ff f9bd 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80024be:	6863      	ldr	r3, [r4, #4]
 80024c0:	4368      	muls	r0, r5
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fbb0 f7f3 	udiv	r7, r0, r3
 80024c8:	f7ff f9b6 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	4368      	muls	r0, r5
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80024da:	fb09 7313 	mls	r3, r9, r3, r7
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	3332      	adds	r3, #50	; 0x32
 80024e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80024ec:	f7ff f9a4 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80024f0:	6862      	ldr	r2, [r4, #4]
 80024f2:	4368      	muls	r0, r5
 80024f4:	0052      	lsls	r2, r2, #1
 80024f6:	fbb0 faf2 	udiv	sl, r0, r2
 80024fa:	f7ff f99d 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024fe:	6863      	ldr	r3, [r4, #4]
 8002500:	4368      	muls	r0, r5
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fbb0 f3f3 	udiv	r3, r0, r3
 8002508:	fbb3 f3f9 	udiv	r3, r3, r9
 800250c:	fb09 a313 	mls	r3, r9, r3, sl
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	3332      	adds	r3, #50	; 0x32
 8002514:	fbb3 f3f9 	udiv	r3, r3, r9
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800251e:	443b      	add	r3, r7
 8002520:	60b3      	str	r3, [r6, #8]
 8002522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002526:	f7ff f977 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 800252a:	2519      	movs	r5, #25
 800252c:	fb05 f300 	mul.w	r3, r5, r0
 8002530:	6860      	ldr	r0, [r4, #4]
 8002532:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002536:	0040      	lsls	r0, r0, #1
 8002538:	fbb3 f3f0 	udiv	r3, r3, r0
 800253c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002544:	f7ff f968 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	4368      	muls	r0, r5
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002552:	f7ff f961 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	4368      	muls	r0, r5
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002560:	fbb3 f3f9 	udiv	r3, r3, r9
 8002564:	fb09 7313 	mls	r3, r9, r3, r7
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002576:	f7ff f94f 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 800257a:	6862      	ldr	r2, [r4, #4]
 800257c:	4368      	muls	r0, r5
 800257e:	0052      	lsls	r2, r2, #1
 8002580:	fbb0 faf2 	udiv	sl, r0, r2
 8002584:	f7ff f948 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002588:	e7b9      	b.n	80024fe <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800258a:	429e      	cmp	r6, r3
 800258c:	d002      	beq.n	8002594 <UART_SetConfig+0x148>
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <UART_SetConfig+0x230>)
 8002590:	429e      	cmp	r6, r3
 8002592:	d140      	bne.n	8002616 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002594:	f7ff f950 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 8002598:	6867      	ldr	r7, [r4, #4]
 800259a:	2519      	movs	r5, #25
 800259c:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025a0:	fb05 f300 	mul.w	r3, r5, r0
 80025a4:	00bf      	lsls	r7, r7, #2
 80025a6:	fbb3 f3f7 	udiv	r3, r3, r7
 80025aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80025ae:	011f      	lsls	r7, r3, #4
 80025b0:	f7ff f942 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80025b4:	6863      	ldr	r3, [r4, #4]
 80025b6:	4368      	muls	r0, r5
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	fbb0 f8f3 	udiv	r8, r0, r3
 80025be:	f7ff f93b 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80025c2:	6863      	ldr	r3, [r4, #4]
 80025c4:	4368      	muls	r0, r5
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80025d0:	fb09 8313 	mls	r3, r9, r3, r8
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	3332      	adds	r3, #50	; 0x32
 80025d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025dc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80025e0:	f7ff f92a 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80025e4:	6862      	ldr	r2, [r4, #4]
 80025e6:	4368      	muls	r0, r5
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	fbb0 faf2 	udiv	sl, r0, r2
 80025ee:	f7ff f923 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025f2:	6863      	ldr	r3, [r4, #4]
 80025f4:	4368      	muls	r0, r5
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002600:	fb09 a313 	mls	r3, r9, r3, sl
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	3332      	adds	r3, #50	; 0x32
 8002608:	fbb3 f3f9 	udiv	r3, r3, r9
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	ea43 0308 	orr.w	r3, r3, r8
 8002614:	e783      	b.n	800251e <UART_SetConfig+0xd2>
 8002616:	f7ff f8ff 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 800261a:	6867      	ldr	r7, [r4, #4]
 800261c:	2519      	movs	r5, #25
 800261e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002622:	fb05 f300 	mul.w	r3, r5, r0
 8002626:	00bf      	lsls	r7, r7, #2
 8002628:	fbb3 f3f7 	udiv	r3, r3, r7
 800262c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002630:	011f      	lsls	r7, r3, #4
 8002632:	f7ff f8f1 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	4368      	muls	r0, r5
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002640:	f7ff f8ea 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002644:	6863      	ldr	r3, [r4, #4]
 8002646:	4368      	muls	r0, r5
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002652:	fb09 8313 	mls	r3, r9, r3, r8
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	3332      	adds	r3, #50	; 0x32
 800265a:	fbb3 f3f9 	udiv	r3, r3, r9
 800265e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002662:	f7ff f8d9 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002666:	6862      	ldr	r2, [r4, #4]
 8002668:	4368      	muls	r0, r5
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	fbb0 faf2 	udiv	sl, r0, r2
 8002670:	f7ff f8d2 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002674:	e7bd      	b.n	80025f2 <UART_SetConfig+0x1a6>
 8002676:	bf00      	nop
 8002678:	40011000 	.word	0x40011000
 800267c:	40011400 	.word	0x40011400

08002680 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	4604      	mov	r4, r0
 8002684:	460e      	mov	r6, r1
 8002686:	4617      	mov	r7, r2
 8002688:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800268a:	6821      	ldr	r1, [r4, #0]
 800268c:	680b      	ldr	r3, [r1, #0]
 800268e:	ea36 0303 	bics.w	r3, r6, r3
 8002692:	d101      	bne.n	8002698 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002694:	2000      	movs	r0, #0
}
 8002696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002698:	1c6b      	adds	r3, r5, #1
 800269a:	d0f7      	beq.n	800268c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800269c:	b995      	cbnz	r5, 80026c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80026b0:	2320      	movs	r3, #32
 80026b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80026ba:	2300      	movs	r3, #0
 80026bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80026c0:	2003      	movs	r0, #3
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c4:	f7fd ff78 	bl	80005b8 <HAL_GetTick>
 80026c8:	1bc0      	subs	r0, r0, r7
 80026ca:	4285      	cmp	r5, r0
 80026cc:	d2dd      	bcs.n	800268a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80026ce:	e7e6      	b.n	800269e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080026d0 <HAL_UART_Init>:
{
 80026d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80026d2:	4604      	mov	r4, r0
 80026d4:	b340      	cbz	r0, 8002728 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80026d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026de:	b91b      	cbnz	r3, 80026e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80026e4:	f006 fda6 	bl	8009234 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80026e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026ea:	2324      	movs	r3, #36	; 0x24
 80026ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026f0:	68d3      	ldr	r3, [r2, #12]
 80026f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff fea7 	bl	800244c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002706:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002716:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800271a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800271e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002722:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002726:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	bd10      	pop	{r4, pc}

0800272c <HAL_UART_Transmit>:
{
 800272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002730:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002732:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002736:	2b20      	cmp	r3, #32
{
 8002738:	4604      	mov	r4, r0
 800273a:	460d      	mov	r5, r1
 800273c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800273e:	d14f      	bne.n	80027e0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002740:	2900      	cmp	r1, #0
 8002742:	d04a      	beq.n	80027da <HAL_UART_Transmit+0xae>
 8002744:	2a00      	cmp	r2, #0
 8002746:	d048      	beq.n	80027da <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002748:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800274c:	2b01      	cmp	r3, #1
 800274e:	d047      	beq.n	80027e0 <HAL_UART_Transmit+0xb4>
 8002750:	2301      	movs	r3, #1
 8002752:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002756:	2300      	movs	r3, #0
 8002758:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275a:	2321      	movs	r3, #33	; 0x21
 800275c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002760:	f7fd ff2a 	bl	80005b8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002764:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002768:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800276a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800276e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002770:	b29b      	uxth	r3, r3
 8002772:	b96b      	cbnz	r3, 8002790 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002774:	463b      	mov	r3, r7
 8002776:	4632      	mov	r2, r6
 8002778:	2140      	movs	r1, #64	; 0x40
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff ff80 	bl	8002680 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002780:	b9b0      	cbnz	r0, 80027b0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002782:	2320      	movs	r3, #32
 8002784:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002788:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002790:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002792:	3b01      	subs	r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002798:	68a3      	ldr	r3, [r4, #8]
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	4632      	mov	r2, r6
 80027a0:	463b      	mov	r3, r7
 80027a2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80027a6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a8:	d10e      	bne.n	80027c8 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027aa:	f7ff ff69 	bl	8002680 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80027ae:	b110      	cbz	r0, 80027b6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80027b0:	2003      	movs	r0, #3
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027b6:	882b      	ldrh	r3, [r5, #0]
 80027b8:	6822      	ldr	r2, [r4, #0]
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027c0:	6923      	ldr	r3, [r4, #16]
 80027c2:	b943      	cbnz	r3, 80027d6 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80027c4:	3502      	adds	r5, #2
 80027c6:	e7d2      	b.n	800276e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c8:	f7ff ff5a 	bl	8002680 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d1ef      	bne.n	80027b0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	782a      	ldrb	r2, [r5, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	3501      	adds	r5, #1
 80027d8:	e7c9      	b.n	800276e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80027da:	2001      	movs	r0, #1
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80027e0:	2002      	movs	r0, #2
}
 80027e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027e6 <HAL_UART_Receive>:
{
 80027e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ea:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ec:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80027f0:	2b20      	cmp	r3, #32
{
 80027f2:	4604      	mov	r4, r0
 80027f4:	460d      	mov	r5, r1
 80027f6:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80027f8:	d152      	bne.n	80028a0 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d04d      	beq.n	800289a <HAL_UART_Receive+0xb4>
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d04b      	beq.n	800289a <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 8002802:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002806:	2b01      	cmp	r3, #1
 8002808:	d04a      	beq.n	80028a0 <HAL_UART_Receive+0xba>
 800280a:	2301      	movs	r3, #1
 800280c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	2300      	movs	r3, #0
 8002812:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002814:	2322      	movs	r3, #34	; 0x22
 8002816:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800281a:	f7fd fecd 	bl	80005b8 <HAL_GetTick>
    huart->RxXferSize = Size;
 800281e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8002822:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8002824:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002828:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800282a:	b280      	uxth	r0, r0
 800282c:	b930      	cbnz	r0, 800283c <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800282e:	2320      	movs	r3, #32
 8002830:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002834:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 800283c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002844:	68a3      	ldr	r3, [r4, #8]
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	4632      	mov	r2, r6
 800284c:	463b      	mov	r3, r7
 800284e:	f04f 0120 	mov.w	r1, #32
 8002852:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002854:	d112      	bne.n	800287c <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	f7ff ff13 	bl	8002680 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800285a:	b110      	cbz	r0, 8002862 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 800285c:	2003      	movs	r0, #3
 800285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002862:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002864:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002866:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002868:	b922      	cbnz	r2, 8002874 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	f825 3b02 	strh.w	r3, [r5], #2
 8002872:	e7d9      	b.n	8002828 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f825 3b01 	strh.w	r3, [r5], #1
 800287a:	e7d5      	b.n	8002828 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800287c:	f7ff ff00 	bl	8002680 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002880:	2800      	cmp	r0, #0
 8002882:	d1eb      	bne.n	800285c <HAL_UART_Receive+0x76>
 8002884:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002886:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 800288c:	b911      	cbnz	r1, 8002894 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800288e:	702b      	strb	r3, [r5, #0]
 8002890:	4615      	mov	r5, r2
 8002892:	e7c9      	b.n	8002828 <HAL_UART_Receive+0x42>
 8002894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002898:	e7f9      	b.n	800288e <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 800289a:	2001      	movs	r0, #1
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80028a0:	2002      	movs	r0, #2
}
 80028a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028a6 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80028a6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d120      	bne.n	80028f0 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80028ae:	b1e9      	cbz	r1, 80028ec <HAL_UART_Receive_IT+0x46>
 80028b0:	b1e2      	cbz	r2, 80028ec <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80028b2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d01a      	beq.n	80028f0 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80028ba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80028bc:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028c0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028c4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028c8:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80028ca:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028cc:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80028ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028d2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80028d6:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028d8:	6951      	ldr	r1, [r2, #20]
 80028da:	f041 0101 	orr.w	r1, r1, #1
 80028de:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028e0:	68d1      	ldr	r1, [r2, #12]
 80028e2:	f041 0120 	orr.w	r1, r1, #32
 80028e6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80028e8:	4618      	mov	r0, r3
 80028ea:	4770      	bx	lr
      return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	4770      	bx	lr
    return HAL_BUSY;
 80028f0:	2002      	movs	r0, #2
}
 80028f2:	4770      	bx	lr

080028f4 <HAL_UART_TxCpltCallback>:
 80028f4:	4770      	bx	lr

080028f6 <HAL_UART_RxCpltCallback>:
 80028f6:	4770      	bx	lr

080028f8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028f8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028fc:	2b22      	cmp	r3, #34	; 0x22
{
 80028fe:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002900:	d136      	bne.n	8002970 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002902:	6883      	ldr	r3, [r0, #8]
 8002904:	6901      	ldr	r1, [r0, #16]
 8002906:	6802      	ldr	r2, [r0, #0]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800290e:	d123      	bne.n	8002958 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002910:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002912:	b9e9      	cbnz	r1, 8002950 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800291c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800291e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002920:	3c01      	subs	r4, #1
 8002922:	b2a4      	uxth	r4, r4
 8002924:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002926:	b98c      	cbnz	r4, 800294c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	f022 0220 	bic.w	r2, r2, #32
 8002930:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002942:	2320      	movs	r3, #32
 8002944:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002948:	f7ff ffd5 	bl	80028f6 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800294c:	2000      	movs	r0, #0
}
 800294e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f823 2b01 	strh.w	r2, [r3], #1
 8002956:	e7e1      	b.n	800291c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002958:	b921      	cbnz	r1, 8002964 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e7dc      	b.n	800291e <UART_Receive_IT+0x26>
 8002964:	6852      	ldr	r2, [r2, #4]
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	6281      	str	r1, [r0, #40]	; 0x28
 800296a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800296e:	e7f7      	b.n	8002960 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002970:	2002      	movs	r0, #2
 8002972:	bd10      	pop	{r4, pc}

08002974 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002974:	6803      	ldr	r3, [r0, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002978:	68d9      	ldr	r1, [r3, #12]
{
 800297a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800297c:	0716      	lsls	r6, r2, #28
{
 800297e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002982:	d107      	bne.n	8002994 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002984:	0696      	lsls	r6, r2, #26
 8002986:	d55a      	bpl.n	8002a3e <HAL_UART_IRQHandler+0xca>
 8002988:	068d      	lsls	r5, r1, #26
 800298a:	d558      	bpl.n	8002a3e <HAL_UART_IRQHandler+0xca>
}
 800298c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002990:	f7ff bfb2 	b.w	80028f8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002994:	f015 0501 	ands.w	r5, r5, #1
 8002998:	d102      	bne.n	80029a0 <HAL_UART_IRQHandler+0x2c>
 800299a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800299e:	d04e      	beq.n	8002a3e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029a0:	07d3      	lsls	r3, r2, #31
 80029a2:	d505      	bpl.n	80029b0 <HAL_UART_IRQHandler+0x3c>
 80029a4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a6:	bf42      	ittt	mi
 80029a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80029aa:	f043 0301 	orrmi.w	r3, r3, #1
 80029ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029b0:	0750      	lsls	r0, r2, #29
 80029b2:	d504      	bpl.n	80029be <HAL_UART_IRQHandler+0x4a>
 80029b4:	b11d      	cbz	r5, 80029be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029be:	0793      	lsls	r3, r2, #30
 80029c0:	d504      	bpl.n	80029cc <HAL_UART_IRQHandler+0x58>
 80029c2:	b11d      	cbz	r5, 80029cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029cc:	0716      	lsls	r6, r2, #28
 80029ce:	d504      	bpl.n	80029da <HAL_UART_IRQHandler+0x66>
 80029d0:	b11d      	cbz	r5, 80029da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d066      	beq.n	8002aae <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e0:	0695      	lsls	r5, r2, #26
 80029e2:	d504      	bpl.n	80029ee <HAL_UART_IRQHandler+0x7a>
 80029e4:	0688      	lsls	r0, r1, #26
 80029e6:	d502      	bpl.n	80029ee <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff ff85 	bl	80028f8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029f4:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80029f6:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029f8:	d402      	bmi.n	8002a00 <HAL_UART_IRQHandler+0x8c>
 80029fa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029fe:	d01a      	beq.n	8002a36 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002a00:	f7ff fd16 	bl	8002430 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	0652      	lsls	r2, r2, #25
 8002a0a:	d510      	bpl.n	8002a2e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002a0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002a16:	b150      	cbz	r0, 8002a2e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_UART_IRQHandler+0x13c>)
 8002a1a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a1c:	f7fd fe77 	bl	800070e <HAL_DMA_Abort_IT>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d044      	beq.n	8002aae <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a24:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a2c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f002 f924 	bl	8004c7c <HAL_UART_ErrorCallback>
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002a36:	f002 f921 	bl	8004c7c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a3e:	0616      	lsls	r6, r2, #24
 8002a40:	d527      	bpl.n	8002a92 <HAL_UART_IRQHandler+0x11e>
 8002a42:	060d      	lsls	r5, r1, #24
 8002a44:	d525      	bpl.n	8002a92 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a46:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a4a:	2a21      	cmp	r2, #33	; 0x21
 8002a4c:	d12f      	bne.n	8002aae <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a4e:	68a2      	ldr	r2, [r4, #8]
 8002a50:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a54:	6a22      	ldr	r2, [r4, #32]
 8002a56:	d117      	bne.n	8002a88 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a58:	8811      	ldrh	r1, [r2, #0]
 8002a5a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a5e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a60:	6921      	ldr	r1, [r4, #16]
 8002a62:	b979      	cbnz	r1, 8002a84 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002a64:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002a66:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002a68:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002a70:	b9ea      	cbnz	r2, 8002aae <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a78:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002a84:	3201      	adds	r2, #1
 8002a86:	e7ee      	b.n	8002a66 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a88:	1c51      	adds	r1, r2, #1
 8002a8a:	6221      	str	r1, [r4, #32]
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e7ea      	b.n	8002a68 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a92:	0650      	lsls	r0, r2, #25
 8002a94:	d50b      	bpl.n	8002aae <HAL_UART_IRQHandler+0x13a>
 8002a96:	064a      	lsls	r2, r1, #25
 8002a98:	d509      	bpl.n	8002aae <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff23 	bl	80028f4 <HAL_UART_TxCpltCallback>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	08002ab5 	.word	0x08002ab5

08002ab4 <UART_DMAAbortOnError>:
{
 8002ab4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002abc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002abe:	f002 f8dd 	bl	8004c7c <HAL_UART_ErrorCallback>
 8002ac2:	bd08      	pop	{r3, pc}

08002ac4 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <SDMMC_GetCmdResp2+0x48>)
 8002ac6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ad4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002ad6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002ada:	d314      	bcc.n	8002b06 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002adc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002ade:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002ae2:	d0f8      	beq.n	8002ad6 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ae4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ae6:	075b      	lsls	r3, r3, #29
 8002ae8:	d503      	bpl.n	8002af2 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002aea:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002aec:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002af4:	f013 0301 	ands.w	r3, r3, #1
 8002af8:	d001      	beq.n	8002afe <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002afa:	2301      	movs	r3, #1
 8002afc:	e7f6      	b.n	8002aec <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002afe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b02:	6382      	str	r2, [r0, #56]	; 0x38
 8002b04:	e7f3      	b.n	8002aee <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002b06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b0a:	e7f0      	b.n	8002aee <SDMMC_GetCmdResp2+0x2a>
 8002b0c:	20000020 	.word	0x20000020

08002b10 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <SDMMC_GetCmdResp3+0x3c>)
 8002b12:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b20:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002b22:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b26:	d30e      	bcc.n	8002b46 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002b28:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002b2a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002b2e:	d0f8      	beq.n	8002b22 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b32:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b36:	bf15      	itete	ne
 8002b38:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002b3a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b3e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002b40:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002b42:	4618      	mov	r0, r3
 8002b44:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002b46:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000020 	.word	0x20000020

08002b50 <SDIO_Init>:
{
 8002b50:	b084      	sub	sp, #16
 8002b52:	b510      	push	{r4, lr}
 8002b54:	ac03      	add	r4, sp, #12
 8002b56:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002b5a:	9904      	ldr	r1, [sp, #16]
 8002b5c:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002b5e:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002b60:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002b62:	9905      	ldr	r1, [sp, #20]
 8002b64:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002b66:	9906      	ldr	r1, [sp, #24]
 8002b68:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8002b6a:	9907      	ldr	r1, [sp, #28]
 8002b6c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002b6e:	9908      	ldr	r1, [sp, #32]
}
 8002b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002b74:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8002b78:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002b7a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	6043      	str	r3, [r0, #4]
}
 8002b82:	b004      	add	sp, #16
 8002b84:	2000      	movs	r0, #0
 8002b86:	4770      	bx	lr

08002b88 <SDIO_ReadFIFO>:
 8002b88:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002b8c:	4770      	bx	lr

08002b8e <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002b94:	2000      	movs	r0, #0
 8002b96:	4770      	bx	lr

08002b98 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	6003      	str	r3, [r0, #0]
}
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	4770      	bx	lr

08002ba0 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002ba0:	6800      	ldr	r0, [r0, #0]
}
 8002ba2:	f000 0003 	and.w	r0, r0, #3
 8002ba6:	4770      	bx	lr

08002ba8 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002ba8:	680b      	ldr	r3, [r1, #0]
{
 8002baa:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8002bac:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002bae:	688c      	ldr	r4, [r1, #8]
 8002bb0:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002bb2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002bb4:	4323      	orrs	r3, r4
                       Command->Response         |\
 8002bb6:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8002bb8:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8002bba:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002bbc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8002bc0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002bc2:	f022 020f 	bic.w	r2, r2, #15
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60c3      	str	r3, [r0, #12]
}
 8002bca:	2000      	movs	r0, #0
 8002bcc:	bd10      	pop	{r4, pc}

08002bce <SDIO_GetResponse>:
{
 8002bce:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002bd0:	3014      	adds	r0, #20
 8002bd2:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002bd8:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8002bda:	9b01      	ldr	r3, [sp, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
}  
 8002bde:	b002      	add	sp, #8
 8002be0:	4770      	bx	lr
	...

08002be4 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002be4:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <SDMMC_GetCmdResp1+0x118>)
{
 8002be6:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002bee:	fbb3 f3f4 	udiv	r3, r3, r4
 8002bf2:	435a      	muls	r2, r3
    if (count-- == 0U)
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d04a      	beq.n	8002c8e <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bfa:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002bfe:	f102 32ff 	add.w	r2, r2, #4294967295
 8002c02:	d0f7      	beq.n	8002bf4 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002c04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c06:	075c      	lsls	r4, r3, #29
 8002c08:	d503      	bpl.n	8002c12 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002c0a:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002c0c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002c12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c14:	f013 0301 	ands.w	r3, r3, #1
 8002c18:	d001      	beq.n	8002c1e <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e7f6      	b.n	8002c0c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8002c1e:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	4291      	cmp	r1, r2
 8002c24:	d136      	bne.n	8002c94 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002c26:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002c2a:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002c2c:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002c2e:	f7ff ffce 	bl	8002bce <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <SDMMC_GetCmdResp1+0x11c>)
 8002c34:	4003      	ands	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0e9      	beq.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	db2c      	blt.n	8002c98 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002c3e:	0042      	lsls	r2, r0, #1
 8002c40:	d42d      	bmi.n	8002c9e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002c42:	0084      	lsls	r4, r0, #2
 8002c44:	d42d      	bmi.n	8002ca2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002c46:	00c1      	lsls	r1, r0, #3
 8002c48:	d42d      	bmi.n	8002ca6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002c4a:	0102      	lsls	r2, r0, #4
 8002c4c:	d42e      	bmi.n	8002cac <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002c4e:	0144      	lsls	r4, r0, #5
 8002c50:	d42f      	bmi.n	8002cb2 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002c52:	01c1      	lsls	r1, r0, #7
 8002c54:	d430      	bmi.n	8002cb8 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002c56:	0202      	lsls	r2, r0, #8
 8002c58:	d431      	bmi.n	8002cbe <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002c5a:	0244      	lsls	r4, r0, #9
 8002c5c:	d432      	bmi.n	8002cc4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002c5e:	0281      	lsls	r1, r0, #10
 8002c60:	d433      	bmi.n	8002cca <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002c62:	02c2      	lsls	r2, r0, #11
 8002c64:	d434      	bmi.n	8002cd0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002c66:	0344      	lsls	r4, r0, #13
 8002c68:	d435      	bmi.n	8002cd6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002c6a:	0381      	lsls	r1, r0, #14
 8002c6c:	d436      	bmi.n	8002cdc <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002c6e:	03c2      	lsls	r2, r0, #15
 8002c70:	d437      	bmi.n	8002ce2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002c72:	0404      	lsls	r4, r0, #16
 8002c74:	d438      	bmi.n	8002ce8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002c76:	0441      	lsls	r1, r0, #17
 8002c78:	d439      	bmi.n	8002cee <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002c7a:	0482      	lsls	r2, r0, #18
 8002c7c:	d43a      	bmi.n	8002cf4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002c7e:	f010 0f08 	tst.w	r0, #8
 8002c82:	bf14      	ite	ne
 8002c84:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8002c88:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002c8c:	e7bf      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c92:	e7bc      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e7ba      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9c:	e7b7      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002c9e:	2340      	movs	r3, #64	; 0x40
 8002ca0:	e7b5      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	e7b3      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002caa:	e7b0      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb0:	e7ad      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb6:	e7aa      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cbc:	e7a7      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc2:	e7a4      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc8:	e7a1      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cce:	e79e      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8002cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd4:	e79b      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cda:	e798      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002cdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ce0:	e795      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002ce2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ce6:	e792      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002ce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cec:	e78f      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002cee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cf2:	e78c      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8002cf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf8:	e789      	b.n	8002c0e <SDMMC_GetCmdResp1+0x2a>
 8002cfa:	bf00      	nop
 8002cfc:	20000020 	.word	0x20000020
 8002d00:	fdffe008 	.word	0xfdffe008

08002d04 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8002d04:	680b      	ldr	r3, [r1, #0]
{
 8002d06:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8002d08:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8002d0a:	684b      	ldr	r3, [r1, #4]
 8002d0c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d0e:	68cc      	ldr	r4, [r1, #12]
 8002d10:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d14:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002d16:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002d18:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002d1a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002d1c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d1e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002d22:	4313      	orrs	r3, r2
 8002d24:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002d26:	2000      	movs	r0, #0
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <SDMMC_CmdBlockLength>:
{
 8002d2a:	b530      	push	{r4, r5, lr}
 8002d2c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d32:	2300      	movs	r3, #0
{
 8002d34:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002d36:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002d38:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d3a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d3c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d42:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002d44:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d46:	f7ff ff2f 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4621      	mov	r1, r4
 8002d50:	4628      	mov	r0, r5
 8002d52:	f7ff ff47 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002d56:	b007      	add	sp, #28
 8002d58:	bd30      	pop	{r4, r5, pc}

08002d5a <SDMMC_CmdReadSingleBlock>:
{
 8002d5a:	b530      	push	{r4, r5, lr}
 8002d5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d62:	2300      	movs	r3, #0
{
 8002d64:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002d66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002d68:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d6a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d6c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d72:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002d74:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d76:	f7ff ff17 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4628      	mov	r0, r5
 8002d82:	f7ff ff2f 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002d86:	b007      	add	sp, #28
 8002d88:	bd30      	pop	{r4, r5, pc}

08002d8a <SDMMC_CmdReadMultiBlock>:
{
 8002d8a:	b530      	push	{r4, r5, lr}
 8002d8c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d8e:	2340      	movs	r3, #64	; 0x40
 8002d90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d92:	2300      	movs	r3, #0
{
 8002d94:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002d96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002d98:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d9a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d9c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002da4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002da6:	f7ff feff 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f7ff ff17 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002db6:	b007      	add	sp, #28
 8002db8:	bd30      	pop	{r4, r5, pc}

08002dba <SDMMC_CmdWriteSingleBlock>:
{
 8002dba:	b530      	push	{r4, r5, lr}
 8002dbc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dc2:	2300      	movs	r3, #0
{
 8002dc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002dc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002dc8:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dca:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dcc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002dd4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dd6:	f7ff fee7 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f7ff feff 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002de6:	b007      	add	sp, #28
 8002de8:	bd30      	pop	{r4, r5, pc}

08002dea <SDMMC_CmdWriteMultiBlock>:
{
 8002dea:	b530      	push	{r4, r5, lr}
 8002dec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dee:	2340      	movs	r3, #64	; 0x40
 8002df0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002df2:	2300      	movs	r3, #0
{
 8002df4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002df6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002df8:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dfa:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dfc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e02:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002e04:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e06:	f7ff fecf 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f7ff fee7 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002e16:	b007      	add	sp, #28
 8002e18:	bd30      	pop	{r4, r5, pc}
	...

08002e1c <SDMMC_CmdStopTransfer>:
{
 8002e1c:	b530      	push	{r4, r5, lr}
 8002e1e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002e20:	2300      	movs	r3, #0
{
 8002e22:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002e24:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002e26:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e28:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e2a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e2c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e32:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e34:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002e36:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e38:	f7ff feb6 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8002e3c:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <SDMMC_CmdStopTransfer+0x30>)
 8002e3e:	4621      	mov	r1, r4
 8002e40:	4628      	mov	r0, r5
 8002e42:	f7ff fecf 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002e46:	b007      	add	sp, #28
 8002e48:	bd30      	pop	{r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	05f5e100 	.word	0x05f5e100

08002e50 <SDMMC_CmdSelDesel>:
{
 8002e50:	b530      	push	{r4, r5, lr}
 8002e52:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e58:	2300      	movs	r3, #0
{
 8002e5a:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002e5c:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e5e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e60:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002e66:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e68:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002e6a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e6c:	f7ff fe9c 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4621      	mov	r1, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	f7ff feb4 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002e7c:	b007      	add	sp, #28
 8002e7e:	bd30      	pop	{r4, r5, pc}

08002e80 <SDMMC_CmdGoIdleState>:
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002e88:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002e8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e8c:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e8e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e94:	9305      	str	r3, [sp, #20]
{
 8002e96:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e98:	f7ff fe86 	bl	8002ba8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <SDMMC_CmdGoIdleState+0x4c>)
 8002e9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ea8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eac:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002eae:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002eb2:	d308      	bcc.n	8002ec6 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002eb4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002eb6:	0612      	lsls	r2, r2, #24
 8002eb8:	d5f9      	bpl.n	8002eae <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002eba:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002ebe:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8002ec0:	2000      	movs	r0, #0
}
 8002ec2:	b006      	add	sp, #24
 8002ec4:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002ec6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002eca:	e7fa      	b.n	8002ec2 <SDMMC_CmdGoIdleState+0x42>
 8002ecc:	20000020 	.word	0x20000020

08002ed0 <SDMMC_CmdOperCond>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002ed4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002ed8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002eda:	2308      	movs	r3, #8
 8002edc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ee6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eec:	9305      	str	r3, [sp, #20]
{
 8002eee:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ef0:	f7ff fe5a 	bl	8002ba8 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <SDMMC_CmdOperCond+0x6c>)
 8002ef6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f04:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002f06:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002f0a:	d314      	bcc.n	8002f36 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002f0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f0e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002f12:	d0f8      	beq.n	8002f06 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f14:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f16:	f012 0204 	ands.w	r2, r2, #4
 8002f1a:	d004      	beq.n	8002f26 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002f1c:	2340      	movs	r3, #64	; 0x40
 8002f1e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f20:	2004      	movs	r0, #4
}
 8002f22:	b006      	add	sp, #24
 8002f24:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002f26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f28:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002f2c:	d0f9      	beq.n	8002f22 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f32:	4610      	mov	r0, r2
 8002f34:	e7f5      	b.n	8002f22 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002f36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002f3a:	e7f2      	b.n	8002f22 <SDMMC_CmdOperCond+0x52>
 8002f3c:	20000020 	.word	0x20000020

08002f40 <SDMMC_CmdAppCommand>:
{
 8002f40:	b530      	push	{r4, r5, lr}
 8002f42:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f48:	2300      	movs	r3, #0
{
 8002f4a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002f4c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002f4e:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f50:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f52:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f58:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002f5a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f5c:	f7ff fe24 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f7ff fe3c 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 8002f6c:	b007      	add	sp, #28
 8002f6e:	bd30      	pop	{r4, r5, pc}

08002f70 <SDMMC_CmdAppOperCommand>:
{
 8002f70:	b510      	push	{r4, lr}
 8002f72:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002f74:	2329      	movs	r3, #41	; 0x29
 8002f76:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002f78:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f7c:	2340      	movs	r3, #64	; 0x40
 8002f7e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f84:	2300      	movs	r3, #0
{
 8002f86:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002f88:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f8a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f8c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f92:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f94:	f7ff fe08 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff fdb9 	bl	8002b10 <SDMMC_GetCmdResp3>
}
 8002f9e:	b006      	add	sp, #24
 8002fa0:	bd10      	pop	{r4, pc}

08002fa2 <SDMMC_CmdSendCID>:
{
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002fa6:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002fa8:	2202      	movs	r2, #2
{
 8002faa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002fac:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002fae:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fb0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fb2:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fb8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fba:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fbc:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fbe:	f7ff fdf3 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff fd7e 	bl	8002ac4 <SDMMC_GetCmdResp2>
}
 8002fc8:	b006      	add	sp, #24
 8002fca:	bd10      	pop	{r4, pc}

08002fcc <SDMMC_CmdSendCSD>:
{
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002fd0:	2309      	movs	r3, #9
 8002fd2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fd8:	2300      	movs	r3, #0
{
 8002fda:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002fdc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fde:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fe0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe6:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fe8:	f7ff fdde 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fd69 	bl	8002ac4 <SDMMC_GetCmdResp2>
}
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd10      	pop	{r4, pc}
	...

08002ff8 <SDMMC_CmdSetRelAdd>:
{
 8002ff8:	b530      	push	{r4, r5, lr}
 8002ffa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002ffc:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002ffe:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003000:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003002:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003004:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003006:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 800300c:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800300e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003010:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003012:	9305      	str	r3, [sp, #20]
{
 8003014:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003016:	f7ff fdc7 	bl	8002ba8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <SDMMC_CmdSetRelAdd+0xa4>)
 800301c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fbb3 f2f2 	udiv	r2, r3, r2
 8003026:	f241 3388 	movw	r3, #5000	; 0x1388
 800302a:	4353      	muls	r3, r2
    if (count-- == 0U)
 800302c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003030:	d32b      	bcc.n	800308a <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003032:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003034:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003038:	d0f8      	beq.n	800302c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800303a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800303c:	075a      	lsls	r2, r3, #29
 800303e:	d503      	bpl.n	8003048 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003040:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003042:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003044:	b007      	add	sp, #28
 8003046:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800304a:	f011 0101 	ands.w	r1, r1, #1
 800304e:	d001      	beq.n	8003054 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003050:	2001      	movs	r0, #1
 8003052:	e7f6      	b.n	8003042 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8003054:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d119      	bne.n	8003090 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800305c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003060:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003062:	4620      	mov	r0, r4
 8003064:	f7ff fdb3 	bl	8002bce <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003068:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 800306c:	d103      	bne.n	8003076 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800306e:	0c00      	lsrs	r0, r0, #16
 8003070:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8003072:	4618      	mov	r0, r3
 8003074:	e7e6      	b.n	8003044 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003076:	0443      	lsls	r3, r0, #17
 8003078:	d40c      	bmi.n	8003094 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800307a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800307e:	bf14      	ite	ne
 8003080:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003084:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003088:	e7dc      	b.n	8003044 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800308a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800308e:	e7d9      	b.n	8003044 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003090:	2001      	movs	r0, #1
 8003092:	e7d7      	b.n	8003044 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003094:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003098:	e7d4      	b.n	8003044 <SDMMC_CmdSetRelAdd+0x4c>
 800309a:	bf00      	nop
 800309c:	20000020 	.word	0x20000020

080030a0 <SDMMC_CmdSendStatus>:
{
 80030a0:	b530      	push	{r4, r5, lr}
 80030a2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030a4:	2340      	movs	r3, #64	; 0x40
 80030a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030a8:	2300      	movs	r3, #0
{
 80030aa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80030ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80030ae:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030b0:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80030ba:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030bc:	f7ff fd74 	bl	8002ba8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f7ff fd8c 	bl	8002be4 <SDMMC_GetCmdResp1>
}
 80030cc:	b007      	add	sp, #28
 80030ce:	bd30      	pop	{r4, r5, pc}

080030d0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <disk_status+0x10>)
 80030d2:	181a      	adds	r2, r3, r0
 80030d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80030d8:	7a10      	ldrb	r0, [r2, #8]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4718      	bx	r3
 80030e0:	20000068 	.word	0x20000068

080030e4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <disk_initialize+0x1c>)
 80030e6:	5c1a      	ldrb	r2, [r3, r0]
 80030e8:	b942      	cbnz	r2, 80030fc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80030ea:	2201      	movs	r2, #1
 80030ec:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80030ee:	181a      	adds	r2, r3, r0
 80030f0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80030f4:	7a10      	ldrb	r0, [r2, #8]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4718      	bx	r3
  }
  return stat;
}
 80030fc:	2000      	movs	r0, #0
 80030fe:	4770      	bx	lr
 8003100:	20000068 	.word	0x20000068

08003104 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003104:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003106:	4c05      	ldr	r4, [pc, #20]	; (800311c <disk_read+0x18>)
 8003108:	1825      	adds	r5, r4, r0
 800310a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800310e:	6860      	ldr	r0, [r4, #4]
 8003110:	6884      	ldr	r4, [r0, #8]
 8003112:	7a28      	ldrb	r0, [r5, #8]
 8003114:	46a4      	mov	ip, r4
  return res;
}
 8003116:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003118:	4760      	bx	ip
 800311a:	bf00      	nop
 800311c:	20000068 	.word	0x20000068

08003120 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003120:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003122:	4c05      	ldr	r4, [pc, #20]	; (8003138 <disk_write+0x18>)
 8003124:	1825      	adds	r5, r4, r0
 8003126:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800312a:	6860      	ldr	r0, [r4, #4]
 800312c:	68c4      	ldr	r4, [r0, #12]
 800312e:	7a28      	ldrb	r0, [r5, #8]
 8003130:	46a4      	mov	ip, r4
  return res;
}
 8003132:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003134:	4760      	bx	ip
 8003136:	bf00      	nop
 8003138:	20000068 	.word	0x20000068

0800313c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <disk_ioctl+0x18>)
{
 800313e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003140:	181c      	adds	r4, r3, r0
 8003142:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003146:	7a20      	ldrb	r0, [r4, #8]
 8003148:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800314a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4718      	bx	r3
 8003152:	bf00      	nop
 8003154:	20000068 	.word	0x20000068

08003158 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8003158:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800315a:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800315c:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800315e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8003162:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003166:	4770      	bx	lr

08003168 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003168:	0a0b      	lsrs	r3, r1, #8
 800316a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800316c:	7043      	strb	r3, [r0, #1]
 800316e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003170:	0e09      	lsrs	r1, r1, #24
 8003172:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003174:	70c1      	strb	r1, [r0, #3]
 8003176:	4770      	bx	lr

08003178 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003178:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800317a:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800317e:	4290      	cmp	r0, r2
 8003180:	d1fb      	bne.n	800317a <mem_set+0x2>
}
 8003182:	4770      	bx	lr

08003184 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <chk_lock+0x58>)
 8003186:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003188:	2500      	movs	r5, #0
 800318a:	462a      	mov	r2, r5
 800318c:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 800318e:	681e      	ldr	r6, [r3, #0]
 8003190:	b1a6      	cbz	r6, 80031bc <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003192:	6807      	ldr	r7, [r0, #0]
 8003194:	42be      	cmp	r6, r7
 8003196:	d112      	bne.n	80031be <chk_lock+0x3a>
 8003198:	685f      	ldr	r7, [r3, #4]
 800319a:	6886      	ldr	r6, [r0, #8]
 800319c:	42b7      	cmp	r7, r6
 800319e:	d10e      	bne.n	80031be <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80031a0:	689f      	ldr	r7, [r3, #8]
 80031a2:	6946      	ldr	r6, [r0, #20]
 80031a4:	42b7      	cmp	r7, r6
 80031a6:	d10a      	bne.n	80031be <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031a8:	b9b1      	cbnz	r1, 80031d8 <chk_lock+0x54>
 80031aa:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80031ae:	8993      	ldrh	r3, [r2, #12]
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b4:	bf14      	ite	ne
 80031b6:	2000      	movne	r0, #0
 80031b8:	2010      	moveq	r0, #16
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80031bc:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031be:	3201      	adds	r2, #1
 80031c0:	2a02      	cmp	r2, #2
 80031c2:	f103 0310 	add.w	r3, r3, #16
 80031c6:	d1e2      	bne.n	800318e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80031c8:	b10d      	cbz	r5, 80031ce <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031ca:	2000      	movs	r0, #0
 80031cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80031ce:	2902      	cmp	r1, #2
 80031d0:	bf0c      	ite	eq
 80031d2:	2000      	moveq	r0, #0
 80031d4:	2012      	movne	r0, #18
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031d8:	2010      	movs	r0, #16
 80031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031dc:	20000044 	.word	0x20000044

080031e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <inc_lock+0x74>)
 80031e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80031e4:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80031e6:	2300      	movs	r3, #0
 80031e8:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 80031ea:	6814      	ldr	r4, [r2, #0]
 80031ec:	42ac      	cmp	r4, r5
 80031ee:	d107      	bne.n	8003200 <inc_lock+0x20>
 80031f0:	6857      	ldr	r7, [r2, #4]
 80031f2:	6884      	ldr	r4, [r0, #8]
 80031f4:	42a7      	cmp	r7, r4
 80031f6:	d103      	bne.n	8003200 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 80031f8:	6897      	ldr	r7, [r2, #8]
 80031fa:	6944      	ldr	r4, [r0, #20]
 80031fc:	42a7      	cmp	r7, r4
 80031fe:	d01d      	beq.n	800323c <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003200:	3301      	adds	r3, #1
 8003202:	2b02      	cmp	r3, #2
 8003204:	f102 0210 	add.w	r2, r2, #16
 8003208:	d1ef      	bne.n	80031ea <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800320a:	6833      	ldr	r3, [r6, #0]
 800320c:	b113      	cbz	r3, 8003214 <inc_lock+0x34>
 800320e:	6933      	ldr	r3, [r6, #16]
 8003210:	b9eb      	cbnz	r3, 800324e <inc_lock+0x6e>
 8003212:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8003214:	011c      	lsls	r4, r3, #4
 8003216:	1932      	adds	r2, r6, r4
 8003218:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800321a:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 800321c:	6940      	ldr	r0, [r0, #20]
 800321e:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8003220:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8003222:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8003224:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003226:	b979      	cbnz	r1, 8003248 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003228:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 800322c:	8992      	ldrh	r2, [r2, #12]
 800322e:	3201      	adds	r2, #1
 8003230:	b292      	uxth	r2, r2
 8003232:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8003236:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003238:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800323c:	2900      	cmp	r1, #0
 800323e:	d0f3      	beq.n	8003228 <inc_lock+0x48>
 8003240:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003244:	8992      	ldrh	r2, [r2, #12]
 8003246:	b912      	cbnz	r2, 800324e <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800324c:	e7f1      	b.n	8003232 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800324e:	2000      	movs	r0, #0
 8003250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003252:	bf00      	nop
 8003254:	20000044 	.word	0x20000044

08003258 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003258:	3801      	subs	r0, #1
 800325a:	2801      	cmp	r0, #1
 800325c:	d80e      	bhi.n	800327c <dec_lock+0x24>
		n = Files[i].ctr;
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <dec_lock+0x2c>)
 8003260:	0103      	lsls	r3, r0, #4
 8003262:	18d1      	adds	r1, r2, r3
 8003264:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8003266:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800326a:	b280      	uxth	r0, r0
 800326c:	b108      	cbz	r0, 8003272 <dec_lock+0x1a>
 800326e:	1e48      	subs	r0, r1, #1
 8003270:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8003272:	18d1      	adds	r1, r2, r3
 8003274:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003276:	b918      	cbnz	r0, 8003280 <dec_lock+0x28>
 8003278:	50d0      	str	r0, [r2, r3]
 800327a:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800327c:	2002      	movs	r0, #2
 800327e:	4770      	bx	lr
		res = FR_OK;
 8003280:	2000      	movs	r0, #0
	}
	return res;
}
 8003282:	4770      	bx	lr
 8003284:	20000044 	.word	0x20000044

08003288 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003288:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800328a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800328c:	3b02      	subs	r3, #2
 800328e:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8003290:	bf3d      	ittte	cc
 8003292:	8943      	ldrhcc	r3, [r0, #10]
 8003294:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 8003296:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800329a:	2000      	movcs	r0, #0
}
 800329c:	4770      	bx	lr

0800329e <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800329e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032a0:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032a2:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032a4:	0a49      	lsrs	r1, r1, #9
 80032a6:	8952      	ldrh	r2, [r2, #10]
 80032a8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032ac:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80032ae:	b130      	cbz	r0, 80032be <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80032b0:	4281      	cmp	r1, r0
 80032b2:	d302      	bcc.n	80032ba <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80032b4:	1a09      	subs	r1, r1, r0
 80032b6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032b8:	e7f8      	b.n	80032ac <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80032ba:	6858      	ldr	r0, [r3, #4]
 80032bc:	4408      	add	r0, r1
}
 80032be:	4770      	bx	lr

080032c0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80032c0:	6802      	ldr	r2, [r0, #0]
{
 80032c2:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80032c4:	b152      	cbz	r2, 80032dc <get_ldnumber+0x1c>
 80032c6:	4611      	mov	r1, r2
 80032c8:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80032ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ce:	2c20      	cmp	r4, #32
 80032d0:	d90c      	bls.n	80032ec <get_ldnumber+0x2c>
 80032d2:	2c3a      	cmp	r4, #58	; 0x3a
 80032d4:	d1f8      	bne.n	80032c8 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80032d6:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80032d8:	428b      	cmp	r3, r1
 80032da:	d002      	beq.n	80032e2 <get_ldnumber+0x22>
	int vol = -1;
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80032e0:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	2a30      	cmp	r2, #48	; 0x30
 80032e6:	d1f9      	bne.n	80032dc <get_ldnumber+0x1c>
					*path = ++tt;
 80032e8:	3301      	adds	r3, #1
 80032ea:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80032ec:	2000      	movs	r0, #0
 80032ee:	bd10      	pop	{r4, pc}

080032f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80032f4:	4604      	mov	r4, r0
 80032f6:	b918      	cbnz	r0, 8003300 <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 80032f8:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80032fa:	2300      	movs	r3, #0
 80032fc:	602b      	str	r3, [r5, #0]
	return res;
}
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f8      	beq.n	80032f8 <validate+0x8>
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	2a00      	cmp	r2, #0
 800330a:	d0f5      	beq.n	80032f8 <validate+0x8>
 800330c:	8881      	ldrh	r1, [r0, #4]
 800330e:	88da      	ldrh	r2, [r3, #6]
 8003310:	4291      	cmp	r1, r2
 8003312:	d1f1      	bne.n	80032f8 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003314:	7858      	ldrb	r0, [r3, #1]
 8003316:	f7ff fedb 	bl	80030d0 <disk_status>
 800331a:	f010 0001 	ands.w	r0, r0, #1
 800331e:	d1eb      	bne.n	80032f8 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	e7eb      	b.n	80032fc <validate+0xc>

08003324 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003324:	3801      	subs	r0, #1
 8003326:	440a      	add	r2, r1
			*d++ = *s++;
 8003328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800332c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8003330:	4291      	cmp	r1, r2
 8003332:	d1f9      	bne.n	8003328 <mem_cpy.part.0+0x4>
}
 8003334:	4770      	bx	lr

08003336 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8003336:	7eca      	ldrb	r2, [r1, #27]
 8003338:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800333a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800333c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8003340:	bf01      	itttt	eq
 8003342:	7d48      	ldrbeq	r0, [r1, #21]
 8003344:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003346:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800334a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800334e:	4618      	mov	r0, r3
 8003350:	4770      	bx	lr

08003352 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003352:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003356:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003358:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800335a:	7803      	ldrb	r3, [r0, #0]
 800335c:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800335e:	bf01      	itttt	eq
 8003360:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003362:	750a      	strbeq	r2, [r1, #20]
 8003364:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8003366:	754a      	strbeq	r2, [r1, #21]
 8003368:	4770      	bx	lr

0800336a <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800336a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800336c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800336e:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003372:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003374:	2301      	movs	r3, #1
 8003376:	462a      	mov	r2, r5
 8003378:	4639      	mov	r1, r7
 800337a:	7840      	ldrb	r0, [r0, #1]
 800337c:	f7ff fed0 	bl	8003120 <disk_write>
 8003380:	b9a0      	cbnz	r0, 80033ac <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003382:	6a23      	ldr	r3, [r4, #32]
 8003384:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 8003386:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003388:	1aeb      	subs	r3, r5, r3
 800338a:	4293      	cmp	r3, r2
 800338c:	d301      	bcc.n	8003392 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 800338e:	2000      	movs	r0, #0
 8003390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003392:	78a6      	ldrb	r6, [r4, #2]
 8003394:	2e01      	cmp	r6, #1
 8003396:	d9fa      	bls.n	800338e <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8003398:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 800339a:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800339c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800339e:	462a      	mov	r2, r5
 80033a0:	2301      	movs	r3, #1
 80033a2:	4639      	mov	r1, r7
 80033a4:	f7ff febc 	bl	8003120 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033a8:	3e01      	subs	r6, #1
 80033aa:	e7f3      	b.n	8003394 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033b0 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033b0:	78c3      	ldrb	r3, [r0, #3]
 80033b2:	b10b      	cbz	r3, 80033b8 <sync_window+0x8>
 80033b4:	f7ff bfd9 	b.w	800336a <sync_window.part.4>
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	4770      	bx	lr

080033bc <sync_fs>:
{
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	4604      	mov	r4, r0
	res = sync_window(fs);
 80033c0:	f7ff fff6 	bl	80033b0 <sync_window>
 80033c4:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d142      	bne.n	8003450 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80033ca:	7823      	ldrb	r3, [r4, #0]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d137      	bne.n	8003440 <sync_fs+0x84>
 80033d0:	7927      	ldrb	r7, [r4, #4]
 80033d2:	2f01      	cmp	r7, #1
 80033d4:	d134      	bne.n	8003440 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80033d6:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80033da:	4601      	mov	r1, r0
 80033dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff fec9 	bl	8003178 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80033e6:	2355      	movs	r3, #85	; 0x55
 80033e8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 80033ec:	23aa      	movs	r3, #170	; 0xaa
 80033ee:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 80033f2:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80033f4:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80033f6:	2172      	movs	r1, #114	; 0x72
 80033f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80033fc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8003400:	2361      	movs	r3, #97	; 0x61
 8003402:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8003406:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 800340a:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 800340e:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8003412:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8003416:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800341a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800341e:	6921      	ldr	r1, [r4, #16]
 8003420:	f7ff fea2 	bl	8003168 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003424:	68e1      	ldr	r1, [r4, #12]
 8003426:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800342a:	f7ff fe9d 	bl	8003168 <st_dword>
			fs->winsect = fs->volbase + 1;
 800342e:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003430:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8003432:	3201      	adds	r2, #1
 8003434:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003436:	463b      	mov	r3, r7
 8003438:	4631      	mov	r1, r6
 800343a:	f7ff fe71 	bl	8003120 <disk_write>
			fs->fsi_flag = 0;
 800343e:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003440:	2200      	movs	r2, #0
 8003442:	4611      	mov	r1, r2
 8003444:	7860      	ldrb	r0, [r4, #1]
 8003446:	f7ff fe79 	bl	800313c <disk_ioctl>
 800344a:	3000      	adds	r0, #0
 800344c:	bf18      	it	ne
 800344e:	2001      	movne	r0, #1
}
 8003450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003452 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003452:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003454:	428b      	cmp	r3, r1
{
 8003456:	b570      	push	{r4, r5, r6, lr}
 8003458:	4606      	mov	r6, r0
 800345a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800345c:	d012      	beq.n	8003484 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800345e:	f7ff ffa7 	bl	80033b0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003462:	4604      	mov	r4, r0
 8003464:	b960      	cbnz	r0, 8003480 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003466:	462a      	mov	r2, r5
 8003468:	2301      	movs	r3, #1
 800346a:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800346e:	7870      	ldrb	r0, [r6, #1]
 8003470:	f7ff fe48 	bl	8003104 <disk_read>
 8003474:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8003476:	bf1c      	itt	ne
 8003478:	f04f 35ff 	movne.w	r5, #4294967295
 800347c:	2401      	movne	r4, #1
			fs->winsect = sector;
 800347e:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8003480:	4620      	mov	r0, r4
 8003482:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8003484:	2400      	movs	r4, #0
 8003486:	e7fb      	b.n	8003480 <move_window+0x2e>

08003488 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003488:	2300      	movs	r3, #0
{
 800348a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800348c:	70c3      	strb	r3, [r0, #3]
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8003494:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003496:	f7ff ffdc 	bl	8003452 <move_window>
 800349a:	bb30      	cbnz	r0, 80034ea <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800349c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80034a0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80034a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80034a8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d11e      	bne.n	80034ee <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80034b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80034b4:	2be9      	cmp	r3, #233	; 0xe9
 80034b6:	d005      	beq.n	80034c4 <check_fs+0x3c>
 80034b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <check_fs+0x74>)
 80034bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d116      	bne.n	80034f2 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80034c4:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80034c8:	f7ff fe46 	bl	8003158 <ld_dword>
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <check_fs+0x78>)
 80034ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80034d2:	4298      	cmp	r0, r3
 80034d4:	d00f      	beq.n	80034f6 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80034d6:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80034da:	f7ff fe3d 	bl	8003158 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <check_fs+0x7c>)
 80034e0:	4298      	cmp	r0, r3
 80034e2:	bf14      	ite	ne
 80034e4:	2002      	movne	r0, #2
 80034e6:	2000      	moveq	r0, #0
 80034e8:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80034ea:	2004      	movs	r0, #4
 80034ec:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80034ee:	2003      	movs	r0, #3
 80034f0:	bd10      	pop	{r4, pc}
	return 2;
 80034f2:	2002      	movs	r0, #2
 80034f4:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80034f6:	2000      	movs	r0, #0
}
 80034f8:	bd10      	pop	{r4, pc}
 80034fa:	bf00      	nop
 80034fc:	009000eb 	.word	0x009000eb
 8003500:	00544146 	.word	0x00544146
 8003504:	33544146 	.word	0x33544146

08003508 <find_volume>:
{
 8003508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800350c:	2300      	movs	r3, #0
{
 800350e:	b085      	sub	sp, #20
	*rfs = 0;
 8003510:	600b      	str	r3, [r1, #0]
{
 8003512:	460f      	mov	r7, r1
 8003514:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8003516:	f7ff fed3 	bl	80032c0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800351a:	1e06      	subs	r6, r0, #0
 800351c:	f2c0 8140 	blt.w	80037a0 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003520:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <find_volume+0x2a8>)
 8003522:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003526:	2c00      	cmp	r4, #0
 8003528:	f000 813c 	beq.w	80037a4 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 800352c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800352e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003530:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003534:	b173      	cbz	r3, 8003554 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8003536:	7860      	ldrb	r0, [r4, #1]
 8003538:	f7ff fdca 	bl	80030d0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800353c:	07c1      	lsls	r1, r0, #31
 800353e:	d409      	bmi.n	8003554 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003540:	2d00      	cmp	r5, #0
 8003542:	f000 8131 	beq.w	80037a8 <find_volume+0x2a0>
 8003546:	f010 0004 	ands.w	r0, r0, #4
 800354a:	d000      	beq.n	800354e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800354c:	200a      	movs	r0, #10
}
 800354e:	b005      	add	sp, #20
 8003550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003554:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003556:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8003558:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800355a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800355c:	f7ff fdc2 	bl	80030e4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003560:	07c2      	lsls	r2, r0, #31
 8003562:	f100 8123 	bmi.w	80037ac <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003566:	b10d      	cbz	r5, 800356c <find_volume+0x64>
 8003568:	0743      	lsls	r3, r0, #29
 800356a:	d4ef      	bmi.n	800354c <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800356c:	2100      	movs	r1, #0
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff ff8a 	bl	8003488 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003574:	2802      	cmp	r0, #2
 8003576:	f040 80f7 	bne.w	8003768 <find_volume+0x260>
 800357a:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 800357e:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003580:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8003584:	b110      	cbz	r0, 800358c <find_volume+0x84>
 8003586:	4628      	mov	r0, r5
 8003588:	f7ff fde6 	bl	8003158 <ld_dword>
 800358c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003590:	3101      	adds	r1, #1
 8003592:	2904      	cmp	r1, #4
 8003594:	f105 0510 	add.w	r5, r5, #16
 8003598:	d1f2      	bne.n	8003580 <find_volume+0x78>
 800359a:	2500      	movs	r5, #0
			bsect = br[i];
 800359c:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80035a0:	2e00      	cmp	r6, #0
 80035a2:	f000 80d8 	beq.w	8003756 <find_volume+0x24e>
 80035a6:	4631      	mov	r1, r6
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7ff ff6d 	bl	8003488 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80035ae:	2801      	cmp	r0, #1
 80035b0:	f200 80d2 	bhi.w	8003758 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 80035b4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80035b8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80035bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	f040 80d4 	bne.w	8003770 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80035c8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80035cc:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80035d0:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 80035d4:	d104      	bne.n	80035e0 <find_volume+0xd8>
 80035d6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80035da:	f7ff fdbd 	bl	8003158 <ld_dword>
 80035de:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80035e0:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 80035e4:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80035e6:	f109 33ff 	add.w	r3, r9, #4294967295
 80035ea:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80035ec:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80035f0:	f200 80be 	bhi.w	8003770 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80035f4:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 80035f8:	b2bb      	uxth	r3, r7
 80035fa:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80b7 	beq.w	8003770 <find_volume+0x268>
 8003602:	1e7b      	subs	r3, r7, #1
 8003604:	423b      	tst	r3, r7
 8003606:	f040 80b3 	bne.w	8003770 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800360a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800360e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8003612:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003616:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800361a:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800361e:	f040 80a7 	bne.w	8003770 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003622:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8003626:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800362a:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800362e:	d103      	bne.n	8003638 <find_volume+0x130>
 8003630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003634:	f7ff fd90 	bl	8003158 <ld_dword>
	rv = rv << 8 | ptr[0];
 8003638:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800363c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003640:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8003644:	f000 8094 	beq.w	8003770 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003648:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800364c:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8003650:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003652:	4570      	cmp	r0, lr
 8003654:	f0c0 808c 	bcc.w	8003770 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003658:	eba0 010e 	sub.w	r1, r0, lr
 800365c:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003660:	2900      	cmp	r1, #0
 8003662:	f000 8085 	beq.w	8003770 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003666:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800366a:	4281      	cmp	r1, r0
 800366c:	f200 8084 	bhi.w	8003778 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003670:	f640 77f5 	movw	r7, #4085	; 0xff5
 8003674:	42b9      	cmp	r1, r7
 8003676:	bf8c      	ite	hi
 8003678:	2702      	movhi	r7, #2
 800367a:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800367c:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800367e:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8003680:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 8003684:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003686:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003688:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800368a:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800368c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800368e:	d175      	bne.n	800377c <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8003690:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8003694:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003698:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800369c:	d168      	bne.n	8003770 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800369e:	f1b8 0f00 	cmp.w	r8, #0
 80036a2:	d165      	bne.n	8003770 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80036a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036a8:	f7ff fd56 	bl	8003158 <ld_dword>
 80036ac:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80036ae:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80036b0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80036b4:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 80036b8:	d35a      	bcc.n	8003770 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	6123      	str	r3, [r4, #16]
 80036c0:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80036c2:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 80036c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80036c8:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80036ca:	d12f      	bne.n	800372c <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80036cc:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80036d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80036d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d127      	bne.n	800372c <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 80036dc:	1c71      	adds	r1, r6, #1
 80036de:	4620      	mov	r0, r4
 80036e0:	f7ff feb7 	bl	8003452 <move_window>
 80036e4:	bb10      	cbnz	r0, 800372c <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80036e6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80036ea:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 80036ee:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80036f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80036f4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d117      	bne.n	800372c <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80036fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003700:	f7ff fd2a 	bl	8003158 <ld_dword>
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <find_volume+0x2ac>)
 8003706:	4298      	cmp	r0, r3
 8003708:	d110      	bne.n	800372c <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800370a:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800370e:	f7ff fd23 	bl	8003158 <ld_dword>
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <find_volume+0x2b0>)
 8003714:	4298      	cmp	r0, r3
 8003716:	d109      	bne.n	800372c <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003718:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800371c:	f7ff fd1c 	bl	8003158 <ld_dword>
 8003720:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003722:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003726:	f7ff fd17 	bl	8003158 <ld_dword>
 800372a:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800372e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003730:	8813      	ldrh	r3, [r2, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]
 8003738:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <find_volume+0x2b8>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4294      	cmp	r4, r2
 8003740:	bf04      	itt	eq
 8003742:	2200      	moveq	r2, #0
 8003744:	601a      	streq	r2, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	4294      	cmp	r4, r2
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f47f aefe 	bne.w	800354e <find_volume+0x46>
 8003752:	6118      	str	r0, [r3, #16]
 8003754:	e6fb      	b.n	800354e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003756:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003758:	3501      	adds	r5, #1
 800375a:	2d04      	cmp	r5, #4
 800375c:	f47f af1e 	bne.w	800359c <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003760:	2804      	cmp	r0, #4
 8003762:	d105      	bne.n	8003770 <find_volume+0x268>
 8003764:	2001      	movs	r0, #1
 8003766:	e6f2      	b.n	800354e <find_volume+0x46>
 8003768:	2804      	cmp	r0, #4
 800376a:	d0fb      	beq.n	8003764 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800376c:	2801      	cmp	r0, #1
 800376e:	d901      	bls.n	8003774 <find_volume+0x26c>
 8003770:	200d      	movs	r0, #13
 8003772:	e6ec      	b.n	800354e <find_volume+0x46>
	bsect = 0;
 8003774:	2600      	movs	r6, #0
 8003776:	e71d      	b.n	80035b4 <find_volume+0xac>
		fmt = FS_FAT32;
 8003778:	2703      	movs	r7, #3
 800377a:	e77f      	b.n	800367c <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800377c:	f1b8 0f00 	cmp.w	r8, #0
 8003780:	d0f6      	beq.n	8003770 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003782:	2f02      	cmp	r7, #2
 8003784:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8003788:	bf18      	it	ne
 800378a:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800378c:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800378e:	bf18      	it	ne
 8003790:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003794:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003796:	bf0c      	ite	eq
 8003798:	4601      	moveq	r1, r0
 800379a:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800379e:	e787      	b.n	80036b0 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 80037a0:	200b      	movs	r0, #11
 80037a2:	e6d4      	b.n	800354e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80037a4:	200c      	movs	r0, #12
 80037a6:	e6d2      	b.n	800354e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80037a8:	4628      	mov	r0, r5
 80037aa:	e6d0      	b.n	800354e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80037ac:	2003      	movs	r0, #3
 80037ae:	e6ce      	b.n	800354e <find_volume+0x46>
 80037b0:	20000040 	.word	0x20000040
 80037b4:	41615252 	.word	0x41615252
 80037b8:	61417272 	.word	0x61417272
 80037bc:	20000064 	.word	0x20000064
 80037c0:	20000044 	.word	0x20000044

080037c4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80037c4:	2901      	cmp	r1, #1
{
 80037c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ca:	4605      	mov	r5, r0
 80037cc:	460c      	mov	r4, r1
 80037ce:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80037d0:	d972      	bls.n	80038b8 <put_fat+0xf4>
 80037d2:	6943      	ldr	r3, [r0, #20]
 80037d4:	4299      	cmp	r1, r3
 80037d6:	d26f      	bcs.n	80038b8 <put_fat+0xf4>
		switch (fs->fs_type) {
 80037d8:	7803      	ldrb	r3, [r0, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d03f      	beq.n	800385e <put_fat+0x9a>
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d050      	beq.n	8003884 <put_fat+0xc0>
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d168      	bne.n	80038b8 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 80037e6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037ea:	6a01      	ldr	r1, [r0, #32]
 80037ec:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80037f0:	f7ff fe2f 	bl	8003452 <move_window>
 80037f4:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80037f6:	bb38      	cbnz	r0, 8003848 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 80037f8:	f105 0930 	add.w	r9, r5, #48	; 0x30
 80037fc:	f108 0a01 	add.w	sl, r8, #1
 8003800:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003804:	f014 0401 	ands.w	r4, r4, #1
 8003808:	bf1f      	itttt	ne
 800380a:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800380e:	f003 020f 	andne.w	r2, r3, #15
 8003812:	013b      	lslne	r3, r7, #4
 8003814:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003818:	bf14      	ite	ne
 800381a:	4313      	orrne	r3, r2
 800381c:	b2fb      	uxtbeq	r3, r7
 800381e:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003822:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8003824:	2301      	movs	r3, #1
 8003826:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003828:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff fe10 	bl	8003452 <move_window>
			if (res != FR_OK) break;
 8003832:	4606      	mov	r6, r0
 8003834:	b940      	cbnz	r0, 8003848 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8003836:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800383a:	b144      	cbz	r4, 800384e <put_fat+0x8a>
 800383c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8003840:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8003844:	2301      	movs	r3, #1
 8003846:	70eb      	strb	r3, [r5, #3]
}
 8003848:	4630      	mov	r0, r6
 800384a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800384e:	f819 300a 	ldrb.w	r3, [r9, sl]
 8003852:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	431f      	orrs	r7, r3
 800385c:	e7f0      	b.n	8003840 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800385e:	6a01      	ldr	r1, [r0, #32]
 8003860:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003864:	f7ff fdf5 	bl	8003452 <move_window>
			if (res != FR_OK) break;
 8003868:	4606      	mov	r6, r0
 800386a:	2800      	cmp	r0, #0
 800386c:	d1ec      	bne.n	8003848 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800386e:	0064      	lsls	r4, r4, #1
 8003870:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003874:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003878:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800387a:	551f      	strb	r7, [r3, r4]
 800387c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003880:	7057      	strb	r7, [r2, #1]
 8003882:	e7df      	b.n	8003844 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003884:	6a01      	ldr	r1, [r0, #32]
 8003886:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800388a:	f7ff fde2 	bl	8003452 <move_window>
			if (res != FR_OK) break;
 800388e:	4606      	mov	r6, r0
 8003890:	2800      	cmp	r0, #0
 8003892:	d1d9      	bne.n	8003848 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003894:	00a4      	lsls	r4, r4, #2
 8003896:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800389a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800389e:	441c      	add	r4, r3
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7ff fc59 	bl	8003158 <ld_dword>
 80038a6:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80038aa:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80038ae:	4339      	orrs	r1, r7
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7ff fc59 	bl	8003168 <st_dword>
 80038b6:	e7c5      	b.n	8003844 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 80038b8:	2602      	movs	r6, #2
 80038ba:	e7c5      	b.n	8003848 <put_fat+0x84>

080038bc <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80038bc:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80038be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c0:	4605      	mov	r5, r0
 80038c2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80038c4:	d952      	bls.n	800396c <get_fat.isra.8+0xb0>
 80038c6:	6943      	ldr	r3, [r0, #20]
 80038c8:	4299      	cmp	r1, r3
 80038ca:	d24f      	bcs.n	800396c <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 80038cc:	7803      	ldrb	r3, [r0, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d029      	beq.n	8003926 <get_fat.isra.8+0x6a>
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d038      	beq.n	8003948 <get_fat.isra.8+0x8c>
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d148      	bne.n	800396c <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 80038da:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038de:	6a01      	ldr	r1, [r0, #32]
 80038e0:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80038e4:	f7ff fdb5 	bl	8003452 <move_window>
 80038e8:	b110      	cbz	r0, 80038f0 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80038f0:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038f2:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 80038f4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80038f8:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038fa:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80038fe:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8003900:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003904:	f7ff fda5 	bl	8003452 <move_window>
 8003908:	2800      	cmp	r0, #0
 800390a:	d1ee      	bne.n	80038ea <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800390c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003910:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003912:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8003914:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003918:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800391c:	bf4c      	ite	mi
 800391e:	0900      	lsrmi	r0, r0, #4
 8003920:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003926:	6a01      	ldr	r1, [r0, #32]
 8003928:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800392c:	f7ff fd91 	bl	8003452 <move_window>
 8003930:	2800      	cmp	r0, #0
 8003932:	d1da      	bne.n	80038ea <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003934:	0064      	lsls	r4, r4, #1
 8003936:	3530      	adds	r5, #48	; 0x30
 8003938:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800393c:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800393e:	5d28      	ldrb	r0, [r5, r4]
 8003940:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003942:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003948:	6a01      	ldr	r1, [r0, #32]
 800394a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800394e:	f7ff fd80 	bl	8003452 <move_window>
 8003952:	2800      	cmp	r0, #0
 8003954:	d1c9      	bne.n	80038ea <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003956:	00a4      	lsls	r4, r4, #2
 8003958:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800395c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003960:	4420      	add	r0, r4
 8003962:	f7ff fbf9 	bl	8003158 <ld_dword>
 8003966:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800396c:	2001      	movs	r0, #1
}
 800396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003970 <create_chain>:
{
 8003970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003974:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8003976:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003978:	460f      	mov	r7, r1
 800397a:	b971      	cbnz	r1, 800399a <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800397c:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800397e:	b1f6      	cbz	r6, 80039be <create_chain+0x4e>
 8003980:	696b      	ldr	r3, [r5, #20]
 8003982:	429e      	cmp	r6, r3
 8003984:	bf28      	it	cs
 8003986:	2601      	movcs	r6, #1
 8003988:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800398a:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 800398c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800398e:	429c      	cmp	r4, r3
 8003990:	d318      	bcc.n	80039c4 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8003992:	2e01      	cmp	r6, #1
 8003994:	d815      	bhi.n	80039c2 <create_chain+0x52>
 8003996:	2400      	movs	r4, #0
 8003998:	e009      	b.n	80039ae <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800399a:	4628      	mov	r0, r5
 800399c:	f7ff ff8e 	bl	80038bc <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039a0:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80039a2:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039a4:	d937      	bls.n	8003a16 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d104      	bne.n	80039b4 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80039aa:	f04f 34ff 	mov.w	r4, #4294967295
}
 80039ae:	4620      	mov	r0, r4
 80039b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80039b4:	696b      	ldr	r3, [r5, #20]
 80039b6:	4298      	cmp	r0, r3
 80039b8:	d3f9      	bcc.n	80039ae <create_chain+0x3e>
 80039ba:	463e      	mov	r6, r7
 80039bc:	e7e4      	b.n	8003988 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80039be:	2601      	movs	r6, #1
 80039c0:	e7e2      	b.n	8003988 <create_chain+0x18>
				ncl = 2;
 80039c2:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80039c4:	4621      	mov	r1, r4
 80039c6:	f8d8 0000 	ldr.w	r0, [r8]
 80039ca:	f7ff ff77 	bl	80038bc <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80039ce:	b130      	cbz	r0, 80039de <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80039d0:	2801      	cmp	r0, #1
 80039d2:	d020      	beq.n	8003a16 <create_chain+0xa6>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d0e8      	beq.n	80039aa <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80039d8:	42b4      	cmp	r4, r6
 80039da:	d1d6      	bne.n	800398a <create_chain+0x1a>
 80039dc:	e7db      	b.n	8003996 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80039de:	f04f 32ff 	mov.w	r2, #4294967295
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f7ff feed 	bl	80037c4 <put_fat>
		if (res == FR_OK && clst != 0) {
 80039ea:	b990      	cbnz	r0, 8003a12 <create_chain+0xa2>
 80039ec:	b957      	cbnz	r7, 8003a04 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80039ee:	696a      	ldr	r2, [r5, #20]
 80039f0:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 80039f2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80039f4:	3a02      	subs	r2, #2
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d90f      	bls.n	8003a1a <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80039fa:	792b      	ldrb	r3, [r5, #4]
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	712b      	strb	r3, [r5, #4]
 8003a02:	e7d4      	b.n	80039ae <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003a04:	4622      	mov	r2, r4
 8003a06:	4639      	mov	r1, r7
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f7ff fedb 	bl	80037c4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d0ed      	beq.n	80039ee <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003a12:	2801      	cmp	r0, #1
 8003a14:	d0c9      	beq.n	80039aa <create_chain+0x3a>
 8003a16:	2401      	movs	r4, #1
 8003a18:	e7c9      	b.n	80039ae <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	612b      	str	r3, [r5, #16]
 8003a1e:	e7ec      	b.n	80039fa <create_chain+0x8a>

08003a20 <remove_chain>:
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a24:	2d01      	cmp	r5, #1
{
 8003a26:	4607      	mov	r7, r0
 8003a28:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a2a:	d801      	bhi.n	8003a30 <remove_chain+0x10>
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8003a30:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	429d      	cmp	r5, r3
 8003a36:	d2f9      	bcs.n	8003a2c <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003a38:	b12a      	cbz	r2, 8003a46 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff fec0 	bl	80037c4 <put_fat>
		if (res != FR_OK) return res;
 8003a44:	bb08      	cbnz	r0, 8003a8a <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003a46:	4629      	mov	r1, r5
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	f7ff ff37 	bl	80038bc <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003a4e:	4606      	mov	r6, r0
 8003a50:	b908      	cbnz	r0, 8003a56 <remove_chain+0x36>
	return FR_OK;
 8003a52:	2000      	movs	r0, #0
 8003a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003a56:	2801      	cmp	r0, #1
 8003a58:	d0e8      	beq.n	8003a2c <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	d014      	beq.n	8003a88 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4629      	mov	r1, r5
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff feae 	bl	80037c4 <put_fat>
			if (res != FR_OK) return res;
 8003a68:	b978      	cbnz	r0, 8003a8a <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003a6a:	6962      	ldr	r2, [r4, #20]
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	1e91      	subs	r1, r2, #2
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d205      	bcs.n	8003a80 <remove_chain+0x60>
			fs->free_clst++;
 8003a74:	3301      	adds	r3, #1
 8003a76:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8003a78:	7923      	ldrb	r3, [r4, #4]
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003a80:	4296      	cmp	r6, r2
 8003a82:	4635      	mov	r5, r6
 8003a84:	d3df      	bcc.n	8003a46 <remove_chain+0x26>
 8003a86:	e7e4      	b.n	8003a52 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003a88:	2001      	movs	r0, #1
}
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a8c <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003a8c:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003a8e:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003a90:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003a92:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003a94:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003a96:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003a98:	b992      	cbnz	r2, 8003ac0 <dir_sdi.constprop.11+0x34>
 8003a9a:	7823      	ldrb	r3, [r4, #0]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8003aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003aa2:	b973      	cbnz	r3, 8003ac2 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003aa4:	8923      	ldrh	r3, [r4, #8]
 8003aa6:	b90b      	cbnz	r3, 8003aac <dir_sdi.constprop.11+0x20>
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aae:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8003ab0:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8003ab2:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f7      	beq.n	8003aa8 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003ab8:	3430      	adds	r4, #48	; 0x30
 8003aba:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003abc:	2000      	movs	r0, #0
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ac0:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003ac2:	8961      	ldrh	r1, [r4, #10]
 8003ac4:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003ac6:	b961      	cbnz	r1, 8003ae2 <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003ac8:	4611      	mov	r1, r2
 8003aca:	6828      	ldr	r0, [r5, #0]
 8003acc:	f7ff fef6 	bl	80038bc <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ad0:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003ad2:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ad4:	d00b      	beq.n	8003aee <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003ad6:	2801      	cmp	r0, #1
 8003ad8:	d9e6      	bls.n	8003aa8 <dir_sdi.constprop.11+0x1c>
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	4298      	cmp	r0, r3
 8003ade:	d3f3      	bcc.n	8003ac8 <dir_sdi.constprop.11+0x3c>
 8003ae0:	e7e2      	b.n	8003aa8 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f7ff fbcf 	bl	8003288 <clust2sect>
 8003aea:	61e8      	str	r0, [r5, #28]
 8003aec:	e7e0      	b.n	8003ab0 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003aee:	2001      	movs	r0, #1
}
 8003af0:	bd38      	pop	{r3, r4, r5, pc}

08003af2 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003af2:	69c3      	ldr	r3, [r0, #28]
{
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4605      	mov	r5, r0
 8003afa:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003afc:	b1ab      	cbz	r3, 8003b2a <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003afe:	6942      	ldr	r2, [r0, #20]
 8003b00:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b04:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8003b08:	d20f      	bcs.n	8003b2a <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003b0a:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8003b0e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003b10:	f1b9 0f00 	cmp.w	r9, #0
 8003b14:	d14f      	bne.n	8003bb6 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8003b16:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8003b1c:	b941      	cbnz	r1, 8003b30 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003b1e:	8923      	ldrh	r3, [r4, #8]
 8003b20:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8003b24:	d847      	bhi.n	8003bb6 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b2a:	2004      	movs	r0, #4
 8003b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003b30:	8963      	ldrh	r3, [r4, #10]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8003b38:	d13d      	bne.n	8003bb6 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7ff febe 	bl	80038bc <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003b40:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003b42:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003b44:	d802      	bhi.n	8003b4c <dir_next+0x5a>
 8003b46:	2002      	movs	r0, #2
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003b4c:	1c42      	adds	r2, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <dir_next+0x64>
 8003b50:	2001      	movs	r0, #1
 8003b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003b56:	6963      	ldr	r3, [r4, #20]
 8003b58:	4298      	cmp	r0, r3
 8003b5a:	d326      	bcc.n	8003baa <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8003b5c:	2f00      	cmp	r7, #0
 8003b5e:	d0e2      	beq.n	8003b26 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003b60:	69a9      	ldr	r1, [r5, #24]
 8003b62:	4628      	mov	r0, r5
 8003b64:	f7ff ff04 	bl	8003970 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003b68:	4606      	mov	r6, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d037      	beq.n	8003bde <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003b6e:	2801      	cmp	r0, #1
 8003b70:	d0e9      	beq.n	8003b46 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d0ec      	beq.n	8003b50 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7ff fc1a 	bl	80033b0 <sync_window>
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d1e6      	bne.n	8003b50 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003b82:	4601      	mov	r1, r0
 8003b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b88:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003b8c:	f7ff faf4 	bl	8003178 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003b90:	4631      	mov	r1, r6
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff fb78 	bl	8003288 <clust2sect>
						fs->wflag = 1;
 8003b98:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003b9c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003b9e:	8963      	ldrh	r3, [r4, #10]
 8003ba0:	429f      	cmp	r7, r3
 8003ba2:	d310      	bcc.n	8003bc6 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8003ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ba6:	1bdf      	subs	r7, r3, r7
 8003ba8:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8003baa:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003bac:	4631      	mov	r1, r6
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff fb6a 	bl	8003288 <clust2sect>
 8003bb4:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003bb6:	3430      	adds	r4, #48	; 0x30
 8003bb8:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8003bba:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003bbe:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8003bc6:	f884 a003 	strb.w	sl, [r4, #3]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff fbcd 	bl	800336a <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d1bd      	bne.n	8003b50 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003bd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	3701      	adds	r7, #1
 8003bda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bdc:	e7df      	b.n	8003b9e <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003bde:	2007      	movs	r0, #7
}
 8003be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003be4 <follow_path>:
{
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8003be8:	6807      	ldr	r7, [r0, #0]
{
 8003bea:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003bec:	780b      	ldrb	r3, [r1, #0]
 8003bee:	2b2f      	cmp	r3, #47	; 0x2f
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	f101 0101 	add.w	r1, r1, #1
 8003bf6:	d0f9      	beq.n	8003bec <follow_path+0x8>
 8003bf8:	2b5c      	cmp	r3, #92	; 0x5c
 8003bfa:	d0f7      	beq.n	8003bec <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c00:	782b      	ldrb	r3, [r5, #0]
 8003c02:	2b1f      	cmp	r3, #31
 8003c04:	d959      	bls.n	8003cba <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003c06:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003d64 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8003c0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8003c0e:	220b      	movs	r2, #11
 8003c10:	2120      	movs	r1, #32
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7ff fab0 	bl	8003178 <mem_set>
	si = i = 0; ni = 8;
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f105 3eff 	add.w	lr, r5, #4294967295
 8003c1e:	4611      	mov	r1, r2
 8003c20:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8003c22:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c26:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8003c28:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c2c:	d90b      	bls.n	8003c46 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8003c30:	d14b      	bne.n	8003cca <follow_path+0xe6>
 8003c32:	1868      	adds	r0, r5, r1
 8003c34:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c36:	f810 eb01 	ldrb.w	lr, [r0], #1
 8003c3a:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8003c3e:	d0f9      	beq.n	8003c34 <follow_path+0x50>
 8003c40:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8003c44:	d0f6      	beq.n	8003c34 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8003c46:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	d054      	beq.n	8003cf6 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c4c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8003c50:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c54:	2ae5      	cmp	r2, #229	; 0xe5
 8003c56:	bf04      	itt	eq
 8003c58:	2205      	moveq	r2, #5
 8003c5a:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003c5e:	2b21      	cmp	r3, #33	; 0x21
 8003c60:	bf34      	ite	cc
 8003c62:	2304      	movcc	r3, #4
 8003c64:	2300      	movcs	r3, #0
 8003c66:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff ff0e 	bl	8003a8c <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d145      	bne.n	8003d00 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8003c74:	69e1      	ldr	r1, [r4, #28]
 8003c76:	4648      	mov	r0, r9
 8003c78:	f7ff fbeb 	bl	8003452 <move_window>
		if (res != FR_OK) break;
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d13f      	bne.n	8003d00 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8003c80:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	d046      	beq.n	8003d16 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003c88:	7ada      	ldrb	r2, [r3, #11]
 8003c8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c8e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003c90:	7ada      	ldrb	r2, [r3, #11]
 8003c92:	0711      	lsls	r1, r2, #28
 8003c94:	d40c      	bmi.n	8003cb0 <follow_path+0xcc>
 8003c96:	f103 0e0b 	add.w	lr, r3, #11
 8003c9a:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8003c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca0:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8003ca4:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8003ca6:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8003caa:	d027      	beq.n	8003cfc <follow_path+0x118>
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d0f5      	beq.n	8003c9c <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff ff1d 	bl	8003af2 <dir_next>
 8003cb8:	e7da      	b.n	8003c70 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003cc0:	4620      	mov	r0, r4
}
 8003cc2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8003cc6:	f7ff bee1 	b.w	8003a8c <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003cca:	2b5c      	cmp	r3, #92	; 0x5c
 8003ccc:	d0b1      	beq.n	8003c32 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003cce:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd0:	d036      	beq.n	8003d40 <follow_path+0x15c>
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d90f      	bls.n	8003cf6 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8003cd6:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003cda:	bf18      	it	ne
 8003cdc:	3b80      	subne	r3, #128	; 0x80
 8003cde:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003d68 <follow_path+0x184>
 8003ce2:	bf18      	it	ne
 8003ce4:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8003ce8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8003cec:	f1bc 0f00 	cmp.w	ip, #0
 8003cf0:	d02b      	beq.n	8003d4a <follow_path+0x166>
 8003cf2:	4563      	cmp	r3, ip
 8003cf4:	d1f8      	bne.n	8003ce8 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003cf6:	2006      	movs	r0, #6
	return res;
 8003cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	d1d7      	bne.n	8003cb0 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8003d00:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003d04:	b148      	cbz	r0, 8003d1a <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003d06:	2804      	cmp	r0, #4
 8003d08:	d129      	bne.n	8003d5e <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003d0a:	f013 0f04 	tst.w	r3, #4
 8003d0e:	bf08      	it	eq
 8003d10:	2005      	moveq	r0, #5
 8003d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003d16:	2004      	movs	r0, #4
 8003d18:	e7f2      	b.n	8003d00 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d1a:	075a      	lsls	r2, r3, #29
 8003d1c:	d41f      	bmi.n	8003d5e <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003d1e:	79a3      	ldrb	r3, [r4, #6]
 8003d20:	06db      	lsls	r3, r3, #27
 8003d22:	d50a      	bpl.n	8003d3a <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003d24:	6963      	ldr	r3, [r4, #20]
 8003d26:	7838      	ldrb	r0, [r7, #0]
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003d30:	4419      	add	r1, r3
 8003d32:	f7ff fb00 	bl	8003336 <ld_clust.isra.1>
 8003d36:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d38:	e767      	b.n	8003c0a <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003d3a:	2005      	movs	r0, #5
 8003d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003d40:	280b      	cmp	r0, #11
 8003d42:	d0d8      	beq.n	8003cf6 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8003d44:	2208      	movs	r2, #8
 8003d46:	200b      	movs	r0, #11
 8003d48:	e76b      	b.n	8003c22 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003d4a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8003d4e:	f1bc 0f19 	cmp.w	ip, #25
 8003d52:	d801      	bhi.n	8003d58 <follow_path+0x174>
 8003d54:	3b20      	subs	r3, #32
 8003d56:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003d58:	54b3      	strb	r3, [r6, r2]
 8003d5a:	3201      	adds	r2, #1
 8003d5c:	e761      	b.n	8003c22 <follow_path+0x3e>
}
 8003d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d62:	bf00      	nop
 8003d64:	080097a0 	.word	0x080097a0
 8003d68:	0800981f 	.word	0x0800981f

08003d6c <dir_read.constprop.9>:
FRESULT dir_read (
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003d70:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8003d72:	2004      	movs	r0, #4
	while (dp->sect) {
 8003d74:	69e1      	ldr	r1, [r4, #28]
 8003d76:	b909      	cbnz	r1, 8003d7c <dir_read.constprop.9+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003d78:	b1a8      	cbz	r0, 8003da6 <dir_read.constprop.9+0x3a>
 8003d7a:	e01c      	b.n	8003db6 <dir_read.constprop.9+0x4a>
		res = move_window(fs, dp->sect);
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff fb68 	bl	8003452 <move_window>
		if (res != FR_OK) break;
 8003d82:	b9c0      	cbnz	r0, 8003db6 <dir_read.constprop.9+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8003d84:	6a23      	ldr	r3, [r4, #32]
 8003d86:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8003d88:	b1c2      	cbz	r2, 8003dbc <dir_read.constprop.9+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003d8a:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003d8c:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d92:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003d94:	d009      	beq.n	8003daa <dir_read.constprop.9+0x3e>
 8003d96:	2a2e      	cmp	r2, #46	; 0x2e
 8003d98:	d007      	beq.n	8003daa <dir_read.constprop.9+0x3e>
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d005      	beq.n	8003daa <dir_read.constprop.9+0x3e>
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d001      	beq.n	8003daa <dir_read.constprop.9+0x3e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003da6:	2000      	movs	r0, #0
 8003da8:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8003daa:	2100      	movs	r1, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff fea0 	bl	8003af2 <dir_next>
		if (res != FR_OK) break;
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d0de      	beq.n	8003d74 <dir_read.constprop.9+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003db6:	2300      	movs	r3, #0
 8003db8:	61e3      	str	r3, [r4, #28]
}
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003dbc:	2004      	movs	r0, #4
 8003dbe:	e7fa      	b.n	8003db6 <dir_read.constprop.9+0x4a>

08003dc0 <dir_register>:
{
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003dc4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8003dc6:	f7ff fe61 	bl	8003a8c <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8003dca:	4604      	mov	r4, r0
 8003dcc:	bb28      	cbnz	r0, 8003e1a <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8003dce:	69e9      	ldr	r1, [r5, #28]
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f7ff fb3e 	bl	8003452 <move_window>
			if (res != FR_OK) break;
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	b9f8      	cbnz	r0, 8003e1a <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003dda:	6a2b      	ldr	r3, [r5, #32]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2be5      	cmp	r3, #229	; 0xe5
 8003de0:	d114      	bne.n	8003e0c <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8003de2:	69e9      	ldr	r1, [r5, #28]
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7ff fb34 	bl	8003452 <move_window>
		if (res == FR_OK) {
 8003dea:	4604      	mov	r4, r0
 8003dec:	b960      	cbnz	r0, 8003e08 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003dee:	4601      	mov	r1, r0
 8003df0:	2220      	movs	r2, #32
 8003df2:	6a28      	ldr	r0, [r5, #32]
 8003df4:	f7ff f9c0 	bl	8003178 <mem_set>
 8003df8:	220b      	movs	r2, #11
 8003dfa:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003dfe:	6a28      	ldr	r0, [r5, #32]
 8003e00:	f7ff fa90 	bl	8003324 <mem_cpy.part.0>
			fs->wflag = 1;
 8003e04:	2301      	movs	r3, #1
 8003e06:	70f3      	strb	r3, [r6, #3]
}
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0e8      	beq.n	8003de2 <dir_register+0x22>
			res = dir_next(dp, 1);
 8003e10:	2101      	movs	r1, #1
 8003e12:	4628      	mov	r0, r5
 8003e14:	f7ff fe6d 	bl	8003af2 <dir_next>
 8003e18:	e7d7      	b.n	8003dca <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e1a:	2c04      	cmp	r4, #4
 8003e1c:	bf08      	it	eq
 8003e1e:	2407      	moveq	r4, #7
 8003e20:	e7f2      	b.n	8003e08 <dir_register+0x48>
	...

08003e24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003e26:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003e28:	a804      	add	r0, sp, #16
{
 8003e2a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003e2c:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003e30:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003e32:	f7ff fa45 	bl	80032c0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e36:	1e05      	subs	r5, r0, #0
 8003e38:	db1f      	blt.n	8003e7a <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003e3a:	4912      	ldr	r1, [pc, #72]	; (8003e84 <f_mount+0x60>)
 8003e3c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8003e40:	b15c      	cbz	r4, 8003e5a <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <f_mount+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4294      	cmp	r4, r2
 8003e48:	bf04      	itt	eq
 8003e4a:	2200      	moveq	r2, #0
 8003e4c:	601a      	streq	r2, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	2000      	movs	r0, #0
 8003e52:	4294      	cmp	r4, r2
 8003e54:	bf08      	it	eq
 8003e56:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003e58:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8003e5a:	9801      	ldr	r0, [sp, #4]
 8003e5c:	b108      	cbz	r0, 8003e62 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8003e5e:	2300      	movs	r3, #0
 8003e60:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003e62:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003e66:	b130      	cbz	r0, 8003e76 <f_mount+0x52>
 8003e68:	2e01      	cmp	r6, #1
 8003e6a:	d108      	bne.n	8003e7e <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	a901      	add	r1, sp, #4
 8003e70:	4668      	mov	r0, sp
 8003e72:	f7ff fb49 	bl	8003508 <find_volume>
	LEAVE_FF(fs, res);
}
 8003e76:	b004      	add	sp, #16
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e7a:	200b      	movs	r0, #11
 8003e7c:	e7fb      	b.n	8003e76 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e7f9      	b.n	8003e76 <f_mount+0x52>
 8003e82:	bf00      	nop
 8003e84:	20000040 	.word	0x20000040
 8003e88:	20000044 	.word	0x20000044

08003e8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	b090      	sub	sp, #64	; 0x40
 8003e92:	4690      	mov	r8, r2
 8003e94:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003e96:	4604      	mov	r4, r0
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f000 80ce 	beq.w	800403a <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003e9e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	a903      	add	r1, sp, #12
 8003ea6:	a801      	add	r0, sp, #4
 8003ea8:	f7ff fb2e 	bl	8003508 <find_volume>
	if (res == FR_OK) {
 8003eac:	4607      	mov	r7, r0
 8003eae:	bb38      	cbnz	r0, 8003f00 <f_open+0x74>
		dj.obj.fs = fs;
 8003eb0:	ae10      	add	r6, sp, #64	; 0x40
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003eb8:	9901      	ldr	r1, [sp, #4]
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff fe92 	bl	8003be4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003ec0:	b958      	cbnz	r0, 8003eda <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003ec2:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db1e      	blt.n	8003f08 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003eca:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8003ece:	bf14      	ite	ne
 8003ed0:	2101      	movne	r1, #1
 8003ed2:	2100      	moveq	r1, #0
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7ff f955 	bl	8003184 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003eda:	f018 0f1c 	tst.w	r8, #28
 8003ede:	d073      	beq.n	8003fc8 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8003ee0:	b1a0      	cbz	r0, 8003f0c <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003ee2:	2804      	cmp	r0, #4
 8003ee4:	d109      	bne.n	8003efa <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ee6:	4b71      	ldr	r3, [pc, #452]	; (80040ac <f_open+0x220>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2a00      	cmp	r2, #0
 8003eec:	f000 80da 	beq.w	80040a4 <f_open+0x218>
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80d6 	beq.w	80040a4 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003ef8:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003efa:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003efe:	b170      	cbz	r0, 8003f1e <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003f00:	2300      	movs	r3, #0
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	4607      	mov	r7, r0
 8003f06:	e092      	b.n	800402e <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8003f08:	2006      	movs	r0, #6
 8003f0a:	e7e6      	b.n	8003eda <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003f0c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003f10:	f013 0f11 	tst.w	r3, #17
 8003f14:	d163      	bne.n	8003fde <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003f16:	f018 0f04 	tst.w	r8, #4
 8003f1a:	f040 80bd 	bne.w	8004098 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003f1e:	0728      	lsls	r0, r5, #28
 8003f20:	d53c      	bpl.n	8003f9c <f_open+0x110>
				dw = GET_FATTIME();
 8003f22:	f000 fe6d 	bl	8004c00 <get_fattime>
 8003f26:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003f28:	4601      	mov	r1, r0
 8003f2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f2c:	300e      	adds	r0, #14
 8003f2e:	f7ff f91b 	bl	8003168 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003f32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f34:	4611      	mov	r1, r2
 8003f36:	3016      	adds	r0, #22
 8003f38:	f7ff f916 	bl	8003168 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003f42:	2220      	movs	r2, #32
 8003f44:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f4a:	f899 0000 	ldrb.w	r0, [r9]
 8003f4e:	4651      	mov	r1, sl
 8003f50:	f7ff f9f1 	bl	8003336 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003f54:	2200      	movs	r2, #0
 8003f56:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f58:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003f5a:	4648      	mov	r0, r9
 8003f5c:	f7ff f9f9 	bl	8003352 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003f62:	2200      	movs	r2, #0
 8003f64:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f66:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f68:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003f6a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003f72:	f1b8 0f00 	cmp.w	r8, #0
 8003f76:	d011      	beq.n	8003f9c <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8003f78:	4641      	mov	r1, r8
 8003f7a:	4630      	mov	r0, r6
						dw = fs->winsect;
 8003f7c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8003f80:	f7ff fd4e 	bl	8003a20 <remove_chain>
						if (res == FR_OK) {
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d1bb      	bne.n	8003f00 <f_open+0x74>
							res = move_window(fs, dw);
 8003f88:	4649      	mov	r1, r9
 8003f8a:	9803      	ldr	r0, [sp, #12]
 8003f8c:	f7ff fa61 	bl	8003452 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003f90:	9a03      	ldr	r2, [sp, #12]
 8003f92:	f108 33ff 	add.w	r3, r8, #4294967295
 8003f96:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d1b1      	bne.n	8003f00 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003f9c:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003f9e:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8003fa4:	bf48      	it	mi
 8003fa6:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003faa:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8003fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fb0:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003fb2:	bf14      	ite	ne
 8003fb4:	2101      	movne	r1, #1
 8003fb6:	2100      	moveq	r1, #0
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f7ff f911 	bl	80031e0 <inc_lock>
 8003fbe:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d13c      	bne.n	800403e <f_open+0x1b2>
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	e79b      	b.n	8003f00 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d199      	bne.n	8003f00 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003fcc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003fd0:	06da      	lsls	r2, r3, #27
 8003fd2:	d463      	bmi.n	800409c <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003fd4:	f018 0f02 	tst.w	r8, #2
 8003fd8:	d0e0      	beq.n	8003f9c <f_open+0x110>
 8003fda:	07db      	lsls	r3, r3, #31
 8003fdc:	d5de      	bpl.n	8003f9c <f_open+0x110>
					res = FR_DENIED;
 8003fde:	2007      	movs	r0, #7
 8003fe0:	e78e      	b.n	8003f00 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	f7ff fc6a 	bl	80038bc <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8003fe8:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003fea:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003fec:	d923      	bls.n	8004036 <f_open+0x1aa>
 8003fee:	1c42      	adds	r2, r0, #1
 8003ff0:	4250      	negs	r0, r2
 8003ff2:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ff4:	eba5 0508 	sub.w	r5, r5, r8
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d049      	beq.n	8004090 <f_open+0x204>
				fp->clust = clst;
 8003ffc:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f47f af7e 	bne.w	8003f00 <f_open+0x74>
 8004004:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004008:	b18b      	cbz	r3, 800402e <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800400a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff f93a 	bl	8003288 <clust2sect>
 8004014:	2800      	cmp	r0, #0
 8004016:	d0d5      	beq.n	8003fc4 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004018:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800401c:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800401e:	2301      	movs	r3, #1
 8004020:	4631      	mov	r1, r6
 8004022:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004026:	f7ff f86d 	bl	8003104 <disk_read>
 800402a:	2800      	cmp	r0, #0
 800402c:	d138      	bne.n	80040a0 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 800402e:	4638      	mov	r0, r7
 8004030:	b010      	add	sp, #64	; 0x40
 8004032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8004036:	2002      	movs	r0, #2
 8004038:	e7dc      	b.n	8003ff4 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 800403a:	2709      	movs	r7, #9
 800403c:	e7f7      	b.n	800402e <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800403e:	9e03      	ldr	r6, [sp, #12]
 8004040:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004044:	7830      	ldrb	r0, [r6, #0]
 8004046:	4641      	mov	r1, r8
 8004048:	f7ff f975 	bl	8003336 <ld_clust.isra.1>
 800404c:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800404e:	f108 001c 	add.w	r0, r8, #28
 8004052:	f7ff f881 	bl	8003158 <ld_dword>
			fp->obj.id = fs->id;
 8004056:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004058:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800405a:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800405c:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004060:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8004062:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004064:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8004066:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004068:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800406a:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800406c:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800406e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff f880 	bl	8003178 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004078:	06ab      	lsls	r3, r5, #26
 800407a:	d5d8      	bpl.n	800402e <f_open+0x1a2>
 800407c:	68e5      	ldr	r5, [r4, #12]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d0d5      	beq.n	800402e <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004082:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004084:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004086:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800408a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800408c:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004090:	45a8      	cmp	r8, r5
 8004092:	d3a6      	bcc.n	8003fe2 <f_open+0x156>
 8004094:	2000      	movs	r0, #0
 8004096:	e7b1      	b.n	8003ffc <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004098:	2008      	movs	r0, #8
 800409a:	e731      	b.n	8003f00 <f_open+0x74>
					res = FR_NO_FILE;
 800409c:	2004      	movs	r0, #4
 800409e:	e72f      	b.n	8003f00 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80040a0:	2001      	movs	r0, #1
 80040a2:	e72d      	b.n	8003f00 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff fe8b 	bl	8003dc0 <dir_register>
 80040aa:	e726      	b.n	8003efa <f_open+0x6e>
 80040ac:	20000044 	.word	0x20000044

080040b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	469b      	mov	fp, r3
 80040b6:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80040b8:	2300      	movs	r3, #0
{
 80040ba:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 80040bc:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80040c0:	a903      	add	r1, sp, #12
{
 80040c2:	4604      	mov	r4, r0
 80040c4:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80040c6:	f7ff f913 	bl	80032f0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80040ca:	4606      	mov	r6, r0
 80040cc:	bb00      	cbnz	r0, 8004110 <f_read+0x60>
 80040ce:	7d66      	ldrb	r6, [r4, #21]
 80040d0:	b9f6      	cbnz	r6, 8004110 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80040d2:	7d23      	ldrb	r3, [r4, #20]
 80040d4:	07da      	lsls	r2, r3, #31
 80040d6:	f140 8096 	bpl.w	8004206 <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 80040da:	68e3      	ldr	r3, [r4, #12]
 80040dc:	69a7      	ldr	r7, [r4, #24]
 80040de:	1bdf      	subs	r7, r3, r7
 80040e0:	42af      	cmp	r7, r5
 80040e2:	bf28      	it	cs
 80040e4:	462f      	movcs	r7, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80040e6:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 80040ea:	b18f      	cbz	r7, 8004110 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80040ec:	69a1      	ldr	r1, [r4, #24]
 80040ee:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d179      	bne.n	80041ea <f_read+0x13a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	895b      	ldrh	r3, [r3, #10]
 80040fa:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80040fc:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	d119      	bne.n	8004138 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004104:	b941      	cbnz	r1, 8004118 <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004106:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004108:	2801      	cmp	r0, #1
 800410a:	d810      	bhi.n	800412e <f_read+0x7e>
 800410c:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800410e:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8004110:	4630      	mov	r0, r6
 8004112:	b005      	add	sp, #20
 8004114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8004118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800411a:	b11b      	cbz	r3, 8004124 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800411c:	4620      	mov	r0, r4
 800411e:	f7ff f8be 	bl	800329e <clmt_clust>
 8004122:	e7f1      	b.n	8004108 <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004124:	69e1      	ldr	r1, [r4, #28]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	f7ff fbc8 	bl	80038bc <get_fat.isra.8>
 800412c:	e7ec      	b.n	8004108 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d101      	bne.n	8004136 <f_read+0x86>
 8004132:	2601      	movs	r6, #1
 8004134:	e7eb      	b.n	800410e <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8004136:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	69e1      	ldr	r1, [r4, #28]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f8a2 	bl	8003288 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004144:	2800      	cmp	r0, #0
 8004146:	d0e1      	beq.n	800410c <f_read+0x5c>
			sect += csect;
 8004148:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800414a:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800414c:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004150:	d02d      	beq.n	80041ae <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004152:	9b00      	ldr	r3, [sp, #0]
 8004154:	9a01      	ldr	r2, [sp, #4]
 8004156:	895b      	ldrh	r3, [r3, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004158:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800415a:	442a      	add	r2, r5
 800415c:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800415e:	bf88      	it	hi
 8004160:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004162:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8004164:	bf88      	it	hi
 8004166:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004168:	462b      	mov	r3, r5
 800416a:	4642      	mov	r2, r8
 800416c:	4649      	mov	r1, r9
 800416e:	f7fe ffc9 	bl	8003104 <disk_read>
 8004172:	2800      	cmp	r0, #0
 8004174:	d1dd      	bne.n	8004132 <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004176:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	da0b      	bge.n	8004196 <f_read+0xe6>
 800417e:	6a20      	ldr	r0, [r4, #32]
 8004180:	eba0 0008 	sub.w	r0, r0, r8
 8004184:	4285      	cmp	r5, r0
 8004186:	d906      	bls.n	8004196 <f_read+0xe6>
 8004188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418c:	4651      	mov	r1, sl
 800418e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8004192:	f7ff f8c7 	bl	8003324 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004196:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004198:	69a3      	ldr	r3, [r4, #24]
 800419a:	442b      	add	r3, r5
 800419c:	61a3      	str	r3, [r4, #24]
 800419e:	f8db 3000 	ldr.w	r3, [fp]
 80041a2:	442b      	add	r3, r5
 80041a4:	44a9      	add	r9, r5
 80041a6:	f8cb 3000 	str.w	r3, [fp]
 80041aa:	1b7f      	subs	r7, r7, r5
 80041ac:	e79d      	b.n	80040ea <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80041ae:	6a22      	ldr	r2, [r4, #32]
 80041b0:	4590      	cmp	r8, r2
 80041b2:	d018      	beq.n	80041e6 <f_read+0x136>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80041b4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da0b      	bge.n	80041d4 <f_read+0x124>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80041bc:	9800      	ldr	r0, [sp, #0]
 80041be:	2301      	movs	r3, #1
 80041c0:	4651      	mov	r1, sl
 80041c2:	7840      	ldrb	r0, [r0, #1]
 80041c4:	f7fe ffac 	bl	8003120 <disk_write>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d1b2      	bne.n	8004132 <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 80041cc:	7d23      	ldrb	r3, [r4, #20]
 80041ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d2:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80041d4:	9803      	ldr	r0, [sp, #12]
 80041d6:	2301      	movs	r3, #1
 80041d8:	4642      	mov	r2, r8
 80041da:	4651      	mov	r1, sl
 80041dc:	7840      	ldrb	r0, [r0, #1]
 80041de:	f7fe ff91 	bl	8003104 <disk_read>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1a5      	bne.n	8004132 <f_read+0x82>
			fp->sect = sect;
 80041e6:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80041ea:	69a1      	ldr	r1, [r4, #24]
 80041ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80041f0:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 80041f4:	42bd      	cmp	r5, r7
 80041f6:	bf28      	it	cs
 80041f8:	463d      	movcs	r5, r7
 80041fa:	462a      	mov	r2, r5
 80041fc:	4451      	add	r1, sl
 80041fe:	4648      	mov	r0, r9
 8004200:	f7ff f890 	bl	8003324 <mem_cpy.part.0>
 8004204:	e7c8      	b.n	8004198 <f_read+0xe8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004206:	2607      	movs	r6, #7
 8004208:	e782      	b.n	8004110 <f_read+0x60>

0800420a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800420a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420e:	469b      	mov	fp, r3
 8004210:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004212:	2300      	movs	r3, #0
{
 8004214:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004216:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800421a:	a903      	add	r1, sp, #12
{
 800421c:	4604      	mov	r4, r0
 800421e:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004220:	f7ff f866 	bl	80032f0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004224:	4606      	mov	r6, r0
 8004226:	bb58      	cbnz	r0, 8004280 <f_write+0x76>
 8004228:	7d66      	ldrb	r6, [r4, #21]
 800422a:	bb4e      	cbnz	r6, 8004280 <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800422c:	7d23      	ldrb	r3, [r4, #20]
 800422e:	079a      	lsls	r2, r3, #30
 8004230:	f140 80ae 	bpl.w	8004390 <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004234:	69a3      	ldr	r3, [r4, #24]
 8004236:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004238:	bf28      	it	cs
 800423a:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800423c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8004240:	b1d7      	cbz	r7, 8004278 <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004242:	69a1      	ldr	r1, [r4, #24]
 8004244:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 808f 	bne.w	800436c <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	895b      	ldrh	r3, [r3, #10]
 8004252:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8004254:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	d124      	bne.n	80042a6 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800425c:	b931      	cbnz	r1, 800426c <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800425e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004260:	b9a0      	cbnz	r0, 800428c <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004262:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff fb83 	bl	8003970 <create_chain>
 800426a:	e004      	b.n	8004276 <f_write+0x6c>
					if (fp->cltbl) {
 800426c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800426e:	b15b      	cbz	r3, 8004288 <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004270:	4620      	mov	r0, r4
 8004272:	f7ff f814 	bl	800329e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004276:	b948      	cbnz	r0, 800428c <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004278:	7d23      	ldrb	r3, [r4, #20]
 800427a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427e:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8004280:	4630      	mov	r0, r6
 8004282:	b005      	add	sp, #20
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004288:	69e1      	ldr	r1, [r4, #28]
 800428a:	e7eb      	b.n	8004264 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800428c:	2801      	cmp	r0, #1
 800428e:	d102      	bne.n	8004296 <f_write+0x8c>
 8004290:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004292:	7566      	strb	r6, [r4, #21]
 8004294:	e7f4      	b.n	8004280 <f_write+0x76>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d101      	bne.n	800429e <f_write+0x94>
 800429a:	2601      	movs	r6, #1
 800429c:	e7f9      	b.n	8004292 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800429e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80042a0:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80042a2:	b903      	cbnz	r3, 80042a6 <f_write+0x9c>
 80042a4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80042a6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da0c      	bge.n	80042c8 <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042ae:	9803      	ldr	r0, [sp, #12]
 80042b0:	6a22      	ldr	r2, [r4, #32]
 80042b2:	7840      	ldrb	r0, [r0, #1]
 80042b4:	2301      	movs	r3, #1
 80042b6:	4651      	mov	r1, sl
 80042b8:	f7fe ff32 	bl	8003120 <disk_write>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1ec      	bne.n	800429a <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 80042c0:	7d23      	ldrb	r3, [r4, #20]
 80042c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c6:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	69e1      	ldr	r1, [r4, #28]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe ffda 	bl	8003288 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d0db      	beq.n	8004290 <f_write+0x86>
			sect += csect;
 80042d8:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80042da:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80042dc:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80042e0:	d032      	beq.n	8004348 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80042e2:	9b00      	ldr	r3, [sp, #0]
 80042e4:	9a01      	ldr	r2, [sp, #4]
 80042e6:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042e8:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80042ea:	442a      	add	r2, r5
 80042ec:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80042ee:	bf88      	it	hi
 80042f0:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042f2:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 80042f4:	bf88      	it	hi
 80042f6:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042f8:	462b      	mov	r3, r5
 80042fa:	4642      	mov	r2, r8
 80042fc:	4649      	mov	r1, r9
 80042fe:	f7fe ff0f 	bl	8003120 <disk_write>
 8004302:	2800      	cmp	r0, #0
 8004304:	d1c9      	bne.n	800429a <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004306:	6a21      	ldr	r1, [r4, #32]
 8004308:	eba1 0108 	sub.w	r1, r1, r8
 800430c:	428d      	cmp	r5, r1
 800430e:	d90a      	bls.n	8004326 <f_write+0x11c>
 8004310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004314:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004318:	4650      	mov	r0, sl
 800431a:	f7ff f803 	bl	8003324 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800431e:	7d23      	ldrb	r3, [r4, #20]
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004326:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004328:	69a3      	ldr	r3, [r4, #24]
 800432a:	68e2      	ldr	r2, [r4, #12]
 800432c:	442b      	add	r3, r5
 800432e:	61a3      	str	r3, [r4, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	bf2c      	ite	cs
 8004334:	60e2      	strcs	r2, [r4, #12]
 8004336:	60e3      	strcc	r3, [r4, #12]
 8004338:	f8db 3000 	ldr.w	r3, [fp]
 800433c:	442b      	add	r3, r5
 800433e:	44a9      	add	r9, r5
 8004340:	f8cb 3000 	str.w	r3, [fp]
 8004344:	1b7f      	subs	r7, r7, r5
 8004346:	e77b      	b.n	8004240 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004348:	6a23      	ldr	r3, [r4, #32]
 800434a:	4598      	cmp	r8, r3
 800434c:	d00c      	beq.n	8004368 <f_write+0x15e>
 800434e:	69a2      	ldr	r2, [r4, #24]
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	429a      	cmp	r2, r3
 8004354:	d208      	bcs.n	8004368 <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004356:	9800      	ldr	r0, [sp, #0]
 8004358:	2301      	movs	r3, #1
 800435a:	4642      	mov	r2, r8
 800435c:	4651      	mov	r1, sl
 800435e:	7840      	ldrb	r0, [r0, #1]
 8004360:	f7fe fed0 	bl	8003104 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8004364:	2800      	cmp	r0, #0
 8004366:	d198      	bne.n	800429a <f_write+0x90>
			fp->sect = sect;
 8004368:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800436c:	69a0      	ldr	r0, [r4, #24]
 800436e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004372:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004376:	42bd      	cmp	r5, r7
 8004378:	bf28      	it	cs
 800437a:	463d      	movcs	r5, r7
 800437c:	462a      	mov	r2, r5
 800437e:	4649      	mov	r1, r9
 8004380:	4450      	add	r0, sl
 8004382:	f7fe ffcf 	bl	8003324 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004386:	7d23      	ldrb	r3, [r4, #20]
 8004388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800438c:	7523      	strb	r3, [r4, #20]
 800438e:	e7cb      	b.n	8004328 <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004390:	2607      	movs	r6, #7
 8004392:	e775      	b.n	8004280 <f_write+0x76>

08004394 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004396:	a901      	add	r1, sp, #4
{
 8004398:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800439a:	f7fe ffa9 	bl	80032f0 <validate>
	if (res == FR_OK) {
 800439e:	4605      	mov	r5, r0
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d13a      	bne.n	800441a <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80043a4:	7d23      	ldrb	r3, [r4, #20]
 80043a6:	065a      	lsls	r2, r3, #25
 80043a8:	d537      	bpl.n	800441a <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	d50c      	bpl.n	80043c8 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80043ae:	9801      	ldr	r0, [sp, #4]
 80043b0:	6a22      	ldr	r2, [r4, #32]
 80043b2:	7840      	ldrb	r0, [r0, #1]
 80043b4:	2301      	movs	r3, #1
 80043b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80043ba:	f7fe feb1 	bl	8003120 <disk_write>
 80043be:	bb78      	cbnz	r0, 8004420 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80043c0:	7d23      	ldrb	r3, [r4, #20]
 80043c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c6:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80043c8:	f000 fc1a 	bl	8004c00 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80043cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80043ce:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80043d0:	9801      	ldr	r0, [sp, #4]
 80043d2:	f7ff f83e 	bl	8003452 <move_window>
				if (res == FR_OK) {
 80043d6:	4605      	mov	r5, r0
 80043d8:	b9f8      	cbnz	r0, 800441a <f_sync+0x86>
					dir = fp->dir_ptr;
 80043da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80043dc:	7af3      	ldrb	r3, [r6, #11]
 80043de:	f043 0320 	orr.w	r3, r3, #32
 80043e2:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80043e4:	68a2      	ldr	r2, [r4, #8]
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	4631      	mov	r1, r6
 80043ea:	f7fe ffb2 	bl	8003352 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80043ee:	68e1      	ldr	r1, [r4, #12]
 80043f0:	f106 001c 	add.w	r0, r6, #28
 80043f4:	f7fe feb8 	bl	8003168 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80043f8:	4639      	mov	r1, r7
 80043fa:	f106 0016 	add.w	r0, r6, #22
 80043fe:	f7fe feb3 	bl	8003168 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8004402:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004404:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8004406:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004408:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800440a:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800440c:	f7fe ffd6 	bl	80033bc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004410:	7d23      	ldrb	r3, [r4, #20]
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8004416:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004418:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800441a:	4628      	mov	r0, r5
 800441c:	b003      	add	sp, #12
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004420:	2501      	movs	r5, #1
 8004422:	e7fa      	b.n	800441a <f_sync+0x86>

08004424 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004424:	b513      	push	{r0, r1, r4, lr}
 8004426:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004428:	f7ff ffb4 	bl	8004394 <f_sync>
	if (res == FR_OK)
 800442c:	b948      	cbnz	r0, 8004442 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800442e:	a901      	add	r1, sp, #4
 8004430:	4620      	mov	r0, r4
 8004432:	f7fe ff5d 	bl	80032f0 <validate>
		if (res == FR_OK) {
 8004436:	b920      	cbnz	r0, 8004442 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004438:	6920      	ldr	r0, [r4, #16]
 800443a:	f7fe ff0d 	bl	8003258 <dec_lock>
			if (res == FR_OK)
 800443e:	b900      	cbnz	r0, 8004442 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004440:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004442:	b002      	add	sp, #8
 8004444:	bd10      	pop	{r4, pc}

08004446 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8004446:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800444c:	a901      	add	r1, sp, #4
{
 800444e:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8004450:	f7fe ff4e 	bl	80032f0 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8004454:	4606      	mov	r6, r0
 8004456:	b9e0      	cbnz	r0, 8004492 <f_lseek+0x4c>
 8004458:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800445a:	b9d6      	cbnz	r6, 8004492 <f_lseek+0x4c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800445c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d078      	beq.n	8004554 <f_lseek+0x10e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004462:	1c6a      	adds	r2, r5, #1
 8004464:	d139      	bne.n	80044da <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 8004466:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800446a:	f8d3 b000 	ldr.w	fp, [r3]
 800446e:	1d1f      	adds	r7, r3, #4
 8004470:	2502      	movs	r5, #2
			if (cl) {
 8004472:	f1b8 0f00 	cmp.w	r8, #0
 8004476:	d028      	beq.n	80044ca <f_lseek+0x84>
 8004478:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800447a:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 800447e:	4649      	mov	r1, r9
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	f7ff fa1b 	bl	80038bc <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004486:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8004488:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800448c:	d807      	bhi.n	800449e <f_lseek+0x58>
 800448e:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004490:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8004492:	4630      	mov	r0, r6
 8004494:	b003      	add	sp, #12
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	4680      	mov	r8, r0
 800449c:	e7ec      	b.n	8004478 <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d101      	bne.n	80044a6 <f_lseek+0x60>
 80044a2:	2601      	movs	r6, #1
 80044a4:	e7f4      	b.n	8004490 <f_lseek+0x4a>
					} while (cl == pcl + 1);
 80044a6:	f109 0301 	add.w	r3, r9, #1
 80044aa:	4298      	cmp	r0, r3
 80044ac:	4681      	mov	r9, r0
 80044ae:	d0e6      	beq.n	800447e <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80044b0:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80044b2:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 80044b4:	bf21      	itttt	cs
 80044b6:	463b      	movcs	r3, r7
 80044b8:	f843 ab08 	strcs.w	sl, [r3], #8
 80044bc:	f8c7 8004 	strcs.w	r8, [r7, #4]
 80044c0:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4298      	cmp	r0, r3
 80044c8:	d3e7      	bcc.n	800449a <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 80044ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 80044cc:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 80044ce:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 80044d0:	f200 80d4 	bhi.w	800467c <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	e7db      	b.n	8004492 <f_lseek+0x4c>
 80044da:	68e0      	ldr	r0, [r4, #12]
 80044dc:	4285      	cmp	r5, r0
 80044de:	bf28      	it	cs
 80044e0:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 80044e2:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 80044e4:	2d00      	cmp	r5, #0
 80044e6:	d0d4      	beq.n	8004492 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80044e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80044ec:	4641      	mov	r1, r8
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fe fed5 	bl	800329e <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 80044f4:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 80044f6:	61e0      	str	r0, [r4, #28]
 80044f8:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7fe fec4 	bl	8003288 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8004500:	2800      	cmp	r0, #0
 8004502:	d0c4      	beq.n	800448e <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8004504:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004508:	2d00      	cmp	r5, #0
 800450a:	d0c2      	beq.n	8004492 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800450c:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800450e:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8004510:	3d01      	subs	r5, #1
 8004512:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8004516:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8004518:	4295      	cmp	r5, r2
 800451a:	d0ba      	beq.n	8004492 <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800451c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8004526:	da0a      	bge.n	800453e <f_lseek+0xf8>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004528:	2301      	movs	r3, #1
 800452a:	4641      	mov	r1, r8
 800452c:	7878      	ldrb	r0, [r7, #1]
 800452e:	f7fe fdf7 	bl	8003120 <disk_write>
 8004532:	2800      	cmp	r0, #0
 8004534:	d1b5      	bne.n	80044a2 <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 8004536:	7d23      	ldrb	r3, [r4, #20]
 8004538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453c:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800453e:	9801      	ldr	r0, [sp, #4]
 8004540:	2301      	movs	r3, #1
 8004542:	462a      	mov	r2, r5
 8004544:	4641      	mov	r1, r8
 8004546:	7840      	ldrb	r0, [r0, #1]
 8004548:	f7fe fddc 	bl	8003104 <disk_read>
 800454c:	2800      	cmp	r0, #0
 800454e:	d1a8      	bne.n	80044a2 <f_lseek+0x5c>
					fp->sect = dsc;
 8004550:	6225      	str	r5, [r4, #32]
 8004552:	e79e      	b.n	8004492 <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8004554:	68e3      	ldr	r3, [r4, #12]
 8004556:	429d      	cmp	r5, r3
 8004558:	d904      	bls.n	8004564 <f_lseek+0x11e>
 800455a:	7d22      	ldrb	r2, [r4, #20]
 800455c:	f012 0f02 	tst.w	r2, #2
 8004560:	bf08      	it	eq
 8004562:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8004564:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8004566:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8004568:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800456a:	2d00      	cmp	r5, #0
 800456c:	d132      	bne.n	80045d4 <f_lseek+0x18e>
		fp->fptr = nsect = 0;
 800456e:	462f      	mov	r7, r5
 8004570:	e009      	b.n	8004586 <f_lseek+0x140>
 8004572:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8004574:	68e3      	ldr	r3, [r4, #12]
 8004576:	69a5      	ldr	r5, [r4, #24]
 8004578:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 800457a:	bf81      	itttt	hi
 800457c:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800457e:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8004580:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8004584:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004586:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800458a:	2d00      	cmp	r5, #0
 800458c:	d081      	beq.n	8004492 <f_lseek+0x4c>
 800458e:	6a22      	ldr	r2, [r4, #32]
 8004590:	42ba      	cmp	r2, r7
 8004592:	f43f af7e 	beq.w	8004492 <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004596:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f104 0530 	add.w	r5, r4, #48	; 0x30
 80045a0:	da0c      	bge.n	80045bc <f_lseek+0x176>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80045a2:	9801      	ldr	r0, [sp, #4]
 80045a4:	2301      	movs	r3, #1
 80045a6:	4629      	mov	r1, r5
 80045a8:	7840      	ldrb	r0, [r0, #1]
 80045aa:	f7fe fdb9 	bl	8003120 <disk_write>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f47f af77 	bne.w	80044a2 <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80045b4:	7d23      	ldrb	r3, [r4, #20]
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80045bc:	9801      	ldr	r0, [sp, #4]
 80045be:	2301      	movs	r3, #1
 80045c0:	463a      	mov	r2, r7
 80045c2:	4629      	mov	r1, r5
 80045c4:	7840      	ldrb	r0, [r0, #1]
 80045c6:	f7fe fd9d 	bl	8003104 <disk_read>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	f47f af69 	bne.w	80044a2 <f_lseek+0x5c>
			fp->sect = nsect;
 80045d0:	6227      	str	r7, [r4, #32]
 80045d2:	e75e      	b.n	8004492 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80045d4:	9a01      	ldr	r2, [sp, #4]
 80045d6:	8957      	ldrh	r7, [r2, #10]
 80045d8:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80045da:	b303      	cbz	r3, 800461e <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80045dc:	3b01      	subs	r3, #1
 80045de:	1e6a      	subs	r2, r5, #1
 80045e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80045e4:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80045e8:	428a      	cmp	r2, r1
 80045ea:	d318      	bcc.n	800461e <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80045ec:	427a      	negs	r2, r7
 80045ee:	4013      	ands	r3, r2
				clst = fp->clust;
 80045f0:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80045f2:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 80045f4:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d0bb      	beq.n	8004572 <f_lseek+0x12c>
				while (ofs > bcs) {						/* Cluster following loop */
 80045fa:	42bd      	cmp	r5, r7
 80045fc:	d81e      	bhi.n	800463c <f_lseek+0x1f6>
				fp->fptr += ofs;
 80045fe:	69a3      	ldr	r3, [r4, #24]
 8004600:	442b      	add	r3, r5
 8004602:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8004604:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0b2      	beq.n	8004572 <f_lseek+0x12c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800460c:	9801      	ldr	r0, [sp, #4]
 800460e:	f7fe fe3b 	bl	8003288 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8004612:	2800      	cmp	r0, #0
 8004614:	f43f af3b 	beq.w	800448e <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 8004618:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 800461c:	e7aa      	b.n	8004574 <f_lseek+0x12e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800461e:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004620:	b951      	cbnz	r1, 8004638 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff f9a4 	bl	8003970 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004628:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800462a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800462c:	f43f af2f 	beq.w	800448e <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004630:	3001      	adds	r0, #1
 8004632:	f43f af36 	beq.w	80044a2 <f_lseek+0x5c>
					fp->obj.sclust = clst;
 8004636:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8004638:	61e1      	str	r1, [r4, #28]
 800463a:	e7dc      	b.n	80045f6 <f_lseek+0x1b0>
					ofs -= bcs; fp->fptr += bcs;
 800463c:	69a3      	ldr	r3, [r4, #24]
 800463e:	443b      	add	r3, r7
 8004640:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004642:	7d23      	ldrb	r3, [r4, #20]
 8004644:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 8004646:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800464a:	d506      	bpl.n	800465a <f_lseek+0x214>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800464c:	4620      	mov	r0, r4
 800464e:	f7ff f98f 	bl	8003970 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8004652:	4601      	mov	r1, r0
 8004654:	b928      	cbnz	r0, 8004662 <f_lseek+0x21c>
							ofs = 0; break;
 8004656:	4605      	mov	r5, r0
 8004658:	e7d1      	b.n	80045fe <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	f7ff f92e 	bl	80038bc <get_fat.isra.8>
 8004660:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004662:	1c4b      	adds	r3, r1, #1
 8004664:	f43f af1d 	beq.w	80044a2 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004668:	2901      	cmp	r1, #1
 800466a:	f67f af10 	bls.w	800448e <f_lseek+0x48>
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4299      	cmp	r1, r3
 8004674:	f4bf af0b 	bcs.w	800448e <f_lseek+0x48>
					fp->clust = clst;
 8004678:	61e1      	str	r1, [r4, #28]
 800467a:	e7be      	b.n	80045fa <f_lseek+0x1b4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800467c:	2611      	movs	r6, #17
 800467e:	e708      	b.n	8004492 <f_lseek+0x4c>

08004680 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	b09c      	sub	sp, #112	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8004684:	2202      	movs	r2, #2
{
 8004686:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8004688:	a903      	add	r1, sp, #12
 800468a:	a801      	add	r0, sp, #4
 800468c:	f7fe ff3c 	bl	8003508 <find_volume>
	dj.obj.fs = fs;
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 8004694:	b990      	cbnz	r0, 80046bc <f_unlink+0x3c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8004696:	9901      	ldr	r1, [sp, #4]
 8004698:	a804      	add	r0, sp, #16
 800469a:	f7ff faa3 	bl	8003be4 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800469e:	b968      	cbnz	r0, 80046bc <f_unlink+0x3c>
 80046a0:	2102      	movs	r1, #2
 80046a2:	a804      	add	r0, sp, #16
 80046a4:	f7fe fd6e 	bl	8003184 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80046a8:	b940      	cbnz	r0, 80046bc <f_unlink+0x3c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80046aa:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db0e      	blt.n	80046d0 <f_unlink+0x50>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 80046b2:	f89d 6016 	ldrb.w	r6, [sp, #22]
 80046b6:	07f2      	lsls	r2, r6, #31
 80046b8:	d50c      	bpl.n	80046d4 <f_unlink+0x54>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80046ba:	2007      	movs	r0, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80046bc:	b01c      	add	sp, #112	; 0x70
 80046be:	bd70      	pop	{r4, r5, r6, pc}
					res = remove_chain(&dj.obj, dclst, 0);
 80046c0:	4602      	mov	r2, r0
 80046c2:	4621      	mov	r1, r4
 80046c4:	a804      	add	r0, sp, #16
 80046c6:	f7ff f9ab 	bl	8003a20 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d1f6      	bne.n	80046bc <f_unlink+0x3c>
 80046ce:	e025      	b.n	800471c <f_unlink+0x9c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80046d0:	2006      	movs	r0, #6
	LEAVE_FF(fs, res);
 80046d2:	e7f3      	b.n	80046bc <f_unlink+0x3c>
					dclst = ld_clust(fs, dj.dir);
 80046d4:	9d03      	ldr	r5, [sp, #12]
 80046d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046d8:	7828      	ldrb	r0, [r5, #0]
 80046da:	f7fe fe2c 	bl	8003336 <ld_clust.isra.1>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80046de:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 80046e0:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80046e2:	d50d      	bpl.n	8004700 <f_unlink+0x80>
						res = dir_sdi(&sdj, 0);
 80046e4:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80046e6:	9510      	str	r5, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 80046e8:	9412      	str	r4, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 80046ea:	f7ff f9cf 	bl	8003a8c <dir_sdi.constprop.11>
						if (res == FR_OK) {
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d1e4      	bne.n	80046bc <f_unlink+0x3c>
							res = dir_read(&sdj, 0);			/* Read an item */
 80046f2:	a810      	add	r0, sp, #64	; 0x40
 80046f4:	f7ff fb3a 	bl	8003d6c <dir_read.constprop.9>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0de      	beq.n	80046ba <f_unlink+0x3a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80046fc:	2804      	cmp	r0, #4
 80046fe:	d1dd      	bne.n	80046bc <f_unlink+0x3c>
	FATFS *fs = dp->obj.fs;
 8004700:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 8004702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004704:	4628      	mov	r0, r5
 8004706:	f7fe fea4 	bl	8003452 <move_window>
	if (res == FR_OK) {
 800470a:	2800      	cmp	r0, #0
 800470c:	d1d6      	bne.n	80046bc <f_unlink+0x3c>
		dp->dir[DIR_Name] = DDEM;
 800470e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004710:	22e5      	movs	r2, #229	; 0xe5
 8004712:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8004718:	2c00      	cmp	r4, #0
 800471a:	d1d1      	bne.n	80046c0 <f_unlink+0x40>
				if (res == FR_OK) res = sync_fs(fs);
 800471c:	9803      	ldr	r0, [sp, #12]
 800471e:	f7fe fe4d 	bl	80033bc <sync_fs>
 8004722:	e7cb      	b.n	80046bc <f_unlink+0x3c>

08004724 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8004724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004728:	4604      	mov	r4, r0
 800472a:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 800472c:	4605      	mov	r5, r0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800472e:	1e4f      	subs	r7, r1, #1
 8004730:	1b2e      	subs	r6, r5, r4
 8004732:	42b7      	cmp	r7, r6
 8004734:	dc08      	bgt.n	8004748 <f_gets+0x24>
		//if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
		n++;
//		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
 8004736:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8004738:	429e      	cmp	r6, r3
 800473a:	bf08      	it	eq
 800473c:	461c      	moveq	r4, r3
}
 800473e:	4620      	mov	r0, r4
	*p = 0;
 8004740:	702b      	strb	r3, [r5, #0]
}
 8004742:	b002      	add	sp, #8
 8004744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		f_read(fp, s, 1, &rc);
 8004748:	ab01      	add	r3, sp, #4
 800474a:	2201      	movs	r2, #1
 800474c:	4669      	mov	r1, sp
 800474e:	4640      	mov	r0, r8
 8004750:	f7ff fcae 	bl	80040b0 <f_read>
		if (rc != 1) break;
 8004754:	9b01      	ldr	r3, [sp, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d1ed      	bne.n	8004736 <f_gets+0x12>
		*p++ = c;
 800475a:	f89d 3000 	ldrb.w	r3, [sp]
 800475e:	f805 3b01 	strb.w	r3, [r5], #1
 8004762:	e7e5      	b.n	8004730 <f_gets+0xc>

08004764 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004764:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <FATFS_LinkDriverEx+0x40>)
 8004768:	7a5d      	ldrb	r5, [r3, #9]
 800476a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800476e:	b9b5      	cbnz	r5, 800479e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004770:	7a5d      	ldrb	r5, [r3, #9]
 8004772:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004774:	7a5d      	ldrb	r5, [r3, #9]
 8004776:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800477a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800477c:	7a58      	ldrb	r0, [r3, #9]
 800477e:	4418      	add	r0, r3
 8004780:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004782:	7a5a      	ldrb	r2, [r3, #9]
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	1c50      	adds	r0, r2, #1
 8004788:	b2c0      	uxtb	r0, r0
 800478a:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800478c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800478e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004790:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004792:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004794:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004796:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004798:	70cc      	strb	r4, [r1, #3]
 800479a:	4620      	mov	r0, r4
 800479c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800479e:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80047a0:	bd30      	pop	{r4, r5, pc}
 80047a2:	bf00      	nop
 80047a4:	20000068 	.word	0x20000068

080047a8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80047a8:	2200      	movs	r2, #0
 80047aa:	f7ff bfdb 	b.w	8004764 <FATFS_LinkDriverEx>
	...

080047b0 <enableGNZDAString>:



void enableGNZDAString(){

	    frame1[0] = 0xB5;
 80047b0:	4914      	ldr	r1, [pc, #80]	; (8004804 <enableGNZDAString+0x54>)
 80047b2:	23b5      	movs	r3, #181	; 0xb5
void enableGNZDAString(){
 80047b4:	b510      	push	{r4, lr}
	    frame1[0] = 0xB5;
 80047b6:	700b      	strb	r3, [r1, #0]
		frame1[1] = 0x62;
 80047b8:	2362      	movs	r3, #98	; 0x62
 80047ba:	704b      	strb	r3, [r1, #1]
		frame1[2] = 0x06;
		frame1[3] = 0x01;
		frame1[4] = 0x08;
		frame1[5] = 0x00;
		frame1[6] = 0xF0;
 80047bc:	24f0      	movs	r4, #240	; 0xf0
		frame1[2] = 0x06;
 80047be:	2306      	movs	r3, #6
 80047c0:	708b      	strb	r3, [r1, #2]
		frame1[6] = 0xF0;
 80047c2:	718c      	strb	r4, [r1, #6]
		frame1[5] = 0x00;
 80047c4:	2300      	movs	r3, #0

		frame1[13] = 0x00;
		frame1[14] = 0x08;
		frame1[15] = 0x60;

		HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80047c6:	4c10      	ldr	r4, [pc, #64]	; (8004808 <enableGNZDAString+0x58>)
		frame1[5] = 0x00;
 80047c8:	714b      	strb	r3, [r1, #5]
		frame1[4] = 0x08;
 80047ca:	2208      	movs	r2, #8
		frame1[3] = 0x01;
 80047cc:	2001      	movs	r0, #1
		frame1[8] = 0x00;
 80047ce:	720b      	strb	r3, [r1, #8]
		frame1[10] = 0x00;
 80047d0:	728b      	strb	r3, [r1, #10]
		frame1[11] = 0x00;
 80047d2:	72cb      	strb	r3, [r1, #11]
		frame1[12] = 0x00;
 80047d4:	730b      	strb	r3, [r1, #12]
		frame1[13] = 0x00;
 80047d6:	734b      	strb	r3, [r1, #13]
		frame1[15] = 0x60;
 80047d8:	2360      	movs	r3, #96	; 0x60
		frame1[3] = 0x01;
 80047da:	70c8      	strb	r0, [r1, #3]
		frame1[4] = 0x08;
 80047dc:	710a      	strb	r2, [r1, #4]
		frame1[7] = 0x08;
 80047de:	71ca      	strb	r2, [r1, #7]
		frame1[9] = 0x01;
 80047e0:	7248      	strb	r0, [r1, #9]
		frame1[14] = 0x08;
 80047e2:	738a      	strb	r2, [r1, #14]
		frame1[15] = 0x60;
 80047e4:	73cb      	strb	r3, [r1, #15]
		HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80047e6:	2210      	movs	r2, #16
 80047e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7fd ff9d 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80047f2:	4620      	mov	r0, r4
 80047f4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80047f8:	2246      	movs	r2, #70	; 0x46
 80047fa:	4904      	ldr	r1, [pc, #16]	; (800480c <enableGNZDAString+0x5c>)



}
 80047fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004800:	f7fd bff1 	b.w	80027e6 <HAL_UART_Receive>
 8004804:	2000025d 	.word	0x2000025d
 8004808:	2000132c 	.word	0x2000132c
 800480c:	2000017c 	.word	0x2000017c

08004810 <diableAllString>:

}



void diableAllString(){
 8004810:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/*----------- Disable GLL string-------------------*/
	frame1[0] = 0xB5;
 8004814:	4c80      	ldr	r4, [pc, #512]	; (8004a18 <diableAllString+0x208>)

	frame1[13] = 0x00;
	frame1[14] = 0x00;
	frame1[15] = 0x2A;

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004816:	4e81      	ldr	r6, [pc, #516]	; (8004a1c <diableAllString+0x20c>)
	frame1[2] = 0x06;
 8004818:	f04f 0306 	mov.w	r3, #6
 800481c:	70a3      	strb	r3, [r4, #2]
	frame1[4] = 0x08;
 800481e:	f04f 0308 	mov.w	r3, #8
 8004822:	7123      	strb	r3, [r4, #4]
	frame1[15] = 0x2A;
 8004824:	232a      	movs	r3, #42	; 0x2a
	frame1[5] = 0x00;
 8004826:	2500      	movs	r5, #0
	frame1[3] = 0x01;
 8004828:	2701      	movs	r7, #1
	frame1[0] = 0xB5;
 800482a:	f04f 0ab5 	mov.w	sl, #181	; 0xb5
	frame1[1] = 0x62;
 800482e:	f04f 0962 	mov.w	r9, #98	; 0x62
	frame1[6] = 0xF0;
 8004832:	f04f 08f0 	mov.w	r8, #240	; 0xf0
	frame1[15] = 0x2A;
 8004836:	73e3      	strb	r3, [r4, #15]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004838:	4621      	mov	r1, r4
 800483a:	f241 3388 	movw	r3, #5000	; 0x1388
 800483e:	2210      	movs	r2, #16
 8004840:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 8004842:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 8004846:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 800484a:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 800484c:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 800484e:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[7] = 0x01;
 8004852:	71e7      	strb	r7, [r4, #7]
	frame1[8] = 0x00;
 8004854:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 8004856:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 8004858:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 800485a:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 800485c:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 800485e:	7365      	strb	r5, [r4, #13]
	frame1[14] = 0x00;
 8004860:	73a5      	strb	r5, [r4, #14]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004862:	f7fd ff63 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004866:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800486a:	2246      	movs	r2, #70	; 0x46
 800486c:	496c      	ldr	r1, [pc, #432]	; (8004a20 <diableAllString+0x210>)
 800486e:	4630      	mov	r0, r6
 8004870:	f7fd ffb9 	bl	80027e6 <HAL_UART_Receive>

	/*----------- Disable GSV string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 8004874:	f04f 0306 	mov.w	r3, #6
 8004878:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 800487a:	f04f 0308 	mov.w	r3, #8
 800487e:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x03;
 8004880:	f04f 0303 	mov.w	r3, #3
 8004884:	71e3      	strb	r3, [r4, #7]
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x02;
	frame1[15] = 0x38;
 8004886:	2338      	movs	r3, #56	; 0x38
	frame1[14] = 0x02;
 8004888:	f04f 0b02 	mov.w	fp, #2
	frame1[15] = 0x38;
 800488c:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800488e:	4621      	mov	r1, r4
 8004890:	f241 3388 	movw	r3, #5000	; 0x1388
 8004894:	2210      	movs	r2, #16
 8004896:	4630      	mov	r0, r6
	frame1[14] = 0x02;
 8004898:	f884 b00e 	strb.w	fp, [r4, #14]
	frame1[0] = 0xB5;
 800489c:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80048a0:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80048a4:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 80048a6:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80048a8:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 80048ac:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80048ae:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80048b0:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80048b2:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 80048b4:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 80048b6:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80048b8:	f7fd ff38 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80048bc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80048c0:	2246      	movs	r2, #70	; 0x46
 80048c2:	4957      	ldr	r1, [pc, #348]	; (8004a20 <diableAllString+0x210>)
 80048c4:	4630      	mov	r0, r6
 80048c6:	f7fd ff8e 	bl	80027e6 <HAL_UART_Receive>

	/*----------- Disable GSA string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 80048ca:	f04f 0306 	mov.w	r3, #6
 80048ce:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 80048d0:	f04f 0308 	mov.w	r3, #8
 80048d4:	7123      	strb	r3, [r4, #4]
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x01;
	frame1[15] = 0x31;
 80048d6:	2331      	movs	r3, #49	; 0x31
 80048d8:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80048da:	4621      	mov	r1, r4
 80048dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80048e0:	2210      	movs	r2, #16
 80048e2:	4630      	mov	r0, r6
	frame1[7] = 0x02;
 80048e4:	f884 b007 	strb.w	fp, [r4, #7]
	frame1[0] = 0xB5;
 80048e8:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80048ec:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80048f0:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 80048f2:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80048f4:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 80048f8:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80048fa:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80048fc:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80048fe:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004900:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 8004902:	7365      	strb	r5, [r4, #13]
	frame1[14] = 0x01;
 8004904:	73a7      	strb	r7, [r4, #14]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004906:	f7fd ff11 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 800490a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800490e:	2246      	movs	r2, #70	; 0x46
 8004910:	4943      	ldr	r1, [pc, #268]	; (8004a20 <diableAllString+0x210>)
 8004912:	4630      	mov	r0, r6
 8004914:	f7fd ff67 	bl	80027e6 <HAL_UART_Receive>

	/*----------- Disable VTG string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 8004918:	f04f 0306 	mov.w	r3, #6
 800491c:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 800491e:	f04f 0308 	mov.w	r3, #8
 8004922:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x05;
 8004924:	2305      	movs	r3, #5
 8004926:	71e3      	strb	r3, [r4, #7]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x04;
 8004928:	f04f 0304 	mov.w	r3, #4
	frame1[15] = 0x46;
 800492c:	f04f 0b46 	mov.w	fp, #70	; 0x46
	frame1[14] = 0x04;
 8004930:	73a3      	strb	r3, [r4, #14]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 8004932:	4621      	mov	r1, r4
 8004934:	f241 3388 	movw	r3, #5000	; 0x1388
 8004938:	2210      	movs	r2, #16
 800493a:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 800493c:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 8004940:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 8004944:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 8004946:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 8004948:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 800494c:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 800494e:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 8004950:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 8004952:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 8004954:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 8004956:	7365      	strb	r5, [r4, #13]
	frame1[15] = 0x46;
 8004958:	f884 b00f 	strb.w	fp, [r4, #15]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800495c:	f7fd fee6 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004960:	465a      	mov	r2, fp
 8004962:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004966:	492e      	ldr	r1, [pc, #184]	; (8004a20 <diableAllString+0x210>)
 8004968:	4630      	mov	r0, r6
 800496a:	f7fd ff3c 	bl	80027e6 <HAL_UART_Receive>

	/*----------- Disable RMC string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 800496e:	f04f 0306 	mov.w	r3, #6
 8004972:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 8004974:	f04f 0308 	mov.w	r3, #8
 8004978:	7123      	strb	r3, [r4, #4]
	frame1[5] = 0x00;
	frame1[6] = 0xF0;
	frame1[7] = 0x04;
 800497a:	f04f 0304 	mov.w	r3, #4
 800497e:	71e3      	strb	r3, [r4, #7]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0x03;
 8004980:	f04f 0303 	mov.w	r3, #3
 8004984:	73a3      	strb	r3, [r4, #14]
	frame1[15] = 0x3F;
 8004986:	233f      	movs	r3, #63	; 0x3f
 8004988:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 800498a:	4621      	mov	r1, r4
 800498c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004990:	2210      	movs	r2, #16
 8004992:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 8004994:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 8004998:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 800499c:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 800499e:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80049a0:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[8] = 0x00;
 80049a4:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80049a6:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80049a8:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80049aa:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 80049ac:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 80049ae:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80049b0:	f7fd febc 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 80049b4:	465a      	mov	r2, fp
 80049b6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80049ba:	4919      	ldr	r1, [pc, #100]	; (8004a20 <diableAllString+0x210>)
 80049bc:	4630      	mov	r0, r6
 80049be:	f7fd ff12 	bl	80027e6 <HAL_UART_Receive>

	/*----------- Disable GGA string-------------------*/
	frame1[0] = 0xB5;
	frame1[1] = 0x62;
	frame1[2] = 0x06;
 80049c2:	f04f 0306 	mov.w	r3, #6
 80049c6:	70a3      	strb	r3, [r4, #2]
	frame1[3] = 0x01;
	frame1[4] = 0x08;
 80049c8:	f04f 0308 	mov.w	r3, #8
 80049cc:	7123      	strb	r3, [r4, #4]
	frame1[10] = 0x00;
	frame1[11] = 0x00;
	frame1[12] = 0x00;

	frame1[13] = 0x00;
	frame1[14] = 0xFF;
 80049ce:	23ff      	movs	r3, #255	; 0xff
 80049d0:	73a3      	strb	r3, [r4, #14]
	frame1[15] = 0x23;
 80049d2:	2323      	movs	r3, #35	; 0x23
 80049d4:	73e3      	strb	r3, [r4, #15]

	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80049d6:	4621      	mov	r1, r4
 80049d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80049dc:	2210      	movs	r2, #16
 80049de:	4630      	mov	r0, r6
	frame1[0] = 0xB5;
 80049e0:	f884 a000 	strb.w	sl, [r4]
	frame1[1] = 0x62;
 80049e4:	f884 9001 	strb.w	r9, [r4, #1]
	frame1[3] = 0x01;
 80049e8:	70e7      	strb	r7, [r4, #3]
	frame1[5] = 0x00;
 80049ea:	7165      	strb	r5, [r4, #5]
	frame1[6] = 0xF0;
 80049ec:	f884 8006 	strb.w	r8, [r4, #6]
	frame1[7] = 0x00;
 80049f0:	71e5      	strb	r5, [r4, #7]
	frame1[8] = 0x00;
 80049f2:	7225      	strb	r5, [r4, #8]
	frame1[9] = 0x00;
 80049f4:	7265      	strb	r5, [r4, #9]
	frame1[10] = 0x00;
 80049f6:	72a5      	strb	r5, [r4, #10]
	frame1[11] = 0x00;
 80049f8:	72e5      	strb	r5, [r4, #11]
	frame1[12] = 0x00;
 80049fa:	7325      	strb	r5, [r4, #12]
	frame1[13] = 0x00;
 80049fc:	7365      	strb	r5, [r4, #13]
	HAL_UART_Transmit(&huart6, (uint8_t*) frame1, 16, 5000);
 80049fe:	f7fd fe95 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004a02:	4907      	ldr	r1, [pc, #28]	; (8004a20 <diableAllString+0x210>)
 8004a04:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004a08:	465a      	mov	r2, fp
 8004a0a:	4630      	mov	r0, r6



}
 8004a0c:	b001      	add	sp, #4
 8004a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive(&huart6, (uint8_t *) aRxBuffer6, 70, 0x1FFF);
 8004a12:	f7fd bee8 	b.w	80027e6 <HAL_UART_Receive>
 8004a16:	bf00      	nop
 8004a18:	2000025d 	.word	0x2000025d
 8004a1c:	2000132c 	.word	0x2000132c
 8004a20:	2000017c 	.word	0x2000017c

08004a24 <SDcardReadSeek>:
	fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE |  FA_READ);
	f_lseek(&fil, bytes);

}

void SDcardReadSeek(char fileName[],int bytesToRead,int bytes){
 8004a24:	b570      	push	{r4, r5, r6, lr}

//	                  fres= f_mount(&FatFs, SDPath, 1);

	                  fres = f_open(&fil, fileName, FA_READ);
 8004a26:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <SDcardReadSeek+0x38>)
void SDcardReadSeek(char fileName[],int bytesToRead,int bytes){
 8004a28:	460d      	mov	r5, r1
 8004a2a:	4616      	mov	r6, r2
	                  fres = f_open(&fil, fileName, FA_READ);
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fa2b 	bl	8003e8c <f_open>
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <SDcardReadSeek+0x3c>)

	                  f_lseek(&fil, bytes);
 8004a38:	4631      	mov	r1, r6
	                  fres = f_open(&fil, fileName, FA_READ);
 8004a3a:	7018      	strb	r0, [r3, #0]
	                  f_lseek(&fil, bytes);
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff fd02 	bl	8004446 <f_lseek>

	         	      rres = f_gets((TCHAR*)readBytes, bytesToRead, &fil);
 8004a42:	4622      	mov	r2, r4
 8004a44:	4629      	mov	r1, r5
 8004a46:	4807      	ldr	r0, [pc, #28]	; (8004a64 <SDcardReadSeek+0x40>)
 8004a48:	f7ff fe6c 	bl	8004724 <f_gets>
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <SDcardReadSeek+0x44>)
 8004a4e:	6018      	str	r0, [r3, #0]

	         	      f_close(&fil);
 8004a50:	4620      	mov	r0, r4

}
 8004a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	         	      f_close(&fil);
 8004a56:	f7ff bce5 	b.w	8004424 <f_close>
 8004a5a:	bf00      	nop
 8004a5c:	200006ac 	.word	0x200006ac
 8004a60:	200006a8 	.word	0x200006a8
 8004a64:	20000314 	.word	0x20000314
 8004a68:	200006a4 	.word	0x200006a4

08004a6c <SDcardWriteSeek>:




void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


//	                   fres= f_mount(&FatFs, SDPath, 1);

	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004a70:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <SDcardWriteSeek+0x3c>)
 8004a72:	4d0e      	ldr	r5, [pc, #56]	; (8004aac <SDcardWriteSeek+0x40>)
void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004a74:	460f      	mov	r7, r1
 8004a76:	4616      	mov	r6, r2
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004a78:	4601      	mov	r1, r0
 8004a7a:	2232      	movs	r2, #50	; 0x32
 8004a7c:	4620      	mov	r0, r4
void SDcardWriteSeek(char fileName[],int bytesToWrite,uint8_t *buffer,int bytes ){
 8004a7e:	4698      	mov	r8, r3
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004a80:	f7ff fa04 	bl	8003e8c <f_open>

	         	      f_lseek(&fil, bytes);
 8004a84:	4641      	mov	r1, r8
	         	       fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
 8004a86:	7028      	strb	r0, [r5, #0]
	         	      f_lseek(&fil, bytes);
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f7ff fcdc 	bl	8004446 <f_lseek>

	         	       fres = f_write(&fil, buffer, bytesToWrite, 0);
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4631      	mov	r1, r6
 8004a92:	4620      	mov	r0, r4
 8004a94:	2300      	movs	r3, #0
 8004a96:	f7ff fbb8 	bl	800420a <f_write>
 8004a9a:	7028      	strb	r0, [r5, #0]

	         	       f_close(&fil);
 8004a9c:	4620      	mov	r0, r4


}
 8004a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	         	       f_close(&fil);
 8004aa2:	f7ff bcbf 	b.w	8004424 <f_close>
 8004aa6:	bf00      	nop
 8004aa8:	200006ac 	.word	0x200006ac
 8004aac:	200006a8 	.word	0x200006a8

08004ab0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004ab0:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8004ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004abc:	4283      	cmp	r3, r0
 8004abe:	d102      	bne.n	8004ac6 <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <BSP_SD_Init+0x1c>)
 8004ac2:	f7fd fc75 	bl	80023b0 <HAL_SD_Init>
}
 8004ac6:	b003      	add	sp, #12
 8004ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004acc:	200011c0 	.word	0x200011c0

08004ad0 <BSP_SD_ReadBlocks>:
{
 8004ad0:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4804      	ldr	r0, [pc, #16]	; (8004aec <BSP_SD_ReadBlocks+0x1c>)
 8004adc:	f7fd f900 	bl	8001ce0 <HAL_SD_ReadBlocks>
}
 8004ae0:	3000      	adds	r0, #0
 8004ae2:	bf18      	it	ne
 8004ae4:	2001      	movne	r0, #1
 8004ae6:	b003      	add	sp, #12
 8004ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aec:	200011c0 	.word	0x200011c0

08004af0 <BSP_SD_WriteBlocks>:
{
 8004af0:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	460a      	mov	r2, r1
 8004af8:	4601      	mov	r1, r0
 8004afa:	4804      	ldr	r0, [pc, #16]	; (8004b0c <BSP_SD_WriteBlocks+0x1c>)
 8004afc:	f7fd f9cf 	bl	8001e9e <HAL_SD_WriteBlocks>
}
 8004b00:	3000      	adds	r0, #0
 8004b02:	bf18      	it	ne
 8004b04:	2001      	movne	r0, #1
 8004b06:	b003      	add	sp, #12
 8004b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b0c:	200011c0 	.word	0x200011c0

08004b10 <BSP_SD_GetCardState>:
{
 8004b10:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004b12:	4803      	ldr	r0, [pc, #12]	; (8004b20 <BSP_SD_GetCardState+0x10>)
 8004b14:	f7fd fc78 	bl	8002408 <HAL_SD_GetCardState>
}
 8004b18:	3804      	subs	r0, #4
 8004b1a:	bf18      	it	ne
 8004b1c:	2001      	movne	r0, #1
 8004b1e:	bd08      	pop	{r3, pc}
 8004b20:	200011c0 	.word	0x200011c0

08004b24 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004b24:	4601      	mov	r1, r0
 8004b26:	4801      	ldr	r0, [pc, #4]	; (8004b2c <BSP_SD_GetCardInfo+0x8>)
 8004b28:	f7fd bc5c 	b.w	80023e4 <HAL_SD_GetCardInfo>
 8004b2c:	200011c0 	.word	0x200011c0

08004b30 <EEPROM_WriteByte>:

unsigned char TmpData;
static unsigned int i;

void EEPROM_WriteByte(unsigned int Addr, unsigned char Data)
{
 8004b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004b32:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&Data,1,500);
 8004b34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
{
 8004b38:	f803 1d01 	strb.w	r1, [r3, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&Data,1,500);
 8004b3c:	9202      	str	r2, [sp, #8]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	9201      	str	r2, [sp, #4]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	b282      	uxth	r2, r0
 8004b46:	2310      	movs	r3, #16
 8004b48:	21a0      	movs	r1, #160	; 0xa0
 8004b4a:	4804      	ldr	r0, [pc, #16]	; (8004b5c <EEPROM_WriteByte+0x2c>)
 8004b4c:	f7fc fa7e 	bl	800104c <HAL_I2C_Mem_Write>
	HAL_Delay(8);
 8004b50:	2008      	movs	r0, #8
 8004b52:	f7fb fd37 	bl	80005c4 <HAL_Delay>
}
 8004b56:	b007      	add	sp, #28
 8004b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b5c:	20000e70 	.word	0x20000e70

08004b60 <EEPROM_ReadByte>:

unsigned char EEPROM_ReadByte(unsigned int Addr)
{
 8004b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c1,EEPROM_Addr,Addr,I2C_MEMADD_SIZE_16BIT,&TmpData,1,500);
 8004b62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	4c06      	ldr	r4, [pc, #24]	; (8004b84 <EEPROM_ReadByte+0x24>)
 8004b6a:	9400      	str	r4, [sp, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	b282      	uxth	r2, r0
 8004b72:	2310      	movs	r3, #16
 8004b74:	21a0      	movs	r1, #160	; 0xa0
 8004b76:	4804      	ldr	r0, [pc, #16]	; (8004b88 <EEPROM_ReadByte+0x28>)
 8004b78:	f7fc faf8 	bl	800116c <HAL_I2C_Mem_Read>

	return TmpData;
}
 8004b7c:	7820      	ldrb	r0, [r4, #0]
 8004b7e:	b004      	add	sp, #16
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	bf00      	nop
 8004b84:	200008dc 	.word	0x200008dc
 8004b88:	20000e70 	.word	0x20000e70

08004b8c <EEPROM_WriteArray>:

void EEPROM_WriteArray(unsigned char *Array, unsigned int len,unsigned int StartAddr)
{
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<len;i++)
 8004b8e:	4c09      	ldr	r4, [pc, #36]	; (8004bb4 <EEPROM_WriteArray+0x28>)
{
 8004b90:	4605      	mov	r5, r0
 8004b92:	460e      	mov	r6, r1
 8004b94:	4617      	mov	r7, r2
	for(i=0;i<len;i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	42b0      	cmp	r0, r6
 8004b9e:	d300      	bcc.n	8004ba2 <EEPROM_WriteArray+0x16>
		EEPROM_WriteByte(StartAddr+i,*Array);
		Array++;
	}


}
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_WriteByte(StartAddr+i,*Array);
 8004ba2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004ba6:	4438      	add	r0, r7
 8004ba8:	f7ff ffc2 	bl	8004b30 <EEPROM_WriteByte>
	for(i=0;i<len;i++)
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	e7f2      	b.n	8004b98 <EEPROM_WriteArray+0xc>
 8004bb2:	bf00      	nop
 8004bb4:	20000074 	.word	0x20000074

08004bb8 <EEPROM_ReadArray>:

void EEPROM_ReadArray(unsigned char *Array,unsigned int len,unsigned int StartAddr)
{
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<len;i++)
 8004bba:	4c09      	ldr	r4, [pc, #36]	; (8004be0 <EEPROM_ReadArray+0x28>)
{
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	460e      	mov	r6, r1
 8004bc0:	4617      	mov	r7, r2
	for(i=0;i<len;i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	42b0      	cmp	r0, r6
 8004bca:	d300      	bcc.n	8004bce <EEPROM_ReadArray+0x16>
	{
		*Array  = EEPROM_ReadByte(StartAddr+i);
		Array++;
	}
}
 8004bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Array  = EEPROM_ReadByte(StartAddr+i);
 8004bce:	4438      	add	r0, r7
 8004bd0:	f7ff ffc6 	bl	8004b60 <EEPROM_ReadByte>
	for(i=0;i<len;i++)
 8004bd4:	6823      	ldr	r3, [r4, #0]
		*Array  = EEPROM_ReadByte(StartAddr+i);
 8004bd6:	f805 0b01 	strb.w	r0, [r5], #1
	for(i=0;i<len;i++)
 8004bda:	3301      	adds	r3, #1
 8004bdc:	e7f2      	b.n	8004bc4 <EEPROM_ReadArray+0xc>
 8004bde:	bf00      	nop
 8004be0:	20000074 	.word	0x20000074

08004be4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004be4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004be6:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <MX_FATFS_Init+0x10>)
 8004be8:	4803      	ldr	r0, [pc, #12]	; (8004bf8 <MX_FATFS_Init+0x14>)
 8004bea:	f7ff fddd 	bl	80047a8 <FATFS_LinkDriver>
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <MX_FATFS_Init+0x18>)
 8004bf0:	7018      	strb	r0, [r3, #0]
 8004bf2:	bd08      	pop	{r3, pc}
 8004bf4:	200008e1 	.word	0x200008e1
 8004bf8:	080098a8 	.word	0x080098a8
 8004bfc:	200008e0 	.word	0x200008e0

08004c00 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004c00:	2000      	movs	r0, #0
 8004c02:	4770      	bx	lr

08004c04 <Flash_ReadByte>:
{
return (*(__IO uint32_t*)Address);
}

unsigned char Flash_ReadByte(uint32_t Address,uint8_t *byteToRead,int length)
{
 8004c04:	b510      	push	{r4, lr}

//SplitUnion.Word =  *(__IO uint32_t*)Address;
//return (SplitUnion.Byte[0]);
//	Address=Address+1;
	for(int i=0;i<length;i++)
 8004c06:	460b      	mov	r3, r1
 8004c08:	1a5c      	subs	r4, r3, r1
 8004c0a:	42a2      	cmp	r2, r4
 8004c0c:	dc00      	bgt.n	8004c10 <Flash_ReadByte+0xc>
		byteToRead[i]=*(uint8_t *) Address;
		Address++;
		}


}
 8004c0e:	bd10      	pop	{r4, pc}
		byteToRead[i]=*(uint8_t *) Address;
 8004c10:	5c24      	ldrb	r4, [r4, r0]
 8004c12:	f803 4b01 	strb.w	r4, [r3], #1
 8004c16:	e7f7      	b.n	8004c08 <Flash_ReadByte+0x4>

08004c18 <Flash_Write>:



void Flash_Write(uint32_t Address,uint8_t *byteToWrite,int length )
{
 8004c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	4606      	mov	r6, r0
 8004c20:	4617      	mov	r7, r2
int j=1;
	HAL_FLASH_Unlock();
 8004c22:	f7fb fdf9 	bl	8000818 <HAL_FLASH_Unlock>

	for(int i=0;i<length;i++)
 8004c26:	462c      	mov	r4, r5
 8004c28:	1b76      	subs	r6, r6, r5
 8004c2a:	1b63      	subs	r3, r4, r5
 8004c2c:	429f      	cmp	r7, r3
 8004c2e:	eb06 0804 	add.w	r8, r6, r4
 8004c32:	dc03      	bgt.n	8004c3c <Flash_Write+0x24>
	Address=Address+j;
	}

	HAL_FLASH_Lock();

}
 8004c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_FLASH_Lock();
 8004c38:	f7fb be00 	b.w	800083c <HAL_FLASH_Lock>
		 FLASH_WaitForLastOperation(100);
 8004c3c:	2064      	movs	r0, #100	; 0x64
 8004c3e:	f7fb fe07 	bl	8000850 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,byteToWrite[i]);
 8004c42:	f814 2b01 	ldrb.w	r2, [r4], #1
 8004c46:	2300      	movs	r3, #0
 8004c48:	4641      	mov	r1, r8
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7fb fe2a 	bl	80008a4 <HAL_FLASH_Program>
	HAL_Delay(10);
 8004c50:	200a      	movs	r0, #10
 8004c52:	f7fb fcb7 	bl	80005c4 <HAL_Delay>
 8004c56:	e7e8      	b.n	8004c2a <Flash_Write+0x12>

08004c58 <flash_Erase>:


void flash_Erase()
{
 8004c58:	b508      	push	{r3, lr}
	                  HAL_FLASH_Unlock();
 8004c5a:	f7fb fddd 	bl	8000818 <HAL_FLASH_Unlock>
	                  FLASH_WaitForLastOperation(100);
 8004c5e:	2064      	movs	r0, #100	; 0x64
 8004c60:	f7fb fdf6 	bl	8000850 <FLASH_WaitForLastOperation>
	                  FLASH_Erase_Sector(FLASH_SECTOR_11, FLASH_VOLTAGE_RANGE_3);
 8004c64:	2102      	movs	r1, #2
 8004c66:	200b      	movs	r0, #11
 8004c68:	f7fb fe64 	bl	8000934 <FLASH_Erase_Sector>
	                  FLASH_Erase_Sector(FLASH_SECTOR_10, FLASH_VOLTAGE_RANGE_3);
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	200a      	movs	r0, #10
 8004c70:	f7fb fe60 	bl	8000934 <FLASH_Erase_Sector>
	                  HAL_FLASH_Lock();
}
 8004c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	                  HAL_FLASH_Lock();
 8004c78:	f7fb bde0 	b.w	800083c <HAL_FLASH_Lock>

08004c7c <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_OREFLAG (huart);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	6803      	ldr	r3, [r0, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	9201      	str	r2, [sp, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	9b01      	ldr	r3, [sp, #4]

}
 8004c8e:	b002      	add	sp, #8
 8004c90:	4770      	bx	lr
	...

08004c94 <transferRecValuesToData>:
//	   cntVal=i;



}
void transferRecValuesToData(int cnt){
 8004c94:	b510      	push	{r4, lr}
	//   counter=cnt-2;
	   cnt=cnt+1;
	 //  while (!(RecMsg1[i] == 0x7D))
		for(int i=0;i<cnt;i++)
	   {
		   Data[i]=RecMsg4[i];
 8004c96:	4a05      	ldr	r2, [pc, #20]	; (8004cac <transferRecValuesToData+0x18>)
 8004c98:	4905      	ldr	r1, [pc, #20]	; (8004cb0 <transferRecValuesToData+0x1c>)
		for(int i=0;i<cnt;i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	4283      	cmp	r3, r0
 8004c9e:	dd00      	ble.n	8004ca2 <transferRecValuesToData+0xe>
////	   Data[i]=0x7D;
//	   cntVal=i;



}
 8004ca0:	bd10      	pop	{r4, pc}
		   Data[i]=RecMsg4[i];
 8004ca2:	5c5c      	ldrb	r4, [r3, r1]
 8004ca4:	549c      	strb	r4, [r3, r2]
		for(int i=0;i<cnt;i++)
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	e7f8      	b.n	8004c9c <transferRecValuesToData+0x8>
 8004caa:	bf00      	nop
 8004cac:	20003778 	.word	0x20003778
 8004cb0:	200053f4 	.word	0x200053f4

08004cb4 <clearingRecBuffer>:

}

void clearingRecBuffer()
{
int x=0;
 8004cb4:	2300      	movs	r3, #0
for(;x<160;x++)
{
RecMsg2[x]=0x00;
 8004cb6:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <clearingRecBuffer+0x10>)
 8004cb8:	4619      	mov	r1, r3
 8004cba:	5499      	strb	r1, [r3, r2]
for(;x<160;x++)
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc0:	d1fb      	bne.n	8004cba <clearingRecBuffer+0x6>

}

}
 8004cc2:	4770      	bx	lr
 8004cc4:	200054ee 	.word	0x200054ee

08004cc8 <clearingDisp1Buffer>:

}

void clearingDisp1Buffer()
{
int x=0;
 8004cc8:	2300      	movs	r3, #0
for(;x<40;x++)
{
Disp1[x]=0x00;
 8004cca:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <clearingDisp1Buffer+0x10>)
 8004ccc:	4619      	mov	r1, r3
 8004cce:	54d1      	strb	r1, [r2, r3]
for(;x<40;x++)
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	2b28      	cmp	r3, #40	; 0x28
 8004cd4:	d1fb      	bne.n	8004cce <clearingDisp1Buffer+0x6>

}

}
 8004cd6:	4770      	bx	lr
 8004cd8:	20000fc9 	.word	0x20000fc9

08004cdc <clearingFrameBuffer>:

}

void clearingFrameBuffer()
{
int x=0;
 8004cdc:	2300      	movs	r3, #0
for(;x<100;x++)
{
frame[x]=0x00;
 8004cde:	4a03      	ldr	r2, [pc, #12]	; (8004cec <clearingFrameBuffer+0x10>)
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	5499      	strb	r1, [r3, r2]
for(;x<100;x++)
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d1fb      	bne.n	8004ce2 <clearingFrameBuffer+0x6>

}

}
 8004cea:	4770      	bx	lr
 8004cec:	20003b01 	.word	0x20003b01

08004cf0 <function6_A>:
 {
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 	TimingDelay4=6;
 8004cf2:	4c43      	ldr	r4, [pc, #268]	; (8004e00 <function6_A+0x110>)
 8004cf4:	2306      	movs	r3, #6
 8004cf6:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8004cf8:	f000 face 	bl	8005298 <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	2a01      	cmp	r2, #1
 8004d00:	d1fc      	bne.n	8004cfc <function6_A+0xc>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d06:	483f      	ldr	r0, [pc, #252]	; (8004e04 <function6_A+0x114>)
 8004d08:	f7fb ff20 	bl	8000b4c <HAL_GPIO_WritePin>
	            TimingDelay4=12;
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8004d10:	f000 fac2 	bl	8005298 <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d1fc      	bne.n	8004d14 <function6_A+0x24>
if(noOfSides==3){
 8004d1a:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <function6_A+0x118>)
 8004d1c:	483b      	ldr	r0, [pc, #236]	; (8004e0c <function6_A+0x11c>)
 8004d1e:	7812      	ldrb	r2, [r2, #0]
	 frame[0] = 1;//Disp[0];//side1
 8004d20:	4c3b      	ldr	r4, [pc, #236]	; (8004e10 <function6_A+0x120>)
if(noOfSides==3){
 8004d22:	2a03      	cmp	r2, #3
	Disp[3]=0x01;
 8004d24:	bf04      	itt	eq
 8004d26:	70c3      	strbeq	r3, [r0, #3]
	Disp[9]=0x01;
 8004d28:	7243      	strbeq	r3, [r0, #9]
	 clearingFrameBuffer();
 8004d2a:	f7ff ffd7 	bl	8004cdc <clearingFrameBuffer>
	 frame[5] = Disp[4];//side13
 8004d2e:	7905      	ldrb	r5, [r0, #4]
	 frame[6] = Disp[5];//side24
 8004d30:	7941      	ldrb	r1, [r0, #5]
	 frame[10] =slaveNo;//slaveNo
 8004d32:	4838      	ldr	r0, [pc, #224]	; (8004e14 <function6_A+0x124>)
 8004d34:	7806      	ldrb	r6, [r0, #0]
	 	      Disp1[0]=frame[0];
 8004d36:	4838      	ldr	r0, [pc, #224]	; (8004e18 <function6_A+0x128>)
	 frame[10] =slaveNo;//slaveNo
 8004d38:	72a6      	strb	r6, [r4, #10]
	 frame[0] = 1;//Disp[0];//side1
 8004d3a:	2301      	movs	r3, #1
	 frame[2] = 3;//Disp[2];//side3
 8004d3c:	2203      	movs	r2, #3
	 frame[1] = 2;//Disp[1];//side2
 8004d3e:	2702      	movs	r7, #2
	 frame[5] = Disp[4];//side13
 8004d40:	b2ed      	uxtb	r5, r5
	 frame[6] = Disp[5];//side24
 8004d42:	b2c9      	uxtb	r1, r1
	 	      Disp1[0]=frame[0];
 8004d44:	7003      	strb	r3, [r0, #0]
	 frame[6] = Disp[5];//side24
 8004d46:	71a1      	strb	r1, [r4, #6]
	 	     Disp1[1]=frame[1];
 8004d48:	7047      	strb	r7, [r0, #1]
	 	    Disp1[2]=frame[2];
 8004d4a:	7082      	strb	r2, [r0, #2]
	 	   Disp1[3]=frame[3];
 8004d4c:	70c3      	strb	r3, [r0, #3]
	 	  Disp1[4]=frame[4];
 8004d4e:	7103      	strb	r3, [r0, #4]
	 	 Disp1[5]=frame[5];
 8004d50:	7145      	strb	r5, [r0, #5]
	 	Disp1[6]=frame[6];
 8004d52:	7181      	strb	r1, [r0, #6]
		byteToIntegerVal(&Disp1[0],0);
 8004d54:	2100      	movs	r1, #0
	 frame[0] = 1;//Disp[0];//side1
 8004d56:	7023      	strb	r3, [r4, #0]
	 frame[3] = 1;//Disp[3];//side4
 8004d58:	70e3      	strb	r3, [r4, #3]
	 frame[4] = 1;//Disp[4];//side5
 8004d5a:	7123      	strb	r3, [r4, #4]
	 frame[7] = 1;//Disp[7];//side5
 8004d5c:	71e3      	strb	r3, [r4, #7]
	 frame[9] = 1;//Disp[9];//GPIO
 8004d5e:	7263      	strb	r3, [r4, #9]
	 frame[11] = 1;//Disp[11];//GreenLeft
 8004d60:	72e3      	strb	r3, [r4, #11]
	 frame[12] = 1;//Disp[12];
 8004d62:	7323      	strb	r3, [r4, #12]
	 frame[13] = 1;//Disp[13];
 8004d64:	7363      	strb	r3, [r4, #13]
	 frame[14] = 1;//Disp[14];
 8004d66:	73a3      	strb	r3, [r4, #14]
	 frame[15] = 1;//Disp[15];
 8004d68:	73e3      	strb	r3, [r4, #15]
	 frame[16] = 1;//Disp[16];
 8004d6a:	7423      	strb	r3, [r4, #16]
	 frame[17] = 1;//Disp[17];
 8004d6c:	7463      	strb	r3, [r4, #17]
	 frame[18] = 1;//Disp[18];
 8004d6e:	74a3      	strb	r3, [r4, #18]
	 frame[19] = 1;//Disp[19];
 8004d70:	74e3      	strb	r3, [r4, #19]
	 	Disp1[7]=frame[7];
 8004d72:	71c3      	strb	r3, [r0, #7]
	 frame[2] = 3;//Disp[2];//side3
 8004d74:	70a2      	strb	r2, [r4, #2]
	 frame[8] = 3;//PWM
 8004d76:	7222      	strb	r2, [r4, #8]
	 	Disp1[8]=frame[8];
 8004d78:	7202      	strb	r2, [r0, #8]
	 frame[1] = 2;//Disp[1];//side2
 8004d7a:	7067      	strb	r7, [r4, #1]
	 frame[5] = Disp[4];//side13
 8004d7c:	7165      	strb	r5, [r4, #5]
	 	Disp1[9]=frame[9];
 8004d7e:	7243      	strb	r3, [r0, #9]
	 	Disp1[10]= frame[10];
 8004d80:	7286      	strb	r6, [r0, #10]
	 	Disp1[11]= frame[11];
 8004d82:	72c3      	strb	r3, [r0, #11]
	 	Disp1[12]= frame[12];
 8004d84:	7303      	strb	r3, [r0, #12]
	 	Disp1[13]= frame[13];
 8004d86:	7343      	strb	r3, [r0, #13]
	 	Disp1[14]= frame[14];
 8004d88:	7383      	strb	r3, [r0, #14]
	 	Disp1[15]= frame[15];
 8004d8a:	73c3      	strb	r3, [r0, #15]
	 	Disp1[16]=frame[16];
 8004d8c:	7403      	strb	r3, [r0, #16]
	 	Disp1[17]=frame[17];
 8004d8e:	7443      	strb	r3, [r0, #17]
	 	Disp1[18]=frame[18];
 8004d90:	7483      	strb	r3, [r0, #18]
	 	Disp1[19]=frame[19];
 8004d92:	74c3      	strb	r3, [r0, #19]
		byteToIntegerVal(&Disp1[0],0);
 8004d94:	f000 fb48 	bl	8005428 <byteToIntegerVal>
		 	       	CRCValue =	HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 19);
 8004d98:	2213      	movs	r2, #19
 8004d9a:	4920      	ldr	r1, [pc, #128]	; (8004e1c <function6_A+0x12c>)
 8004d9c:	4820      	ldr	r0, [pc, #128]	; (8004e20 <function6_A+0x130>)
 8004d9e:	f7fb fca1 	bl	80006e4 <HAL_CRC_Calculate>
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <function6_A+0x134>)
 8004da4:	6018      	str	r0, [r3, #0]
		 	       	intToByte(CRCValue);
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	f000 fb4e 	bl	8005448 <intToByte>
		           frame[20]=crcVal[3]; //CRC
 8004dac:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <function6_A+0x138>)
	 HAL_UART_Transmit (&huart2, (uint8_t*)frame,26,5000) ;
 8004dae:	481f      	ldr	r0, [pc, #124]	; (8004e2c <function6_A+0x13c>)
		           frame[20]=crcVal[3]; //CRC
 8004db0:	78da      	ldrb	r2, [r3, #3]
 8004db2:	7522      	strb	r2, [r4, #20]
		           frame[21]=crcVal[2]; //CRC
 8004db4:	789a      	ldrb	r2, [r3, #2]
 8004db6:	7562      	strb	r2, [r4, #21]
		           frame[22]=crcVal[1]; //CRC
 8004db8:	785a      	ldrb	r2, [r3, #1]
		           frame[23]=crcVal[0]; //CRC
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	75e3      	strb	r3, [r4, #23]
	 frame[24]=125 ;
 8004dbe:	237d      	movs	r3, #125	; 0x7d
 8004dc0:	7623      	strb	r3, [r4, #24]
	 frame[25]=125 ;
 8004dc2:	7663      	strb	r3, [r4, #25]
	 frame[26]=0x0D ;
 8004dc4:	230d      	movs	r3, #13
 8004dc6:	76a3      	strb	r3, [r4, #26]
	 frame[27]=0x0A ;
 8004dc8:	230a      	movs	r3, #10
		           frame[22]=crcVal[1]; //CRC
 8004dca:	75a2      	strb	r2, [r4, #22]
	 frame[27]=0x0A ;
 8004dcc:	76e3      	strb	r3, [r4, #27]
	 HAL_UART_Transmit (&huart2, (uint8_t*)frame,26,5000) ;
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dd4:	221a      	movs	r2, #26
 8004dd6:	f7fd fca9 	bl	800272c <HAL_UART_Transmit>
	 HAL_UART_Transmit (&huart6, (uint8_t*)frame,26,5000) ;
 8004dda:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dde:	4621      	mov	r1, r4
 8004de0:	221a      	movs	r2, #26
 8004de2:	4813      	ldr	r0, [pc, #76]	; (8004e30 <function6_A+0x140>)
 8004de4:	f7fd fca2 	bl	800272c <HAL_UART_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dee:	4805      	ldr	r0, [pc, #20]	; (8004e04 <function6_A+0x114>)
 8004df0:	f7fb feac 	bl	8000b4c <HAL_GPIO_WritePin>
	 clearingFrameBuffer();
 8004df4:	f7ff ff72 	bl	8004cdc <clearingFrameBuffer>
}
 8004df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	 clearingDisp1Buffer();
 8004dfc:	f7ff bf64 	b.w	8004cc8 <clearingDisp1Buffer>
 8004e00:	200015a0 	.word	0x200015a0
 8004e04:	40020800 	.word	0x40020800
 8004e08:	200000ed 	.word	0x200000ed
 8004e0c:	200010dd 	.word	0x200010dd
 8004e10:	20003b01 	.word	0x20003b01
 8004e14:	20000008 	.word	0x20000008
 8004e18:	20000fc9 	.word	0x20000fc9
 8004e1c:	2000153c 	.word	0x2000153c
 8004e20:	20000d48 	.word	0x20000d48
 8004e24:	20000078 	.word	0x20000078
 8004e28:	20003db8 	.word	0x20003db8
 8004e2c:	200015a4 	.word	0x200015a4
 8004e30:	2000132c 	.word	0x2000132c

08004e34 <clearingDataBuffer>:

void clearingDataBuffer()
{
int x=0;
 8004e34:	2300      	movs	r3, #0
for(;x<100;x++)
{
Data[x]=0x00;
 8004e36:	4a03      	ldr	r2, [pc, #12]	; (8004e44 <clearingDataBuffer+0x10>)
 8004e38:	4619      	mov	r1, r3
 8004e3a:	5499      	strb	r1, [r3, r2]
for(;x<100;x++)
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d1fb      	bne.n	8004e3a <clearingDataBuffer+0x6>

}

}
 8004e42:	4770      	bx	lr
 8004e44:	20003778 	.word	0x20003778

08004e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e48:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e4a:	2230      	movs	r2, #48	; 0x30
{
 8004e4c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e4e:	2100      	movs	r1, #0
 8004e50:	eb0d 0002 	add.w	r0, sp, r2
 8004e54:	f004 fc7e 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e58:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e5a:	2214      	movs	r2, #20
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	a807      	add	r0, sp, #28
 8004e60:	f004 fc78 	bl	8009754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e64:	4622      	mov	r2, r4
 8004e66:	2100      	movs	r1, #0
 8004e68:	a803      	add	r0, sp, #12
 8004e6a:	f004 fc73 	bl	8009754 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <SystemClock_Config+0xb8>)
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004e76:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004e7a:	6411      	str	r1, [r2, #64]	; 0x40
 8004e7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e7e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004e82:	9201      	str	r2, [sp, #4]
 8004e84:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <SystemClock_Config+0xbc>)
 8004e88:	9302      	str	r3, [sp, #8]
 8004e8a:	6811      	ldr	r1, [r2, #0]
 8004e8c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e94:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e9a:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e9c:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e9e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004ea0:	2332      	movs	r3, #50	; 0x32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004ea4:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004ea6:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004ea8:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004eaa:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004eac:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004eae:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004eb0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eb2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004eb4:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004eb6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004eb8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004eba:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ebc:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004ebe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ec0:	f7fc fa60 	bl	8001384 <HAL_RCC_OscConfig>
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	b100      	cbz	r0, 8004eca <SystemClock_Config+0x82>
 8004ec8:	e7fe      	b.n	8004ec8 <SystemClock_Config+0x80>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eca:	230f      	movs	r3, #15
 8004ecc:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004ece:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ed2:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004ed4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004ed6:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004edc:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ede:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004ee0:	f7fc fc00 	bl	80016e4 <HAL_RCC_ClockConfig>
 8004ee4:	b100      	cbz	r0, 8004ee8 <SystemClock_Config+0xa0>
 8004ee6:	e7fe      	b.n	8004ee6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004eec:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004eee:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004ef0:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ef2:	f7fc fcb1 	bl	8001858 <HAL_RCCEx_PeriphCLKConfig>
 8004ef6:	b100      	cbz	r0, 8004efa <SystemClock_Config+0xb2>
 8004ef8:	e7fe      	b.n	8004ef8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
  }
}
 8004efa:	b018      	add	sp, #96	; 0x60
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	40007000 	.word	0x40007000

08004f08 <main>:
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8004f0c:	f7fb fb08 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8004f10:	f7ff ff9a 	bl	8004e48 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f14:	2214      	movs	r2, #20
 8004f16:	2100      	movs	r1, #0
 8004f18:	a807      	add	r0, sp, #28
 8004f1a:	f004 fc1b 	bl	8009754 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f1e:	2400      	movs	r4, #0
 8004f20:	4b8e      	ldr	r3, [pc, #568]	; (800515c <main+0x254>)
 8004f22:	9401      	str	r4, [sp, #4]
 8004f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004f26:	488e      	ldr	r0, [pc, #568]	; (8005160 <main+0x258>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f28:	f042 0210 	orr.w	r2, r2, #16
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f30:	f002 0210 	and.w	r2, r2, #16
 8004f34:	9201      	str	r2, [sp, #4]
 8004f36:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f38:	9402      	str	r4, [sp, #8]
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3c:	f042 0204 	orr.w	r2, r2, #4
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
 8004f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f44:	f002 0204 	and.w	r2, r2, #4
 8004f48:	9202      	str	r2, [sp, #8]
 8004f4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f4c:	9403      	str	r4, [sp, #12]
 8004f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004f5c:	9203      	str	r2, [sp, #12]
 8004f5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f60:	9404      	str	r4, [sp, #16]
 8004f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6c:	f002 0201 	and.w	r2, r2, #1
 8004f70:	9204      	str	r2, [sp, #16]
 8004f72:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f74:	9405      	str	r4, [sp, #20]
 8004f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f78:	f042 0202 	orr.w	r2, r2, #2
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f80:	f002 0202 	and.w	r2, r2, #2
 8004f84:	9205      	str	r2, [sp, #20]
 8004f86:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f88:	9406      	str	r4, [sp, #24]
 8004f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8c:	f042 0208 	orr.w	r2, r2, #8
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	211e      	movs	r1, #30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f9e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8004fa0:	f7fb fdd4 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2, GPIO_PIN_RESET);
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	f242 010c 	movw	r1, #8204	; 0x200c
 8004faa:	486e      	ldr	r0, [pc, #440]	; (8005164 <main+0x25c>)
 8004fac:	f7fb fdce 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3||GPIO_PIN_1, GPIO_PIN_RESET);
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	486c      	ldr	r0, [pc, #432]	; (8005168 <main+0x260>)
 8004fb6:	f7fb fdc9 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 8004fba:	4622      	mov	r2, r4
 8004fbc:	f248 0108 	movw	r1, #32776	; 0x8008
 8004fc0:	486a      	ldr	r0, [pc, #424]	; (800516c <main+0x264>)
 8004fc2:	f7fb fdc3 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
 8004fc8:	231e      	movs	r3, #30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fca:	a907      	add	r1, sp, #28
 8004fcc:	4864      	ldr	r0, [pc, #400]	; (8005160 <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
 8004fce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fd6:	f7fb fcd3 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2;
 8004fda:	f242 030c 	movw	r3, #8204	; 0x200c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fde:	a907      	add	r1, sp, #28
 8004fe0:	4860      	ldr	r0, [pc, #384]	; (8005164 <main+0x25c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_2;
 8004fe2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fe4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fea:	f7fb fcc9 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8004fee:	f44f 73b8 	mov.w	r3, #368	; 0x170
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff2:	a907      	add	r1, sp, #28
 8004ff4:	485d      	ldr	r0, [pc, #372]	; (800516c <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8004ff6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ff8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pins : PE7 PE8 PE9 PE10 
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;//GPIO_NOPULL;
 8004ffc:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffe:	f7fb fcbf 	bl	8000980 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005002:	f647 73a0 	movw	r3, #32672	; 0x7fa0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005006:	a907      	add	r1, sp, #28
 8005008:	4855      	ldr	r0, [pc, #340]	; (8005160 <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800500a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800500c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;//GPIO_NOPULL;
 800500e:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005010:	f7fb fcb6 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_1;//PB1 is for shut down
 8005014:	f244 030a 	movw	r3, #16394	; 0x400a
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	a907      	add	r1, sp, #28
 800501a:	4853      	ldr	r0, [pc, #332]	; (8005168 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_1;//PB1 is for shut down
 800501c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800501e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005020:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005024:	f7fb fcac 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8005028:	f248 0308 	movw	r3, #32776	; 0x8008
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502c:	a907      	add	r1, sp, #28
 800502e:	484f      	ldr	r0, [pc, #316]	; (800516c <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8005030:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005032:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005036:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	f7fb fca2 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5; //for jump and extend
 800503c:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503e:	a907      	add	r1, sp, #28
 8005040:	4849      	ldr	r0, [pc, #292]	; (8005168 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5; //for jump and extend
 8005042:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005044:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8005046:	9509      	str	r5, [sp, #36]	; 0x24


  /*Configure GPIO pins : PE5 */
   GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005048:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504a:	f7fb fc99 	bl	8000980 <HAL_GPIO_Init>
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
   GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504e:	4844      	ldr	r0, [pc, #272]	; (8005160 <main+0x258>)
   GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005050:	9707      	str	r7, [sp, #28]
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005052:	a907      	add	r1, sp, #28
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005054:	9408      	str	r4, [sp, #32]
   GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8005056:	9509      	str	r5, [sp, #36]	; 0x24
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005058:	f7fb fc92 	bl	8000980 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 800505c:	4844      	ldr	r0, [pc, #272]	; (8005170 <main+0x268>)
 800505e:	4b45      	ldr	r3, [pc, #276]	; (8005174 <main+0x26c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005060:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005062:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8005066:	237f      	movs	r3, #127	; 0x7f
 8005068:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800506a:	23ff      	movs	r3, #255	; 0xff
 800506c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800506e:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005070:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005072:	f7fc fcbb 	bl	80019ec <HAL_RTC_Init>
 8005076:	b100      	cbz	r0, 800507a <main+0x172>
 8005078:	e7fe      	b.n	8005078 <main+0x170>
  huart3.Instance = USART3;
 800507a:	4b3f      	ldr	r3, [pc, #252]	; (8005178 <main+0x270>)
  huart3.Init.BaudRate = 38400;
 800507c:	4a3f      	ldr	r2, [pc, #252]	; (800517c <main+0x274>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800507e:	6098      	str	r0, [r3, #8]
  huart3.Init.BaudRate = 38400;
 8005080:	f44f 4816 	mov.w	r8, #38400	; 0x9600
 8005084:	e883 0104 	stmia.w	r3, {r2, r8}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005088:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800508a:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800508c:	f04f 080c 	mov.w	r8, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005090:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005092:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005094:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005096:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800509a:	f7fd fb19 	bl	80026d0 <HAL_UART_Init>
 800509e:	b100      	cbz	r0, 80050a2 <main+0x19a>
 80050a0:	e7fe      	b.n	80050a0 <main+0x198>
  hcrc.Instance = CRC;
 80050a2:	4837      	ldr	r0, [pc, #220]	; (8005180 <main+0x278>)
 80050a4:	4b37      	ldr	r3, [pc, #220]	; (8005184 <main+0x27c>)
 80050a6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80050a8:	f7fb fb0a 	bl	80006c0 <HAL_CRC_Init>
 80050ac:	4604      	mov	r4, r0
 80050ae:	b100      	cbz	r0, 80050b2 <main+0x1aa>
 80050b0:	e7fe      	b.n	80050b0 <main+0x1a8>
  hsd.Instance = SDIO;
 80050b2:	4b35      	ldr	r3, [pc, #212]	; (8005188 <main+0x280>)
 80050b4:	4a35      	ldr	r2, [pc, #212]	; (800518c <main+0x284>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80050b6:	6098      	str	r0, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80050b8:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockDiv = 3;
 80050bc:	2203      	movs	r2, #3
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80050be:	60d8      	str	r0, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80050c0:	6118      	str	r0, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80050c2:	6158      	str	r0, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80050c4:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 80050c6:	f7ff fd8d 	bl	8004be4 <MX_FATFS_Init>
  huart6.Instance = USART6;
 80050ca:	4831      	ldr	r0, [pc, #196]	; (8005190 <main+0x288>)
  huart6.Init.BaudRate = 9600;
 80050cc:	4b31      	ldr	r3, [pc, #196]	; (8005194 <main+0x28c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80050ce:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 9600;
 80050d0:	f44f 5c16 	mov.w	ip, #9600	; 0x2580
 80050d4:	e880 1008 	stmia.w	r0, {r3, ip}
  huart6.Init.StopBits = UART_STOPBITS_1;
 80050d8:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80050da:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80050dc:	f8c0 8014 	str.w	r8, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050e0:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80050e4:	f7fd faf4 	bl	80026d0 <HAL_UART_Init>
 80050e8:	b100      	cbz	r0, 80050ec <main+0x1e4>
 80050ea:	e7fe      	b.n	80050ea <main+0x1e2>
  huart1.Instance = USART1;
 80050ec:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <main+0x290>)
  huart1.Init.BaudRate = 115200;
 80050ee:	4a2b      	ldr	r2, [pc, #172]	; (800519c <main+0x294>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050f0:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 80050f2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050f6:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050f8:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050fa:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050fc:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050fe:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8005100:	e883 4004 	stmia.w	r3, {r2, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005104:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005108:	f7fd fae2 	bl	80026d0 <HAL_UART_Init>
 800510c:	b100      	cbz	r0, 8005110 <main+0x208>
 800510e:	e7fe      	b.n	800510e <main+0x206>
  huart2.Instance = USART2;
 8005110:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <main+0x298>)
  huart2.Init.BaudRate = 19200;
 8005112:	4a24      	ldr	r2, [pc, #144]	; (80051a4 <main+0x29c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005114:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 19200;
 8005116:	f44f 4496 	mov.w	r4, #19200	; 0x4b00
  huart2.Init.StopBits = UART_STOPBITS_1;
 800511a:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800511c:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800511e:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005120:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005122:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 19200;
 8005124:	e883 0014 	stmia.w	r3, {r2, r4}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005128:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800512c:	f7fd fad0 	bl	80026d0 <HAL_UART_Init>
 8005130:	b100      	cbz	r0, 8005134 <main+0x22c>
 8005132:	e7fe      	b.n	8005132 <main+0x22a>
  hi2c1.Instance = I2C1;
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 8005136:	491d      	ldr	r1, [pc, #116]	; (80051ac <main+0x2a4>)
 8005138:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <main+0x2a8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800513a:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800513c:	e883 0006 	stmia.w	r3, {r1, r2}
  hi2c1.Init.OwnAddress1 = 0;
 8005140:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005146:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005148:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800514a:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800514c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800514e:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005150:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005152:	f7fb fed7 	bl	8000f04 <HAL_I2C_Init>
 8005156:	4604      	mov	r4, r0
 8005158:	b360      	cbz	r0, 80051b4 <main+0x2ac>
 800515a:	e7fe      	b.n	800515a <main+0x252>
 800515c:	40023800 	.word	0x40023800
 8005160:	40021000 	.word	0x40021000
 8005164:	40020800 	.word	0x40020800
 8005168:	40020400 	.word	0x40020400
 800516c:	40020000 	.word	0x40020000
 8005170:	20001188 	.word	0x20001188
 8005174:	40002800 	.word	0x40002800
 8005178:	20000e30 	.word	0x20000e30
 800517c:	40004800 	.word	0x40004800
 8005180:	20000d48 	.word	0x20000d48
 8005184:	40023000 	.word	0x40023000
 8005188:	200011c0 	.word	0x200011c0
 800518c:	40012c00 	.word	0x40012c00
 8005190:	2000132c 	.word	0x2000132c
 8005194:	40011400 	.word	0x40011400
 8005198:	20001108 	.word	0x20001108
 800519c:	40011000 	.word	0x40011000
 80051a0:	200015a4 	.word	0x200015a4
 80051a4:	40004400 	.word	0x40004400
 80051a8:	20000e70 	.word	0x20000e70
 80051ac:	40005400 	.word	0x40005400
 80051b0:	000186a0 	.word	0x000186a0
         		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80051b4:	4602      	mov	r2, r0
 80051b6:	2110      	movs	r1, #16
 80051b8:	4822      	ldr	r0, [pc, #136]	; (8005244 <main+0x33c>)
 80051ba:	f7fb fcc7 	bl	8000b4c <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80051be:	462a      	mov	r2, r5
 80051c0:	2110      	movs	r1, #16
 80051c2:	4820      	ldr	r0, [pc, #128]	; (8005244 <main+0x33c>)
 80051c4:	f7fb fcc2 	bl	8000b4c <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80051c8:	4622      	mov	r2, r4
 80051ca:	2110      	movs	r1, #16
 80051cc:	481d      	ldr	r0, [pc, #116]	; (8005244 <main+0x33c>)
 80051ce:	f7fb fcbd 	bl	8000b4c <HAL_GPIO_WritePin>
         	       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80051d2:	4622      	mov	r2, r4
 80051d4:	4639      	mov	r1, r7
 80051d6:	481b      	ldr	r0, [pc, #108]	; (8005244 <main+0x33c>)
 80051d8:	f7fb fcb8 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80051dc:	4622      	mov	r2, r4
 80051de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <main+0x340>)
 80051e4:	f7fb fcb2 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80051e8:	4622      	mov	r2, r4
 80051ea:	4631      	mov	r1, r6
 80051ec:	4817      	ldr	r0, [pc, #92]	; (800524c <main+0x344>)
 80051ee:	f7fb fcad 	bl	8000b4c <HAL_GPIO_WritePin>
         	       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80051f2:	4622      	mov	r2, r4
 80051f4:	2104      	movs	r1, #4
 80051f6:	4815      	ldr	r0, [pc, #84]	; (800524c <main+0x344>)
 80051f8:	f7fb fca8 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80051fc:	4622      	mov	r2, r4
 80051fe:	2108      	movs	r1, #8
 8005200:	4812      	ldr	r0, [pc, #72]	; (800524c <main+0x344>)
 8005202:	f7fb fca3 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8005206:	4622      	mov	r2, r4
 8005208:	2110      	movs	r1, #16
 800520a:	4810      	ldr	r0, [pc, #64]	; (800524c <main+0x344>)
 800520c:	f7fb fc9e 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8005210:	462a      	mov	r2, r5
 8005212:	2104      	movs	r1, #4
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <main+0x344>)
 8005216:	f7fb fc99 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800521a:	462a      	mov	r2, r5
 800521c:	2108      	movs	r1, #8
 800521e:	480b      	ldr	r0, [pc, #44]	; (800524c <main+0x344>)
 8005220:	f7fb fc94 	bl	8000b4c <HAL_GPIO_WritePin>
         	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8005224:	462a      	mov	r2, r5
 8005226:	2110      	movs	r1, #16
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <main+0x344>)
 800522a:	f7fb fc8f 	bl	8000b4c <HAL_GPIO_WritePin>
         	       fres= f_mount(&FatFs, SDPath, 1);
 800522e:	462a      	mov	r2, r5
 8005230:	4907      	ldr	r1, [pc, #28]	; (8005250 <main+0x348>)
 8005232:	4808      	ldr	r0, [pc, #32]	; (8005254 <main+0x34c>)
 8005234:	f7fe fdf6 	bl	8003e24 <f_mount>
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <main+0x350>)
 800523a:	7018      	strb	r0, [r3, #0]
	  init4();
 800523c:	f003 fcae 	bl	8008b9c <init4>
 8005240:	e7fc      	b.n	800523c <main+0x334>
 8005242:	bf00      	nop
 8005244:	40020c00 	.word	0x40020c00
 8005248:	40020800 	.word	0x40020800
 800524c:	40021000 	.word	0x40021000
 8005250:	200008e1 	.word	0x200008e1
 8005254:	20000474 	.word	0x20000474
 8005258:	200006a8 	.word	0x200006a8

0800525c <TimingDelay_Decrement>:
}

/* USER CODE BEGIN 4 */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <TimingDelay_Decrement+0x10>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	b112      	cbz	r2, 8005268 <TimingDelay_Decrement+0xc>
  {
    TimingDelay--;
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	3a01      	subs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000ee4 	.word	0x20000ee4

08005270 <TimingDelay_Decrement1>:
  }
}
void TimingDelay_Decrement1(void)
{
  if (TimingDelay1 != 0x00)
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <TimingDelay_Decrement1+0x10>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	b112      	cbz	r2, 800527c <TimingDelay_Decrement1+0xc>
  {
    TimingDelay1--;
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	3a01      	subs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	200015ec 	.word	0x200015ec

08005284 <TimingDelay_Decrement3>:
    TimingDelay2--;
  }
}
void TimingDelay_Decrement3(void)
{
  if (TimingDelay3 != 0x00)
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <TimingDelay_Decrement3+0x10>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	b112      	cbz	r2, 8005290 <TimingDelay_Decrement3+0xc>
  {
    TimingDelay3--;
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	3a01      	subs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000e28 	.word	0x20000e28

08005298 <TimingDelay_Decrement4>:
  }
}
void TimingDelay_Decrement4(void)
{
  if (TimingDelay4 != 0x00)
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <TimingDelay_Decrement4+0x10>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	b112      	cbz	r2, 80052a4 <TimingDelay_Decrement4+0xc>
  {
    TimingDelay4--;
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	3a01      	subs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	200015a0 	.word	0x200015a0

080052ac <TimingDelay_Decrement5>:
  }
}
void TimingDelay_Decrement5(void)
{
  if (TimingDelay5 != 0x00)
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <TimingDelay_Decrement5+0x10>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	b112      	cbz	r2, 80052b8 <TimingDelay_Decrement5+0xc>
  {
    TimingDelay5--;
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	3a01      	subs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200011b8 	.word	0x200011b8

080052c0 <clearframe>:




void clearframe() {
	int x = 0;
 80052c0:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		frame[x] = 0x00;
 80052c2:	4a03      	ldr	r2, [pc, #12]	; (80052d0 <clearframe+0x10>)
 80052c4:	4619      	mov	r1, r3
 80052c6:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 80052c8:	3301      	adds	r3, #1
 80052ca:	2ba0      	cmp	r3, #160	; 0xa0
 80052cc:	d1fb      	bne.n	80052c6 <clearframe+0x6>

	}
}
 80052ce:	4770      	bx	lr
 80052d0:	20003b01 	.word	0x20003b01

080052d4 <clearReadBytes>:

void clearReadBytes() {
	int x = 0;
 80052d4:	2300      	movs	r3, #0
	for (; x < 350; x++) {
		readBytes[x] = 0x00;
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <clearReadBytes+0x14>)
 80052d8:	4619      	mov	r1, r3
 80052da:	5499      	strb	r1, [r3, r2]
	for (; x < 350; x++) {
 80052dc:	3301      	adds	r3, #1
 80052de:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80052e2:	d1fa      	bne.n	80052da <clearReadBytes+0x6>

	}
}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000314 	.word	0x20000314

080052ec <clearBuffer>:
void clearBuffer() {
	int x = 0;
 80052ec:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg2[x] = 0x00;
 80052ee:	4a03      	ldr	r2, [pc, #12]	; (80052fc <clearBuffer+0x10>)
 80052f0:	4619      	mov	r1, r3
 80052f2:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 80052f4:	3301      	adds	r3, #1
 80052f6:	2ba0      	cmp	r3, #160	; 0xa0
 80052f8:	d1fb      	bne.n	80052f2 <clearBuffer+0x6>

	}
}
 80052fa:	4770      	bx	lr
 80052fc:	200054ee 	.word	0x200054ee

08005300 <clearDispBuffer>:

void clearDispBuffer() {
//	int x = 0;
//	for (; x < 40; x++) {
		Disp[0] = 0x00;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <clearDispBuffer+0x10>)
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
		Disp[1] = 0x00;
 8005306:	705a      	strb	r2, [r3, #1]
		Disp[2] = 0x00;
 8005308:	709a      	strb	r2, [r3, #2]
		Disp[3] = 0x00;
 800530a:	70da      	strb	r2, [r3, #3]
		Disp[6] = 0x00;
 800530c:	719a      	strb	r2, [r3, #6]
 800530e:	4770      	bx	lr
 8005310:	200010dd 	.word	0x200010dd

08005314 <clearaRxBuffer>:

	}
}

void clearaRxBuffer() {
	int x = 0;
 8005314:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer[x] = 0x00;
 8005316:	4a03      	ldr	r2, [pc, #12]	; (8005324 <clearaRxBuffer+0x10>)
 8005318:	4619      	mov	r1, r3
 800531a:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 800531c:	3301      	adds	r3, #1
 800531e:	2ba0      	cmp	r3, #160	; 0xa0
 8005320:	d1fb      	bne.n	800531a <clearaRxBuffer+0x6>

	}
}
 8005322:	4770      	bx	lr
 8005324:	2000136c 	.word	0x2000136c

08005328 <clearBuffer3>:
		aRxBuffer1[x] = 0x00;

	}
}
void clearBuffer3() {
	int x = 0;
 8005328:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg3[x] = 0x00;
 800532a:	4a03      	ldr	r2, [pc, #12]	; (8005338 <clearBuffer3+0x10>)
 800532c:	4619      	mov	r1, r3
 800532e:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005330:	3301      	adds	r3, #1
 8005332:	2ba0      	cmp	r3, #160	; 0xa0
 8005334:	d1fb      	bne.n	800532e <clearBuffer3+0x6>

	}
}
 8005336:	4770      	bx	lr
 8005338:	200056e2 	.word	0x200056e2

0800533c <clearaRxBuffer3>:

void clearaRxBuffer3() {
	int x = 0;
 800533c:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer3[x] = 0x00;
 800533e:	4a03      	ldr	r2, [pc, #12]	; (800534c <clearaRxBuffer3+0x10>)
 8005340:	4619      	mov	r1, r3
 8005342:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005344:	3301      	adds	r3, #1
 8005346:	2ba0      	cmp	r3, #160	; 0xa0
 8005348:	d1fb      	bne.n	8005342 <clearaRxBuffer3+0x6>

	}
}
 800534a:	4770      	bx	lr
 800534c:	20000ffc 	.word	0x20000ffc

08005350 <clearBuffer4>:

void clearBuffer4() {
	int x = 0;
 8005350:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		RecMsg4[x] = 0x00;
 8005352:	4a03      	ldr	r2, [pc, #12]	; (8005360 <clearBuffer4+0x10>)
 8005354:	4619      	mov	r1, r3
 8005356:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 8005358:	3301      	adds	r3, #1
 800535a:	2ba0      	cmp	r3, #160	; 0xa0
 800535c:	d1fb      	bne.n	8005356 <clearBuffer4+0x6>

	}
}
 800535e:	4770      	bx	lr
 8005360:	200053f4 	.word	0x200053f4

08005364 <clearaRxBuffer4>:

void clearaRxBuffer4() {
	int x = 0;
 8005364:	2300      	movs	r3, #0
	for (; x < 160; x++) {
		aRxBuffer4[x] = 0x00;
 8005366:	4a03      	ldr	r2, [pc, #12]	; (8005374 <clearaRxBuffer4+0x10>)
 8005368:	4619      	mov	r1, r3
 800536a:	5499      	strb	r1, [r3, r2]
	for (; x < 160; x++) {
 800536c:	3301      	adds	r3, #1
 800536e:	2ba0      	cmp	r3, #160	; 0xa0
 8005370:	d1fb      	bne.n	800536a <clearaRxBuffer4+0x6>

	}
}
 8005372:	4770      	bx	lr
 8005374:	20001458 	.word	0x20001458

08005378 <clearPlanDetailsArrayBuffer>:
}



void clearPlanDetailsArrayBuffer() {
	int x = 0;
 8005378:	2300      	movs	r3, #0
	for (; x < 149; x++) {
		planDetailsArray[x] = 0x00;
 800537a:	4a03      	ldr	r2, [pc, #12]	; (8005388 <clearPlanDetailsArrayBuffer+0x10>)
 800537c:	4619      	mov	r1, r3
 800537e:	5499      	strb	r1, [r3, r2]
	for (; x < 149; x++) {
 8005380:	3301      	adds	r3, #1
 8005382:	2b95      	cmp	r3, #149	; 0x95
 8005384:	d1fb      	bne.n	800537e <clearPlanDetailsArrayBuffer+0x6>

	}
}
 8005386:	4770      	bx	lr
 8005388:	20003bb5 	.word	0x20003bb5

0800538c <clearPlanTimeBuffer>:



void clearPlanTimeBuffer() {
	int x = 0;
 800538c:	2300      	movs	r3, #0
	for (; x < 49; x++) {
		planTime[x] = 0x00;
 800538e:	4a03      	ldr	r2, [pc, #12]	; (800539c <clearPlanTimeBuffer+0x10>)
 8005390:	4619      	mov	r1, r3
 8005392:	5499      	strb	r1, [r3, r2]
	for (; x < 49; x++) {
 8005394:	3301      	adds	r3, #1
 8005396:	2b31      	cmp	r3, #49	; 0x31
 8005398:	d1fb      	bne.n	8005392 <clearPlanTimeBuffer+0x6>

	}
}
 800539a:	4770      	bx	lr
 800539c:	20001148 	.word	0x20001148

080053a0 <crcApi>:
//		frame[21] = 0x0D;
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 21, 5000);

}

int crcApi(void) {
 80053a0:	b510      	push	{r4, lr}

	int zzzz = zxx9 + frame[3]; // have changed frame[3] to frame[5]
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <crcApi+0x1c>)
 80053a4:	78da      	ldrb	r2, [r3, #3]
 80053a6:	1d19      	adds	r1, r3, #4
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; to zxx9=6;
	zzzz = zxx9 + frame[3];
 80053a8:	3204      	adds	r2, #4
	int zyy9 = 0;
 80053aa:	2000      	movs	r0, #0
	while (zxx9 < zzzz) {
 80053ac:	1acc      	subs	r4, r1, r3
 80053ae:	42a2      	cmp	r2, r4
 80053b0:	dc00      	bgt.n	80053b4 <crcApi+0x14>
		zyy9 = zyy9 + frame[zxx9++];
	}

	return zyy9;

}
 80053b2:	bd10      	pop	{r4, pc}
		zyy9 = zyy9 + frame[zxx9++];
 80053b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b8:	4420      	add	r0, r4
 80053ba:	e7f7      	b.n	80053ac <crcApi+0xc>
 80053bc:	20003b01 	.word	0x20003b01

080053c0 <crcApiResponse>:

int crcApiResponse(void) {
 80053c0:	b510      	push	{r4, lr}

	int zzzzRes = zxx9Res + frame[5]; // have changed frame[3] to frame[5]
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <crcApiResponse+0x1c>)
 80053c4:	795a      	ldrb	r2, [r3, #5]
 80053c6:	1d99      	adds	r1, r3, #6
	int zyy9Res = 0;
	int zxx9Res = 6;           // have changed zxx9=4; to zxx9=6;
	zzzzRes = zxx9Res + frame[5];
 80053c8:	3206      	adds	r2, #6
	int zyy9Res = 0;
 80053ca:	2000      	movs	r0, #0
	while (zxx9Res < zzzzRes) {
 80053cc:	1acc      	subs	r4, r1, r3
 80053ce:	42a2      	cmp	r2, r4
 80053d0:	dc00      	bgt.n	80053d4 <crcApiResponse+0x14>
		zyy9Res = zyy9Res + frame[zxx9Res++];
	}

	return zyy9Res;

}
 80053d2:	bd10      	pop	{r4, pc}
		zyy9Res = zyy9Res + frame[zxx9Res++];
 80053d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053d8:	4420      	add	r0, r4
 80053da:	e7f7      	b.n	80053cc <crcApiResponse+0xc>
 80053dc:	20003b01 	.word	0x20003b01

080053e0 <readDateSD>:




}
void readDateSD(int cnt){
 80053e0:	b508      	push	{r3, lr}
	clearReadBytes();
 80053e2:	f7ff ff77 	bl	80052d4 <clearReadBytes>
	SDcardReadSeek("date.txt", 18, cnt);
 80053e6:	2112      	movs	r1, #18
 80053e8:	4602      	mov	r2, r0




}
 80053ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("date.txt", 18, cnt);
 80053ee:	4801      	ldr	r0, [pc, #4]	; (80053f4 <readDateSD+0x14>)
 80053f0:	f7ff bb18 	b.w	8004a24 <SDcardReadSeek>
 80053f4:	0800987e 	.word	0x0800987e

080053f8 <readDaySD>:

void readDaySD(int cnt){
 80053f8:	b508      	push	{r3, lr}
	clearReadBytes();
 80053fa:	f7ff ff6b 	bl	80052d4 <clearReadBytes>
	SDcardReadSeek("day.txt", 100, cnt);
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	4602      	mov	r2, r0




}
 8005402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("day.txt", 100, cnt);
 8005406:	4801      	ldr	r0, [pc, #4]	; (800540c <readDaySD+0x14>)
 8005408:	f7ff bb0c 	b.w	8004a24 <SDcardReadSeek>
 800540c:	08009887 	.word	0x08009887

08005410 <readPlanSD>:
void readPlanSD(int cnt){
 8005410:	b508      	push	{r3, lr}
	clearReadBytes();
 8005412:	f7ff ff5f 	bl	80052d4 <clearReadBytes>
	SDcardReadSeek("planN.txt", 19, cnt);
 8005416:	2113      	movs	r1, #19
 8005418:	4602      	mov	r2, r0




}
 800541a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SDcardReadSeek("planN.txt", 19, cnt);
 800541e:	4801      	ldr	r0, [pc, #4]	; (8005424 <readPlanSD+0x14>)
 8005420:	f7ff bb00 	b.w	8004a24 <SDcardReadSeek>
 8005424:	08009899 	.word	0x08009899

08005428 <byteToIntegerVal>:
//		}
//		if (temp == 9)
//			break;
//	}
//}
void byteToIntegerVal(char *dat, uint8_t index) {
 8005428:	b530      	push	{r4, r5, lr}
	int zx = 0;
//	while (zx<8)
	while (zx < 24)

	{
		stringInt[zx + index] = *dat;
 800542a:	4a06      	ldr	r2, [pc, #24]	; (8005444 <byteToIntegerVal+0x1c>)
 800542c:	f100 0318 	add.w	r3, r0, #24
 8005430:	1a09      	subs	r1, r1, r0
 8005432:	1844      	adds	r4, r0, r1
 8005434:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005438:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
	while (zx < 24)
 800543c:	4298      	cmp	r0, r3
 800543e:	d1f8      	bne.n	8005432 <byteToIntegerVal+0xa>

		*dat++;
		zx++;

	}
}
 8005440:	bd30      	pop	{r4, r5, pc}
 8005442:	bf00      	nop
 8005444:	2000153c 	.word	0x2000153c

08005448 <intToByte>:

void intToByte(int val) {
	test = val;
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <intToByte+0x34>)
 800544a:	6018      	str	r0, [r3, #0]
	test &= 0xFF;
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	601a      	str	r2, [r3, #0]
	crcVal[0] = test;
 8005452:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <intToByte+0x38>)
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	7011      	strb	r1, [r2, #0]

	test = (val & 0xFF00) >> 8;
 8005458:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800545c:	6019      	str	r1, [r3, #0]
	crcVal[1] = test;
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	7051      	strb	r1, [r2, #1]

	test = (val & 0xFF0000) >> 16;
 8005462:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8005466:	6019      	str	r1, [r3, #0]
	crcVal[2] = test;
	test = (val & 0xFF000000) >> 24;
 8005468:	0e00      	lsrs	r0, r0, #24
	crcVal[2] = test;
 800546a:	6819      	ldr	r1, [r3, #0]
	test = (val & 0xFF000000) >> 24;
 800546c:	6018      	str	r0, [r3, #0]
	crcVal[3] = test;
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	70d3      	strb	r3, [r2, #3]
	crcVal[4] = 0;
 8005472:	2300      	movs	r3, #0
	crcVal[2] = test;
 8005474:	7091      	strb	r1, [r2, #2]
	crcVal[4] = 0;
 8005476:	7113      	strb	r3, [r2, #4]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000118 	.word	0x20000118
 8005480:	20003db8 	.word	0x20003db8

08005484 <clearStringBuffer>:
		k++;
	}
}

void clearStringBuffer() {
	for (int i = 0; i < 10; i++) {
 8005484:	2300      	movs	r3, #0
		string[i] = 0x00;
 8005486:	4a03      	ldr	r2, [pc, #12]	; (8005494 <clearStringBuffer+0x10>)
 8005488:	4619      	mov	r1, r3
 800548a:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < 10; i++) {
 800548c:	3301      	adds	r3, #1
 800548e:	2b0a      	cmp	r3, #10
 8005490:	d1fb      	bne.n	800548a <clearStringBuffer+0x6>
	}
}
 8005492:	4770      	bx	lr
 8005494:	20005312 	.word	0x20005312

08005498 <countDown>:
}

void countDown()
{

	if (planMode==2) //signal with without pedestrian
 8005498:	4b8b      	ldr	r3, [pc, #556]	; (80056c8 <countDown+0x230>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d17b      	bne.n	8005598 <countDown+0x100>
	     {
		switch(phase_No)
 80054a0:	4b8a      	ldr	r3, [pc, #552]	; (80056cc <countDown+0x234>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d831      	bhi.n	800550e <countDown+0x76>
 80054aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054ae:	0087      	.short	0x0087
 80054b0:	00b300ad 	.word	0x00b300ad
 80054b4:	00100009 	.word	0x00100009
 80054b8:	00360031 	.word	0x00360031
 80054bc:	00550109 	.word	0x00550109
			Disp[0]=planS2GT+planS3GT+planS4GT+planS5GT+planA2GT+planA3GT+planA4GT+planA5GT+padestarianTime;
			Disp[1]=planS2GT;
			break;

		case 4:
			Disp[1]=planA2GT ;
 80054c0:	4b83      	ldr	r3, [pc, #524]	; (80056d0 <countDown+0x238>)
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	4b83      	ldr	r3, [pc, #524]	; (80056d4 <countDown+0x23c>)
 80054c6:	705a      	strb	r2, [r3, #1]
		break;

	case 8:
		Disp[3]=planA4GT ;
//		Disp[0]=planA4GT;
		Disp[7]=0x08  ;
 80054c8:	2208      	movs	r2, #8
 80054ca:	71da      	strb	r2, [r3, #7]
		break;
 80054cc:	4770      	bx	lr
			Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT+planA5GT+padestarianTime+planS1GT+planA1GT;
 80054ce:	4b82      	ldr	r3, [pc, #520]	; (80056d8 <countDown+0x240>)
 80054d0:	4a82      	ldr	r2, [pc, #520]	; (80056dc <countDown+0x244>)
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	4b82      	ldr	r3, [pc, #520]	; (80056e0 <countDown+0x248>)
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	440b      	add	r3, r1
 80054dc:	4413      	add	r3, r2
 80054de:	4a81      	ldr	r2, [pc, #516]	; (80056e4 <countDown+0x24c>)
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	4a80      	ldr	r2, [pc, #512]	; (80056e8 <countDown+0x250>)
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	4a80      	ldr	r2, [pc, #512]	; (80056ec <countDown+0x254>)
 80054ec:	7812      	ldrb	r2, [r2, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	4a7f      	ldr	r2, [pc, #508]	; (80056f0 <countDown+0x258>)
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a7f      	ldr	r2, [pc, #508]	; (80056f4 <countDown+0x25c>)
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	4a7e      	ldr	r2, [pc, #504]	; (80056f8 <countDown+0x260>)
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	4413      	add	r3, r2
		Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT +planA5GT+padestarianTime+padestarianTime;
 8005502:	4a74      	ldr	r2, [pc, #464]	; (80056d4 <countDown+0x23c>)
 8005504:	b2db      	uxtb	r3, r3
 8005506:	7053      	strb	r3, [r2, #1]
		Disp[2]=planS3GT;
 8005508:	7091      	strb	r1, [r2, #2]
		Disp[7]=0x08  ;
 800550a:	2308      	movs	r3, #8
//			Disp[1]=padestarianTime;
//			Disp[2]=padestarianTime;
//		}
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
		Disp[6]=planS5GT ;
		Disp[7]=0x03  ;
 800550c:	71d3      	strb	r3, [r2, #7]
 800550e:	4770      	bx	lr
			Disp[2]=planA3GT ;
 8005510:	4b74      	ldr	r3, [pc, #464]	; (80056e4 <countDown+0x24c>)
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	4b6f      	ldr	r3, [pc, #444]	; (80056d4 <countDown+0x23c>)
		Disp[2]=planA2GT;
 8005516:	709a      	strb	r2, [r3, #2]
 8005518:	e7d6      	b.n	80054c8 <countDown+0x30>
			Disp[2]=planS4GT+planS5GT+planA4GT+planA5GT+planS1GT+planA1GT+planA2GT+planS2GT+padestarianTime ;
 800551a:	4b71      	ldr	r3, [pc, #452]	; (80056e0 <countDown+0x248>)
 800551c:	4a72      	ldr	r2, [pc, #456]	; (80056e8 <countDown+0x250>)
 800551e:	7819      	ldrb	r1, [r3, #0]
 8005520:	4b6e      	ldr	r3, [pc, #440]	; (80056dc <countDown+0x244>)
 8005522:	7812      	ldrb	r2, [r2, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	440b      	add	r3, r1
 8005528:	4413      	add	r3, r2
 800552a:	4a70      	ldr	r2, [pc, #448]	; (80056ec <countDown+0x254>)
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	4413      	add	r3, r2
 8005530:	4a6f      	ldr	r2, [pc, #444]	; (80056f0 <countDown+0x258>)
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	4413      	add	r3, r2
 8005536:	4a6f      	ldr	r2, [pc, #444]	; (80056f4 <countDown+0x25c>)
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	4413      	add	r3, r2
 800553c:	4a64      	ldr	r2, [pc, #400]	; (80056d0 <countDown+0x238>)
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	4413      	add	r3, r2
 8005542:	4a6e      	ldr	r2, [pc, #440]	; (80056fc <countDown+0x264>)
		Disp[2]=planS1GT+planS2GT+planS4GT+planS5GT+planA1GT+planA2GT+planA4GT+planA5GT+padestarianTime ;
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	4413      	add	r3, r2
 8005548:	4a6b      	ldr	r2, [pc, #428]	; (80056f8 <countDown+0x260>)
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	4413      	add	r3, r2
 800554e:	4a61      	ldr	r2, [pc, #388]	; (80056d4 <countDown+0x23c>)
 8005550:	b2db      	uxtb	r3, r3
 8005552:	7093      	strb	r3, [r2, #2]
		Disp[3]=planS4GT;
 8005554:	70d1      	strb	r1, [r2, #3]
 8005556:	e7d8      	b.n	800550a <countDown+0x72>
			Disp[3]=planS5GT+planA5GT+padestarianTime+planA1GT+planS1GT+planA2GT+planS2GT
 8005558:	4b60      	ldr	r3, [pc, #384]	; (80056dc <countDown+0x244>)
 800555a:	4a66      	ldr	r2, [pc, #408]	; (80056f4 <countDown+0x25c>)
 800555c:	7819      	ldrb	r1, [r3, #0]
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <countDown+0x254>)
			+planA3GT+planS3GT;
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	440b      	add	r3, r1
 8005566:	4413      	add	r3, r2
			Disp[3]=planS5GT+planA5GT+padestarianTime+planA1GT+planS1GT+planA2GT+planS2GT
 8005568:	4a61      	ldr	r2, [pc, #388]	; (80056f0 <countDown+0x258>)
			+planA3GT+planS3GT;
 800556a:	7812      	ldrb	r2, [r2, #0]
 800556c:	4413      	add	r3, r2
			Disp[3]=planS5GT+planA5GT+padestarianTime+planA1GT+planS1GT+planA2GT+planS2GT
 800556e:	4a58      	ldr	r2, [pc, #352]	; (80056d0 <countDown+0x238>)
			+planA3GT+planS3GT;
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	4413      	add	r3, r2
			Disp[3]=planS5GT+planA5GT+padestarianTime+planA1GT+planS1GT+planA2GT+planS2GT
 8005574:	4a61      	ldr	r2, [pc, #388]	; (80056fc <countDown+0x264>)
			+planA3GT+planS3GT;
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	4413      	add	r3, r2
 800557a:	4a5a      	ldr	r2, [pc, #360]	; (80056e4 <countDown+0x24c>)
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	4413      	add	r3, r2
 8005580:	4a55      	ldr	r2, [pc, #340]	; (80056d8 <countDown+0x240>)
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	4413      	add	r3, r2
 8005586:	4a5c      	ldr	r2, [pc, #368]	; (80056f8 <countDown+0x260>)
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	4413      	add	r3, r2
 800558c:	4a51      	ldr	r2, [pc, #324]	; (80056d4 <countDown+0x23c>)
 800558e:	b2db      	uxtb	r3, r3
 8005590:	70d3      	strb	r3, [r2, #3]
		Disp[6]=planS5GT ;
 8005592:	7191      	strb	r1, [r2, #6]
		Disp[7]=0x03  ;
 8005594:	2303      	movs	r3, #3
 8005596:	e7b9      	b.n	800550c <countDown+0x74>
	if (planMode==3) //signal with pedestrian
 8005598:	2b03      	cmp	r3, #3
 800559a:	d1b8      	bne.n	800550e <countDown+0x76>
		switch(phase_No)
 800559c:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <countDown+0x234>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d8b3      	bhi.n	800550e <countDown+0x76>
 80055a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80055aa:	0009      	.short	0x0009
 80055ac:	0035002f 	.word	0x0035002f
 80055b0:	00590054 	.word	0x00590054
 80055b4:	0075006f 	.word	0x0075006f
 80055b8:	00ab008b 	.word	0x00ab008b
		Disp[0]=planS1GT ;
 80055bc:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <countDown+0x258>)
		Disp[1]=Disp[0]+planA1GT;
 80055be:	494d      	ldr	r1, [pc, #308]	; (80056f4 <countDown+0x25c>)
		Disp[0]=planS1GT ;
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	4b44      	ldr	r3, [pc, #272]	; (80056d4 <countDown+0x23c>)
		Disp[1]=Disp[0]+planA1GT;
 80055c4:	7809      	ldrb	r1, [r1, #0]
		Disp[0]=planS1GT ;
 80055c6:	701a      	strb	r2, [r3, #0]
		Disp[1]=Disp[0]+planA1GT;
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	440a      	add	r2, r1
 80055cc:	b2d2      	uxtb	r2, r2
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80055ce:	4940      	ldr	r1, [pc, #256]	; (80056d0 <countDown+0x238>)
		Disp[1]=Disp[0]+planA1GT;
 80055d0:	705a      	strb	r2, [r3, #1]
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80055d2:	785a      	ldrb	r2, [r3, #1]
 80055d4:	7809      	ldrb	r1, [r1, #0]
 80055d6:	440a      	add	r2, r1
 80055d8:	4948      	ldr	r1, [pc, #288]	; (80056fc <countDown+0x264>)
 80055da:	7809      	ldrb	r1, [r1, #0]
 80055dc:	440a      	add	r2, r1
 80055de:	b2d2      	uxtb	r2, r2
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80055e0:	4940      	ldr	r1, [pc, #256]	; (80056e4 <countDown+0x24c>)
		Disp[2]=Disp[1]+planA2GT+planS2GT;
 80055e2:	709a      	strb	r2, [r3, #2]
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80055e4:	789a      	ldrb	r2, [r3, #2]
 80055e6:	7809      	ldrb	r1, [r1, #0]
 80055e8:	440a      	add	r2, r1
 80055ea:	493b      	ldr	r1, [pc, #236]	; (80056d8 <countDown+0x240>)
 80055ec:	7809      	ldrb	r1, [r1, #0]
 80055ee:	440a      	add	r2, r1
 80055f0:	b2d2      	uxtb	r2, r2
		Disp[6]=Disp[3]+planA4GT+planS4GT;
 80055f2:	493d      	ldr	r1, [pc, #244]	; (80056e8 <countDown+0x250>)
		Disp[3]=Disp[2]+planA3GT+planS3GT;
 80055f4:	70da      	strb	r2, [r3, #3]
		Disp[6]=Disp[3]+planA4GT+planS4GT;
 80055f6:	78da      	ldrb	r2, [r3, #3]
 80055f8:	7809      	ldrb	r1, [r1, #0]
 80055fa:	440a      	add	r2, r1
 80055fc:	4938      	ldr	r1, [pc, #224]	; (80056e0 <countDown+0x248>)
 80055fe:	7809      	ldrb	r1, [r1, #0]
 8005600:	440a      	add	r2, r1
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	719a      	strb	r2, [r3, #6]
 8005606:	e75f      	b.n	80054c8 <countDown+0x30>
		Disp[0]=planA1GT ;
 8005608:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <countDown+0x25c>)
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <countDown+0x23c>)
 800560e:	701a      	strb	r2, [r3, #0]
		Disp[1]=planA1GT;
 8005610:	705a      	strb	r2, [r3, #1]
		break;
 8005612:	4770      	bx	lr
		Disp[0]=planS2GT+planS3GT+planS4GT+planS5GT+planA2GT+planA3GT+planA4GT+planA5GT+padestarianTime ;
 8005614:	4b39      	ldr	r3, [pc, #228]	; (80056fc <countDown+0x264>)
 8005616:	4a32      	ldr	r2, [pc, #200]	; (80056e0 <countDown+0x248>)
 8005618:	7819      	ldrb	r1, [r3, #0]
 800561a:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <countDown+0x240>)
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	440b      	add	r3, r1
 8005622:	4413      	add	r3, r2
 8005624:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <countDown+0x244>)
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	4413      	add	r3, r2
 800562a:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <countDown+0x238>)
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	4413      	add	r3, r2
 8005630:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <countDown+0x24c>)
 8005632:	7812      	ldrb	r2, [r2, #0]
 8005634:	4413      	add	r3, r2
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <countDown+0x250>)
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	4413      	add	r3, r2
 800563c:	4a2b      	ldr	r2, [pc, #172]	; (80056ec <countDown+0x254>)
 800563e:	7812      	ldrb	r2, [r2, #0]
 8005640:	4413      	add	r3, r2
 8005642:	4a2d      	ldr	r2, [pc, #180]	; (80056f8 <countDown+0x260>)
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	4413      	add	r3, r2
 8005648:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <countDown+0x23c>)
 800564a:	b2db      	uxtb	r3, r3
 800564c:	7013      	strb	r3, [r2, #0]
		Disp[1]=planS2GT;
 800564e:	7051      	strb	r1, [r2, #1]
		break;
 8005650:	4770      	bx	lr
		Disp[1]=planA2GT ;
 8005652:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <countDown+0x238>)
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <countDown+0x23c>)
 8005658:	705a      	strb	r2, [r3, #1]
 800565a:	e75c      	b.n	8005516 <countDown+0x7e>
		Disp[1]=planS3GT+planS4GT+planS5GT+planA3GT+planA4GT +planA5GT+padestarianTime+padestarianTime;
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <countDown+0x240>)
 800565e:	481f      	ldr	r0, [pc, #124]	; (80056dc <countDown+0x244>)
 8005660:	7819      	ldrb	r1, [r3, #0]
 8005662:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <countDown+0x260>)
 8005664:	7800      	ldrb	r0, [r0, #0]
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <countDown+0x248>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	440b      	add	r3, r1
 800566e:	4403      	add	r3, r0
 8005670:	481c      	ldr	r0, [pc, #112]	; (80056e4 <countDown+0x24c>)
 8005672:	7800      	ldrb	r0, [r0, #0]
 8005674:	4403      	add	r3, r0
 8005676:	481c      	ldr	r0, [pc, #112]	; (80056e8 <countDown+0x250>)
 8005678:	7800      	ldrb	r0, [r0, #0]
 800567a:	4403      	add	r3, r0
 800567c:	481b      	ldr	r0, [pc, #108]	; (80056ec <countDown+0x254>)
 800567e:	7800      	ldrb	r0, [r0, #0]
 8005680:	4403      	add	r3, r0
 8005682:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8005686:	e73c      	b.n	8005502 <countDown+0x6a>
		Disp[2]=planA3GT ;
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <countDown+0x24c>)
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <countDown+0x23c>)
 800568e:	709a      	strb	r2, [r3, #2]
		Disp[3]=planA4GT ;
 8005690:	70da      	strb	r2, [r3, #3]
 8005692:	e719      	b.n	80054c8 <countDown+0x30>
		Disp[2]=planS1GT+planS2GT+planS4GT+planS5GT+planA1GT+planA2GT+planA4GT+planA5GT+padestarianTime ;
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <countDown+0x248>)
 8005696:	4a19      	ldr	r2, [pc, #100]	; (80056fc <countDown+0x264>)
 8005698:	7819      	ldrb	r1, [r3, #0]
 800569a:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <countDown+0x258>)
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <countDown+0x244>)
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	440b      	add	r3, r1
 80056a8:	4413      	add	r3, r2
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <countDown+0x25c>)
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	4413      	add	r3, r2
 80056b0:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <countDown+0x238>)
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <countDown+0x250>)
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <countDown+0x254>)
 80056be:	e741      	b.n	8005544 <countDown+0xac>
		Disp[3]=planA4GT ;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <countDown+0x250>)
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <countDown+0x23c>)
 80056c6:	e7e3      	b.n	8005690 <countDown+0x1f8>
 80056c8:	20005212 	.word	0x20005212
 80056cc:	200039f0 	.word	0x200039f0
 80056d0:	20003a14 	.word	0x20003a14
 80056d4:	200010dd 	.word	0x200010dd
 80056d8:	20003a1c 	.word	0x20003a1c
 80056dc:	2000001d 	.word	0x2000001d
 80056e0:	20003c4b 	.word	0x20003c4b
 80056e4:	20003af6 	.word	0x20003af6
 80056e8:	20003b00 	.word	0x20003b00
 80056ec:	2000001c 	.word	0x2000001c
 80056f0:	200037dc 	.word	0x200037dc
 80056f4:	20003c4c 	.word	0x20003c4c
 80056f8:	20000018 	.word	0x20000018
 80056fc:	2000160d 	.word	0x2000160d
		Disp[3]=planS1GT+planS2GT+planS3GT+planA1GT+planA2GT+planA3GT +planS5GT+planA5GT+padestarianTime ;
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <countDown+0x294>)
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <countDown+0x298>)
 8005704:	7819      	ldrb	r1, [r3, #0]
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <countDown+0x29c>)
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4413      	add	r3, r2
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <countDown+0x2a0>)
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	4413      	add	r3, r2
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <countDown+0x2a4>)
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	4413      	add	r3, r2
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <countDown+0x2a8>)
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	4413      	add	r3, r2
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <countDown+0x2ac>)
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	4413      	add	r3, r2
 8005726:	440b      	add	r3, r1
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <countDown+0x2b0>)
 800572a:	e72a      	b.n	8005582 <countDown+0xea>
 800572c:	2000001d 	.word	0x2000001d
 8005730:	2000160d 	.word	0x2000160d
 8005734:	200037dc 	.word	0x200037dc
 8005738:	20003a1c 	.word	0x20003a1c
 800573c:	20003c4c 	.word	0x20003c4c
 8005740:	20003a14 	.word	0x20003a14
 8005744:	20003af6 	.word	0x20003af6
 8005748:	2000001c 	.word	0x2000001c

0800574c <sendMsgToSlave>:

	SDcardReadSeek("phase.txt",350, 0);


}
void sendMsgToSlave(){
 800574c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   	//-------------------------------every 50 millisec transmitting the data to slave-------------------------//
//		 	   	       	if(millisec1>50)
//	 	   	       		if((slave1Rsp==1)||(slave2Rsp==1)||(slave3Rsp==1)||(slave4Rsp==1)||(millisec1>60))
//	                    if((slave4Rsp==1)||(millisec1>150))
//	                    if((slave1Rsp==1)||(slave2Rsp==1)||(slave3Rsp==1)||(millisec1>70))
						if(millisec1>150)
 8005750:	4d47      	ldr	r5, [pc, #284]	; (8005870 <sendMsgToSlave+0x124>)
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	2b96      	cmp	r3, #150	; 0x96
 8005756:	f340 8089 	ble.w	800586c <sendMsgToSlave+0x120>
//		 	   	       		{
//		 	   	       			slaveNo=1;
//
//		 	   	       		}

		if (slaveNo == 1) {
 800575a:	4c46      	ldr	r4, [pc, #280]	; (8005874 <sendMsgToSlave+0x128>)
 800575c:	4e46      	ldr	r6, [pc, #280]	; (8005878 <sendMsgToSlave+0x12c>)
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d111      	bne.n	8005788 <sendMsgToSlave+0x3c>
			if (slave1Transmit == 1) {
 8005764:	4b45      	ldr	r3, [pc, #276]	; (800587c <sendMsgToSlave+0x130>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2a01      	cmp	r2, #1
 800576a:	d10d      	bne.n	8005788 <sendMsgToSlave+0x3c>
				if (slave1Rsp == 1) {
 800576c:	6832      	ldr	r2, [r6, #0]
 800576e:	2a01      	cmp	r2, #1
 8005770:	4a43      	ldr	r2, [pc, #268]	; (8005880 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x01;
					communicationStatus = communicationStatus | 0x01;
 8005772:	7811      	ldrb	r1, [r2, #0]
 8005774:	bf0c      	ite	eq
 8005776:	f041 0101 	orreq.w	r1, r1, #1
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x06;
 800577a:	f001 0106 	andne.w	r1, r1, #6
 800577e:	7011      	strb	r1, [r2, #0]
				}
				slave1Transmit=0;
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
				slaveNo++;//incrementing the value of slave
 8005784:	2302      	movs	r3, #2
 8005786:	6023      	str	r3, [r4, #0]
			}
		}
		if (slaveNo == 2) {
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	4f3e      	ldr	r7, [pc, #248]	; (8005884 <sendMsgToSlave+0x138>)
 800578c:	2b02      	cmp	r3, #2
 800578e:	d111      	bne.n	80057b4 <sendMsgToSlave+0x68>
			if (slave2Transmit == 1) {
 8005790:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <sendMsgToSlave+0x13c>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	2a01      	cmp	r2, #1
 8005796:	d10d      	bne.n	80057b4 <sendMsgToSlave+0x68>
				if (slave2Rsp == 1) {
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	2a01      	cmp	r2, #1
 800579c:	4a38      	ldr	r2, [pc, #224]	; (8005880 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x02;
					communicationStatus = communicationStatus | 0x02;
 800579e:	7811      	ldrb	r1, [r2, #0]
 80057a0:	bf0c      	ite	eq
 80057a2:	f041 0102 	orreq.w	r1, r1, #2
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x05;
 80057a6:	f001 0105 	andne.w	r1, r1, #5
 80057aa:	7011      	strb	r1, [r2, #0]
				}
				slave2Transmit=0;
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
				slaveNo++;//incrementing the value of slave
 80057b0:	2303      	movs	r3, #3
 80057b2:	6023      	str	r3, [r4, #0]
			}
		}

		if (slaveNo == 3) {
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005898 <sendMsgToSlave+0x14c>
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d112      	bne.n	80057e4 <sendMsgToSlave+0x98>
			if (slave3Transmit == 1) {
 80057be:	4b33      	ldr	r3, [pc, #204]	; (800588c <sendMsgToSlave+0x140>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2a01      	cmp	r2, #1
 80057c4:	d10e      	bne.n	80057e4 <sendMsgToSlave+0x98>
				if (slave3Rsp == 1) {
 80057c6:	f8d8 2000 	ldr.w	r2, [r8]
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <sendMsgToSlave+0x134>)
//						communicationStatus = 0x04;
								communicationStatus = communicationStatus | 0x04;
 80057ce:	7811      	ldrb	r1, [r2, #0]
 80057d0:	bf0c      	ite	eq
 80057d2:	f041 0104 	orreq.w	r1, r1, #4
				} else {
//						communicationStatus = 0x00;
					communicationStatus = communicationStatus & 0x03;
 80057d6:	f001 0103 	andne.w	r1, r1, #3
 80057da:	7011      	strb	r1, [r2, #0]
				}
				slave3Transmit = 0;
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
				slaveNo++;		 	   	   //incrementing the value of slave
 80057e0:	2304      	movs	r3, #4
 80057e2:	6023      	str	r3, [r4, #0]
			}
		}
		if (slaveNo == 4) {
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800589c <sendMsgToSlave+0x150>
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d112      	bne.n	8005814 <sendMsgToSlave+0xc8>
				if (slave4Transmit == 1) {
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <sendMsgToSlave+0x144>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	2a01      	cmp	r2, #1
 80057f4:	d10e      	bne.n	8005814 <sendMsgToSlave+0xc8>
					if (slave4Rsp == 1) {
 80057f6:	f8d9 2000 	ldr.w	r2, [r9]
 80057fa:	2a01      	cmp	r2, #1
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <sendMsgToSlave+0x134>)
	//						communicationStatus = 0x04;
									communicationStatus = communicationStatus | 0x08;
 80057fe:	7811      	ldrb	r1, [r2, #0]
 8005800:	bf0c      	ite	eq
 8005802:	f041 0108 	orreq.w	r1, r1, #8
					} else {
	//						communicationStatus = 0x00;
						communicationStatus = communicationStatus & 0x07;
 8005806:	f001 0107 	andne.w	r1, r1, #7
 800580a:	7011      	strb	r1, [r2, #0]
					}
					slave4Transmit = 0;
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
					slaveNo++;		 	   	   //incrementing the value of slave
 8005810:	2305      	movs	r3, #5
 8005812:	6023      	str	r3, [r4, #0]


//		                           if(slaveNo>noOfSides+1)

//		                        	   if(slaveNo==noOfSides)
		                         if(noOfSides != 3)
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <sendMsgToSlave+0x148>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b03      	cmp	r3, #3
 	                             if(slaveNo>4)
 800581a:	6823      	ldr	r3, [r4, #0]
		                         if(noOfSides != 3)
 800581c:	d024      	beq.n	8005868 <sendMsgToSlave+0x11c>
 	                             if(slaveNo>4)
 800581e:	2b04      	cmp	r3, #4

				 	   	       		{
				 	   	       			slaveNo=1;
 8005820:	bfc4      	itt	gt
 8005822:	2301      	movgt	r3, #1
 8005824:	6023      	strgt	r3, [r4, #0]
		                        	 }
		                         }

//		                 if (!(slaveNo == noOfSides + 1)){

	 	   	       		function6_A(); //Master to slave1
 8005826:	f7ff fa63 	bl	8004cf0 <function6_A>

//		                 }


	 	   	       		if(slaveNo==1)
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10b      	bne.n	8005848 <sendMsgToSlave+0xfc>
	 	   	       		{
	 	   	       		slave1Transmit=1;
 8005830:	4a12      	ldr	r2, [pc, #72]	; (800587c <sendMsgToSlave+0x130>)
 8005832:	6013      	str	r3, [r2, #0]
		            	slave4Transmit = 1;

		                }

                        /*----------all slave response status to 0-------------*/
	                   	slave1Rsp=0;
 8005834:	2300      	movs	r3, #0
 8005836:	6033      	str	r3, [r6, #0]
	                   	slave2Rsp=0;
 8005838:	603b      	str	r3, [r7, #0]
	                   	slave3Rsp=0;
 800583a:	f8c8 3000 	str.w	r3, [r8]
	                	slave4Rsp=0;
 800583e:	f8c9 3000 	str.w	r3, [r9]
//	 	   	       		msgTx++;
//		 	   	       		slaveNo++;//incrementing the value of slave
	                   	millisec1=0;
 8005842:	602b      	str	r3, [r5, #0]
	 	   	       		//commFlag++;
	 	   	       	}
}
 8005844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	                   	if (slaveNo == 2) {
 8005848:	2b02      	cmp	r3, #2
 800584a:	d103      	bne.n	8005854 <sendMsgToSlave+0x108>
	                   	slave2Transmit=1;
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <sendMsgToSlave+0x13c>)
 800584e:	2201      	movs	r2, #1
		            	slave4Transmit = 1;
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e7ef      	b.n	8005834 <sendMsgToSlave+0xe8>
	                   	if (slaveNo == 3) {
 8005854:	2b03      	cmp	r3, #3
 8005856:	d102      	bne.n	800585e <sendMsgToSlave+0x112>
	                   	slave3Transmit=1;
 8005858:	2201      	movs	r2, #1
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <sendMsgToSlave+0x140>)
 800585c:	e7f8      	b.n	8005850 <sendMsgToSlave+0x104>
	                	if (slaveNo == 4) {
 800585e:	2b04      	cmp	r3, #4
 8005860:	d1e8      	bne.n	8005834 <sendMsgToSlave+0xe8>
		            	slave4Transmit = 1;
 8005862:	2201      	movs	r2, #1
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <sendMsgToSlave+0x144>)
 8005866:	e7f3      	b.n	8005850 <sendMsgToSlave+0x104>
		                        	 if(slaveNo>3)
 8005868:	2b03      	cmp	r3, #3
 800586a:	e7d9      	b.n	8005820 <sendMsgToSlave+0xd4>
 800586c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005870:	2000014c 	.word	0x2000014c
 8005874:	20000008 	.word	0x20000008
 8005878:	2000008c 	.word	0x2000008c
 800587c:	20000090 	.word	0x20000090
 8005880:	2000007c 	.word	0x2000007c
 8005884:	20000094 	.word	0x20000094
 8005888:	20000098 	.word	0x20000098
 800588c:	200000a0 	.word	0x200000a0
 8005890:	200000a8 	.word	0x200000a8
 8005894:	200000ed 	.word	0x200000ed
 8005898:	2000009c 	.word	0x2000009c
 800589c:	200000a4 	.word	0x200000a4

080058a0 <analysingResponseOfSlave>:
}



void analysingResponseOfSlave()
{
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//side1PoleType=3;
//side2PoleType=3;
//side3PoleType=3;
//side4PoleType=3;
/*----------------Separating the values of sides------------------*/
sideNo1= Disp[4] >> 4; // right shift 4 bit
 80058a4:	4956      	ldr	r1, [pc, #344]	; (8005a00 <analysingResponseOfSlave+0x160>)
sideNo1=sideNo1 << 4 ; //left shift 4 bit
 80058a6:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <analysingResponseOfSlave+0x164>)
sideNo1= Disp[4] >> 4; // right shift 4 bit
 80058a8:	790b      	ldrb	r3, [r1, #4]
sideNo4=  Disp[5] ^ sideNo2; //

/*-------------------------checking the pole type----------------------------*/

/*-------------------------pole type = standard pole----------------------------*/
if(side1PoleType==1)//standard pole
 80058aa:	4e57      	ldr	r6, [pc, #348]	; (8005a08 <analysingResponseOfSlave+0x168>)
sideNo3=  Disp[4] ^ sideNo1; //
 80058ac:	7908      	ldrb	r0, [r1, #4]
sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80058ae:	4c57      	ldr	r4, [pc, #348]	; (8005a0c <analysingResponseOfSlave+0x16c>)
if(side1PoleType==1)//standard pole
 80058b0:	f8d6 e000 	ldr.w	lr, [r6]
sideNo3=  Disp[4] ^ sideNo1; //
 80058b4:	4d56      	ldr	r5, [pc, #344]	; (8005a10 <analysingResponseOfSlave+0x170>)
sideNo1=sideNo1 << 4 ; //left shift 4 bit
 80058b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ba:	6013      	str	r3, [r2, #0]
sideNo2= Disp[5] >> 4; // right shift 4 bit
 80058bc:	794a      	ldrb	r2, [r1, #5]
sideNo4=  Disp[5] ^ sideNo2; //
 80058be:	7949      	ldrb	r1, [r1, #5]
sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80058c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80058c4:	6022      	str	r2, [r4, #0]
sideNo4=  Disp[5] ^ sideNo2; //
 80058c6:	4c53      	ldr	r4, [pc, #332]	; (8005a14 <analysingResponseOfSlave+0x174>)
sideNo3=  Disp[4] ^ sideNo1; //
 80058c8:	4058      	eors	r0, r3
sideNo4=  Disp[5] ^ sideNo2; //
 80058ca:	4051      	eors	r1, r2
if(side1PoleType==1)//standard pole
 80058cc:	f1be 0f01 	cmp.w	lr, #1
sideNo3=  Disp[4] ^ sideNo1; //
 80058d0:	6028      	str	r0, [r5, #0]
sideNo4=  Disp[5] ^ sideNo2; //
 80058d2:	6021      	str	r1, [r4, #0]
if(side1PoleType==1)//standard pole
 80058d4:	d07b      	beq.n	80059ce <analysingResponseOfSlave+0x12e>
	 checkSideColour(primaryByteCommand[1],primaryByte[1],1);

		//not working
	}
}
if(side2PoleType==1)//standard pole
 80058d6:	4e50      	ldr	r6, [pc, #320]	; (8005a18 <analysingResponseOfSlave+0x178>)
 80058d8:	6837      	ldr	r7, [r6, #0]
 80058da:	2f01      	cmp	r7, #1
 80058dc:	d103      	bne.n	80058e6 <analysingResponseOfSlave+0x46>
{
	primaryByteCommand[2]=sideNo2;
 80058de:	4e4f      	ldr	r6, [pc, #316]	; (8005a1c <analysingResponseOfSlave+0x17c>)
 80058e0:	60b2      	str	r2, [r6, #8]
	secondaryByteCommand[2]=sideNo2;
 80058e2:	4e4f      	ldr	r6, [pc, #316]	; (8005a20 <analysingResponseOfSlave+0x180>)
 80058e4:	60b2      	str	r2, [r6, #8]
		}
		else{
			//not working
		}
}
if(side3PoleType==1)//standard pole
 80058e6:	4e4f      	ldr	r6, [pc, #316]	; (8005a24 <analysingResponseOfSlave+0x184>)
 80058e8:	6836      	ldr	r6, [r6, #0]
 80058ea:	2e01      	cmp	r6, #1
 80058ec:	d109      	bne.n	8005902 <analysingResponseOfSlave+0x62>
{
	sideNo3=sideNo3 << 4; // left shit 4 bit
	primaryByteCommand[3]=sideNo3;
 80058ee:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8005a1c <analysingResponseOfSlave+0x17c>
	sideNo3=sideNo3 << 4; // left shit 4 bit
 80058f2:	0100      	lsls	r0, r0, #4
	primaryByteCommand[3]=sideNo3;
 80058f4:	f8cc 000c 	str.w	r0, [ip, #12]
	secondaryByteCommand[3]=sideNo3;
 80058f8:	f8df c124 	ldr.w	ip, [pc, #292]	; 8005a20 <analysingResponseOfSlave+0x180>
	sideNo3=sideNo3 << 4; // left shit 4 bit
 80058fc:	6028      	str	r0, [r5, #0]
	secondaryByteCommand[3]=sideNo3;
 80058fe:	f8cc 000c 	str.w	r0, [ip, #12]
		else{
			//not working
		}
}

if(side4PoleType==1)//standard pole
 8005902:	4849      	ldr	r0, [pc, #292]	; (8005a28 <analysingResponseOfSlave+0x188>)
 8005904:	6800      	ldr	r0, [r0, #0]
 8005906:	2801      	cmp	r0, #1
 8005908:	d109      	bne.n	800591e <analysingResponseOfSlave+0x7e>
{
	sideNo4=sideNo4 << 4; // left shit 4 bit
	primaryByteCommand[4]=sideNo4;
 800590a:	f8df c110 	ldr.w	ip, [pc, #272]	; 8005a1c <analysingResponseOfSlave+0x17c>
	sideNo4=sideNo4 << 4; // left shit 4 bit
 800590e:	0109      	lsls	r1, r1, #4
	primaryByteCommand[4]=sideNo4;
 8005910:	f8cc 1010 	str.w	r1, [ip, #16]
	secondaryByteCommand[4]=sideNo4;
 8005914:	f8df c108 	ldr.w	ip, [pc, #264]	; 8005a20 <analysingResponseOfSlave+0x180>
	sideNo4=sideNo4 << 4; // left shit 4 bit
 8005918:	6021      	str	r1, [r4, #0]
	secondaryByteCommand[4]=sideNo4;
 800591a:	f8cc 1010 	str.w	r1, [ip, #16]
		else{
			//not working
		}
}
/*-------------------------pole type = L-cantilever pole----------------------------*/
if(side1PoleType==2)
 800591e:	f1be 0f02 	cmp.w	lr, #2
 8005922:	d107      	bne.n	8005934 <analysingResponseOfSlave+0x94>
{
	secondaryByteCommand[1]=sideNo1;
 8005924:	493e      	ldr	r1, [pc, #248]	; (8005a20 <analysingResponseOfSlave+0x180>)
	primaryByteCommand[1]= sideNo1 >> 4; // right shift 4 bit
	primaryByteCommand[1]=primaryByteCommand[1] | secondaryByteCommand[1];
 8005926:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005a1c <analysingResponseOfSlave+0x17c>
	secondaryByteCommand[1]=sideNo1;
 800592a:	604b      	str	r3, [r1, #4]
	primaryByteCommand[1]=primaryByteCommand[1] | secondaryByteCommand[1];
 800592c:	ea43 1113 	orr.w	r1, r3, r3, lsr #4
 8005930:	f8cc 1004 	str.w	r1, [ip, #4]

		//not working
	}
}

if(side2PoleType==2)
 8005934:	2f02      	cmp	r7, #2
 8005936:	d107      	bne.n	8005948 <analysingResponseOfSlave+0xa8>
{

	secondaryByteCommand[2]=sideNo2;
 8005938:	4939      	ldr	r1, [pc, #228]	; (8005a20 <analysingResponseOfSlave+0x180>)
	primaryByteCommand[2]= sideNo2 >> 4; // right shift 4 bit
	primaryByteCommand[2]=primaryByteCommand[2] | secondaryByteCommand[2];
 800593a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8005a1c <analysingResponseOfSlave+0x17c>
	secondaryByteCommand[2]=sideNo2;
 800593e:	608a      	str	r2, [r1, #8]
	primaryByteCommand[2]=primaryByteCommand[2] | secondaryByteCommand[2];
 8005940:	ea42 1112 	orr.w	r1, r2, r2, lsr #4
 8005944:	f8cc 1008 	str.w	r1, [ip, #8]

		//not working
	}
}

if(side3PoleType==2)
 8005948:	2e02      	cmp	r6, #2
 800594a:	d10c      	bne.n	8005966 <analysingResponseOfSlave+0xc6>
{
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a20 <analysingResponseOfSlave+0x180>
 8005952:	ea4f 1c01 	mov.w	ip, r1, lsl #4
//	secondaryByteCommand[3]=sideNo3;
	primaryByteCommand[3]= sideNo3 ;
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 8005956:	ea41 010c 	orr.w	r1, r1, ip
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 800595a:	f8c8 c00c 	str.w	ip, [r8, #12]
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 800595e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8005a1c <analysingResponseOfSlave+0x17c>
 8005962:	f8cc 100c 	str.w	r1, [ip, #12]

		//not working
	}
}

if(side4PoleType==2)
 8005966:	2802      	cmp	r0, #2
 8005968:	d10c      	bne.n	8005984 <analysingResponseOfSlave+0xe4>
{
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005a20 <analysingResponseOfSlave+0x180>
 8005970:	ea4f 1c01 	mov.w	ip, r1, lsl #4
//	secondaryByteCommand[4]=sideNo4;
	primaryByteCommand[4]= sideNo4 ;
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 8005974:	ea41 010c 	orr.w	r1, r1, ip
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 8005978:	f8c8 c010 	str.w	ip, [r8, #16]
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 800597c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005a1c <analysingResponseOfSlave+0x17c>
 8005980:	f8cc 1010 	str.w	r1, [ip, #16]

		//not working
	}
}
/*-------------------------pole type = T-cantilever pole----------------------------*/
if(side1PoleType==3)
 8005984:	f1be 0f03 	cmp.w	lr, #3
 8005988:	d105      	bne.n	8005996 <analysingResponseOfSlave+0xf6>
{

	primaryByteCommand[1]= sideNo1 >> 4; // right shift 4 bit
	primaryByteCommand[1]=primaryByteCommand[1] | sideNo1;
 800598a:	4924      	ldr	r1, [pc, #144]	; (8005a1c <analysingResponseOfSlave+0x17c>)
 800598c:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8005990:	604b      	str	r3, [r1, #4]
	secondaryByteCommand[1]=primaryByteCommand[1];
 8005992:	4923      	ldr	r1, [pc, #140]	; (8005a20 <analysingResponseOfSlave+0x180>)
 8005994:	604b      	str	r3, [r1, #4]

		//not working
	}
}

if(side2PoleType==3)
 8005996:	2f03      	cmp	r7, #3
 8005998:	d105      	bne.n	80059a6 <analysingResponseOfSlave+0x106>
{


	primaryByteCommand[2]= sideNo2 >> 4; // right shift 4 bit
	primaryByteCommand[2]=primaryByteCommand[2] | sideNo2;
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <analysingResponseOfSlave+0x17c>)
 800599c:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
 80059a0:	609a      	str	r2, [r3, #8]
	secondaryByteCommand[2]=primaryByteCommand[2];
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <analysingResponseOfSlave+0x180>)
 80059a4:	609a      	str	r2, [r3, #8]

		//not working
	}
}

if(side3PoleType==3)
 80059a6:	2e03      	cmp	r6, #3
 80059a8:	d106      	bne.n	80059b8 <analysingResponseOfSlave+0x118>
{
	secondaryByteCommand[3]=sideNo3 << 4; // left shit 4 bit
 80059aa:	682b      	ldr	r3, [r5, #0]
	primaryByteCommand[3]= sideNo3 ;
	primaryByteCommand[3]=primaryByteCommand[3] | secondaryByteCommand[3];
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <analysingResponseOfSlave+0x17c>)
 80059ae:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 80059b2:	60d3      	str	r3, [r2, #12]
	secondaryByteCommand[3]=primaryByteCommand[3];
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <analysingResponseOfSlave+0x180>)
 80059b6:	60d3      	str	r3, [r2, #12]

		//not working
	}
}

if(side4PoleType==3)
 80059b8:	2803      	cmp	r0, #3
 80059ba:	d106      	bne.n	80059ca <analysingResponseOfSlave+0x12a>
{
	secondaryByteCommand[4]=sideNo4 << 4; // left shit 4 bit
 80059bc:	6823      	ldr	r3, [r4, #0]
//	secondaryByteCommand[4]=sideNo4;
	primaryByteCommand[4]= sideNo4 ;
	primaryByteCommand[4]=primaryByteCommand[4] | secondaryByteCommand[4];
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <analysingResponseOfSlave+0x17c>)
 80059c0:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 80059c4:	6113      	str	r3, [r2, #16]
	secondaryByteCommand[4]=primaryByteCommand[4];
 80059c6:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <analysingResponseOfSlave+0x180>)
 80059c8:	6113      	str	r3, [r2, #16]
 80059ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	primaryByteCommand[1]=sideNo1;
 80059ce:	4e13      	ldr	r6, [pc, #76]	; (8005a1c <analysingResponseOfSlave+0x17c>)
	if(primaryByteCommand[1]==primaryByte[1])
 80059d0:	4f16      	ldr	r7, [pc, #88]	; (8005a2c <analysingResponseOfSlave+0x18c>)
	primaryByteCommand[1]=sideNo1;
 80059d2:	6073      	str	r3, [r6, #4]
	secondaryByteCommand[1]=sideNo1;
 80059d4:	4e12      	ldr	r6, [pc, #72]	; (8005a20 <analysingResponseOfSlave+0x180>)
 80059d6:	6073      	str	r3, [r6, #4]
	if(primaryByteCommand[1]==primaryByte[1])
 80059d8:	687e      	ldr	r6, [r7, #4]
 80059da:	42b3      	cmp	r3, r6
 80059dc:	f47f af7b 	bne.w	80058d6 <analysingResponseOfSlave+0x36>
		if(primaryByte[1]==0x30) ///green
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	f47f af78 	bne.w	80058d6 <analysingResponseOfSlave+0x36>
			if((primaryByte[2]==0x30)||(primaryByte[3]==0x30)||(primaryByte[4]==0x30)){
 80059e6:	68be      	ldr	r6, [r7, #8]
 80059e8:	2e30      	cmp	r6, #48	; 0x30
 80059ea:	d0ee      	beq.n	80059ca <analysingResponseOfSlave+0x12a>
 80059ec:	68fe      	ldr	r6, [r7, #12]
 80059ee:	2e30      	cmp	r6, #48	; 0x30
 80059f0:	d0eb      	beq.n	80059ca <analysingResponseOfSlave+0x12a>
 80059f2:	693e      	ldr	r6, [r7, #16]
 80059f4:	2e30      	cmp	r6, #48	; 0x30
 80059f6:	f47f af6e 	bne.w	80058d6 <analysingResponseOfSlave+0x36>
 80059fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059fe:	bf00      	nop
 8005a00:	200010dd 	.word	0x200010dd
 8005a04:	20001608 	.word	0x20001608
 8005a08:	20001640 	.word	0x20001640
 8005a0c:	200036a0 	.word	0x200036a0
 8005a10:	20003af8 	.word	0x20003af8
 8005a14:	20001678 	.word	0x20001678
 8005a18:	2000365c 	.word	0x2000365c
 8005a1c:	20003c50 	.word	0x20003c50
 8005a20:	20003628 	.word	0x20003628
 8005a24:	20003a18 	.word	0x20003a18
 8005a28:	20003ae8 	.word	0x20003ae8
 8005a2c:	2000373c 	.word	0x2000373c

08005a30 <slaveResponse>:
void slaveResponse(){
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(msgUnPrcd4==1)
 8005a32:	4d67      	ldr	r5, [pc, #412]	; (8005bd0 <slaveResponse+0x1a0>)
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d113      	bne.n	8005a62 <slaveResponse+0x32>
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005a3a:	4c66      	ldr	r4, [pc, #408]	; (8005bd4 <slaveResponse+0x1a4>)
					functionRec=0;
 8005a3c:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <slaveResponse+0x1a8>)
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005a3e:	4967      	ldr	r1, [pc, #412]	; (8005bdc <slaveResponse+0x1ac>)
					functionRec=0;
 8005a40:	2600      	movs	r6, #0
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005a42:	4632      	mov	r2, r6
 8005a44:	4620      	mov	r0, r4
					functionRec=0;
 8005a46:	601e      	str	r6, [r3, #0]
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005a48:	f003 fa4c 	bl	8008ee4 <msgParse>
 8005a4c:	4b64      	ldr	r3, [pc, #400]	; (8005be0 <slaveResponse+0x1b0>)
					  		if(!(signVal==0))
 8005a4e:	b948      	cbnz	r0, 8005a64 <slaveResponse+0x34>
					signVal=msgParse((uint8_t *)RecMsg4,"}",0); //for slave
 8005a50:	6018      	str	r0, [r3, #0]
					clearingDataBuffer();
 8005a52:	f7ff f9ef 	bl	8004e34 <clearingDataBuffer>
			  		clearBuffer4();
 8005a56:	f7ff fc7b 	bl	8005350 <clearBuffer4>
			  		clearaRxBuffer4();
 8005a5a:	f7ff fc83 	bl	8005364 <clearaRxBuffer4>
			  		msgUnPrcd4=0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					  			 signVal=signVal-6;
 8005a64:	3806      	subs	r0, #6
 8005a66:	6018      	str	r0, [r3, #0]
					  			transferRecValuesToData(signVal);
 8005a68:	f7ff f914 	bl	8004c94 <transferRecValuesToData>
					  		  byteToIntegerVal(&Data[0],0);
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	485d      	ldr	r0, [pc, #372]	; (8005be4 <slaveResponse+0x1b4>)
					  		  crcstring[0] = crcbits & 0xFF;
 8005a70:	4f5d      	ldr	r7, [pc, #372]	; (8005be8 <slaveResponse+0x1b8>)
					  		  byteToIntegerVal(&Data[0],0);
 8005a72:	f7ff fcd9 	bl	8005428 <byteToIntegerVal>
					  		CRCValue = HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 8);
 8005a76:	2208      	movs	r2, #8
 8005a78:	495c      	ldr	r1, [pc, #368]	; (8005bec <slaveResponse+0x1bc>)
 8005a7a:	485d      	ldr	r0, [pc, #372]	; (8005bf0 <slaveResponse+0x1c0>)
 8005a7c:	f7fa fe32 	bl	80006e4 <HAL_CRC_Calculate>
 8005a80:	4b5c      	ldr	r3, [pc, #368]	; (8005bf4 <slaveResponse+0x1c4>)
 8005a82:	6018      	str	r0, [r3, #0]
					  		  crcbits =	CRCValue;
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <slaveResponse+0x1c8>)
 8005a88:	601a      	str	r2, [r3, #0]
					  		  crcstring[0] = crcbits & 0xFF;
 8005a8a:	681a      	ldr	r2, [r3, #0]
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 8005a8c:	6819      	ldr	r1, [r3, #0]
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 8005a8e:	6818      	ldr	r0, [r3, #0]
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005a90:	681b      	ldr	r3, [r3, #0]
					  		  crcstring[0] = crcbits & 0xFF;
 8005a92:	b2d2      	uxtb	r2, r2
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005a94:	0e1b      	lsrs	r3, r3, #24
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 8005a96:	f3c1 2107 	ubfx	r1, r1, #8, #8
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 8005a9a:	f3c0 4007 	ubfx	r0, r0, #16, #8
					  		  crcstring[0] = crcbits & 0xFF;
 8005a9e:	703a      	strb	r2, [r7, #0]
					  		  crcstring[1] = (crcbits >> 8) & 0xFF;
 8005aa0:	7079      	strb	r1, [r7, #1]
					  		  crcstring[2] = (crcbits >> 16) & 0xFF;
 8005aa2:	70b8      	strb	r0, [r7, #2]
					  		  crcstring[3] = (crcbits >> 24) & 0xFF;
 8005aa4:	70fb      	strb	r3, [r7, #3]
						  		if(RecMsg4[10] == crcstring[3])
 8005aa6:	7aa7      	ldrb	r7, [r4, #10]
 8005aa8:	429f      	cmp	r7, r3
 8005aaa:	f040 808e 	bne.w	8005bca <slaveResponse+0x19a>
						  		if(RecMsg4[11] == crcstring[2])
 8005aae:	7ae3      	ldrb	r3, [r4, #11]
 8005ab0:	4283      	cmp	r3, r0
 8005ab2:	f040 808a 	bne.w	8005bca <slaveResponse+0x19a>
						  		if(RecMsg4[12] == crcstring[1])
 8005ab6:	7b23      	ldrb	r3, [r4, #12]
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	f040 8086 	bne.w	8005bca <slaveResponse+0x19a>
						  		if(RecMsg4[13] == crcstring[0]){
 8005abe:	7b63      	ldrb	r3, [r4, #13]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 8082 	bne.w	8005bca <slaveResponse+0x19a>
						  			if(RecMsg4[5]== 1)//comparing the receive msg with side
 8005ac6:	7963      	ldrb	r3, [r4, #5]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d11b      	bne.n	8005b04 <slaveResponse+0xd4>
						  				if(RecMsg4[0] == 0xFF)
 8005acc:	7823      	ldrb	r3, [r4, #0]
						  					primaryByte[1]=0x00;
 8005ace:	4a4b      	ldr	r2, [pc, #300]	; (8005bfc <slaveResponse+0x1cc>)
						  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8005ad0:	484b      	ldr	r0, [pc, #300]	; (8005c00 <slaveResponse+0x1d0>)
						  					primaryByte[1]=0x00;
 8005ad2:	2bff      	cmp	r3, #255	; 0xff
 8005ad4:	bf08      	it	eq
 8005ad6:	4633      	moveq	r3, r6
 8005ad8:	6053      	str	r3, [r2, #4]
						  				if(RecMsg4[1] == 0xFF)
 8005ada:	7862      	ldrb	r2, [r4, #1]
						  					secondaryByte[1]=0x00;
 8005adc:	4b49      	ldr	r3, [pc, #292]	; (8005c04 <slaveResponse+0x1d4>)
						  				if(RecMsg4[1] == 0xFF)
 8005ade:	2aff      	cmp	r2, #255	; 0xff
						  					secondaryByte[1]=0x00;
 8005ae0:	bf08      	it	eq
 8005ae2:	4632      	moveq	r2, r6
 8005ae4:	605a      	str	r2, [r3, #4]
						  				hundredPlaceSegment[1]=RecMsg4[2];
 8005ae6:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <slaveResponse+0x1d8>)
 8005ae8:	78a2      	ldrb	r2, [r4, #2]
 8005aea:	605a      	str	r2, [r3, #4]
						  				tenPlaceSegment[1]=RecMsg4[3];
 8005aec:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <slaveResponse+0x1dc>)
 8005aee:	78e2      	ldrb	r2, [r4, #3]
 8005af0:	605a      	str	r2, [r3, #4]
						  				unitPlaceSegment[1]=RecMsg4[4];
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <slaveResponse+0x1e0>)
 8005af4:	7922      	ldrb	r2, [r4, #4]
 8005af6:	605a      	str	r2, [r3, #4]
						  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8005af8:	2108      	movs	r1, #8
 8005afa:	f7fb f82c 	bl	8000b56 <HAL_GPIO_TogglePin>
						  			slave1Rsp=1;
 8005afe:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <slaveResponse+0x1e4>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 2){
 8005b04:	7963      	ldrb	r3, [r4, #5]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d11b      	bne.n	8005b42 <slaveResponse+0x112>
								    if (RecMsg4[0] == 0xFF)
 8005b0a:	7822      	ldrb	r2, [r4, #0]
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <slaveResponse+0x1cc>)
								        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8005b0e:	4842      	ldr	r0, [pc, #264]	; (8005c18 <slaveResponse+0x1e8>)
								    if (RecMsg4[0] == 0xFF)
 8005b10:	2aff      	cmp	r2, #255	; 0xff
								    	primaryByte[2] = 0x00;
 8005b12:	bf08      	it	eq
 8005b14:	2200      	moveq	r2, #0
								    	primaryByte[2] = RecMsg4[0];
 8005b16:	609a      	str	r2, [r3, #8]
								    if (RecMsg4[1] == 0xFF)
 8005b18:	7862      	ldrb	r2, [r4, #1]
 8005b1a:	4b3a      	ldr	r3, [pc, #232]	; (8005c04 <slaveResponse+0x1d4>)
 8005b1c:	2aff      	cmp	r2, #255	; 0xff
								    	secondaryByte[2] = 0x00;
 8005b1e:	bf08      	it	eq
 8005b20:	2200      	moveq	r2, #0
								    	secondaryByte[2] = RecMsg4[1];
 8005b22:	609a      	str	r2, [r3, #8]
								        hundredPlaceSegment[2] = RecMsg4[2];
 8005b24:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <slaveResponse+0x1d8>)
 8005b26:	78a2      	ldrb	r2, [r4, #2]
 8005b28:	609a      	str	r2, [r3, #8]
								        tenPlaceSegment[2] = RecMsg4[3];
 8005b2a:	4b38      	ldr	r3, [pc, #224]	; (8005c0c <slaveResponse+0x1dc>)
 8005b2c:	78e2      	ldrb	r2, [r4, #3]
 8005b2e:	609a      	str	r2, [r3, #8]
								        unitPlaceSegment[2] = RecMsg4[4];
 8005b30:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <slaveResponse+0x1e0>)
 8005b32:	7922      	ldrb	r2, [r4, #4]
 8005b34:	609a      	str	r2, [r3, #8]
								        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8005b36:	2108      	movs	r1, #8
 8005b38:	f7fb f80d 	bl	8000b56 <HAL_GPIO_TogglePin>
						  			slave2Rsp=1;
 8005b3c:	4b37      	ldr	r3, [pc, #220]	; (8005c1c <slaveResponse+0x1ec>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 3){
 8005b42:	7963      	ldrb	r3, [r4, #5]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d11b      	bne.n	8005b80 <slaveResponse+0x150>
									    if (RecMsg4[0] == 0xFF)
 8005b48:	7822      	ldrb	r2, [r4, #0]
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <slaveResponse+0x1cc>)
								        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005b4c:	482c      	ldr	r0, [pc, #176]	; (8005c00 <slaveResponse+0x1d0>)
									    if (RecMsg4[0] == 0xFF)
 8005b4e:	2aff      	cmp	r2, #255	; 0xff
									    	primaryByte[3] = 0x00;
 8005b50:	bf08      	it	eq
 8005b52:	2200      	moveq	r2, #0
									    	primaryByte[3] = RecMsg4[0];
 8005b54:	60da      	str	r2, [r3, #12]
									    if (RecMsg4[1] == 0xFF)
 8005b56:	7862      	ldrb	r2, [r4, #1]
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <slaveResponse+0x1d4>)
 8005b5a:	2aff      	cmp	r2, #255	; 0xff
									    	secondaryByte[3] = 0x00;
 8005b5c:	bf08      	it	eq
 8005b5e:	2200      	moveq	r2, #0
									    	secondaryByte[3] = RecMsg4[1];
 8005b60:	60da      	str	r2, [r3, #12]
							         	hundredPlaceSegment[3] = RecMsg4[2];
 8005b62:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <slaveResponse+0x1d8>)
 8005b64:	78a2      	ldrb	r2, [r4, #2]
 8005b66:	60da      	str	r2, [r3, #12]
								        tenPlaceSegment[3] = RecMsg4[3];
 8005b68:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <slaveResponse+0x1dc>)
 8005b6a:	78e2      	ldrb	r2, [r4, #3]
 8005b6c:	60da      	str	r2, [r3, #12]
								        unitPlaceSegment[3] = RecMsg4[4];
 8005b6e:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <slaveResponse+0x1e0>)
 8005b70:	7922      	ldrb	r2, [r4, #4]
 8005b72:	60da      	str	r2, [r3, #12]
								        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005b74:	2104      	movs	r1, #4
 8005b76:	f7fa ffee 	bl	8000b56 <HAL_GPIO_TogglePin>
						            slave3Rsp=1;
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <slaveResponse+0x1f0>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
						  			if(RecMsg4[5]== 4){
 8005b80:	7963      	ldrb	r3, [r4, #5]
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d11b      	bne.n	8005bbe <slaveResponse+0x18e>
									    if (RecMsg4[0] == 0xFF)
 8005b86:	7822      	ldrb	r2, [r4, #0]
 8005b88:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <slaveResponse+0x1cc>)
						  				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8005b8a:	4826      	ldr	r0, [pc, #152]	; (8005c24 <slaveResponse+0x1f4>)
									    if (RecMsg4[0] == 0xFF)
 8005b8c:	2aff      	cmp	r2, #255	; 0xff
									    	primaryByte[3] = 0x00;
 8005b8e:	bf08      	it	eq
 8005b90:	2200      	moveq	r2, #0
									    	primaryByte[3] = RecMsg4[0];
 8005b92:	60da      	str	r2, [r3, #12]
									    if (RecMsg4[1] == 0xFF)
 8005b94:	7862      	ldrb	r2, [r4, #1]
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <slaveResponse+0x1d4>)
 8005b98:	2aff      	cmp	r2, #255	; 0xff
									    	secondaryByte[3] = 0x00;
 8005b9a:	bf08      	it	eq
 8005b9c:	2200      	moveq	r2, #0
									    	secondaryByte[3] = RecMsg4[1];
 8005b9e:	60da      	str	r2, [r3, #12]
						  				hundredPlaceSegment[4] = RecMsg4[2];
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <slaveResponse+0x1d8>)
 8005ba2:	78a2      	ldrb	r2, [r4, #2]
 8005ba4:	611a      	str	r2, [r3, #16]
						  				tenPlaceSegment[4] = RecMsg4[3];
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <slaveResponse+0x1dc>)
 8005ba8:	78e2      	ldrb	r2, [r4, #3]
 8005baa:	611a      	str	r2, [r3, #16]
						  				unitPlaceSegment[4] = RecMsg4[4];
 8005bac:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <slaveResponse+0x1e0>)
 8005bae:	7922      	ldrb	r2, [r4, #4]
 8005bb0:	611a      	str	r2, [r3, #16]
						  				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8005bb2:	2108      	movs	r1, #8
 8005bb4:	f7fa ffcf 	bl	8000b56 <HAL_GPIO_TogglePin>
						  				slave4Rsp=1;
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <slaveResponse+0x1f8>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
						  			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);//master
 8005bbe:	2108      	movs	r1, #8
 8005bc0:	481a      	ldr	r0, [pc, #104]	; (8005c2c <slaveResponse+0x1fc>)
 8005bc2:	f7fa ffc8 	bl	8000b56 <HAL_GPIO_TogglePin>
						  			analysingResponseOfSlave();
 8005bc6:	f7ff fe6b 	bl	80058a0 <analysingResponseOfSlave>
						  		msgUnPrcd4=0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	e740      	b.n	8005a52 <slaveResponse+0x22>
 8005bd0:	20000edc 	.word	0x20000edc
 8005bd4:	200053f4 	.word	0x200053f4
 8005bd8:	20000084 	.word	0x20000084
 8005bdc:	080098a3 	.word	0x080098a3
 8005be0:	200015e8 	.word	0x200015e8
 8005be4:	20003778 	.word	0x20003778
 8005be8:	20000ff8 	.word	0x20000ff8
 8005bec:	2000153c 	.word	0x2000153c
 8005bf0:	20000d48 	.word	0x20000d48
 8005bf4:	20000078 	.word	0x20000078
 8005bf8:	20000080 	.word	0x20000080
 8005bfc:	2000373c 	.word	0x2000373c
 8005c00:	40020800 	.word	0x40020800
 8005c04:	20003684 	.word	0x20003684
 8005c08:	20003760 	.word	0x20003760
 8005c0c:	200037e0 	.word	0x200037e0
 8005c10:	20001628 	.word	0x20001628
 8005c14:	2000008c 	.word	0x2000008c
 8005c18:	40020000 	.word	0x40020000
 8005c1c:	20000094 	.word	0x20000094
 8005c20:	2000009c 	.word	0x2000009c
 8005c24:	40020400 	.word	0x40020400
 8005c28:	200000a4 	.word	0x200000a4
 8005c2c:	40021000 	.word	0x40021000

08005c30 <crcApi4>:



}

int crcApi4(int signval) {
 8005c30:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + RecMsg3[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + RecMsg3[signval];
 8005c32:	490b      	ldr	r1, [pc, #44]	; (8005c60 <crcApi4+0x30>)
 8005c34:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 8005c36:	2204      	movs	r2, #4
	zzzz = zxx9 + RecMsg3[signval];
 8005c38:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 8005c3a:	2300      	movs	r3, #0
	zzzz = zxx9 + RecMsg3[signval];
 8005c3c:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 8005c3e:	42a2      	cmp	r2, r4
 8005c40:	db04      	blt.n	8005c4c <crcApi4+0x1c>
		zyy9 = zyy9 + RecMsg3[signval++];
		zxx9++;
	}
	while (zyy9 > 256) {
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	dc08      	bgt.n	8005c5a <crcApi4+0x2a>
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + RecMsg3[signval++];
 8005c4c:	1815      	adds	r5, r2, r0
 8005c4e:	440d      	add	r5, r1
		zxx9++;
 8005c50:	3201      	adds	r2, #1
		zyy9 = zyy9 + RecMsg3[signval++];
 8005c52:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 8005c56:	442b      	add	r3, r5
 8005c58:	e7f1      	b.n	8005c3e <crcApi4+0xe>
		crcValue = crcValue - 1;
 8005c5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c5e:	e7f0      	b.n	8005c42 <crcApi4+0x12>
 8005c60:	200056e2 	.word	0x200056e2

08005c64 <crcApi1>:


int crcApi1(int signval) {
 8005c64:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + RecMsg1[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + RecMsg1[signval];
 8005c66:	490b      	ldr	r1, [pc, #44]	; (8005c94 <crcApi1+0x30>)
 8005c68:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 8005c6a:	2204      	movs	r2, #4
	zzzz = zxx9 + RecMsg1[signval];
 8005c6c:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 8005c6e:	2300      	movs	r3, #0
	zzzz = zxx9 + RecMsg1[signval];
 8005c70:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 8005c72:	42a2      	cmp	r2, r4
 8005c74:	db04      	blt.n	8005c80 <crcApi1+0x1c>
		zyy9 = zyy9 + RecMsg1[signval++];
		zxx9++;
	}
	while (zyy9 > 256) {
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	dc08      	bgt.n	8005c8e <crcApi1+0x2a>
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + RecMsg1[signval++];
 8005c80:	1815      	adds	r5, r2, r0
 8005c82:	440d      	add	r5, r1
		zxx9++;
 8005c84:	3201      	adds	r2, #1
		zyy9 = zyy9 + RecMsg1[signval++];
 8005c86:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 8005c8a:	442b      	add	r3, r5
 8005c8c:	e7f1      	b.n	8005c72 <crcApi1+0xe>
		crcValue = crcValue - 1;
 8005c8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c92:	e7f0      	b.n	8005c76 <crcApi1+0x12>
 8005c94:	200057dc 	.word	0x200057dc

08005c98 <crcApi3>:


int crcApi3(int signval) {
 8005c98:	b530      	push	{r4, r5, lr}
	int crcValue = 0;
	int zzzz = zxx9 + aRxBuffer[signval]; // have changed frame[3] from frame[5]
	int zyy9 = 0;
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
	signval = signval + 1;
	zzzz = zxx9 + aRxBuffer[signval];
 8005c9a:	490a      	ldr	r1, [pc, #40]	; (8005cc4 <crcApi3+0x2c>)
 8005c9c:	180b      	adds	r3, r1, r0
	int zxx9 = 4;           // have changed zxx9=4; from zxx9=6;
 8005c9e:	2204      	movs	r2, #4
	zzzz = zxx9 + aRxBuffer[signval];
 8005ca0:	785c      	ldrb	r4, [r3, #1]
	int zyy9 = 0;
 8005ca2:	2300      	movs	r3, #0
	zzzz = zxx9 + aRxBuffer[signval];
 8005ca4:	3404      	adds	r4, #4
	signval = signval + 1;
	while (zxx9 < zzzz) {
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	db04      	blt.n	8005cb4 <crcApi3+0x1c>
 8005caa:	1c58      	adds	r0, r3, #1
 8005cac:	0a00      	lsrs	r0, r0, #8
		crcValue = crcValue - 1;
		zyy9 = crcValue;
	}

	return zyy9;
}
 8005cae:	eba3 2000 	sub.w	r0, r3, r0, lsl #8
 8005cb2:	bd30      	pop	{r4, r5, pc}
		zyy9 = zyy9 + aRxBuffer[signval++];
 8005cb4:	1885      	adds	r5, r0, r2
 8005cb6:	440d      	add	r5, r1
		zxx9++;
 8005cb8:	3201      	adds	r2, #1
		zyy9 = zyy9 + aRxBuffer[signval++];
 8005cba:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 8005cbe:	442b      	add	r3, r5
 8005cc0:	e7f1      	b.n	8005ca6 <crcApi3+0xe>
 8005cc2:	bf00      	nop
 8005cc4:	2000136c 	.word	0x2000136c

08005cc8 <function9>:
int function9(void) {
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8005cca:	4e51      	ldr	r6, [pc, #324]	; (8005e10 <function9+0x148>)
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005ccc:	4d51      	ldr	r5, [pc, #324]	; (8005e14 <function9+0x14c>)
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8005cce:	4852      	ldr	r0, [pc, #328]	; (8005e18 <function9+0x150>)
	frame[0] = 126;
 8005cd0:	4c52      	ldr	r4, [pc, #328]	; (8005e1c <function9+0x154>)
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	f7fb ffbb 	bl	8001c50 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4629      	mov	r1, r5
 8005cde:	484e      	ldr	r0, [pc, #312]	; (8005e18 <function9+0x150>)
 8005ce0:	f7fb ffde 	bl	8001ca0 <HAL_RTC_GetDate>
	frame[0] = 126;
 8005ce4:	237e      	movs	r3, #126	; 0x7e
 8005ce6:	7023      	strb	r3, [r4, #0]
	frame[1] = 126;
 8005ce8:	7063      	strb	r3, [r4, #1]
	frame[2] = 0; // function no
 8005cea:	2300      	movs	r3, #0
 8005cec:	70a3      	strb	r3, [r4, #2]
	frame[3] = 21;
 8005cee:	2315      	movs	r3, #21
 8005cf0:	70e3      	strb	r3, [r4, #3]
	frame[4] = junctionId;
 8005cf2:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <function9+0x158>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	7123      	strb	r3, [r4, #4]
	frame[5] = programVersionNo; // junction no
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <function9+0x15c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	7163      	strb	r3, [r4, #5]
	frame[6] = fileNo; // junction no
 8005cfe:	4b4a      	ldr	r3, [pc, #296]	; (8005e28 <function9+0x160>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	71a3      	strb	r3, [r4, #6]
	frame[7] = 9;
 8005d04:	2309      	movs	r3, #9
 8005d06:	71e3      	strb	r3, [r4, #7]
	frame[8] = sTime.Hours;
 8005d08:	7833      	ldrb	r3, [r6, #0]
 8005d0a:	7223      	strb	r3, [r4, #8]
	frame[9] = sTime.Minutes;
 8005d0c:	7873      	ldrb	r3, [r6, #1]
 8005d0e:	7263      	strb	r3, [r4, #9]
	frame[10] = sDate.Date;
 8005d10:	78ab      	ldrb	r3, [r5, #2]
 8005d12:	72a3      	strb	r3, [r4, #10]
	frame[11] = sDate.Month;
 8005d14:	786b      	ldrb	r3, [r5, #1]
 8005d16:	72e3      	strb	r3, [r4, #11]
	frame[12] = 12;
 8005d18:	230c      	movs	r3, #12
 8005d1a:	7323      	strb	r3, [r4, #12]
	frame[13] = '1';
 8005d1c:	2331      	movs	r3, #49	; 0x31
 8005d1e:	7363      	strb	r3, [r4, #13]
	frame[14] = '1';
 8005d20:	73a3      	strb	r3, [r4, #14]
	frame[15] = '1';
 8005d22:	73e3      	strb	r3, [r4, #15]
	frame[16] = '1';
 8005d24:	7423      	strb	r3, [r4, #16]
	frame[17] = '1';
 8005d26:	7463      	strb	r3, [r4, #17]
	frame[18] = '1';
 8005d28:	74a3      	strb	r3, [r4, #18]
	frame[19] = '1';
 8005d2a:	74e3      	strb	r3, [r4, #19]
	frame[20] = '1';
 8005d2c:	7523      	strb	r3, [r4, #20]
	frame[21] = '1';
 8005d2e:	7563      	strb	r3, [r4, #21]
	frame[22] = '1'; //'1'
 8005d30:	75a3      	strb	r3, [r4, #22]
	frame[23] = '1'; //'0' ; //'5' ;
 8005d32:	75e3      	strb	r3, [r4, #23]
	frame[24] = '1'; // '2' ;//'9' ;//'1' ;
 8005d34:	7623      	strb	r3, [r4, #24]
	frame[25] = 0xFF - crcApi();
 8005d36:	f7ff fb33 	bl	80053a0 <crcApi>
	frame[26] = 125;
 8005d3a:	237d      	movs	r3, #125	; 0x7d
 8005d3c:	76a3      	strb	r3, [r4, #26]
	frame[27] = 125;
 8005d3e:	76e3      	strb	r3, [r4, #27]
	if(programFromBLE==1)
 8005d40:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <function9+0x164>)
 8005d42:	681b      	ldr	r3, [r3, #0]
	frame[25] = 0xFF - crcApi();
 8005d44:	43c0      	mvns	r0, r0
	if(programFromBLE==1)
 8005d46:	2b01      	cmp	r3, #1
	frame[25] = 0xFF - crcApi();
 8005d48:	7660      	strb	r0, [r4, #25]
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 27, 5000);
 8005d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d4e:	f04f 021b 	mov.w	r2, #27
 8005d52:	4621      	mov	r1, r4
	if(programFromBLE==1)
 8005d54:	d14d      	bne.n	8005df2 <function9+0x12a>
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 27, 5000);
 8005d56:	4836      	ldr	r0, [pc, #216]	; (8005e30 <function9+0x168>)
 8005d58:	f7fc fce8 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 8005d5c:	4935      	ldr	r1, [pc, #212]	; (8005e34 <function9+0x16c>)
 8005d5e:	4834      	ldr	r0, [pc, #208]	; (8005e30 <function9+0x168>)
 8005d60:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8005d64:	2228      	movs	r2, #40	; 0x28
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005d66:	4c33      	ldr	r4, [pc, #204]	; (8005e34 <function9+0x16c>)
	signVal=4;
 8005d68:	4f33      	ldr	r7, [pc, #204]	; (8005e38 <function9+0x170>)
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 70, 0x1FFF);
 8005d6a:	f7fc fd3c 	bl	80027e6 <HAL_UART_Receive>
	HAL_Delay(300);
 8005d6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d72:	f7fa fc27 	bl	80005c4 <HAL_Delay>
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005d76:	2200      	movs	r2, #0
 8005d78:	4930      	ldr	r1, [pc, #192]	; (8005e3c <function9+0x174>)
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f003 f8b2 	bl	8008ee4 <msgParse>
	signVal=4;
 8005d80:	2004      	movs	r0, #4
 8005d82:	6038      	str	r0, [r7, #0]
		if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2] + crcApi3(signVal)
 8005d84:	f7ff ff88 	bl	8005c98 <crcApi3>
 8005d88:	7963      	ldrb	r3, [r4, #5]
 8005d8a:	4423      	add	r3, r4
 8005d8c:	799b      	ldrb	r3, [r3, #6]
 8005d8e:	4418      	add	r0, r3
 8005d90:	28ff      	cmp	r0, #255	; 0xff
 8005d92:	d137      	bne.n	8005e04 <function9+0x13c>
			signVal = signVal + 4;
 8005d94:	2308      	movs	r3, #8
 8005d96:	603b      	str	r3, [r7, #0]
			sTime.Hours = aRxBuffer[signVal + 2]; // current hour
 8005d98:	7aa3      	ldrb	r3, [r4, #10]
 8005d9a:	7033      	strb	r3, [r6, #0]
			sTime.Minutes =aRxBuffer[signVal + 3]; // current min
 8005d9c:	7ae3      	ldrb	r3, [r4, #11]
 8005d9e:	7073      	strb	r3, [r6, #1]
			sDate.Date = aRxBuffer[signVal + 4]; // current date
 8005da0:	7b23      	ldrb	r3, [r4, #12]
 8005da2:	70ab      	strb	r3, [r5, #2]
			sDate.Month = aRxBuffer[signVal + 5]; // current month
 8005da4:	7b63      	ldrb	r3, [r4, #13]
 8005da6:	706b      	strb	r3, [r5, #1]
			sDate.Year = aRxBuffer[signVal + 6];	// current year
 8005da8:	7ba3      	ldrb	r3, [r4, #14]
 8005daa:	70eb      	strb	r3, [r5, #3]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005dac:	2200      	movs	r2, #0
			sDate.WeekDay=aRxBuffer[signVal + 8];	// current weekday
 8005dae:	7c23      	ldrb	r3, [r4, #16]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005db0:	4917      	ldr	r1, [pc, #92]	; (8005e10 <function9+0x148>)
 8005db2:	4819      	ldr	r0, [pc, #100]	; (8005e18 <function9+0x150>)
			sDate.WeekDay=aRxBuffer[signVal + 8];	// current weekday
 8005db4:	702b      	strb	r3, [r5, #0]
			HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8005db6:	f7fb fe72 	bl	8001a9e <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4915      	ldr	r1, [pc, #84]	; (8005e14 <function9+0x14c>)
 8005dbe:	4816      	ldr	r0, [pc, #88]	; (8005e18 <function9+0x150>)
 8005dc0:	f7fb fedd 	bl	8001b7e <HAL_RTC_SetDate>
			   HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8005dc4:	4913      	ldr	r1, [pc, #76]	; (8005e14 <function9+0x14c>)
 8005dc6:	4814      	ldr	r0, [pc, #80]	; (8005e18 <function9+0x150>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f7fb ff69 	bl	8001ca0 <HAL_RTC_GetDate>
			   DateLast=sDate.Date;
 8005dce:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <function9+0x178>)
 8005dd0:	78aa      	ldrb	r2, [r5, #2]
 8005dd2:	701a      	strb	r2, [r3, #0]
			string[1] = aRxBuffer[signVal + 7];	// current clock sync status
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	441c      	add	r4, r3
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <function9+0x17c>)
 8005dda:	79e2      	ldrb	r2, [r4, #7]
 8005ddc:	705a      	strb	r2, [r3, #1]
			clearBuffer3();
 8005dde:	f7ff faa3 	bl	8005328 <clearBuffer3>
				clearaRxBuffer();
 8005de2:	f7ff fa97 	bl	8005314 <clearaRxBuffer>
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005de6:	2110      	movs	r1, #16
 8005de8:	4817      	ldr	r0, [pc, #92]	; (8005e48 <function9+0x180>)
 8005dea:	f7fa feb4 	bl	8000b56 <HAL_GPIO_TogglePin>
			return 1;
 8005dee:	2001      	movs	r0, #1
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 27, 5000);
 8005df2:	4816      	ldr	r0, [pc, #88]	; (8005e4c <function9+0x184>)
 8005df4:	f7fc fc9a 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 70, 0x1FFF);
 8005df8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005dfc:	2246      	movs	r2, #70	; 0x46
 8005dfe:	490d      	ldr	r1, [pc, #52]	; (8005e34 <function9+0x16c>)
 8005e00:	4812      	ldr	r0, [pc, #72]	; (8005e4c <function9+0x184>)
 8005e02:	e7b0      	b.n	8005d66 <function9+0x9e>
	clearBuffer3();
 8005e04:	f7ff fa90 	bl	8005328 <clearBuffer3>
	clearaRxBuffer();
 8005e08:	f7ff fa84 	bl	8005314 <clearaRxBuffer>
}
 8005e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000ec4 	.word	0x20000ec4
 8005e14:	2000117a 	.word	0x2000117a
 8005e18:	20001188 	.word	0x20001188
 8005e1c:	20003b01 	.word	0x20003b01
 8005e20:	2000000d 	.word	0x2000000d
 8005e24:	2000010d 	.word	0x2000010d
 8005e28:	2000000c 	.word	0x2000000c
 8005e2c:	2000369c 	.word	0x2000369c
 8005e30:	20001108 	.word	0x20001108
 8005e34:	2000136c 	.word	0x2000136c
 8005e38:	200015e8 	.word	0x200015e8
 8005e3c:	08009853 	.word	0x08009853
 8005e40:	2000160c 	.word	0x2000160c
 8005e44:	20005312 	.word	0x20005312
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	20000e30 	.word	0x20000e30

08005e50 <function_10>:
int function_10() {
 8005e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		SDcardReadSeek("infoN.txt", 15, 0);
 8005e54:	2200      	movs	r2, #0
 8005e56:	210f      	movs	r1, #15
 8005e58:	4865      	ldr	r0, [pc, #404]	; (8005ff0 <function_10+0x1a0>)
		totalNoOfPhases = totalNoOfPhases + 1;
 8005e5a:	4f66      	ldr	r7, [pc, #408]	; (8005ff4 <function_10+0x1a4>)
			frame[4] = junctionId;									//junctionID
 8005e5c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8006034 <function_10+0x1e4>
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005e60:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8006038 <function_10+0x1e8>
		SDcardReadSeek("infoN.txt", 15, 0);
 8005e64:	f7fe fdde 	bl	8004a24 <SDcardReadSeek>
		totalNoOfPhases=readBytes[9];
 8005e68:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <function_10+0x1a8>)
		totalNoOfPhases = totalNoOfPhases + 1;
 8005e6a:	7a5b      	ldrb	r3, [r3, #9]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	703b      	strb	r3, [r7, #0]
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005e70:	2601      	movs	r6, #1
	int seekCnt=0;
 8005e72:	2500      	movs	r5, #0
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005e74:	783b      	ldrb	r3, [r7, #0]
 8005e76:	f105 6800 	add.w	r8, r5, #134217728	; 0x8000000
 8005e7a:	429e      	cmp	r6, r3
 8005e7c:	f508 2840 	add.w	r8, r8, #786432	; 0xc0000
 8005e80:	db02      	blt.n	8005e88 <function_10+0x38>
	return 1;
 8005e82:	2001      	movs	r0, #1
}
 8005e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			phaseNo = i;
 8005e88:	485c      	ldr	r0, [pc, #368]	; (8005ffc <function_10+0x1ac>)
			frame[0] = 0x7E;
 8005e8a:	4c5d      	ldr	r4, [pc, #372]	; (8006000 <function_10+0x1b0>)
			phaseNo = i;
 8005e8c:	7006      	strb	r6, [r0, #0]
			clearframe();
 8005e8e:	f7ff fa17 	bl	80052c0 <clearframe>
			fileNo = 111;
 8005e92:	4a5c      	ldr	r2, [pc, #368]	; (8006004 <function_10+0x1b4>)
 8005e94:	236f      	movs	r3, #111	; 0x6f
 8005e96:	7013      	strb	r3, [r2, #0]
			frame[6] = fileNo;									//fileNumb
 8005e98:	71a3      	strb	r3, [r4, #6]
			frame[7] = 0x0A;									//functionNo
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	71e3      	strb	r3, [r4, #7]
			frame[8] = planNo;									//planNo
 8005e9e:	4b5a      	ldr	r3, [pc, #360]	; (8006008 <function_10+0x1b8>)
			frame[0] = 0x7E;
 8005ea0:	227e      	movs	r2, #126	; 0x7e
 8005ea2:	7022      	strb	r2, [r4, #0]
			frame[1] = 0x7E;
 8005ea4:	7062      	strb	r2, [r4, #1]
			frame[8] = planNo;									//planNo
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	7223      	strb	r3, [r4, #8]
			frame[2] = 0x00;									//byte size 1
 8005eaa:	2200      	movs	r2, #0
 8005eac:	70a2      	strb	r2, [r4, #2]
			frame[9] = planID;									//phaseNo
 8005eae:	4b57      	ldr	r3, [pc, #348]	; (800600c <function_10+0x1bc>)
			frame[3] = 18;									//byte size 2
 8005eb0:	2212      	movs	r2, #18
 8005eb2:	70e2      	strb	r2, [r4, #3]
			frame[4] = junctionId;									//junctionID
 8005eb4:	f899 2000 	ldrb.w	r2, [r9]
 8005eb8:	7122      	strb	r2, [r4, #4]
			frame[9] = planID;									//phaseNo
 8005eba:	781b      	ldrb	r3, [r3, #0]
			frame[5] = programVersionNo;					//programVerNumber
 8005ebc:	4a54      	ldr	r2, [pc, #336]	; (8006010 <function_10+0x1c0>)
			frame[9] = planID;									//phaseNo
 8005ebe:	7263      	strb	r3, [r4, #9]
			frame[10] = phaseNo;
 8005ec0:	7803      	ldrb	r3, [r0, #0]
			frame[5] = programVersionNo;					//programVerNumber
 8005ec2:	7812      	ldrb	r2, [r2, #0]
			frame[10] = phaseNo;
 8005ec4:	72a3      	strb	r3, [r4, #10]
			frame[11] = '1';
 8005ec6:	2331      	movs	r3, #49	; 0x31
			frame[5] = programVersionNo;					//programVerNumber
 8005ec8:	7162      	strb	r2, [r4, #5]
			frame[11] = '1';
 8005eca:	72e3      	strb	r3, [r4, #11]
			frame[12] = '1';
 8005ecc:	7323      	strb	r3, [r4, #12]
			frame[13] = '1';
 8005ece:	7363      	strb	r3, [r4, #13]
			frame[14] = '1';
 8005ed0:	73a3      	strb	r3, [r4, #14]
			frame[15] = '1';
 8005ed2:	73e3      	strb	r3, [r4, #15]
			frame[16] = '1';
 8005ed4:	7423      	strb	r3, [r4, #16]
			frame[17] = '1';
 8005ed6:	7463      	strb	r3, [r4, #17]
			frame[18] = '1';
 8005ed8:	74a3      	strb	r3, [r4, #18]
			frame[19] = '1';									//'1'
 8005eda:	74e3      	strb	r3, [r4, #19]
			frame[20] = '1';									//'0' ; //'5' ;
 8005edc:	7523      	strb	r3, [r4, #20]
			frame[21] = '1';							// '2' ;//'9' ;//'1' ;
 8005ede:	7563      	strb	r3, [r4, #21]
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005ee0:	f7ff fa6e 	bl	80053c0 <crcApiResponse>
			frame[23] = 0x7D;								// ending delimeter
 8005ee4:	237d      	movs	r3, #125	; 0x7d
 8005ee6:	75e3      	strb	r3, [r4, #23]
			frame[24] = 0x7D;								//ending delimeter
 8005ee8:	7623      	strb	r3, [r4, #24]
			if(programFromBLE==1)
 8005eea:	4b4a      	ldr	r3, [pc, #296]	; (8006014 <function_10+0x1c4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005eee:	43c0      	mvns	r0, r0
			if(programFromBLE==1)
 8005ef0:	2b01      	cmp	r3, #1
			frame[22] = 0xFF - crcApiResponse();						//CRC
 8005ef2:	75a0      	strb	r0, [r4, #22]
				HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8005ef4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ef8:	f04f 0218 	mov.w	r2, #24
 8005efc:	4621      	mov	r1, r4
			if(programFromBLE==1)
 8005efe:	d129      	bne.n	8005f54 <function_10+0x104>
				HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8005f00:	4845      	ldr	r0, [pc, #276]	; (8006018 <function_10+0x1c8>)
 8005f02:	f7fc fc13 	bl	800272c <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 8005f06:	4945      	ldr	r1, [pc, #276]	; (800601c <function_10+0x1cc>)
 8005f08:	4843      	ldr	r0, [pc, #268]	; (8006018 <function_10+0x1c8>)
 8005f0a:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8005f0e:	2228      	movs	r2, #40	; 0x28
			signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005f10:	4c42      	ldr	r4, [pc, #264]	; (800601c <function_10+0x1cc>)
 8005f12:	f8df b128 	ldr.w	fp, [pc, #296]	; 800603c <function_10+0x1ec>
			HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8005f16:	f7fc fc66 	bl	80027e6 <HAL_UART_Receive>
			HAL_Delay(300);
 8005f1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005f1e:	f7fa fb51 	bl	80005c4 <HAL_Delay>
			signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	493e      	ldr	r1, [pc, #248]	; (8006020 <function_10+0x1d0>)
 8005f26:	4620      	mov	r0, r4
 8005f28:	f002 ffdc 	bl	8008ee4 <msgParse>
 8005f2c:	f8cb 0000 	str.w	r0, [fp]
			HAL_Delay(1000);
 8005f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f34:	f7fa fb46 	bl	80005c4 <HAL_Delay>
			signVal=4;
 8005f38:	2004      	movs	r0, #4
 8005f3a:	f8cb 0000 	str.w	r0, [fp]
							+ crcApi3(signVal) == 0xFF)
 8005f3e:	f7ff feab 	bl	8005c98 <crcApi3>
					if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8005f42:	7963      	ldrb	r3, [r4, #5]
 8005f44:	4423      	add	r3, r4
 8005f46:	799b      	ldrb	r3, [r3, #6]
							+ crcApi3(signVal) == 0xFF)
 8005f48:	4418      	add	r0, r3
					if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8005f4a:	28ff      	cmp	r0, #255	; 0xff
 8005f4c:	d00b      	beq.n	8005f66 <function_10+0x116>
					return 0;
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8005f54:	4833      	ldr	r0, [pc, #204]	; (8006024 <function_10+0x1d4>)
 8005f56:	f7fc fbe9 	bl	800272c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8005f5a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005f5e:	2228      	movs	r2, #40	; 0x28
 8005f60:	492e      	ldr	r1, [pc, #184]	; (800601c <function_10+0x1cc>)
 8005f62:	4830      	ldr	r0, [pc, #192]	; (8006024 <function_10+0x1d4>)
 8005f64:	e7d4      	b.n	8005f10 <function_10+0xc0>
				signVal = signVal + 2;
 8005f66:	2306      	movs	r3, #6
 8005f68:	f8cb 3000 	str.w	r3, [fp]
				if ((aRxBuffer[signVal] == junctionId)) {
 8005f6c:	79a2      	ldrb	r2, [r4, #6]
 8005f6e:	f899 3000 	ldrb.w	r3, [r9]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d1eb      	bne.n	8005f4e <function_10+0xfe>
							string[i] = aRxBuffer[signVal];
 8005f76:	4a2c      	ldr	r2, [pc, #176]	; (8006028 <function_10+0x1d8>)
						for (int i = 0; i < 15; i++) {
 8005f78:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 8005f7a:	340a      	adds	r4, #10
 8005f7c:	5d19      	ldrb	r1, [r3, r4]
 8005f7e:	5499      	strb	r1, [r3, r2]
						for (int i = 0; i < 15; i++) {
 8005f80:	3301      	adds	r3, #1
 8005f82:	2b0f      	cmp	r3, #15
 8005f84:	d1fa      	bne.n	8005f7c <function_10+0x12c>
 8005f86:	2319      	movs	r3, #25
 8005f88:	f8cb 3000 	str.w	r3, [fp]
						string[16]=0xFF;
 8005f8c:	23ff      	movs	r3, #255	; 0xff
 8005f8e:	7413      	strb	r3, [r2, #16]
						SDcardWriteSeek("phase.txt", 17, (uint8_t *) string, seekCnt);
 8005f90:	2111      	movs	r1, #17
 8005f92:	462b      	mov	r3, r5
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <function_10+0x1d8>)
 8005f96:	4825      	ldr	r0, [pc, #148]	; (800602c <function_10+0x1dc>)
						EEPROM_WriteArray(string,17,eepromAddress);
 8005f98:	4c25      	ldr	r4, [pc, #148]	; (8006030 <function_10+0x1e0>)
						SDcardWriteSeek("phase.txt", 17, (uint8_t *) string, seekCnt);
 8005f9a:	f7fe fd67 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("phase.txt", 350, 0);
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005fa4:	4821      	ldr	r0, [pc, #132]	; (800602c <function_10+0x1dc>)
 8005fa6:	f7fe fd3d 	bl	8004a24 <SDcardReadSeek>
						HAL_FLASH_Unlock();
 8005faa:	f7fa fc35 	bl	8000818 <HAL_FLASH_Unlock>
						Flash_Write(flashAdd, string, 17);
 8005fae:	2211      	movs	r2, #17
 8005fb0:	491d      	ldr	r1, [pc, #116]	; (8006028 <function_10+0x1d8>)
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f7fe fe30 	bl	8004c18 <Flash_Write>
						HAL_FLASH_Lock();
 8005fb8:	f7fa fc40 	bl	800083c <HAL_FLASH_Lock>
						EEPROM_WriteArray(string,17,eepromAddress);
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	481a      	ldr	r0, [pc, #104]	; (8006028 <function_10+0x1d8>)
 8005fc0:	2111      	movs	r1, #17
 8005fc2:	f7fe fde3 	bl	8004b8c <EEPROM_WriteArray>
						clearReadBytes();
 8005fc6:	f7ff f985 	bl	80052d4 <clearReadBytes>
						clearStringBuffer();
 8005fca:	f7ff fa5b 	bl	8005484 <clearStringBuffer>
						EEPROM_ReadArray(string,17,eepromAddress);
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	4815      	ldr	r0, [pc, #84]	; (8006028 <function_10+0x1d8>)
 8005fd2:	2111      	movs	r1, #17
 8005fd4:	f7fe fdf0 	bl	8004bb8 <EEPROM_ReadArray>
						seekCnt=seekCnt+17; //SD card counter
 8005fd8:	3511      	adds	r5, #17
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005fda:	2110      	movs	r1, #16
 8005fdc:	4650      	mov	r0, sl
                         eepromAddress= seekCnt; //eeprom Counter
 8005fde:	6025      	str	r5, [r4, #0]
		for (int i = 1; i < totalNoOfPhases; i++) {
 8005fe0:	3601      	adds	r6, #1
                         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8005fe2:	f7fa fdb8 	bl	8000b56 <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 8005fe6:	f7ff f995 	bl	8005314 <clearaRxBuffer>
						clearBuffer4();
 8005fea:	f7ff f9b1 	bl	8005350 <clearBuffer4>
 8005fee:	e741      	b.n	8005e74 <function_10+0x24>
 8005ff0:	08009858 	.word	0x08009858
 8005ff4:	20000120 	.word	0x20000120
 8005ff8:	20000314 	.word	0x20000314
 8005ffc:	20003758 	.word	0x20003758
 8006000:	20003b01 	.word	0x20003b01
 8006004:	2000000c 	.word	0x2000000c
 8006008:	20003aed 	.word	0x20003aed
 800600c:	20003651 	.word	0x20003651
 8006010:	2000010d 	.word	0x2000010d
 8006014:	2000369c 	.word	0x2000369c
 8006018:	20001108 	.word	0x20001108
 800601c:	2000136c 	.word	0x2000136c
 8006020:	08009853 	.word	0x08009853
 8006024:	20000e30 	.word	0x20000e30
 8006028:	20005312 	.word	0x20005312
 800602c:	0800988f 	.word	0x0800988f
 8006030:	200000c0 	.word	0x200000c0
 8006034:	2000000d 	.word	0x2000000d
 8006038:	40021000 	.word	0x40021000
 800603c:	200015e8 	.word	0x200015e8

08006040 <RTC_UtcToIstSet>:



}
void RTC_UtcToIstSet(unsigned char uDate,unsigned char uMonth, unsigned char uYear,unsigned char uHours, unsigned char uMinutes,unsigned char uSeconds)
{
 8006040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
//static unsigned char LeapYear;

      if( (uDate > 31) || (uMonth > 12) || (uYear >99) || (uHours > 23) || (uMinutes > 59) || (uSeconds > 59) )
 8006044:	281f      	cmp	r0, #31
{
 8006046:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800604a:	f89d 5020 	ldrb.w	r5, [sp, #32]
      if( (uDate > 31) || (uMonth > 12) || (uYear >99) || (uHours > 23) || (uMinutes > 59) || (uSeconds > 59) )
 800604e:	d85d      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
 8006050:	290c      	cmp	r1, #12
 8006052:	d85b      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
 8006054:	2a63      	cmp	r2, #99	; 0x63
 8006056:	d859      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
 8006058:	2b17      	cmp	r3, #23
 800605a:	d857      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
 800605c:	f1bc 0f3b 	cmp.w	ip, #59	; 0x3b
 8006060:	d854      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
 8006062:	2d3b      	cmp	r5, #59	; 0x3b
 8006064:	d852      	bhi.n	800610c <RTC_UtcToIstSet+0xcc>
Minutes = 0;
Seconds = 0;

Seconds = uSeconds;

Minutes = uMinutes + 30;
 8006066:	f10c 081e 	add.w	r8, ip, #30
if( (uYear % 4) == 0)
 800606a:	f012 0f03 	tst.w	r2, #3
 800606e:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8006124 <RTC_UtcToIstSet+0xe4>
 8006072:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006128 <RTC_UtcToIstSet+0xe8>
Hours = 0;
 8006076:	4f26      	ldr	r7, [pc, #152]	; (8006110 <RTC_UtcToIstSet+0xd0>)
MaxDayOfMonth[2] = 29;
 8006078:	bf08      	it	eq
 800607a:	241d      	moveq	r4, #29
Minutes = uMinutes + 30;
 800607c:	fa5f f888 	uxtb.w	r8, r8
MaxDayOfMonth[2] = 29;
 8006080:	bf08      	it	eq
 8006082:	f88e 4002 	strbeq.w	r4, [lr, #2]
if(Minutes >= 60)
 8006086:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
{
Minutes -= 60;
 800608a:	bf88      	it	hi
 800608c:	f1ac 0c1e 	subhi.w	ip, ip, #30
Date = 0;
 8006090:	f04f 0600 	mov.w	r6, #0
Minutes -= 60;
 8006094:	bf84      	itt	hi
 8006096:	f889 c000 	strbhi.w	ip, [r9]
Hours = 1;
 800609a:	f04f 0c01 	movhi.w	ip, #1
Hours = 0;
 800609e:	703e      	strb	r6, [r7, #0]
Hours = 1;
 80060a0:	bf88      	it	hi
 80060a2:	f887 c000 	strbhi.w	ip, [r7]
}

Hours += uHours+5;
 80060a6:	f897 c000 	ldrb.w	ip, [r7]
Minutes = uMinutes + 30;
 80060aa:	bf98      	it	ls
 80060ac:	f889 8000 	strbls.w	r8, [r9]
Hours += uHours+5;
 80060b0:	4463      	add	r3, ip
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f103 0c05 	add.w	ip, r3, #5
 80060b8:	fa5f fc8c 	uxtb.w	ip, ip
if(Hours >=24)
 80060bc:	f1bc 0f17 	cmp.w	ip, #23
{
Hours -= 24;
 80060c0:	bf88      	it	hi
 80060c2:	3b13      	subhi	r3, #19
Date = 0;
 80060c4:	4c13      	ldr	r4, [pc, #76]	; (8006114 <RTC_UtcToIstSet+0xd4>)
Hours -= 24;
 80060c6:	bf84      	itt	hi
 80060c8:	703b      	strbhi	r3, [r7, #0]
Date =1;
 80060ca:	2301      	movhi	r3, #1
Date = 0;
 80060cc:	7026      	strb	r6, [r4, #0]
Date =1;
 80060ce:	bf88      	it	hi
 80060d0:	7023      	strbhi	r3, [r4, #0]
}

Date += uDate;
 80060d2:	7823      	ldrb	r3, [r4, #0]
Seconds = uSeconds;
 80060d4:	4e10      	ldr	r6, [pc, #64]	; (8006118 <RTC_UtcToIstSet+0xd8>)
Hours += uHours+5;
 80060d6:	bf98      	it	ls
 80060d8:	f887 c000 	strbls.w	ip, [r7]
Date += uDate;
 80060dc:	4418      	add	r0, r3
Month = uMonth;
Year = uYear;
if(Date > MaxDayOfMonth[uMonth])
 80060de:	f81e 3001 	ldrb.w	r3, [lr, r1]
Seconds = uSeconds;
 80060e2:	7035      	strb	r5, [r6, #0]
Date += uDate;
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	4d0d      	ldr	r5, [pc, #52]	; (800611c <RTC_UtcToIstSet+0xdc>)
 80060e8:	4e0d      	ldr	r6, [pc, #52]	; (8006120 <RTC_UtcToIstSet+0xe0>)
 80060ea:	7020      	strb	r0, [r4, #0]
if(Date > MaxDayOfMonth[uMonth])
 80060ec:	4283      	cmp	r3, r0
Month = uMonth;
 80060ee:	7029      	strb	r1, [r5, #0]
Year = uYear;
 80060f0:	7032      	strb	r2, [r6, #0]
if(Date > MaxDayOfMonth[uMonth])
 80060f2:	d20b      	bcs.n	800610c <RTC_UtcToIstSet+0xcc>
{
Date=1;
 80060f4:	2301      	movs	r3, #1
Month = uMonth + 1;
 80060f6:	4419      	add	r1, r3
 80060f8:	b2c9      	uxtb	r1, r1
if(Month > 12)
 80060fa:	290d      	cmp	r1, #13
Date=1;
 80060fc:	7023      	strb	r3, [r4, #0]
if(Month > 12)
 80060fe:	d002      	beq.n	8006106 <RTC_UtcToIstSet+0xc6>
Month = uMonth + 1;
 8006100:	7029      	strb	r1, [r5, #0]
 8006102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
Month=1;
Year++;
 8006106:	3201      	adds	r2, #1
Month=1;
 8006108:	702b      	strb	r3, [r5, #0]
Year++;
 800610a:	7032      	strb	r2, [r6, #0]
 800610c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006110:	20002644 	.word	0x20002644
 8006114:	20003660 	.word	0x20003660
 8006118:	20005213 	.word	0x20005213
 800611c:	20003d74 	.word	0x20003d74
 8006120:	20003af4 	.word	0x20003af4
 8006124:	20003661 	.word	0x20003661
 8006128:	20005211 	.word	0x20005211

0800612c <convertStringToByte>:
/*-------------------*/




void convertStringToByte(){
 800612c:	b573      	push	{r0, r1, r4, r5, r6, lr}




	/*----------day------------------*/
	RecMsg2[40] = RecMsg2[17] - 0x30;
 800612e:	4c4a      	ldr	r4, [pc, #296]	; (8006258 <convertStringToByte+0x12c>)
 8006130:	7c60      	ldrb	r0, [r4, #17]
	RecMsg2[41] = RecMsg2[40] * 10;
	RecMsg2[42] = RecMsg2[18] - 0x30;
 8006132:	7ca3      	ldrb	r3, [r4, #18]
	GPSDay = RecMsg2[41] + RecMsg2[42];

	/*----------month------------------*/
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8006134:	7d21      	ldrb	r1, [r4, #20]
	RecMsg2[44] = RecMsg2[43] * 10;
	RecMsg2[45] = RecMsg2[21] - 0x30;
	GPSMonth = RecMsg2[44] + RecMsg2[45];

	/*----------year------------------*/
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8006136:	7e62      	ldrb	r2, [r4, #25]
	GPSYear = RecMsg2[47] + RecMsg2[48];

	/*----------Hr------------------*/
	RecMsg2[49] = RecMsg2[7] - 0x30;
	RecMsg2[50] = RecMsg2[49] * 10;
	RecMsg2[51] = RecMsg2[8] - 0x30;
 8006138:	7a25      	ldrb	r5, [r4, #8]
	GPSHr = RecMsg2[50] + RecMsg2[51];

	/*----------min------------------*/
	RecMsg2[52] = RecMsg2[9] - 0x30;
	RecMsg2[53] = RecMsg2[52] * 10;
	RecMsg2[54] = RecMsg2[10] - 0x30;
 800613a:	7aa6      	ldrb	r6, [r4, #10]
	RecMsg2[40] = RecMsg2[17] - 0x30;
 800613c:	3830      	subs	r0, #48	; 0x30
 800613e:	b2c0      	uxtb	r0, r0
 8006140:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	RecMsg2[41] = RecMsg2[40] * 10;
 8006144:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006148:	0040      	lsls	r0, r0, #1
	RecMsg2[42] = RecMsg2[18] - 0x30;
 800614a:	3b30      	subs	r3, #48	; 0x30
 800614c:	b2db      	uxtb	r3, r3
	RecMsg2[41] = RecMsg2[40] * 10;
 800614e:	b2c0      	uxtb	r0, r0
 8006150:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	RecMsg2[42] = RecMsg2[18] - 0x30;
 8006154:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	GPSDay = RecMsg2[41] + RecMsg2[42];
 8006158:	4418      	add	r0, r3
 800615a:	4b40      	ldr	r3, [pc, #256]	; (800625c <convertStringToByte+0x130>)
 800615c:	b2c0      	uxtb	r0, r0
	RecMsg2[43] = RecMsg2[20] - 0x30;
 800615e:	3930      	subs	r1, #48	; 0x30
	GPSDay = RecMsg2[41] + RecMsg2[42];
 8006160:	7018      	strb	r0, [r3, #0]
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8006162:	b2c9      	uxtb	r1, r1
	RecMsg2[45] = RecMsg2[21] - 0x30;
 8006164:	7d63      	ldrb	r3, [r4, #21]
	RecMsg2[43] = RecMsg2[20] - 0x30;
 8006166:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	RecMsg2[44] = RecMsg2[43] * 10;
 800616a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800616e:	0049      	lsls	r1, r1, #1
	RecMsg2[45] = RecMsg2[21] - 0x30;
 8006170:	3b30      	subs	r3, #48	; 0x30
 8006172:	b2db      	uxtb	r3, r3
	RecMsg2[44] = RecMsg2[43] * 10;
 8006174:	b2c9      	uxtb	r1, r1
 8006176:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	RecMsg2[45] = RecMsg2[21] - 0x30;
 800617a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	GPSMonth = RecMsg2[44] + RecMsg2[45];
 800617e:	4419      	add	r1, r3
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <convertStringToByte+0x134>)
 8006182:	b2c9      	uxtb	r1, r1
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8006184:	3a30      	subs	r2, #48	; 0x30
	GPSMonth = RecMsg2[44] + RecMsg2[45];
 8006186:	7019      	strb	r1, [r3, #0]
	RecMsg2[46] = RecMsg2[25] - 0x30;
 8006188:	b2d2      	uxtb	r2, r2
	RecMsg2[48] = RecMsg2[26] - 0x30;
 800618a:	7ea3      	ldrb	r3, [r4, #26]
	RecMsg2[46] = RecMsg2[25] - 0x30;
 800618c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	RecMsg2[47] = RecMsg2[46] * 10;
 8006190:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006194:	0052      	lsls	r2, r2, #1
	RecMsg2[48] = RecMsg2[26] - 0x30;
 8006196:	3b30      	subs	r3, #48	; 0x30
 8006198:	b2db      	uxtb	r3, r3
	RecMsg2[47] = RecMsg2[46] * 10;
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	RecMsg2[48] = RecMsg2[26] - 0x30;
 80061a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	GPSYear = RecMsg2[47] + RecMsg2[48];
 80061a4:	441a      	add	r2, r3
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <convertStringToByte+0x138>)
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
	RecMsg2[49] = RecMsg2[7] - 0x30;
 80061ac:	79e3      	ldrb	r3, [r4, #7]
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	RecMsg2[50] = RecMsg2[49] * 10;
 80061b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061ba:	005b      	lsls	r3, r3, #1
	RecMsg2[51] = RecMsg2[8] - 0x30;
 80061bc:	3d30      	subs	r5, #48	; 0x30
 80061be:	b2ed      	uxtb	r5, r5
	RecMsg2[50] = RecMsg2[49] * 10;
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	RecMsg2[51] = RecMsg2[8] - 0x30;
 80061c6:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
	GPSHr = RecMsg2[50] + RecMsg2[51];
 80061ca:	442b      	add	r3, r5
 80061cc:	4d26      	ldr	r5, [pc, #152]	; (8006268 <convertStringToByte+0x13c>)
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	702b      	strb	r3, [r5, #0]
	RecMsg2[52] = RecMsg2[9] - 0x30;
 80061d2:	7a65      	ldrb	r5, [r4, #9]
 80061d4:	3d30      	subs	r5, #48	; 0x30
 80061d6:	b2ed      	uxtb	r5, r5
 80061d8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	RecMsg2[53] = RecMsg2[52] * 10;
 80061dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061e0:	006d      	lsls	r5, r5, #1
	RecMsg2[54] = RecMsg2[10] - 0x30;
 80061e2:	3e30      	subs	r6, #48	; 0x30
	RecMsg2[53] = RecMsg2[52] * 10;
 80061e4:	b2ed      	uxtb	r5, r5
	RecMsg2[54] = RecMsg2[10] - 0x30;
 80061e6:	b2f6      	uxtb	r6, r6
	RecMsg2[53] = RecMsg2[52] * 10;
 80061e8:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	RecMsg2[54] = RecMsg2[10] - 0x30;
 80061ec:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
	GPSMin = RecMsg2[53] + RecMsg2[54];
 80061f0:	19ac      	adds	r4, r5, r6
 80061f2:	4d1e      	ldr	r5, [pc, #120]	; (800626c <convertStringToByte+0x140>)
 80061f4:	b2e4      	uxtb	r4, r4
 80061f6:	702c      	strb	r4, [r5, #0]


 RTC_UtcToIstSet(GPSDay,GPSMonth,GPSYear,GPSHr,GPSMin,GPSSec);
 80061f8:	4d1d      	ldr	r5, [pc, #116]	; (8006270 <convertStringToByte+0x144>)
 80061fa:	782d      	ldrb	r5, [r5, #0]
 80061fc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8006200:	f7ff ff1e 	bl	8006040 <RTC_UtcToIstSet>
//	else{
//		GPSHr=GPSHr+0x05;
//	}  //Date,Month,Year,Hours,Minutes,Seconds


if(Date != 0 || Month != 0 || Year != 0)
 8006204:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <convertStringToByte+0x148>)
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <convertStringToByte+0x14c>)
 8006208:	7818      	ldrb	r0, [r3, #0]
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <convertStringToByte+0x150>)
 800620c:	b918      	cbnz	r0, 8006216 <convertStringToByte+0xea>
 800620e:	7811      	ldrb	r1, [r2, #0]
 8006210:	b909      	cbnz	r1, 8006216 <convertStringToByte+0xea>
 8006212:	7819      	ldrb	r1, [r3, #0]
 8006214:	b1e9      	cbz	r1, 8006252 <convertStringToByte+0x126>
{
	            sTime.Hours = Hours; // current hour
 8006216:	4c1a      	ldr	r4, [pc, #104]	; (8006280 <convertStringToByte+0x154>)
 8006218:	491a      	ldr	r1, [pc, #104]	; (8006284 <convertStringToByte+0x158>)
 800621a:	7824      	ldrb	r4, [r4, #0]
 800621c:	700c      	strb	r4, [r1, #0]
				sTime.Minutes =Minutes; // current min
 800621e:	4c1a      	ldr	r4, [pc, #104]	; (8006288 <convertStringToByte+0x15c>)
				sDate.Date = Date; // current date
				sDate.Month = Month; // current month
 8006220:	7812      	ldrb	r2, [r2, #0]
				sTime.Minutes =Minutes; // current min
 8006222:	7824      	ldrb	r4, [r4, #0]
 8006224:	704c      	strb	r4, [r1, #1]
				sDate.Date = Date; // current date
 8006226:	4c19      	ldr	r4, [pc, #100]	; (800628c <convertStringToByte+0x160>)
				sDate.Year = Year;	// current year
 8006228:	781b      	ldrb	r3, [r3, #0]
				sDate.Date = Date; // current date
 800622a:	70a0      	strb	r0, [r4, #2]
				sDate.Month = Month; // current month
 800622c:	7062      	strb	r2, [r4, #1]

				HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 800622e:	4818      	ldr	r0, [pc, #96]	; (8006290 <convertStringToByte+0x164>)
				sDate.Year = Year;	// current year
 8006230:	70e3      	strb	r3, [r4, #3]
				HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8006232:	2200      	movs	r2, #0
 8006234:	f7fb fc33 	bl	8001a9e <HAL_RTC_SetTime>
			    HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8006238:	2200      	movs	r2, #0
 800623a:	4621      	mov	r1, r4
 800623c:	4814      	ldr	r0, [pc, #80]	; (8006290 <convertStringToByte+0x164>)
 800623e:	f7fb fc9e 	bl	8001b7e <HAL_RTC_SetDate>

			    /*---------get the date and update the DateLast variable-------*/
			    HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8006242:	2200      	movs	r2, #0
 8006244:	4621      	mov	r1, r4
 8006246:	4812      	ldr	r0, [pc, #72]	; (8006290 <convertStringToByte+0x164>)
 8006248:	f7fb fd2a 	bl	8001ca0 <HAL_RTC_GetDate>
				DateLast=sDate.Date;
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <convertStringToByte+0x168>)
 800624e:	78a2      	ldrb	r2, [r4, #2]
 8006250:	701a      	strb	r2, [r3, #0]





}
 8006252:	b002      	add	sp, #8
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	bf00      	nop
 8006258:	200054ee 	.word	0x200054ee
 800625c:	20002643 	.word	0x20002643
 8006260:	20003a1d 	.word	0x20003a1d
 8006264:	20003a0d 	.word	0x20003a0d
 8006268:	20003a0c 	.word	0x20003a0c
 800626c:	20003658 	.word	0x20003658
 8006270:	20005224 	.word	0x20005224
 8006274:	20003660 	.word	0x20003660
 8006278:	20003d74 	.word	0x20003d74
 800627c:	20003af4 	.word	0x20003af4
 8006280:	20002644 	.word	0x20002644
 8006284:	20000ec4 	.word	0x20000ec4
 8006288:	20005211 	.word	0x20005211
 800628c:	2000117a 	.word	0x2000117a
 8006290:	20001188 	.word	0x20001188
 8006294:	2000160c 	.word	0x2000160c

08006298 <getDateAndTimeFromGPS>:
void getDateAndTimeFromGPS(){
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	    min=0;
 800629c:	4c1e      	ldr	r4, [pc, #120]	; (8006318 <getDateAndTimeFromGPS+0x80>)
		if(msgUnPrcd==1)
 800629e:	4f1f      	ldr	r7, [pc, #124]	; (800631c <getDateAndTimeFromGPS+0x84>)
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);
 80062a0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8006338 <getDateAndTimeFromGPS+0xa0>
	    min=0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	6023      	str	r3, [r4, #0]
		diableAllString();
 80062a8:	f7fe fab2 	bl	8004810 <diableAllString>
		HAL_Delay(1000);
 80062ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062b0:	f7fa f988 	bl	80005c4 <HAL_Delay>
		enableGNZDAString();
 80062b4:	f7fe fa7c 	bl	80047b0 <enableGNZDAString>
 80062b8:	46b8      	mov	r8, r7
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);
 80062ba:	2201      	movs	r2, #1
 80062bc:	4649      	mov	r1, r9
 80062be:	4818      	ldr	r0, [pc, #96]	; (8006320 <getDateAndTimeFromGPS+0x88>)
 80062c0:	f7fc faf1 	bl	80028a6 <HAL_UART_Receive_IT>
		if(msgUnPrcd==1)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d11b      	bne.n	8006302 <getDateAndTimeFromGPS+0x6a>
							functionRec=0;
 80062ca:	4b16      	ldr	r3, [pc, #88]	; (8006324 <getDateAndTimeFromGPS+0x8c>)
							if(strncmp((char*)RecMsg2,(char*) "$GNZDA,",6) == 0)
 80062cc:	4e16      	ldr	r6, [pc, #88]	; (8006328 <getDateAndTimeFromGPS+0x90>)
 80062ce:	4917      	ldr	r1, [pc, #92]	; (800632c <getDateAndTimeFromGPS+0x94>)
							functionRec=0;
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
							if(strncmp((char*)RecMsg2,(char*) "$GNZDA,",6) == 0)
 80062d4:	4630      	mov	r0, r6
 80062d6:	2206      	movs	r2, #6
 80062d8:	f003 fa44 	bl	8009764 <strncmp>
 80062dc:	4605      	mov	r5, r0
 80062de:	b958      	cbnz	r0, 80062f8 <getDateAndTimeFromGPS+0x60>
                                       if( RecMsg2[7] != ','){
 80062e0:	79f3      	ldrb	r3, [r6, #7]
 80062e2:	2b2c      	cmp	r3, #44	; 0x2c
 80062e4:	d012      	beq.n	800630c <getDateAndTimeFromGPS+0x74>
							  			convertStringToByte();
 80062e6:	f7ff ff21 	bl	800612c <convertStringToByte>
							  			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80062ea:	462a      	mov	r2, r5
 80062ec:	4910      	ldr	r1, [pc, #64]	; (8006330 <getDateAndTimeFromGPS+0x98>)
 80062ee:	4811      	ldr	r0, [pc, #68]	; (8006334 <getDateAndTimeFromGPS+0x9c>)
}
 80062f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
							  			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80062f4:	f7fb bcd4 	b.w	8001ca0 <HAL_RTC_GetDate>
                                    clearingRecBuffer();
 80062f8:	f7fe fcdc 	bl	8004cb4 <clearingRecBuffer>
							  		msgUnPrcd=0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c8 3000 	str.w	r3, [r8]
		  if(min==2)
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d1d8      	bne.n	80062ba <getDateAndTimeFromGPS+0x22>
 8006308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                                       if(dateTimeGet==1 || min==2)
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d1f2      	bne.n	80062f8 <getDateAndTimeFromGPS+0x60>
 8006312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006316:	bf00      	nop
 8006318:	20000088 	.word	0x20000088
 800631c:	20000ff4 	.word	0x20000ff4
 8006320:	2000132c 	.word	0x2000132c
 8006324:	20000084 	.word	0x20000084
 8006328:	200054ee 	.word	0x200054ee
 800632c:	08009862 	.word	0x08009862
 8006330:	2000117a 	.word	0x2000117a
 8006334:	20001188 	.word	0x20001188
 8006338:	2000136c 	.word	0x2000136c

0800633c <function11N>:


/*-------------------------------function 11---------------------------*/
/*----------------------- registration function----------------------------------*/
int function11N()   // check registration
{
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clearframe();
	frame[0] = 126;
 8006340:	4c68      	ldr	r4, [pc, #416]	; (80064e4 <function11N+0x1a8>)
	frame[1] = 126;
	frame[2] = 00;   //byte size 1
	frame[3] = 31;//31;   //byte size 2
	frame[4] = junctionId;   // 127 ;//
 8006342:	4f69      	ldr	r7, [pc, #420]	; (80064e8 <function11N+0x1ac>)
	frame[5] = programVersionNo;   // 127 ;//
 8006344:	4e69      	ldr	r6, [pc, #420]	; (80064ec <function11N+0x1b0>)
	frame[6] = fileNo;
 8006346:	4d6a      	ldr	r5, [pc, #424]	; (80064f0 <function11N+0x1b4>)
	clearframe();
 8006348:	f7fe ffba 	bl	80052c0 <clearframe>
	frame[0] = 126;
 800634c:	237e      	movs	r3, #126	; 0x7e
 800634e:	7023      	strb	r3, [r4, #0]
	frame[1] = 126;
 8006350:	7063      	strb	r3, [r4, #1]
	frame[2] = 00;   //byte size 1
 8006352:	2300      	movs	r3, #0
 8006354:	70a3      	strb	r3, [r4, #2]
	frame[3] = 31;//31;   //byte size 2
 8006356:	231f      	movs	r3, #31
 8006358:	70e3      	strb	r3, [r4, #3]
	frame[4] = junctionId;   // 127 ;//
 800635a:	783b      	ldrb	r3, [r7, #0]
 800635c:	7123      	strb	r3, [r4, #4]
	frame[5] = programVersionNo;   // 127 ;//
 800635e:	7833      	ldrb	r3, [r6, #0]
 8006360:	7163      	strb	r3, [r4, #5]
	frame[6] = fileNo;
 8006362:	782b      	ldrb	r3, [r5, #0]
 8006364:	71a3      	strb	r3, [r4, #6]
	frame[7] = 0x0B;   //function no
 8006366:	230b      	movs	r3, #11
 8006368:	71e3      	strb	r3, [r4, #7]
	frame[8] = '0';
	frame[9] = '1';
	frame[10] = '3';
 800636a:	2233      	movs	r2, #51	; 0x33
	frame[8] = '0';
 800636c:	2330      	movs	r3, #48	; 0x30
 800636e:	7223      	strb	r3, [r4, #8]
	frame[10] = '3';
 8006370:	72a2      	strb	r2, [r4, #10]
	frame[11] = '7';
	frame[12] = '7';
	frame[13] = '7';
	frame[14] = '0';
 8006372:	73a3      	strb	r3, [r4, #14]
	frame[11] = '7';
 8006374:	2237      	movs	r2, #55	; 0x37
	frame[15] = '0';
 8006376:	73e3      	strb	r3, [r4, #15]
	frame[16] = '0';
 8006378:	7423      	strb	r3, [r4, #16]
	frame[17] = '6';
	frame[18] = '2';
	frame[19] = '0';
 800637a:	74e3      	strb	r3, [r4, #19]
	frame[20] = '9';//'1';
 800637c:	2339      	movs	r3, #57	; 0x39
	frame[11] = '7';
 800637e:	72e2      	strb	r2, [r4, #11]
	frame[12] = '7';
 8006380:	7322      	strb	r2, [r4, #12]
	frame[13] = '7';
 8006382:	7362      	strb	r2, [r4, #13]
	frame[20] = '9';//'1';
 8006384:	7523      	strb	r3, [r4, #20]
	frame[17] = '6';
 8006386:	2236      	movs	r2, #54	; 0x36
	frame[21] = '1';//'2';
	frame[22] = '5';//'1';
 8006388:	2335      	movs	r3, #53	; 0x35
	frame[9] = '1';
 800638a:	2131      	movs	r1, #49	; 0x31
	frame[17] = '6';
 800638c:	7462      	strb	r2, [r4, #17]
	frame[22] = '5';//'1';
 800638e:	75a3      	strb	r3, [r4, #22]
	frame[18] = '2';
 8006390:	2232      	movs	r2, #50	; 0x32

	frame[23] = 1;
 8006392:	2301      	movs	r3, #1
	frame[9] = '1';
 8006394:	7261      	strb	r1, [r4, #9]
	frame[18] = '2';
 8006396:	74a2      	strb	r2, [r4, #18]
	frame[21] = '1';//'2';
 8006398:	7561      	strb	r1, [r4, #21]
	frame[23] = 1;
 800639a:	75e3      	strb	r3, [r4, #23]
	frame[24] = 1;
 800639c:	7623      	strb	r3, [r4, #24]
	frame[25] = 1;
 800639e:	7663      	strb	r3, [r4, #25]
	frame[26] = 1;
 80063a0:	76a3      	strb	r3, [r4, #26]
	frame[27] = 1;
 80063a2:	76e3      	strb	r3, [r4, #27]
	frame[28] = 1;
 80063a4:	7723      	strb	r3, [r4, #28]
	frame[29] = 1;
 80063a6:	7763      	strb	r3, [r4, #29]
	frame[30] = 1;
 80063a8:	77a3      	strb	r3, [r4, #30]
	frame[31] = 1;
 80063aa:	77e3      	strb	r3, [r4, #31]
	frame[32] = 1;   //'1'
 80063ac:	f884 3020 	strb.w	r3, [r4, #32]
	frame[33] = 1;   //'0' ; //'5' ;
 80063b0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	frame[34] = 1;   // '2' ;//'9' ;//'1' ;
 80063b4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	frame[35] = 0xFF - crcApi();
 80063b8:	f7fe fff2 	bl	80053a0 <crcApi>
	frame[36] = 125;
 80063bc:	237d      	movs	r3, #125	; 0x7d
 80063be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	frame[37] = 125;
 80063c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
//	frame[38] = 125;
//		frame[21] = 0x0D;
	if(programFromBLE==1)
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <function11N+0x1b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
	frame[35] = 0xFF - crcApi();
 80063ca:	43c0      	mvns	r0, r0
	if(programFromBLE==1)
 80063cc:	2b01      	cmp	r3, #1
	frame[35] = 0xFF - crcApi();
 80063ce:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	{
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 37, 5000);
 80063d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80063d6:	f04f 0225 	mov.w	r2, #37	; 0x25
 80063da:	4621      	mov	r1, r4
	if(programFromBLE==1)
 80063dc:	d173      	bne.n	80064c6 <function11N+0x18a>
		HAL_UART_Transmit(&huart1, (uint8_t*) frame, 37, 5000);
 80063de:	4846      	ldr	r0, [pc, #280]	; (80064f8 <function11N+0x1bc>)
 80063e0:	f7fc f9a4 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80063e4:	4945      	ldr	r1, [pc, #276]	; (80064fc <function11N+0x1c0>)
 80063e6:	4844      	ldr	r0, [pc, #272]	; (80064f8 <function11N+0x1bc>)
 80063e8:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80063ec:	221e      	movs	r2, #30
	{
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 37, 5000);
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
	}
	HAL_Delay(300);
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80063ee:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80064fc <function11N+0x1c0>
 80063f2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8006548 <function11N+0x20c>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80063f6:	f7fc f9f6 	bl	80027e6 <HAL_UART_Receive>
	HAL_Delay(300);
 80063fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80063fe:	f7fa f8e1 	bl	80005c4 <HAL_Delay>
	signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8006402:	2200      	movs	r2, #0
 8006404:	493e      	ldr	r1, [pc, #248]	; (8006500 <function11N+0x1c4>)
 8006406:	4640      	mov	r0, r8
 8006408:	f002 fd6c 	bl	8008ee4 <msgParse>
 800640c:	4604      	mov	r4, r0
 800640e:	f8c9 0000 	str.w	r0, [r9]


	if (!(signVal == 0)){
 8006412:	2800      	cmp	r0, #0
 8006414:	d060      	beq.n	80064d8 <function11N+0x19c>

		if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2] + crcApi3(signVal)
 8006416:	f7ff fc3f 	bl	8005c98 <crcApi3>
 800641a:	eb08 0304 	add.w	r3, r8, r4
 800641e:	785a      	ldrb	r2, [r3, #1]
 8006420:	4413      	add	r3, r2
 8006422:	789b      	ldrb	r3, [r3, #2]
 8006424:	4418      	add	r0, r3
 8006426:	28ff      	cmp	r0, #255	; 0xff
 8006428:	d14a      	bne.n	80064c0 <function11N+0x184>
				== 0xFF) {

			signVal = signVal + 2;
 800642a:	3402      	adds	r4, #2
 800642c:	4a35      	ldr	r2, [pc, #212]	; (8006504 <function11N+0x1c8>)
 800642e:	f8c9 4000 	str.w	r4, [r9]
			/*-----------------flash--------------------*/

int j=0;
			for (int i = 0; i < 15; i++) {
 8006432:	2300      	movs	r3, #0
				    bytesToWriteInSD[j]=aRxBuffer[signVal+i];
 8006434:	4444      	add	r4, r8
				    j++;
				    if(i==2)
				    {
				    	i=i+1;
 8006436:	2b02      	cmp	r3, #2
				    bytesToWriteInSD[j]=aRxBuffer[signVal+i];
 8006438:	5ce1      	ldrb	r1, [r4, r3]
 800643a:	f802 1f01 	strb.w	r1, [r2, #1]!
				    	i=i+1;
 800643e:	bf08      	it	eq
 8006440:	2303      	moveq	r3, #3
			for (int i = 0; i < 15; i++) {
 8006442:	3301      	adds	r3, #1
 8006444:	2b0e      	cmp	r3, #14
 8006446:	ddf6      	ble.n	8006436 <function11N+0xfa>
						}
			//--------------------------SD Card Write----------------------//
//			SDcardWrite("info.txt",6,(uint8_t *)bytesToWrite);
//			 seek("info.txt",0);

			SDcardWriteSeek("infoN.txt", 14, (uint8_t *) bytesToWriteInSD, 0);
 8006448:	2300      	movs	r3, #0
 800644a:	4a2f      	ldr	r2, [pc, #188]	; (8006508 <function11N+0x1cc>)
 800644c:	482f      	ldr	r0, [pc, #188]	; (800650c <function11N+0x1d0>)
 800644e:	210e      	movs	r1, #14
 8006450:	f7fe fb0c 	bl	8004a6c <SDcardWriteSeek>
				SDcardReadSeek("infoN.txt", 15, 0);
 8006454:	2200      	movs	r2, #0
 8006456:	210f      	movs	r1, #15
 8006458:	482c      	ldr	r0, [pc, #176]	; (800650c <function11N+0x1d0>)
 800645a:	f7fe fae3 	bl	8004a24 <SDcardReadSeek>

			           junctionId = readBytes[0];
 800645e:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <function11N+0x1d4>)


			/*----------------------------flash write ends here ------------------------*/


						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006460:	482c      	ldr	r0, [pc, #176]	; (8006514 <function11N+0x1d8>)
			           junctionId = readBytes[0];
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	703a      	strb	r2, [r7, #0]
			           programVersionNo = readBytes[1];
 8006466:	785a      	ldrb	r2, [r3, #1]
 8006468:	7032      	strb	r2, [r6, #0]
			           fileNo = readBytes[2];
 800646a:	789a      	ldrb	r2, [r3, #2]
 800646c:	702a      	strb	r2, [r5, #0]
			            noOfSides = readBytes[4];
 800646e:	4a2a      	ldr	r2, [pc, #168]	; (8006518 <function11N+0x1dc>)
 8006470:	7919      	ldrb	r1, [r3, #4]
 8006472:	7011      	strb	r1, [r2, #0]
						noOfDateSlots = readBytes[5];
 8006474:	4a29      	ldr	r2, [pc, #164]	; (800651c <function11N+0x1e0>)
 8006476:	7959      	ldrb	r1, [r3, #5]
 8006478:	7011      	strb	r1, [r2, #0]
						noOfDaySlots = readBytes[6];
 800647a:	4a29      	ldr	r2, [pc, #164]	; (8006520 <function11N+0x1e4>)
 800647c:	7999      	ldrb	r1, [r3, #6]
 800647e:	7011      	strb	r1, [r2, #0]
						noOfPlans=readBytes[7];
 8006480:	4a28      	ldr	r2, [pc, #160]	; (8006524 <function11N+0x1e8>)
 8006482:	79d9      	ldrb	r1, [r3, #7]
 8006484:	7011      	strb	r1, [r2, #0]
						padestarianTime = readBytes[8];
 8006486:	4a28      	ldr	r2, [pc, #160]	; (8006528 <function11N+0x1ec>)
 8006488:	7a19      	ldrb	r1, [r3, #8]
 800648a:	6011      	str	r1, [r2, #0]
						side1PoleType= readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 800648c:	4a27      	ldr	r2, [pc, #156]	; (800652c <function11N+0x1f0>)
 800648e:	7a99      	ldrb	r1, [r3, #10]
 8006490:	6011      	str	r1, [r2, #0]
						side2PoleType= readBytes[11];
 8006492:	4a27      	ldr	r2, [pc, #156]	; (8006530 <function11N+0x1f4>)
 8006494:	7ad9      	ldrb	r1, [r3, #11]
 8006496:	6011      	str	r1, [r2, #0]
						side3PoleType= readBytes[12];
 8006498:	4a26      	ldr	r2, [pc, #152]	; (8006534 <function11N+0x1f8>)
 800649a:	7b19      	ldrb	r1, [r3, #12]
 800649c:	6011      	str	r1, [r2, #0]
						side4PoleType= readBytes[13];
 800649e:	4a26      	ldr	r2, [pc, #152]	; (8006538 <function11N+0x1fc>)
 80064a0:	7b59      	ldrb	r1, [r3, #13]
 80064a2:	6011      	str	r1, [r2, #0]
						side5PoleType= readBytes[14];
 80064a4:	4a25      	ldr	r2, [pc, #148]	; (800653c <function11N+0x200>)
 80064a6:	7b99      	ldrb	r1, [r3, #14]
 80064a8:	6011      	str	r1, [r2, #0]
						totalNoOfPhases=readBytes[9];
 80064aa:	7a5a      	ldrb	r2, [r3, #9]
 80064ac:	4b24      	ldr	r3, [pc, #144]	; (8006540 <function11N+0x204>)
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80064ae:	2110      	movs	r1, #16
						totalNoOfPhases=readBytes[9];
 80064b0:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80064b2:	f7fa fb50 	bl	8000b56 <HAL_GPIO_TogglePin>


			clearaRxBuffer();
 80064b6:	f7fe ff2d 	bl	8005314 <clearaRxBuffer>
			clearBuffer4();
 80064ba:	f7fe ff49 	bl	8005350 <clearBuffer4>
//			function1_1();
			return 1;
 80064be:	2401      	movs	r4, #1
			clearBuffer4();
			clearaRxBuffer();
			return 0;
		}

}
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 37, 5000);
 80064c6:	481f      	ldr	r0, [pc, #124]	; (8006544 <function11N+0x208>)
 80064c8:	f7fc f930 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80064cc:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80064d0:	221e      	movs	r2, #30
 80064d2:	490a      	ldr	r1, [pc, #40]	; (80064fc <function11N+0x1c0>)
 80064d4:	481b      	ldr	r0, [pc, #108]	; (8006544 <function11N+0x208>)
 80064d6:	e78a      	b.n	80063ee <function11N+0xb2>
			clearBuffer4();
 80064d8:	f7fe ff3a 	bl	8005350 <clearBuffer4>
			clearaRxBuffer();
 80064dc:	f7fe ff1a 	bl	8005314 <clearaRxBuffer>
			return 0;
 80064e0:	e7ee      	b.n	80064c0 <function11N+0x184>
 80064e2:	bf00      	nop
 80064e4:	20003b01 	.word	0x20003b01
 80064e8:	2000000d 	.word	0x2000000d
 80064ec:	2000010d 	.word	0x2000010d
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	2000369c 	.word	0x2000369c
 80064f8:	20001108 	.word	0x20001108
 80064fc:	2000136c 	.word	0x2000136c
 8006500:	08009853 	.word	0x08009853
 8006504:	20003707 	.word	0x20003707
 8006508:	20003708 	.word	0x20003708
 800650c:	08009858 	.word	0x08009858
 8006510:	20000314 	.word	0x20000314
 8006514:	40021000 	.word	0x40021000
 8006518:	200000ed 	.word	0x200000ed
 800651c:	200000e4 	.word	0x200000e4
 8006520:	200000e5 	.word	0x200000e5
 8006524:	200000ec 	.word	0x200000ec
 8006528:	20000018 	.word	0x20000018
 800652c:	20001640 	.word	0x20001640
 8006530:	2000365c 	.word	0x2000365c
 8006534:	20003a18 	.word	0x20003a18
 8006538:	20003ae8 	.word	0x20003ae8
 800653c:	20003a10 	.word	0x20003a10
 8006540:	20000120 	.word	0x20000120
 8006544:	20000e30 	.word	0x20000e30
 8006548:	200015e8 	.word	0x200015e8

0800654c <function12>:

/*-------------------------------function 12---------------------------*/
/*------------------------------------getting date info--------------------------------------*/
int function12(void) {
 800654c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 0;
	int seekCnt=0;
//	noOfDateSlots=1;
//	junctionId=1;

	for (int i = 1; i < noOfDateSlots + 1;) {
 8006550:	4f60      	ldr	r7, [pc, #384]	; (80066d4 <function12+0x188>)
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//

						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006552:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8006704 <function12+0x1b8>
	int seekCnt=0;
 8006556:	2600      	movs	r6, #0
	for (int i = 1; i < noOfDateSlots + 1;) {
 8006558:	2401      	movs	r4, #1
	int resmsg = 0;
 800655a:	46b0      	mov	r8, r6
 800655c:	46ba      	mov	sl, r7
	for (int i = 1; i < noOfDateSlots + 1;) {
 800655e:	783b      	ldrb	r3, [r7, #0]
 8006560:	4d5d      	ldr	r5, [pc, #372]	; (80066d8 <function12+0x18c>)
 8006562:	429c      	cmp	r4, r3
 8006564:	dd07      	ble.n	8006576 <function12+0x2a>
				clearBuffer4();
				return 0;
			}

	}
	clearaRxBuffer();
 8006566:	f7fe fed5 	bl	8005314 <clearaRxBuffer>
	if(noOfDateSlots==dateSlotNo)
 800656a:	7838      	ldrb	r0, [r7, #0]
 800656c:	782b      	ldrb	r3, [r5, #0]
 800656e:	1ac3      	subs	r3, r0, r3
 8006570:	4258      	negs	r0, r3
 8006572:	4158      	adcs	r0, r3
 8006574:	e0aa      	b.n	80066cc <function12+0x180>
		if (resmsg == 1) {
 8006576:	f1b8 0f00 	cmp.w	r8, #0
 800657a:	f000 8094 	beq.w	80066a6 <function12+0x15a>
			dateSlotNo = i;
 800657e:	702c      	strb	r4, [r5, #0]
			i++;
 8006580:	3401      	adds	r4, #1
		clearframe();
 8006582:	f7fe fe9d 	bl	80052c0 <clearframe>
		frame[4] = junctionId; // junction no
 8006586:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8006708 <function12+0x1bc>
		frame[0] = 126;
 800658a:	4954      	ldr	r1, [pc, #336]	; (80066dc <function12+0x190>)
		frame[17] = 0;
 800658c:	9101      	str	r1, [sp, #4]
		frame[3] = 14;
 800658e:	220e      	movs	r2, #14
 8006590:	70ca      	strb	r2, [r1, #3]
		frame[4] = junctionId; // junction no
 8006592:	f899 2000 	ldrb.w	r2, [r9]
 8006596:	710a      	strb	r2, [r1, #4]
		frame[5] = programVersionNo; // junction no
 8006598:	4a51      	ldr	r2, [pc, #324]	; (80066e0 <function12+0x194>)
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	714a      	strb	r2, [r1, #5]
		frame[6] = fileNo; // junction no
 800659e:	4a51      	ldr	r2, [pc, #324]	; (80066e4 <function12+0x198>)
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	718a      	strb	r2, [r1, #6]
		frame[7] = 0x0C; // function no
 80065a4:	220c      	movs	r2, #12
		frame[0] = 126;
 80065a6:	237e      	movs	r3, #126	; 0x7e
		frame[7] = 0x0C; // function no
 80065a8:	71ca      	strb	r2, [r1, #7]
		frame[8] = 1;  // 1 indicates it is for date slot
 80065aa:	2201      	movs	r2, #1
		frame[0] = 126;
 80065ac:	700b      	strb	r3, [r1, #0]
		frame[1] = 126;
 80065ae:	704b      	strb	r3, [r1, #1]
		frame[8] = 1;  // 1 indicates it is for date slot
 80065b0:	720a      	strb	r2, [r1, #8]
		frame[2] = 0; // function no
 80065b2:	2300      	movs	r3, #0
		frame[9] = dateSlotNo;
 80065b4:	782a      	ldrb	r2, [r5, #0]
		frame[2] = 0; // function no
 80065b6:	708b      	strb	r3, [r1, #2]
		frame[9] = dateSlotNo;
 80065b8:	724a      	strb	r2, [r1, #9]
		frame[10] = 0;
 80065ba:	728b      	strb	r3, [r1, #10]
		frame[11] = 0;
 80065bc:	72cb      	strb	r3, [r1, #11]
		frame[12] = 0;
 80065be:	730b      	strb	r3, [r1, #12]
		frame[13] = 0;
 80065c0:	734b      	strb	r3, [r1, #13]
		frame[14] = 0;
 80065c2:	738b      	strb	r3, [r1, #14]
		frame[15] = 0;
 80065c4:	73cb      	strb	r3, [r1, #15]
		frame[16] = 0;
 80065c6:	740b      	strb	r3, [r1, #16]
		frame[17] = 0;
 80065c8:	744b      	strb	r3, [r1, #17]
		frame[18] = 0xFF - crcApi();  // junction no
 80065ca:	f7fe fee9 	bl	80053a0 <crcApi>
 80065ce:	9901      	ldr	r1, [sp, #4]
		frame[19] = 125;
 80065d0:	237d      	movs	r3, #125	; 0x7d
 80065d2:	74cb      	strb	r3, [r1, #19]
		frame[20] = 125;
 80065d4:	750b      	strb	r3, [r1, #20]
		if(programFromBLE==1)
 80065d6:	4b44      	ldr	r3, [pc, #272]	; (80066e8 <function12+0x19c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
		frame[18] = 0xFF - crcApi();  // junction no
 80065da:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 80065dc:	2b01      	cmp	r3, #1
		frame[18] = 0xFF - crcApi();  // junction no
 80065de:	7488      	strb	r0, [r1, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80065e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80065e4:	f04f 0214 	mov.w	r2, #20
		if(programFromBLE==1)
 80065e8:	d162      	bne.n	80066b0 <function12+0x164>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80065ea:	4840      	ldr	r0, [pc, #256]	; (80066ec <function12+0x1a0>)
 80065ec:	f7fc f89e 	bl	800272c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 25, 0x2FFF);
 80065f0:	493f      	ldr	r1, [pc, #252]	; (80066f0 <function12+0x1a4>)
 80065f2:	483e      	ldr	r0, [pc, #248]	; (80066ec <function12+0x1a0>)
 80065f4:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80065f8:	2219      	movs	r2, #25
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 80065fa:	f7fc f8f4 	bl	80027e6 <HAL_UART_Receive>
		HAL_Delay(900);
 80065fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006602:	f7f9 ffdf 	bl	80005c4 <HAL_Delay>
		signVal=5;
 8006606:	4b3b      	ldr	r3, [pc, #236]	; (80066f4 <function12+0x1a8>)
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	2005      	movs	r0, #5
 800660c:	6018      	str	r0, [r3, #0]
					+ crcApi3(signVal) == 0xFF) {
 800660e:	f7ff fb43 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006612:	4a37      	ldr	r2, [pc, #220]	; (80066f0 <function12+0x1a4>)
 8006614:	7991      	ldrb	r1, [r2, #6]
 8006616:	4411      	add	r1, r2
 8006618:	4696      	mov	lr, r2
 800661a:	79c9      	ldrb	r1, [r1, #7]
					+ crcApi3(signVal) == 0xFF) {
 800661c:	4408      	add	r0, r1
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 800661e:	28ff      	cmp	r0, #255	; 0xff
 8006620:	d14f      	bne.n	80066c2 <function12+0x176>
				signVal = signVal + 2;
 8006622:	9b01      	ldr	r3, [sp, #4]
				if ((aRxBuffer[signVal] == junctionId))
 8006624:	79d0      	ldrb	r0, [r2, #7]
				signVal = signVal + 2;
 8006626:	2107      	movs	r1, #7
 8006628:	6019      	str	r1, [r3, #0]
				if ((aRxBuffer[signVal] == junctionId))
 800662a:	f899 1000 	ldrb.w	r1, [r9]
 800662e:	4288      	cmp	r0, r1
 8006630:	d195      	bne.n	800655e <function12+0x12>
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 8006632:	7a92      	ldrb	r2, [r2, #10]
 8006634:	2a0c      	cmp	r2, #12
					signVal = signVal + 3;
 8006636:	f04f 010a 	mov.w	r1, #10
						signVal = signVal + 1;
 800663a:	bf08      	it	eq
 800663c:	220b      	moveq	r2, #11
					signVal = signVal + 3;
 800663e:	6019      	str	r1, [r3, #0]
						signVal = signVal + 1;
 8006640:	bf08      	it	eq
 8006642:	601a      	streq	r2, [r3, #0]
						string[0] = noOfDateSlots;  //TotalDateSlot
 8006644:	492c      	ldr	r1, [pc, #176]	; (80066f8 <function12+0x1ac>)
						signVal=signVal+1;
 8006646:	6818      	ldr	r0, [r3, #0]
						string[0] = noOfDateSlots;  //TotalDateSlot
 8006648:	f89a 2000 	ldrb.w	r2, [sl]
 800664c:	700a      	strb	r2, [r1, #0]
						signVal=signVal+1;
 800664e:	f100 0c01 	add.w	ip, r0, #1
						string[1] = dateSlotNo;			// SerialNoOfDateSlot
 8006652:	782a      	ldrb	r2, [r5, #0]
 8006654:	704a      	strb	r2, [r1, #1]
 8006656:	4688      	mov	r8, r1
						for (int i = 0; i < 9; i++) {
 8006658:	2200      	movs	r2, #0
							string[2 + i] = aRxBuffer[signVal];
 800665a:	eb0e 050c 	add.w	r5, lr, ip
 800665e:	eb08 0e02 	add.w	lr, r8, r2
 8006662:	f815 c002 	ldrb.w	ip, [r5, r2]
 8006666:	f88e c002 	strb.w	ip, [lr, #2]
						for (int i = 0; i < 9; i++) {
 800666a:	3201      	adds	r2, #1
 800666c:	2a09      	cmp	r2, #9
 800666e:	d1f6      	bne.n	800665e <function12+0x112>
 8006670:	300a      	adds	r0, #10
 8006672:	6018      	str	r0, [r3, #0]
					string[10] = 0xFF ;//
 8006674:	23ff      	movs	r3, #255	; 0xff
 8006676:	728b      	strb	r3, [r1, #10]
						SDcardWriteSeek("date.txt", 11, (uint8_t *) string, seekCnt);
 8006678:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <function12+0x1ac>)
 800667a:	4820      	ldr	r0, [pc, #128]	; (80066fc <function12+0x1b0>)
 800667c:	4633      	mov	r3, r6
 800667e:	210b      	movs	r1, #11
 8006680:	f7fe f9f4 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("date.txt", 100, 0);
 8006684:	2200      	movs	r2, #0
 8006686:	2164      	movs	r1, #100	; 0x64
 8006688:	481c      	ldr	r0, [pc, #112]	; (80066fc <function12+0x1b0>)
 800668a:	f7fe f9cb 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800668e:	2110      	movs	r1, #16
 8006690:	4658      	mov	r0, fp
 8006692:	f7fa fa60 	bl	8000b56 <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+11;
 8006696:	360b      	adds	r6, #11
						clearaRxBuffer();
 8006698:	f7fe fe3c 	bl	8005314 <clearaRxBuffer>
						resmsg = 1;
 800669c:	f04f 0801 	mov.w	r8, #1
						clearBuffer4();
 80066a0:	f7fe fe56 	bl	8005350 <clearBuffer4>
 80066a4:	e75b      	b.n	800655e <function12+0x12>
		if (i == 1) {
 80066a6:	2c01      	cmp	r4, #1
			dateSlotNo = i;
 80066a8:	bf04      	itt	eq
 80066aa:	702c      	strbeq	r4, [r5, #0]
			i++;
 80066ac:	2402      	moveq	r4, #2
 80066ae:	e768      	b.n	8006582 <function12+0x36>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 80066b0:	4813      	ldr	r0, [pc, #76]	; (8006700 <function12+0x1b4>)
 80066b2:	f7fc f83b 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 80066b6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80066ba:	2228      	movs	r2, #40	; 0x28
 80066bc:	490c      	ldr	r1, [pc, #48]	; (80066f0 <function12+0x1a4>)
 80066be:	4810      	ldr	r0, [pc, #64]	; (8006700 <function12+0x1b4>)
 80066c0:	e79b      	b.n	80065fa <function12+0xae>
							clearaRxBuffer();
 80066c2:	f7fe fe27 	bl	8005314 <clearaRxBuffer>
							clearBuffer4();
 80066c6:	f7fe fe43 	bl	8005350 <clearBuffer4>
							return 0;
 80066ca:	2000      	movs	r0, #0
	return 1;
	else
	return 0;
}
 80066cc:	b003      	add	sp, #12
 80066ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d2:	bf00      	nop
 80066d4:	200000e4 	.word	0x200000e4
 80066d8:	200000bd 	.word	0x200000bd
 80066dc:	20003b01 	.word	0x20003b01
 80066e0:	2000010d 	.word	0x2000010d
 80066e4:	2000000c 	.word	0x2000000c
 80066e8:	2000369c 	.word	0x2000369c
 80066ec:	20001108 	.word	0x20001108
 80066f0:	2000136c 	.word	0x2000136c
 80066f4:	200015e8 	.word	0x200015e8
 80066f8:	20005312 	.word	0x20005312
 80066fc:	0800987e 	.word	0x0800987e
 8006700:	20000e30 	.word	0x20000e30
 8006704:	40021000 	.word	0x40021000
 8006708:	2000000d 	.word	0x2000000d

0800670c <function13>:


/*-------------------------------function 13---------------------------*/
/*------------------------------------getting day info--------------------------------------*/
int function13(void) {
 800670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 0;
	int seekCnt=0;
 8006710:	2700      	movs	r7, #0
//	noOfDaySlots=3;
	for (int i = 1; i < noOfDaySlots + 1;) {
 8006712:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80068f4 <function13+0x1e8>
 8006716:	2401      	movs	r4, #1
	int resmsg = 0;
 8006718:	463b      	mov	r3, r7
	for (int i = 1; i < noOfDaySlots + 1;) {
 800671a:	f899 2000 	ldrb.w	r2, [r9]
 800671e:	4e6b      	ldr	r6, [pc, #428]	; (80068cc <function13+0x1c0>)
 8006720:	4294      	cmp	r4, r2
 8006722:	dd18      	ble.n	8006756 <function13+0x4a>
				clearBuffer4();
				return 0;
			}

	}
	string[0]=0xFF;
 8006724:	4a6a      	ldr	r2, [pc, #424]	; (80068d0 <function13+0x1c4>)
	string[1]=0xFF;
	string[2]=0xFF;
	string[3]=0xFF;
	SDcardWriteSeek("day.txt", 3, (uint8_t *) string, seekCnt);
 8006726:	486b      	ldr	r0, [pc, #428]	; (80068d4 <function13+0x1c8>)
	string[0]=0xFF;
 8006728:	23ff      	movs	r3, #255	; 0xff
 800672a:	7013      	strb	r3, [r2, #0]
	string[1]=0xFF;
 800672c:	7053      	strb	r3, [r2, #1]
	string[2]=0xFF;
 800672e:	7093      	strb	r3, [r2, #2]
	string[3]=0xFF;
 8006730:	70d3      	strb	r3, [r2, #3]
	SDcardWriteSeek("day.txt", 3, (uint8_t *) string, seekCnt);
 8006732:	2103      	movs	r1, #3
 8006734:	463b      	mov	r3, r7
 8006736:	f7fe f999 	bl	8004a6c <SDcardWriteSeek>
	SDcardReadSeek("day.txt", 50, 0);
 800673a:	4866      	ldr	r0, [pc, #408]	; (80068d4 <function13+0x1c8>)
 800673c:	2200      	movs	r2, #0
 800673e:	2132      	movs	r1, #50	; 0x32
 8006740:	f7fe f970 	bl	8004a24 <SDcardReadSeek>
	clearaRxBuffer();
 8006744:	f7fe fde6 	bl	8005314 <clearaRxBuffer>
	if(daySlotNo==noOfDaySlots)
 8006748:	7830      	ldrb	r0, [r6, #0]
 800674a:	f899 3000 	ldrb.w	r3, [r9]
 800674e:	1ac3      	subs	r3, r0, r3
 8006750:	4258      	negs	r0, r3
 8006752:	4158      	adcs	r0, r3
 8006754:	e0b4      	b.n	80068c0 <function13+0x1b4>
		if (resmsg == 1) {
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 809f 	beq.w	800689a <function13+0x18e>
			daySlotNo = i;
 800675c:	7034      	strb	r4, [r6, #0]
			i++;
 800675e:	3401      	adds	r4, #1
		frame[0] = 126;
 8006760:	4d5d      	ldr	r5, [pc, #372]	; (80068d8 <function13+0x1cc>)
		frame[4] = junctionId; // junction no
 8006762:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8006900 <function13+0x1f4>
		clearframe();
 8006766:	f7fe fdab 	bl	80052c0 <clearframe>
		frame[3] = 14;
 800676a:	220e      	movs	r2, #14
 800676c:	70ea      	strb	r2, [r5, #3]
		frame[4] = junctionId; // junction no
 800676e:	f89a 2000 	ldrb.w	r2, [sl]
 8006772:	712a      	strb	r2, [r5, #4]
		frame[5] = programVersionNo; // junction no
 8006774:	4a59      	ldr	r2, [pc, #356]	; (80068dc <function13+0x1d0>)
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	716a      	strb	r2, [r5, #5]
		frame[6] = fileNo; // junction no
 800677a:	4a59      	ldr	r2, [pc, #356]	; (80068e0 <function13+0x1d4>)
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	71aa      	strb	r2, [r5, #6]
		frame[7] = 0x0D; // function no
 8006780:	220d      	movs	r2, #13
		frame[0] = 126;
 8006782:	237e      	movs	r3, #126	; 0x7e
		frame[7] = 0x0D; // function no
 8006784:	71ea      	strb	r2, [r5, #7]
		frame[8] = 2;  // 2 indicates it is for day slot
 8006786:	2202      	movs	r2, #2
		frame[0] = 126;
 8006788:	702b      	strb	r3, [r5, #0]
		frame[1] = 126;
 800678a:	706b      	strb	r3, [r5, #1]
		frame[8] = 2;  // 2 indicates it is for day slot
 800678c:	722a      	strb	r2, [r5, #8]
		frame[2] = 0; // function no
 800678e:	2300      	movs	r3, #0
		frame[9] = daySlotNo;
 8006790:	7832      	ldrb	r2, [r6, #0]
		frame[2] = 0; // function no
 8006792:	70ab      	strb	r3, [r5, #2]
		frame[9] = daySlotNo;
 8006794:	726a      	strb	r2, [r5, #9]
		frame[10] = 0;
 8006796:	72ab      	strb	r3, [r5, #10]
		frame[11] = 0;
 8006798:	72eb      	strb	r3, [r5, #11]
		frame[12] = 0;
 800679a:	732b      	strb	r3, [r5, #12]
		frame[13] = 0;
 800679c:	736b      	strb	r3, [r5, #13]
		frame[14] = 0;
 800679e:	73ab      	strb	r3, [r5, #14]
		frame[15] = 0;
 80067a0:	73eb      	strb	r3, [r5, #15]
		frame[16] = 0;
 80067a2:	742b      	strb	r3, [r5, #16]
		frame[17] = 0;
 80067a4:	746b      	strb	r3, [r5, #17]
		frame[18] = 0xFF - crcApi();  // junction no
 80067a6:	f7fe fdfb 	bl	80053a0 <crcApi>
		frame[19] = 125;
 80067aa:	237d      	movs	r3, #125	; 0x7d
 80067ac:	74eb      	strb	r3, [r5, #19]
		frame[20] = 125;
 80067ae:	752b      	strb	r3, [r5, #20]
		if(programFromBLE==1)
 80067b0:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <function13+0x1d8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
		frame[18] = 0xFF - crcApi();  // junction no
 80067b4:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 80067b6:	2b01      	cmp	r3, #1
		frame[18] = 0xFF - crcApi();  // junction no
 80067b8:	74a8      	strb	r0, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80067ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80067be:	f04f 0214 	mov.w	r2, #20
 80067c2:	4629      	mov	r1, r5
		if(programFromBLE==1)
 80067c4:	d16e      	bne.n	80068a4 <function13+0x198>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80067c6:	4848      	ldr	r0, [pc, #288]	; (80068e8 <function13+0x1dc>)
 80067c8:	f7fb ffb0 	bl	800272c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 80067cc:	4947      	ldr	r1, [pc, #284]	; (80068ec <function13+0x1e0>)
 80067ce:	4846      	ldr	r0, [pc, #280]	; (80068e8 <function13+0x1dc>)
 80067d0:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80067d4:	221e      	movs	r2, #30
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80067d6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80068ec <function13+0x1e0>
 80067da:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006904 <function13+0x1f8>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 80067de:	f7fc f802 	bl	80027e6 <HAL_UART_Receive>
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	4942      	ldr	r1, [pc, #264]	; (80068f0 <function13+0x1e4>)
 80067e6:	4640      	mov	r0, r8
 80067e8:	f002 fb7c 	bl	8008ee4 <msgParse>
 80067ec:	f8cb 0000 	str.w	r0, [fp]
		HAL_Delay(900);
 80067f0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80067f4:	f7f9 fee6 	bl	80005c4 <HAL_Delay>
		if (!(signVal == 0)){
 80067f8:	f8db 2000 	ldr.w	r2, [fp]
 80067fc:	4645      	mov	r5, r8
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d059      	beq.n	80068b6 <function13+0x1aa>
					+ crcApi3(signVal) == 0xFF) {
 8006802:	4610      	mov	r0, r2
 8006804:	9201      	str	r2, [sp, #4]
 8006806:	f7ff fa47 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	4442      	add	r2, r8
 800680e:	7851      	ldrb	r1, [r2, #1]
 8006810:	440a      	add	r2, r1
 8006812:	7892      	ldrb	r2, [r2, #2]
					+ crcApi3(signVal) == 0xFF) {
 8006814:	4410      	add	r0, r2
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006816:	28ff      	cmp	r0, #255	; 0xff
 8006818:	d14d      	bne.n	80068b6 <function13+0x1aa>
				clearStringBuffer();
 800681a:	f7fe fe33 	bl	8005484 <clearStringBuffer>
				signVal = signVal + 2;
 800681e:	f8db 2000 	ldr.w	r2, [fp]
 8006822:	1c91      	adds	r1, r2, #2
 8006824:	f8cb 1000 	str.w	r1, [fp]
				if ((aRxBuffer[signVal] == junctionId))
 8006828:	f818 0001 	ldrb.w	r0, [r8, r1]
 800682c:	f89a 1000 	ldrb.w	r1, [sl]
 8006830:	4288      	cmp	r0, r1
 8006832:	d148      	bne.n	80068c6 <function13+0x1ba>
					signVal = signVal + 3;
 8006834:	1d51      	adds	r1, r2, #5
 8006836:	f8cb 1000 	str.w	r1, [fp]
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 800683a:	f818 1001 	ldrb.w	r1, [r8, r1]
						string[0] = noOfDaySlots;  //TotalDaySlot
 800683e:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <function13+0x1e8>)
					if ((aRxBuffer[signVal] == 0x0C)) //function Number
 8006840:	290c      	cmp	r1, #12
						signVal = signVal + 1;
 8006842:	bf04      	itt	eq
 8006844:	3206      	addeq	r2, #6
 8006846:	f8cb 2000 	streq.w	r2, [fp]
                        signVal=signVal+2;
 800684a:	f8db 1000 	ldr.w	r1, [fp]
						string[0] = noOfDaySlots;  //TotalDaySlot
 800684e:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <function13+0x1c4>)
 8006850:	7818      	ldrb	r0, [r3, #0]
 8006852:	7010      	strb	r0, [r2, #0]
							string[2 + i] = aRxBuffer[signVal];
 8006854:	440d      	add	r5, r1
						string[1] = daySlotNo;			// SerialNoOfDaySlot
 8006856:	7830      	ldrb	r0, [r6, #0]
 8006858:	7050      	strb	r0, [r2, #1]
							string[2 + i] = aRxBuffer[signVal];
 800685a:	78a8      	ldrb	r0, [r5, #2]
 800685c:	7090      	strb	r0, [r2, #2]
 800685e:	78e8      	ldrb	r0, [r5, #3]
 8006860:	70d0      	strb	r0, [r2, #3]
 8006862:	3105      	adds	r1, #5
 8006864:	7928      	ldrb	r0, [r5, #4]
 8006866:	7110      	strb	r0, [r2, #4]
					string[5] = 0xFF ;//
 8006868:	23ff      	movs	r3, #255	; 0xff
 800686a:	7153      	strb	r3, [r2, #5]
 800686c:	f8cb 1000 	str.w	r1, [fp]
						SDcardWriteSeek("day.txt", 6, (uint8_t *) string, seekCnt);
 8006870:	463b      	mov	r3, r7
 8006872:	2106      	movs	r1, #6
 8006874:	4817      	ldr	r0, [pc, #92]	; (80068d4 <function13+0x1c8>)
 8006876:	f7fe f8f9 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("day.txt", 50, 0);
 800687a:	2200      	movs	r2, #0
 800687c:	2132      	movs	r1, #50	; 0x32
 800687e:	4815      	ldr	r0, [pc, #84]	; (80068d4 <function13+0x1c8>)
 8006880:	f7fe f8d0 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006884:	2110      	movs	r1, #16
 8006886:	481c      	ldr	r0, [pc, #112]	; (80068f8 <function13+0x1ec>)
 8006888:	f7fa f965 	bl	8000b56 <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+6;
 800688c:	3706      	adds	r7, #6
						clearaRxBuffer();
 800688e:	f7fe fd41 	bl	8005314 <clearaRxBuffer>
						clearBuffer4();
 8006892:	f7fe fd5d 	bl	8005350 <clearBuffer4>
						resmsg = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	e73f      	b.n	800671a <function13+0xe>
		if (i == 1) {
 800689a:	2c01      	cmp	r4, #1
			daySlotNo = i;
 800689c:	bf04      	itt	eq
 800689e:	7034      	strbeq	r4, [r6, #0]
			i++;
 80068a0:	2402      	moveq	r4, #2
 80068a2:	e75d      	b.n	8006760 <function13+0x54>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 80068a4:	4815      	ldr	r0, [pc, #84]	; (80068fc <function13+0x1f0>)
 80068a6:	f7fb ff41 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 80068aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80068ae:	221e      	movs	r2, #30
 80068b0:	490e      	ldr	r1, [pc, #56]	; (80068ec <function13+0x1e0>)
 80068b2:	4812      	ldr	r0, [pc, #72]	; (80068fc <function13+0x1f0>)
 80068b4:	e78f      	b.n	80067d6 <function13+0xca>
							clearaRxBuffer();
 80068b6:	f7fe fd2d 	bl	8005314 <clearaRxBuffer>
							clearBuffer4();
 80068ba:	f7fe fd49 	bl	8005350 <clearBuffer4>
							return 0;
 80068be:	2000      	movs	r0, #0
	return 1;
	else
		return 0;
}
 80068c0:	b003      	add	sp, #12
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		resmsg=0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e727      	b.n	800671a <function13+0xe>
 80068ca:	bf00      	nop
 80068cc:	200000bf 	.word	0x200000bf
 80068d0:	20005312 	.word	0x20005312
 80068d4:	08009887 	.word	0x08009887
 80068d8:	20003b01 	.word	0x20003b01
 80068dc:	2000010d 	.word	0x2000010d
 80068e0:	2000000c 	.word	0x2000000c
 80068e4:	2000369c 	.word	0x2000369c
 80068e8:	20001108 	.word	0x20001108
 80068ec:	2000136c 	.word	0x2000136c
 80068f0:	08009853 	.word	0x08009853
 80068f4:	200000e5 	.word	0x200000e5
 80068f8:	40021000 	.word	0x40021000
 80068fc:	20000e30 	.word	0x20000e30
 8006900:	2000000d 	.word	0x2000000d
 8006904:	200015e8 	.word	0x200015e8

08006908 <function14>:

/*------------------------------------getting plan info--------------------------------------*/
int function14(void) {
 8006908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int resmsg = 0;
	int seekCnt=0;
 800690c:	2600      	movs	r6, #0
////    signVal = msgParse(RxBuffer,"T\r\r\nOK",0);
		frame[0] = 126;
		frame[1] = 126;
		frame[2] = 0; // function no
		frame[3] = 17;
		frame[4] = junctionId; // junction no
 800690e:	4f5e      	ldr	r7, [pc, #376]	; (8006a88 <function14+0x180>)
//							Address = Address + 4;
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006910:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006abc <function14+0x1b4>
	for (int i = 1; i < noOfPlans + 1;) {
 8006914:	2501      	movs	r5, #1
	int resmsg = 0;
 8006916:	46b1      	mov	r9, r6
	for (int i = 1; i < noOfPlans + 1;) {
 8006918:	4c5c      	ldr	r4, [pc, #368]	; (8006a8c <function14+0x184>)
 800691a:	485d      	ldr	r0, [pc, #372]	; (8006a90 <function14+0x188>)
 800691c:	7823      	ldrb	r3, [r4, #0]
 800691e:	429d      	cmp	r5, r3
 8006920:	dd08      	ble.n	8006934 <function14+0x2c>
				clearBuffer4();
				return 0;
			}

	}
	clearaRxBuffer();
 8006922:	f7fe fcf7 	bl	8005314 <clearaRxBuffer>
	if(planNo==noOfPlans)
 8006926:	7823      	ldrb	r3, [r4, #0]
 8006928:	7800      	ldrb	r0, [r0, #0]
 800692a:	1ac3      	subs	r3, r0, r3
 800692c:	4258      	negs	r0, r3
 800692e:	4158      	adcs	r0, r3
	return 1;
	else
		return 0;
}
 8006930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (resmsg == 1) {
 8006934:	f1b9 0f00 	cmp.w	r9, #0
 8006938:	f000 8090 	beq.w	8006a5c <function14+0x154>
			planNo = i;
 800693c:	7005      	strb	r5, [r0, #0]
			i++;
 800693e:	3501      	adds	r5, #1
		frame[0] = 126;
 8006940:	4c54      	ldr	r4, [pc, #336]	; (8006a94 <function14+0x18c>)
		clearframe();
 8006942:	f7fe fcbd 	bl	80052c0 <clearframe>
		frame[0] = 126;
 8006946:	237e      	movs	r3, #126	; 0x7e
 8006948:	7023      	strb	r3, [r4, #0]
		frame[1] = 126;
 800694a:	7063      	strb	r3, [r4, #1]
		frame[2] = 0; // function no
 800694c:	2300      	movs	r3, #0
 800694e:	70a3      	strb	r3, [r4, #2]
		frame[3] = 17;
 8006950:	2311      	movs	r3, #17
 8006952:	70e3      	strb	r3, [r4, #3]
		frame[4] = junctionId; // junction no
 8006954:	783b      	ldrb	r3, [r7, #0]
 8006956:	7123      	strb	r3, [r4, #4]
		frame[5] = programVersionNo; // junction no
 8006958:	4b4f      	ldr	r3, [pc, #316]	; (8006a98 <function14+0x190>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	7163      	strb	r3, [r4, #5]
		frame[6] = fileNo; // junction no
 800695e:	4b4f      	ldr	r3, [pc, #316]	; (8006a9c <function14+0x194>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	71a3      	strb	r3, [r4, #6]
		frame[7] = 0x0E; // function no
 8006964:	230e      	movs	r3, #14
 8006966:	71e3      	strb	r3, [r4, #7]
		frame[8] = planNo;  // plan no
 8006968:	7803      	ldrb	r3, [r0, #0]
 800696a:	7223      	strb	r3, [r4, #8]
		frame[9] = 1;
 800696c:	2301      	movs	r3, #1
 800696e:	7263      	strb	r3, [r4, #9]
		frame[10] = 1;
 8006970:	72a3      	strb	r3, [r4, #10]
		frame[11] = 1;
 8006972:	72e3      	strb	r3, [r4, #11]
		frame[12] = 1;
 8006974:	7323      	strb	r3, [r4, #12]
		frame[13] = 1;
 8006976:	7363      	strb	r3, [r4, #13]
		frame[14] = 1;
 8006978:	73a3      	strb	r3, [r4, #14]
		frame[15] = 1;
 800697a:	73e3      	strb	r3, [r4, #15]
		frame[16] = 1;
 800697c:	7423      	strb	r3, [r4, #16]
		frame[17] = 1;
 800697e:	7463      	strb	r3, [r4, #17]
		frame[18] = 1;  //'1'
 8006980:	74a3      	strb	r3, [r4, #18]
		frame[19] = 1;  //'0' ; //'5' ;
 8006982:	74e3      	strb	r3, [r4, #19]
		frame[20] = 1;  // '2' ;//'9' ;//'1' ;
 8006984:	7523      	strb	r3, [r4, #20]
		frame[21] = 0xFF - crcApi();  // junction no
 8006986:	f7fe fd0b 	bl	80053a0 <crcApi>
		frame[22] = 125;
 800698a:	237d      	movs	r3, #125	; 0x7d
 800698c:	75a3      	strb	r3, [r4, #22]
		frame[23] = 125;
 800698e:	75e3      	strb	r3, [r4, #23]
		if(programFromBLE==1)
 8006990:	4b43      	ldr	r3, [pc, #268]	; (8006aa0 <function14+0x198>)
 8006992:	681b      	ldr	r3, [r3, #0]
		frame[21] = 0xFF - crcApi();  // junction no
 8006994:	43c0      	mvns	r0, r0
		if(programFromBLE==1)
 8006996:	2b01      	cmp	r3, #1
		frame[21] = 0xFF - crcApi();  // junction no
 8006998:	7560      	strb	r0, [r4, #21]
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 23, 5000);
 800699a:	f241 3388 	movw	r3, #5000	; 0x1388
 800699e:	f04f 0217 	mov.w	r2, #23
 80069a2:	4621      	mov	r1, r4
		if(programFromBLE==1)
 80069a4:	d15f      	bne.n	8006a66 <function14+0x15e>
			HAL_UART_Transmit(&huart1, (uint8_t*) frame, 23, 5000);
 80069a6:	483f      	ldr	r0, [pc, #252]	; (8006aa4 <function14+0x19c>)
 80069a8:	f7fb fec0 	bl	800272c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 45, 0x2FFF);
 80069ac:	493e      	ldr	r1, [pc, #248]	; (8006aa8 <function14+0x1a0>)
 80069ae:	483d      	ldr	r0, [pc, #244]	; (8006aa4 <function14+0x19c>)
 80069b0:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80069b4:	222d      	movs	r2, #45	; 0x2d
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 45, 0x1FFF);
 80069b6:	f7fb ff16 	bl	80027e6 <HAL_UART_Receive>
		signVal=4;
 80069ba:	4c3c      	ldr	r4, [pc, #240]	; (8006aac <function14+0x1a4>)
		HAL_Delay(900);
 80069bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80069c0:	f7f9 fe00 	bl	80005c4 <HAL_Delay>
		signVal=4;
 80069c4:	2004      	movs	r0, #4
 80069c6:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 80069c8:	f7ff f966 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80069cc:	4a36      	ldr	r2, [pc, #216]	; (8006aa8 <function14+0x1a0>)
 80069ce:	7953      	ldrb	r3, [r2, #5]
 80069d0:	4413      	add	r3, r2
 80069d2:	799b      	ldrb	r3, [r3, #6]
					+ crcApi3(signVal) == 0xFF) {
 80069d4:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 80069d6:	28ff      	cmp	r0, #255	; 0xff
 80069d8:	d14e      	bne.n	8006a78 <function14+0x170>
				signVal = signVal + 2;
 80069da:	2306      	movs	r3, #6
 80069dc:	6023      	str	r3, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId)) {
 80069de:	7991      	ldrb	r1, [r2, #6]
 80069e0:	783b      	ldrb	r3, [r7, #0]
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d198      	bne.n	8006918 <function14+0x10>
					signVal = signVal + 3;
 80069e6:	2309      	movs	r3, #9
 80069e8:	6023      	str	r3, [r4, #0]
					if ((aRxBuffer[signVal] == 0x0E))
 80069ea:	7a53      	ldrb	r3, [r2, #9]
 80069ec:	2b0e      	cmp	r3, #14
 80069ee:	d193      	bne.n	8006918 <function14+0x10>
						string[0] = aRxBuffer[signVal];  //planNoID
 80069f0:	4b2f      	ldr	r3, [pc, #188]	; (8006ab0 <function14+0x1a8>)
 80069f2:	7a91      	ldrb	r1, [r2, #10]
 80069f4:	7019      	strb	r1, [r3, #0]
						string[1] = aRxBuffer[signVal];  //planNo
 80069f6:	7ad1      	ldrb	r1, [r2, #11]
 80069f8:	7059      	strb	r1, [r3, #1]
						string[2] = aRxBuffer[signVal];			// on time hour
 80069fa:	7b11      	ldrb	r1, [r2, #12]
						string[3] = aRxBuffer[signVal];			// on time min
 80069fc:	7b52      	ldrb	r2, [r2, #13]
							string[4 + i] = aRxBuffer[signVal];
 80069fe:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8006ac0 <function14+0x1b8>
						if (string[2] == 0x6F)
 8006a02:	296f      	cmp	r1, #111	; 0x6f
							string[2] = 0;
 8006a04:	bf08      	it	eq
 8006a06:	2100      	moveq	r1, #0
						if (string[3] == 0x6F)
 8006a08:	2a6f      	cmp	r2, #111	; 0x6f
							string[3] = 0;
 8006a0a:	bf08      	it	eq
 8006a0c:	2200      	moveq	r2, #0
 8006a0e:	70da      	strb	r2, [r3, #3]
 8006a10:	469c      	mov	ip, r3
							string[2] = 0;
 8006a12:	7099      	strb	r1, [r3, #2]
						for (int i = 0; i < 15; i++) {
 8006a14:	2200      	movs	r2, #0
							string[4 + i] = aRxBuffer[signVal];
 8006a16:	eb0c 0102 	add.w	r1, ip, r2
 8006a1a:	f812 000e 	ldrb.w	r0, [r2, lr]
 8006a1e:	7108      	strb	r0, [r1, #4]
						for (int i = 0; i < 15; i++) {
 8006a20:	3201      	adds	r2, #1
 8006a22:	2a0f      	cmp	r2, #15
 8006a24:	d1f7      	bne.n	8006a16 <function14+0x10e>
 8006a26:	221d      	movs	r2, #29
 8006a28:	6022      	str	r2, [r4, #0]
					string[18] = 0xFF ;//
 8006a2a:	22ff      	movs	r2, #255	; 0xff
 8006a2c:	749a      	strb	r2, [r3, #18]
						SDcardWriteSeek("planN.txt", 19, (uint8_t *) string, seekCnt);
 8006a2e:	2113      	movs	r1, #19
 8006a30:	4633      	mov	r3, r6
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <function14+0x1a8>)
 8006a34:	481f      	ldr	r0, [pc, #124]	; (8006ab4 <function14+0x1ac>)
 8006a36:	f7fe f819 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("planN.txt", 100, 0);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2164      	movs	r1, #100	; 0x64
 8006a3e:	481d      	ldr	r0, [pc, #116]	; (8006ab4 <function14+0x1ac>)
 8006a40:	f7fd fff0 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006a44:	2110      	movs	r1, #16
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7fa f885 	bl	8000b56 <HAL_GPIO_TogglePin>
						seekCnt=seekCnt+19;
 8006a4c:	3613      	adds	r6, #19
						clearaRxBuffer();
 8006a4e:	f7fe fc61 	bl	8005314 <clearaRxBuffer>
						resmsg = 1;
 8006a52:	f04f 0901 	mov.w	r9, #1
						clearBuffer4();
 8006a56:	f7fe fc7b 	bl	8005350 <clearBuffer4>
 8006a5a:	e75d      	b.n	8006918 <function14+0x10>
		if (i == 1) {
 8006a5c:	2d01      	cmp	r5, #1
			planNo = i;
 8006a5e:	bf04      	itt	eq
 8006a60:	7005      	strbeq	r5, [r0, #0]
			i++;
 8006a62:	2502      	moveq	r5, #2
 8006a64:	e76c      	b.n	8006940 <function14+0x38>
		HAL_UART_Transmit(&huart3, (uint8_t*) frame, 23, 5000);
 8006a66:	4814      	ldr	r0, [pc, #80]	; (8006ab8 <function14+0x1b0>)
 8006a68:	f7fb fe60 	bl	800272c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 45, 0x1FFF);
 8006a6c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006a70:	222d      	movs	r2, #45	; 0x2d
 8006a72:	490d      	ldr	r1, [pc, #52]	; (8006aa8 <function14+0x1a0>)
 8006a74:	4810      	ldr	r0, [pc, #64]	; (8006ab8 <function14+0x1b0>)
 8006a76:	e79e      	b.n	80069b6 <function14+0xae>
							clearaRxBuffer();
 8006a78:	f7fe fc4c 	bl	8005314 <clearaRxBuffer>
							clearBuffer4();
 8006a7c:	f7fe fc68 	bl	8005350 <clearBuffer4>
							return 0;
 8006a80:	2000      	movs	r0, #0
 8006a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a86:	bf00      	nop
 8006a88:	2000000d 	.word	0x2000000d
 8006a8c:	200000ec 	.word	0x200000ec
 8006a90:	20003aed 	.word	0x20003aed
 8006a94:	20003b01 	.word	0x20003b01
 8006a98:	2000010d 	.word	0x2000010d
 8006a9c:	2000000c 	.word	0x2000000c
 8006aa0:	2000369c 	.word	0x2000369c
 8006aa4:	20001108 	.word	0x20001108
 8006aa8:	2000136c 	.word	0x2000136c
 8006aac:	200015e8 	.word	0x200015e8
 8006ab0:	20005312 	.word	0x20005312
 8006ab4:	08009899 	.word	0x08009899
 8006ab8:	20000e30 	.word	0x20000e30
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	2000137a 	.word	0x2000137a

08006ac4 <function15>:

/*-------------------------------function 15---------------------------*/
/*------------------------------------getting map info for date--------------------------------------*/
int function15(void) {
 8006ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 1;
	int seekCnt=0;
	int seekCntWrite=0;
//	noOfDateSlots=2;
//	junctionId=1;
	for (int i = 1; i < noOfDateSlots + 1;) {
 8006ac8:	2501      	movs	r5, #1
	int seekCntWrite=0;
 8006aca:	f04f 0800 	mov.w	r8, #0
	int seekCnt=0;
 8006ace:	46c1      	mov	r9, r8
	int resmsg = 1;
 8006ad0:	462c      	mov	r4, r5
	for (int i = 1; i < noOfDateSlots + 1;) {
 8006ad2:	4e82      	ldr	r6, [pc, #520]	; (8006cdc <function15+0x218>)
 8006ad4:	7833      	ldrb	r3, [r6, #0]
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	dd08      	ble.n	8006aec <function15+0x28>
//				return 0;
			}}
	}

	}
	clearaRxBuffer();
 8006ada:	f7fe fc1b 	bl	8005314 <clearaRxBuffer>
	if(dateSlotNo==noOfDateSlots)
 8006ade:	4b80      	ldr	r3, [pc, #512]	; (8006ce0 <function15+0x21c>)
 8006ae0:	7818      	ldrb	r0, [r3, #0]
 8006ae2:	7833      	ldrb	r3, [r6, #0]
 8006ae4:	1ac3      	subs	r3, r0, r3
 8006ae6:	4258      	negs	r0, r3
 8006ae8:	4158      	adcs	r0, r3
 8006aea:	e0ee      	b.n	8006cca <function15+0x206>
		if (resmsg == 1) {
 8006aec:	2c01      	cmp	r4, #1
 8006aee:	f040 80d2 	bne.w	8006c96 <function15+0x1d2>
			dateSlotNo = i;
 8006af2:	4b7b      	ldr	r3, [pc, #492]	; (8006ce0 <function15+0x21c>)
 8006af4:	701d      	strb	r5, [r3, #0]
			i++;
 8006af6:	3501      	adds	r5, #1
		clearframe();
 8006af8:	f7fe fbe2 	bl	80052c0 <clearframe>
		for (int i = 1; i < noOfDateSlots + 1;) {
 8006afc:	2601      	movs	r6, #1
 8006afe:	4b77      	ldr	r3, [pc, #476]	; (8006cdc <function15+0x218>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	dce5      	bgt.n	8006ad2 <function15+0xe>
			if (resmsg == 1) {
 8006b06:	2c01      	cmp	r4, #1
 8006b08:	f040 80cb 	bne.w	8006ca2 <function15+0x1de>
				dateSlotNo = i;
 8006b0c:	4b74      	ldr	r3, [pc, #464]	; (8006ce0 <function15+0x21c>)
 8006b0e:	701e      	strb	r6, [r3, #0]
				i++;
 8006b10:	3601      	adds	r6, #1
			clearframe();
 8006b12:	f7fe fbd5 	bl	80052c0 <clearframe>
		clearReadBytes();
 8006b16:	f7fe fbdd 	bl	80052d4 <clearReadBytes>
		SDcardReadSeek("date.txt", 15, seekCnt);
 8006b1a:	464a      	mov	r2, r9
 8006b1c:	210f      	movs	r1, #15
 8006b1e:	4871      	ldr	r0, [pc, #452]	; (8006ce4 <function15+0x220>)
		dateID = readBytes[2];
 8006b20:	f8df b204 	ldr.w	fp, [pc, #516]	; 8006d28 <function15+0x264>
		SDcardReadSeek("date.txt", 15, seekCnt);
 8006b24:	f7fd ff7e 	bl	8004a24 <SDcardReadSeek>
		dateID = readBytes[2];
 8006b28:	4b6f      	ldr	r3, [pc, #444]	; (8006ce8 <function15+0x224>)
		totalNoOfPlans = readBytes[9];
 8006b2a:	4870      	ldr	r0, [pc, #448]	; (8006cec <function15+0x228>)
		dateID = readBytes[2];
 8006b2c:	789a      	ldrb	r2, [r3, #2]
		totalNoOfPlans = readBytes[9];
 8006b2e:	7a5b      	ldrb	r3, [r3, #9]
		dateID = readBytes[2];
 8006b30:	f88b 2000 	strb.w	r2, [fp]
		totalNoOfPlans = readBytes[9];
 8006b34:	7003      	strb	r3, [r0, #0]
		clearReadBytes();
 8006b36:	f7fe fbcd 	bl	80052d4 <clearReadBytes>
		seekCnt = seekCnt + 11;
 8006b3a:	f109 090b 	add.w	r9, r9, #11
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006b3e:	2701      	movs	r7, #1
 8006b40:	f8cd b000 	str.w	fp, [sp]
 8006b44:	9001      	str	r0, [sp, #4]
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	429f      	cmp	r7, r3
 8006b4c:	dcd7      	bgt.n	8006afe <function15+0x3a>
				frame[0] = 126;
 8006b4e:	4c68      	ldr	r4, [pc, #416]	; (8006cf0 <function15+0x22c>)
 8006b50:	237e      	movs	r3, #126	; 0x7e
 8006b52:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 8006b54:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 8006b56:	2300      	movs	r3, #0
 8006b58:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 8006b5a:	2312      	movs	r3, #18
 8006b5c:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 8006b5e:	4b65      	ldr	r3, [pc, #404]	; (8006cf4 <function15+0x230>)
				frame[9] = i;  // plan no
 8006b60:	7267      	strb	r7, [r4, #9]
				frame[4] = junctionId; // function no
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 8006b66:	4b64      	ldr	r3, [pc, #400]	; (8006cf8 <function15+0x234>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 8006b6c:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <function15+0x238>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x0F; // function no
 8006b72:	230f      	movs	r3, #15
 8006b74:	71e3      	strb	r3, [r4, #7]
				frame[8] = dateID;  // plan no planOnHr
 8006b76:	9b00      	ldr	r3, [sp, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	7223      	strb	r3, [r4, #8]
				frame[10] = '1';
 8006b7c:	2331      	movs	r3, #49	; 0x31
 8006b7e:	72a3      	strb	r3, [r4, #10]
				frame[11] = '1';
 8006b80:	72e3      	strb	r3, [r4, #11]
				frame[12] = '1';
 8006b82:	7323      	strb	r3, [r4, #12]
				frame[13] = '1';
 8006b84:	7363      	strb	r3, [r4, #13]
				frame[14] = '1';
 8006b86:	73a3      	strb	r3, [r4, #14]
				frame[15] = '1';
 8006b88:	73e3      	strb	r3, [r4, #15]
				frame[16] = '1';
 8006b8a:	7423      	strb	r3, [r4, #16]
				frame[17] = '1';
 8006b8c:	7463      	strb	r3, [r4, #17]
				frame[18] = '1';  //'1'
 8006b8e:	74a3      	strb	r3, [r4, #18]
				frame[19] = '1';  //'0' ; //'5' ;
 8006b90:	74e3      	strb	r3, [r4, #19]
				frame[20] = '1';  // '2' ;//'9' ;//'1' ;
 8006b92:	7523      	strb	r3, [r4, #20]
				frame[21] = '1';  // '2' ;//'9' ;//'1' ;
 8006b94:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 8006b96:	f7fe fc03 	bl	80053a0 <crcApi>
				frame[23] = 125;
 8006b9a:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 8006b9c:	43c0      	mvns	r0, r0
				frame[23] = 125;
 8006b9e:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 8006ba0:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 8006ba2:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 8006ba4:	f7fe fba2 	bl	80052ec <clearBuffer>
				if(programFromBLE==1)
 8006ba8:	4b55      	ldr	r3, [pc, #340]	; (8006d00 <function15+0x23c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006bae:	f04f 0218 	mov.w	r2, #24
 8006bb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bb6:	4621      	mov	r1, r4
				if(programFromBLE==1)
 8006bb8:	d179      	bne.n	8006cae <function15+0x1ea>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006bba:	4852      	ldr	r0, [pc, #328]	; (8006d04 <function15+0x240>)
 8006bbc:	f7fb fdb6 	bl	800272c <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 30, 0x2FFF);
 8006bc0:	4951      	ldr	r1, [pc, #324]	; (8006d08 <function15+0x244>)
 8006bc2:	4850      	ldr	r0, [pc, #320]	; (8006d04 <function15+0x240>)
 8006bc4:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8006bc8:	221e      	movs	r2, #30
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8006bca:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8006d08 <function15+0x244>
 8006bce:	f8df b140 	ldr.w	fp, [pc, #320]	; 8006d10 <function15+0x24c>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 8006bd2:	f7fb fe08 	bl	80027e6 <HAL_UART_Receive>
				HAL_Delay(300);
 8006bd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006bda:	f7f9 fcf3 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8006bde:	2200      	movs	r2, #0
 8006be0:	494a      	ldr	r1, [pc, #296]	; (8006d0c <function15+0x248>)
 8006be2:	4650      	mov	r0, sl
 8006be4:	f002 f97e 	bl	8008ee4 <msgParse>
 8006be8:	f8cb 0000 	str.w	r0, [fp]
		HAL_Delay(900);
 8006bec:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006bf0:	f7f9 fce8 	bl	80005c4 <HAL_Delay>
		if (!(signVal == 0)){
 8006bf4:	f8db 4000 	ldr.w	r4, [fp]
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	d069      	beq.n	8006cd0 <function15+0x20c>
					+ crcApi3(signVal) == 0xFF) {
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff f84b 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006c02:	eb0a 0104 	add.w	r1, sl, r4
 8006c06:	f891 e001 	ldrb.w	lr, [r1, #1]
 8006c0a:	4471      	add	r1, lr
 8006c0c:	7889      	ldrb	r1, [r1, #2]
					+ crcApi3(signVal) == 0xFF) {
 8006c0e:	4408      	add	r0, r1
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006c10:	28ff      	cmp	r0, #255	; 0xff
 8006c12:	d155      	bne.n	8006cc0 <function15+0x1fc>
				signVal = signVal + 2;
 8006c14:	1ca1      	adds	r1, r4, #2
				if ((aRxBuffer[signVal] == junctionId))
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <function15+0x230>)
 8006c18:	f81a 0001 	ldrb.w	r0, [sl, r1]
				signVal = signVal + 2;
 8006c1c:	f8cb 1000 	str.w	r1, [fp]
				if ((aRxBuffer[signVal] == junctionId))
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	4288      	cmp	r0, r1
 8006c24:	d14c      	bne.n	8006cc0 <function15+0x1fc>
					signVal = signVal + 3;
 8006c26:	1d61      	adds	r1, r4, #5
 8006c28:	f8cb 1000 	str.w	r1, [fp]
					if ((aRxBuffer[signVal] == 0x0F)) //function Number
 8006c2c:	f81a 3001 	ldrb.w	r3, [sl, r1]
							string[i] = aRxBuffer[signVal];
 8006c30:	4835      	ldr	r0, [pc, #212]	; (8006d08 <function15+0x244>)
					if ((aRxBuffer[signVal] == 0x0F)) //function Number
 8006c32:	2b0f      	cmp	r3, #15
						signVal = signVal + 1;
 8006c34:	bf08      	it	eq
 8006c36:	3406      	addeq	r4, #6
 8006c38:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <function15+0x24c>)
 8006c3a:	bf08      	it	eq
 8006c3c:	f8cb 4000 	streq.w	r4, [fp]
 8006c40:	6819      	ldr	r1, [r3, #0]
							string[i] = aRxBuffer[signVal];
 8006c42:	4c34      	ldr	r4, [pc, #208]	; (8006d14 <function15+0x250>)
				i++;
 8006c44:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 8006c46:	4408      	add	r0, r1
 8006c48:	f810 e003 	ldrb.w	lr, [r0, r3]
 8006c4c:	f803 e004 	strb.w	lr, [r3, r4]
						for (int i = 0; i < 6; i++) {
 8006c50:	3301      	adds	r3, #1
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	d1f8      	bne.n	8006c48 <function15+0x184>
 8006c56:	3106      	adds	r1, #6
					string[6] = 0xFF ;//
 8006c58:	23ff      	movs	r3, #255	; 0xff
 8006c5a:	71a3      	strb	r3, [r4, #6]
 8006c5c:	f8cb 1000 	str.w	r1, [fp]
						SDcardWriteSeek("mapDate.txt", 7, (uint8_t *) string, seekCntWrite);
 8006c60:	4643      	mov	r3, r8
 8006c62:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <function15+0x250>)
 8006c64:	482c      	ldr	r0, [pc, #176]	; (8006d18 <function15+0x254>)
 8006c66:	2107      	movs	r1, #7
 8006c68:	f7fd ff00 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("mapDate.txt", 100, 0);
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	4829      	ldr	r0, [pc, #164]	; (8006d18 <function15+0x254>)
 8006c72:	f7fd fed7 	bl	8004a24 <SDcardReadSeek>
						seekCntForDayAndDate=seekCntWrite;
 8006c76:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <function15+0x258>)
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006c78:	4829      	ldr	r0, [pc, #164]	; (8006d20 <function15+0x25c>)
 8006c7a:	2110      	movs	r1, #16
						seekCntWrite=seekCntWrite+7;
 8006c7c:	f108 0807 	add.w	r8, r8, #7
						seekCntForDayAndDate=seekCntWrite;
 8006c80:	f8c3 8000 	str.w	r8, [r3]
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006c84:	f7f9 ff67 	bl	8000b56 <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 8006c88:	f7fe fb44 	bl	8005314 <clearaRxBuffer>
						clearBuffer4();
 8006c8c:	f7fe fb60 	bl	8005350 <clearBuffer4>
						resmsg = 1;
 8006c90:	2401      	movs	r4, #1
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006c92:	3701      	adds	r7, #1
 8006c94:	e757      	b.n	8006b46 <function15+0x82>
		if (i == 1) {
 8006c96:	2d01      	cmp	r5, #1
			dateSlotNo = i;
 8006c98:	bf02      	ittt	eq
 8006c9a:	4b11      	ldreq	r3, [pc, #68]	; (8006ce0 <function15+0x21c>)
 8006c9c:	701d      	strbeq	r5, [r3, #0]
			i++;
 8006c9e:	2502      	moveq	r5, #2
 8006ca0:	e72a      	b.n	8006af8 <function15+0x34>
			if (i == 1) {
 8006ca2:	2e01      	cmp	r6, #1
				dateSlotNo = i;
 8006ca4:	bf02      	ittt	eq
 8006ca6:	4b0e      	ldreq	r3, [pc, #56]	; (8006ce0 <function15+0x21c>)
 8006ca8:	701e      	strbeq	r6, [r3, #0]
				i++;
 8006caa:	2602      	moveq	r6, #2
 8006cac:	e731      	b.n	8006b12 <function15+0x4e>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8006cae:	481d      	ldr	r0, [pc, #116]	; (8006d24 <function15+0x260>)
 8006cb0:	f7fb fd3c 	bl	800272c <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 30, 0x1FFF);
 8006cb4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006cb8:	221e      	movs	r2, #30
 8006cba:	4913      	ldr	r1, [pc, #76]	; (8006d08 <function15+0x244>)
 8006cbc:	4819      	ldr	r0, [pc, #100]	; (8006d24 <function15+0x260>)
 8006cbe:	e784      	b.n	8006bca <function15+0x106>
								clearaRxBuffer();
 8006cc0:	f7fe fb28 	bl	8005314 <clearaRxBuffer>
								clearBuffer4();
 8006cc4:	f7fe fb44 	bl	8005350 <clearBuffer4>
								return 0;
 8006cc8:	2000      	movs	r0, #0
	return 1;
	else
		return 0;
}
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				i = i - 1;
 8006cd0:	3f01      	subs	r7, #1
				clearaRxBuffer();
 8006cd2:	f7fe fb1f 	bl	8005314 <clearaRxBuffer>
				clearBuffer4();
 8006cd6:	f7fe fb3b 	bl	8005350 <clearBuffer4>
 8006cda:	e7da      	b.n	8006c92 <function15+0x1ce>
 8006cdc:	200000e4 	.word	0x200000e4
 8006ce0:	200000bd 	.word	0x200000bd
 8006ce4:	0800987e 	.word	0x0800987e
 8006ce8:	20000314 	.word	0x20000314
 8006cec:	20000128 	.word	0x20000128
 8006cf0:	20003b01 	.word	0x20003b01
 8006cf4:	2000000d 	.word	0x2000000d
 8006cf8:	2000010d 	.word	0x2000010d
 8006cfc:	2000000c 	.word	0x2000000c
 8006d00:	2000369c 	.word	0x2000369c
 8006d04:	20001108 	.word	0x20001108
 8006d08:	2000136c 	.word	0x2000136c
 8006d0c:	08009853 	.word	0x08009853
 8006d10:	200015e8 	.word	0x200015e8
 8006d14:	20005312 	.word	0x20005312
 8006d18:	0800982f 	.word	0x0800982f
 8006d1c:	2000367c 	.word	0x2000367c
 8006d20:	40021000 	.word	0x40021000
 8006d24:	20000e30 	.word	0x20000e30
 8006d28:	200000bc 	.word	0x200000bc

08006d2c <function16>:

/*-------------------------------function 16---------------------------*/
/*------------------------------------getting map info for day--------------------------------------*/
int function16(void) {
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int resmsg = 1;
	int seekCnt=0;
	int seekCntWrite;
	if(noOfDateSlots ==0)
 8006d30:	4b6c      	ldr	r3, [pc, #432]	; (8006ee4 <function16+0x1b8>)
 8006d32:	781d      	ldrb	r5, [r3, #0]
 8006d34:	b10d      	cbz	r5, 8006d3a <function16+0xe>
		seekCntWrite=0;
	else
		seekCntWrite=seekCntForDayAndDate;
 8006d36:	4b6c      	ldr	r3, [pc, #432]	; (8006ee8 <function16+0x1bc>)
 8006d38:	681d      	ldr	r5, [r3, #0]
		/*-----------send frames-------------------------*/
				frame[0] = 126;
				frame[1] = 126;
				frame[2] = 0; // function no
				frame[3] = 18;
				frame[4] = junctionId; // function no
 8006d3a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8006f30 <function16+0x204>
		seekCntWrite=0;
 8006d3e:	2601      	movs	r6, #1
 8006d40:	e01c      	b.n	8006d7c <function16+0x50>
			daySlotNo = i;
 8006d42:	7026      	strb	r6, [r4, #0]
		clearframe();
 8006d44:	f7fe fabc 	bl	80052c0 <clearframe>
		clearReadBytes();
 8006d48:	f7fe fac4 	bl	80052d4 <clearReadBytes>
		SDcardReadSeek("day.txt",7, seekCnt);
 8006d4c:	2107      	movs	r1, #7
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4866      	ldr	r0, [pc, #408]	; (8006eec <function16+0x1c0>)
		dayID = readBytes[2];
 8006d52:	4c67      	ldr	r4, [pc, #412]	; (8006ef0 <function16+0x1c4>)
//							Address = Address + 4;
//
//						}
//						HAL_FLASH_Lock();
//						//--------------------------flash write------------------------//
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006d54:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8006f34 <function16+0x208>
		SDcardReadSeek("day.txt",7, seekCnt);
 8006d58:	f7fd fe64 	bl	8004a24 <SDcardReadSeek>
		dayID = readBytes[2];
 8006d5c:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <function16+0x1c8>)
		totalNoOfPlans = readBytes[4];
 8006d5e:	4866      	ldr	r0, [pc, #408]	; (8006ef8 <function16+0x1cc>)
		dayID = readBytes[2];
 8006d60:	789a      	ldrb	r2, [r3, #2]
		totalNoOfPlans = readBytes[4];
 8006d62:	791b      	ldrb	r3, [r3, #4]
		dayID = readBytes[2];
 8006d64:	7022      	strb	r2, [r4, #0]
		totalNoOfPlans = readBytes[4];
 8006d66:	7003      	strb	r3, [r0, #0]
		clearReadBytes();
 8006d68:	f7fe fab4 	bl	80052d4 <clearReadBytes>
			i++;
 8006d6c:	3601      	adds	r6, #1
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006d6e:	2701      	movs	r7, #1
 8006d70:	46a1      	mov	r9, r4
 8006d72:	4680      	mov	r8, r0
 8006d74:	f898 3000 	ldrb.w	r3, [r8]
 8006d78:	429f      	cmp	r7, r3
 8006d7a:	dd10      	ble.n	8006d9e <function16+0x72>
	for (int i = 1; i < noOfDaySlots + 1;) {
 8006d7c:	4f5f      	ldr	r7, [pc, #380]	; (8006efc <function16+0x1d0>)
 8006d7e:	4c60      	ldr	r4, [pc, #384]	; (8006f00 <function16+0x1d4>)
 8006d80:	783b      	ldrb	r3, [r7, #0]
 8006d82:	2006      	movs	r0, #6
 8006d84:	4370      	muls	r0, r6
 8006d86:	429e      	cmp	r6, r3
 8006d88:	f1a0 0006 	sub.w	r0, r0, #6
 8006d8c:	ddd9      	ble.n	8006d42 <function16+0x16>
//				return 0;
			}}
//	}

	}
	clearaRxBuffer();
 8006d8e:	f7fe fac1 	bl	8005314 <clearaRxBuffer>
	if(noOfDaySlots ==	daySlotNo)
 8006d92:	7838      	ldrb	r0, [r7, #0]
 8006d94:	7823      	ldrb	r3, [r4, #0]
 8006d96:	1ac3      	subs	r3, r0, r3
 8006d98:	4258      	negs	r0, r3
 8006d9a:	4158      	adcs	r0, r3
 8006d9c:	e09f      	b.n	8006ede <function16+0x1b2>
				frame[0] = 126;
 8006d9e:	4c59      	ldr	r4, [pc, #356]	; (8006f04 <function16+0x1d8>)
 8006da0:	237e      	movs	r3, #126	; 0x7e
 8006da2:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 8006da4:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 8006da6:	2300      	movs	r3, #0
 8006da8:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 8006daa:	2312      	movs	r3, #18
 8006dac:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 8006dae:	f89a 3000 	ldrb.w	r3, [sl]
 8006db2:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 8006db4:	4b54      	ldr	r3, [pc, #336]	; (8006f08 <function16+0x1dc>)
				frame[9] = i;  // plan no
 8006db6:	7267      	strb	r7, [r4, #9]
				frame[5] = programVersionNo; // junction no
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 8006dbc:	4b53      	ldr	r3, [pc, #332]	; (8006f0c <function16+0x1e0>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x10; // function no
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	71e3      	strb	r3, [r4, #7]
				frame[8] = dayID;  // plan no planOnHr
 8006dc6:	f899 3000 	ldrb.w	r3, [r9]
 8006dca:	7223      	strb	r3, [r4, #8]
				frame[10] = '0';
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	72a3      	strb	r3, [r4, #10]
				frame[11] = '0';
 8006dd0:	72e3      	strb	r3, [r4, #11]
				frame[12] = '0';
 8006dd2:	7323      	strb	r3, [r4, #12]
				frame[13] = '0';
 8006dd4:	7363      	strb	r3, [r4, #13]
				frame[14] = '0';
 8006dd6:	73a3      	strb	r3, [r4, #14]
				frame[15] = '0';
 8006dd8:	73e3      	strb	r3, [r4, #15]
				frame[16] = '0';
 8006dda:	7423      	strb	r3, [r4, #16]
				frame[17] = '0';
 8006ddc:	7463      	strb	r3, [r4, #17]
				frame[18] = '0';  //'1'
 8006dde:	74a3      	strb	r3, [r4, #18]
				frame[19] = '0';  //'0' ; //'5' ;
 8006de0:	74e3      	strb	r3, [r4, #19]
				frame[20] = '0';  // '2' ;//'9' ;//'1' ;
 8006de2:	7523      	strb	r3, [r4, #20]
				frame[21] = '0';  // '2' ;//'9' ;//'1' ;
 8006de4:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 8006de6:	f7fe fadb 	bl	80053a0 <crcApi>
				frame[23] = 125;
 8006dea:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 8006dec:	43c0      	mvns	r0, r0
				frame[23] = 125;
 8006dee:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 8006df0:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 8006df2:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 8006df4:	f7fe fa7a 	bl	80052ec <clearBuffer>
				if(programFromBLE==1)
 8006df8:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <function16+0x1e4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006dfe:	f04f 0218 	mov.w	r2, #24
 8006e02:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e06:	4621      	mov	r1, r4
				if(programFromBLE==1)
 8006e08:	d15b      	bne.n	8006ec2 <function16+0x196>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8006e0a:	4842      	ldr	r0, [pc, #264]	; (8006f14 <function16+0x1e8>)
 8006e0c:	f7fb fc8e 	bl	800272c <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 35, 0x2FFF);
 8006e10:	4941      	ldr	r1, [pc, #260]	; (8006f18 <function16+0x1ec>)
 8006e12:	4840      	ldr	r0, [pc, #256]	; (8006f14 <function16+0x1e8>)
 8006e14:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8006e18:	2223      	movs	r2, #35	; 0x23
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 35, 0x1FFF);
 8006e1a:	f7fb fce4 	bl	80027e6 <HAL_UART_Receive>
				HAL_Delay(300);
 8006e1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e22:	f7f9 fbcf 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8006e26:	4b3c      	ldr	r3, [pc, #240]	; (8006f18 <function16+0x1ec>)
 8006e28:	493c      	ldr	r1, [pc, #240]	; (8006f1c <function16+0x1f0>)
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f002 f858 	bl	8008ee4 <msgParse>
 8006e34:	4c3a      	ldr	r4, [pc, #232]	; (8006f20 <function16+0x1f4>)
 8006e36:	6020      	str	r0, [r4, #0]
		HAL_Delay(900);
 8006e38:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006e3c:	f7f9 fbc2 	bl	80005c4 <HAL_Delay>
		signVal=4;
 8006e40:	2004      	movs	r0, #4
 8006e42:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 8006e44:	f7fe ff28 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	795a      	ldrb	r2, [r3, #5]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	7992      	ldrb	r2, [r2, #6]
					+ crcApi3(signVal) == 0xFF) {
 8006e52:	4410      	add	r0, r2
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8006e54:	28ff      	cmp	r0, #255	; 0xff
 8006e56:	d13d      	bne.n	8006ed4 <function16+0x1a8>
				signVal = signVal + 2;
 8006e58:	2206      	movs	r2, #6
 8006e5a:	6022      	str	r2, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId))
 8006e5c:	7998      	ldrb	r0, [r3, #6]
 8006e5e:	f89a 2000 	ldrb.w	r2, [sl]
 8006e62:	4290      	cmp	r0, r2
 8006e64:	d136      	bne.n	8006ed4 <function16+0x1a8>
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8006e66:	7a5b      	ldrb	r3, [r3, #9]
							string[i] = aRxBuffer[signVal];
 8006e68:	482e      	ldr	r0, [pc, #184]	; (8006f24 <function16+0x1f8>)
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 8006e6a:	2b10      	cmp	r3, #16
					signVal = signVal + 3;
 8006e6c:	f04f 0209 	mov.w	r2, #9
						signVal = signVal + 1;
 8006e70:	bf08      	it	eq
 8006e72:	230a      	moveq	r3, #10
					signVal = signVal + 3;
 8006e74:	6022      	str	r2, [r4, #0]
						signVal = signVal + 1;
 8006e76:	bf08      	it	eq
 8006e78:	6023      	streq	r3, [r4, #0]
 8006e7a:	6822      	ldr	r2, [r4, #0]
int function16(void) {
 8006e7c:	2300      	movs	r3, #0
							string[i] = aRxBuffer[signVal];
 8006e7e:	4411      	add	r1, r2
 8006e80:	f811 e003 	ldrb.w	lr, [r1, r3]
 8006e84:	f803 e000 	strb.w	lr, [r3, r0]
						for (int i = 0; i < 6; i++) {
 8006e88:	3301      	adds	r3, #1
 8006e8a:	2b06      	cmp	r3, #6
 8006e8c:	d1f8      	bne.n	8006e80 <function16+0x154>
 8006e8e:	3206      	adds	r2, #6
					string[6] = 0xFF ;//
 8006e90:	23ff      	movs	r3, #255	; 0xff
 8006e92:	7183      	strb	r3, [r0, #6]
 8006e94:	6022      	str	r2, [r4, #0]
						SDcardWriteSeek("mapDate.txt", 7, (uint8_t *) string, seekCntWrite);
 8006e96:	462b      	mov	r3, r5
 8006e98:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <function16+0x1f8>)
 8006e9a:	4823      	ldr	r0, [pc, #140]	; (8006f28 <function16+0x1fc>)
 8006e9c:	2107      	movs	r1, #7
 8006e9e:	f7fd fde5 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("mapDate.txt", 100, 0);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2164      	movs	r1, #100	; 0x64
 8006ea6:	4820      	ldr	r0, [pc, #128]	; (8006f28 <function16+0x1fc>)
 8006ea8:	f7fd fdbc 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8006eac:	2110      	movs	r1, #16
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f7f9 fe51 	bl	8000b56 <HAL_GPIO_TogglePin>
						seekCntWrite=seekCntWrite+7;
 8006eb4:	3507      	adds	r5, #7
						clearaRxBuffer();
 8006eb6:	f7fe fa2d 	bl	8005314 <clearaRxBuffer>
		for(int i=1; i< totalNoOfPlans+1;i++){
 8006eba:	3701      	adds	r7, #1
						clearBuffer4();
 8006ebc:	f7fe fa48 	bl	8005350 <clearBuffer4>
 8006ec0:	e758      	b.n	8006d74 <function16+0x48>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8006ec2:	481a      	ldr	r0, [pc, #104]	; (8006f2c <function16+0x200>)
 8006ec4:	f7fb fc32 	bl	800272c <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 35, 0x1FFF);
 8006ec8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006ecc:	2223      	movs	r2, #35	; 0x23
 8006ece:	4912      	ldr	r1, [pc, #72]	; (8006f18 <function16+0x1ec>)
 8006ed0:	4816      	ldr	r0, [pc, #88]	; (8006f2c <function16+0x200>)
 8006ed2:	e7a2      	b.n	8006e1a <function16+0xee>
								clearaRxBuffer();
 8006ed4:	f7fe fa1e 	bl	8005314 <clearaRxBuffer>
								clearBuffer4();
 8006ed8:	f7fe fa3a 	bl	8005350 <clearBuffer4>
								return 0;
 8006edc:	2000      	movs	r0, #0
	return 1;
	else
	return 0;
}
 8006ede:	b003      	add	sp, #12
 8006ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	200000e4 	.word	0x200000e4
 8006ee8:	2000367c 	.word	0x2000367c
 8006eec:	08009887 	.word	0x08009887
 8006ef0:	200000be 	.word	0x200000be
 8006ef4:	20000314 	.word	0x20000314
 8006ef8:	20000128 	.word	0x20000128
 8006efc:	200000e5 	.word	0x200000e5
 8006f00:	200000bf 	.word	0x200000bf
 8006f04:	20003b01 	.word	0x20003b01
 8006f08:	2000010d 	.word	0x2000010d
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	2000369c 	.word	0x2000369c
 8006f14:	20001108 	.word	0x20001108
 8006f18:	2000136c 	.word	0x2000136c
 8006f1c:	08009853 	.word	0x08009853
 8006f20:	200015e8 	.word	0x200015e8
 8006f24:	20005312 	.word	0x20005312
 8006f28:	0800982f 	.word	0x0800982f
 8006f2c:	20000e30 	.word	0x20000e30
 8006f30:	2000000d 	.word	0x2000000d
 8006f34:	40021000 	.word	0x40021000

08006f38 <checkClearenceSide>:


	}


void checkClearenceSide(){
 8006f38:	b510      	push	{r4, lr}
	clearance_Side=0;
 8006f3a:	4c14      	ldr	r4, [pc, #80]	; (8006f8c <checkClearenceSide+0x54>)
//----------------------------side 1---------------------//
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006f3c:	4814      	ldr	r0, [pc, #80]	; (8006f90 <checkClearenceSide+0x58>)
	clearance_Side=0;
 8006f3e:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
	clearance_Side=0;
 8006f44:	7023      	strb	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))	{
 8006f46:	f7f9 fdfb 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006f4a:	b108      	cbz	r0, 8006f50 <checkClearenceSide+0x18>
		clearance_Side=1;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	7023      	strb	r3, [r4, #0]
		}

//----------------------------side 2---------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))	{
 8006f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f54:	480e      	ldr	r0, [pc, #56]	; (8006f90 <checkClearenceSide+0x58>)
 8006f56:	f7f9 fdf3 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006f5a:	b108      	cbz	r0, 8006f60 <checkClearenceSide+0x28>
			clearance_Side=2;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	7023      	strb	r3, [r4, #0]
		}

//----------------------------side 3--------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))	{
 8006f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f64:	480a      	ldr	r0, [pc, #40]	; (8006f90 <checkClearenceSide+0x58>)
 8006f66:	f7f9 fdeb 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006f6a:	b108      	cbz	r0, 8006f70 <checkClearenceSide+0x38>
			clearance_Side=3;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	7023      	strb	r3, [r4, #0]
		}

//--------------------------side 4-----------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14))	{
 8006f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f74:	4806      	ldr	r0, [pc, #24]	; (8006f90 <checkClearenceSide+0x58>)
 8006f76:	f7f9 fde3 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006f7a:	b108      	cbz	r0, 8006f80 <checkClearenceSide+0x48>
			clearance_Side=4;
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	7023      	strb	r3, [r4, #0]
		}
if(! (clearance_Side==0))
 8006f80:	7823      	ldrb	r3, [r4, #0]
 8006f82:	b113      	cbz	r3, 8006f8a <checkClearenceSide+0x52>
{
	clearance_Mode=2;
 8006f84:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <checkClearenceSide+0x5c>)
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	bd10      	pop	{r4, pc}
 8006f8c:	200000b4 	.word	0x200000b4
 8006f90:	40021000 	.word	0x40021000
 8006f94:	20005214 	.word	0x20005214

08006f98 <checkClearenceMode>:



}

void checkClearenceMode(){
 8006f98:	b510      	push	{r4, lr}
	clearance_Mode=1;
 8006f9a:	4c11      	ldr	r4, [pc, #68]	; (8006fe0 <checkClearenceMode+0x48>)
//---------------------------- for jump---------------------//
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006f9c:	4811      	ldr	r0, [pc, #68]	; (8006fe4 <checkClearenceMode+0x4c>)
	clearance_Mode=1;
 8006f9e:	2301      	movs	r3, #1
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006fa0:	2180      	movs	r1, #128	; 0x80
	clearance_Mode=1;
 8006fa2:	7023      	strb	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))	{
 8006fa4:	f7f9 fdcc 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006fa8:	b108      	cbz	r0, 8006fae <checkClearenceMode+0x16>
		clearance_Mode=4;
 8006faa:	2304      	movs	r3, #4
 8006fac:	7023      	strb	r3, [r4, #0]
		}

//---------------------------- for extend---------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))	{
 8006fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fb2:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <checkClearenceMode+0x4c>)
 8006fb4:	f7f9 fdc4 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006fb8:	b108      	cbz	r0, 8006fbe <checkClearenceMode+0x26>
			clearance_Mode=6;
 8006fba:	2306      	movs	r3, #6
 8006fbc:	7023      	strb	r3, [r4, #0]
		}

//--------------------------- for modeChange--------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))	{
 8006fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fc2:	4808      	ldr	r0, [pc, #32]	; (8006fe4 <checkClearenceMode+0x4c>)
 8006fc4:	f7f9 fdbc 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006fc8:	b108      	cbz	r0, 8006fce <checkClearenceMode+0x36>
			clearance_Mode=3;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	7023      	strb	r3, [r4, #0]
		}

//-------------------------- for shutdown-----------------------//
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))	{
 8006fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fd2:	4804      	ldr	r0, [pc, #16]	; (8006fe4 <checkClearenceMode+0x4c>)
 8006fd4:	f7f9 fdb4 	bl	8000b40 <HAL_GPIO_ReadPin>
 8006fd8:	b108      	cbz	r0, 8006fde <checkClearenceMode+0x46>
			clearance_Mode=5;
 8006fda:	2305      	movs	r3, #5
 8006fdc:	7023      	strb	r3, [r4, #0]
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	20005214 	.word	0x20005214
 8006fe4:	40021000 	.word	0x40021000

08006fe8 <checkFieldAction>:
void checkFieldAction(){
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if(clearance_Side==0) //no side is clear
 8006fea:	4c17      	ldr	r4, [pc, #92]	; (8007048 <checkFieldAction+0x60>)
 8006fec:	4d17      	ldr	r5, [pc, #92]	; (800704c <checkFieldAction+0x64>)
 8006fee:	4f18      	ldr	r7, [pc, #96]	; (8007050 <checkFieldAction+0x68>)
 8006ff0:	4e18      	ldr	r6, [pc, #96]	; (8007054 <checkFieldAction+0x6c>)
	checkClearenceSide();//check clear side
 8006ff2:	f7ff ffa1 	bl	8006f38 <checkClearenceSide>
		if(clearance_Side==0) //no side is clear
 8006ff6:	7823      	ldrb	r3, [r4, #0]
 8006ff8:	b9a3      	cbnz	r3, 8007024 <checkFieldAction+0x3c>
      checkClearenceMode(); //check clearance mode
 8006ffa:	f7ff ffcd 	bl	8006f98 <checkClearenceMode>
			if(clearance_Mode==3) //if clearance mode is change mode
 8006ffe:	782b      	ldrb	r3, [r5, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d10f      	bne.n	8007024 <checkFieldAction+0x3c>
				if(!(clearance_Mode==clearance_Mode_Last))
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b03      	cmp	r3, #3
 8007008:	d014      	beq.n	8007034 <checkFieldAction+0x4c>
			changeMode=1;
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <checkFieldAction+0x70>)
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]
		if(planMode==3){
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <checkFieldAction+0x74>)
 8007012:	7819      	ldrb	r1, [r3, #0]
 8007014:	2903      	cmp	r1, #3
			planMode=1;
 8007016:	bf08      	it	eq
 8007018:	701a      	strbeq	r2, [r3, #0]
			if(planMode==1)
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	2a01      	cmp	r2, #1
 800701e:	d109      	bne.n	8007034 <checkFieldAction+0x4c>
				planMode=3;
 8007020:	2203      	movs	r2, #3
 8007022:	701a      	strb	r2, [r3, #0]
			if(((clearance_Mode==1) && (clearance_Side==0)))//field request is not  coming
 8007024:	782b      	ldrb	r3, [r5, #0]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d105      	bne.n	8007036 <checkFieldAction+0x4e>
 800702a:	7822      	ldrb	r2, [r4, #0]
 800702c:	b91a      	cbnz	r2, 8007036 <checkFieldAction+0x4e>
					fieldActionFlag=0;
 800702e:	6032      	str	r2, [r6, #0]
	clearance_Mode_Last=clearance_Mode;
 8007030:	603b      	str	r3, [r7, #0]
	}
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(((clearance_Mode==1) && (clearance_Side==0)))//field request is not  coming
 8007034:	782b      	ldrb	r3, [r5, #0]
  		clearenceSide=clearance_Side;
 8007036:	7821      	ldrb	r1, [r4, #0]
				fieldActionFlag=1;
 8007038:	2201      	movs	r2, #1
 800703a:	6032      	str	r2, [r6, #0]
			clearenceMode=clearance_Mode;
 800703c:	4a08      	ldr	r2, [pc, #32]	; (8007060 <checkFieldAction+0x78>)
 800703e:	7013      	strb	r3, [r2, #0]
  		clearenceSide=clearance_Side;
 8007040:	4a08      	ldr	r2, [pc, #32]	; (8007064 <checkFieldAction+0x7c>)
 8007042:	7011      	strb	r1, [r2, #0]
 8007044:	e7f4      	b.n	8007030 <checkFieldAction+0x48>
 8007046:	bf00      	nop
 8007048:	200000b4 	.word	0x200000b4
 800704c:	20005214 	.word	0x20005214
 8007050:	200000b0 	.word	0x200000b0
 8007054:	200000cc 	.word	0x200000cc
 8007058:	20003654 	.word	0x20003654
 800705c:	20005212 	.word	0x20005212
 8007060:	200000b5 	.word	0x200000b5
 8007064:	200000b7 	.word	0x200000b7

08007068 <laser>:
}



void laser()
{
 8007068:	b510      	push	{r4, lr}

pin_High=0;
 800706a:	4c11      	ldr	r4, [pc, #68]	; (80070b0 <laser+0x48>)

		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800706c:	4811      	ldr	r0, [pc, #68]	; (80070b4 <laser+0x4c>)
pin_High=0;
 800706e:	2300      	movs	r3, #0
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8007070:	2110      	movs	r1, #16
pin_High=0;
 8007072:	6023      	str	r3, [r4, #0]
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8007074:	f7f9 fd64 	bl	8000b40 <HAL_GPIO_ReadPin>
 8007078:	4623      	mov	r3, r4
 800707a:	b908      	cbnz	r0, 8007080 <laser+0x18>
		 {
			 pin_High=1;/*flag updated if pin is high  */
 800707c:	2201      	movs	r2, #1
 800707e:	6022      	str	r2, [r4, #0]

		 }

if(!(pin_High==1))
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	2a01      	cmp	r2, #1
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <laser+0x50>)
 8007086:	d007      	beq.n	8007098 <laser+0x30>
{
		 laserOn =0 ;
 8007088:	480c      	ldr	r0, [pc, #48]	; (80070bc <laser+0x54>)
 800708a:	2100      	movs	r1, #0
 800708c:	6001      	str	r1, [r0, #0]
	 pin_High=0;
	 lSec=10;
 800708e:	480c      	ldr	r0, [pc, #48]	; (80070c0 <laser+0x58>)
	 pin_High=0;
 8007090:	6019      	str	r1, [r3, #0]
	 lSec=10;
 8007092:	240a      	movs	r4, #10
 8007094:	6004      	str	r4, [r0, #0]
		 pin_HighLast=0;
 8007096:	6011      	str	r1, [r2, #0]
}
if(!(pin_HighLast==1))
 8007098:	6811      	ldr	r1, [r2, #0]
 800709a:	2901      	cmp	r1, #1
 800709c:	d007      	beq.n	80070ae <laser+0x46>
	 if(pin_High==1)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d104      	bne.n	80070ae <laser+0x46>
	 {
    lSec=1;
		 pin_HighLast=1;
 80070a4:	6013      	str	r3, [r2, #0]
    lSec=1;
 80070a6:	4906      	ldr	r1, [pc, #24]	; (80070c0 <laser+0x58>)
		 laserOn =1 ;
 80070a8:	4a04      	ldr	r2, [pc, #16]	; (80070bc <laser+0x54>)
    lSec=1;
 80070aa:	600b      	str	r3, [r1, #0]
		 laserOn =1 ;
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	20000104 	.word	0x20000104
 80070b4:	40020400 	.word	0x40020400
 80070b8:	20000108 	.word	0x20000108
 80070bc:	200000dc 	.word	0x200000dc
 80070c0:	20000010 	.word	0x20000010

080070c4 <extend>:
}
}

void extend(){
 80070c4:	b510      	push	{r4, lr}

 pinExtend_High=0;
 80070c6:	4c12      	ldr	r4, [pc, #72]	; (8007110 <extend+0x4c>)

		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80070c8:	4812      	ldr	r0, [pc, #72]	; (8007114 <extend+0x50>)
 pinExtend_High=0;
 80070ca:	2300      	movs	r3, #0
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80070cc:	2120      	movs	r1, #32
 pinExtend_High=0;
 80070ce:	6023      	str	r3, [r4, #0]
		 if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80070d0:	f7f9 fd36 	bl	8000b40 <HAL_GPIO_ReadPin>
 80070d4:	4623      	mov	r3, r4
 80070d6:	b908      	cbnz	r0, 80070dc <extend+0x18>
		 {
			 pinExtend_High=1;/*flag updated if pin is high  */
 80070d8:	2201      	movs	r2, #1
 80070da:	6022      	str	r2, [r4, #0]

		 }

 if(!(pinExtend_High==1))
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	2a01      	cmp	r2, #1
 80070e0:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <extend+0x54>)
 80070e2:	d007      	beq.n	80070f4 <extend+0x30>
 {
		 pinExtend_On =0 ;
 80070e4:	480d      	ldr	r0, [pc, #52]	; (800711c <extend+0x58>)
 80070e6:	2100      	movs	r1, #0
 80070e8:	6001      	str	r1, [r0, #0]
	 pinExtend_High=0;
	 lsSec=10;
 80070ea:	480d      	ldr	r0, [pc, #52]	; (8007120 <extend+0x5c>)
	 pinExtend_High=0;
 80070ec:	6019      	str	r1, [r3, #0]
	 lsSec=10;
 80070ee:	240a      	movs	r4, #10
 80070f0:	6004      	str	r4, [r0, #0]
 		 pinExtend_HighLast=0;
 80070f2:	6011      	str	r1, [r2, #0]
}
 if(!(pinExtend_HighLast==1))
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	2901      	cmp	r1, #1
 80070f8:	d008      	beq.n	800710c <extend+0x48>
	 if(pinExtend_High==1)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <extend+0x48>
	 {
     lsSec=3;
		 pinExtend_HighLast=1;
 8007100:	6013      	str	r3, [r2, #0]
     lsSec=3;
 8007102:	4907      	ldr	r1, [pc, #28]	; (8007120 <extend+0x5c>)
		 pinExtend_On =1 ;
 8007104:	4a05      	ldr	r2, [pc, #20]	; (800711c <extend+0x58>)
     lsSec=3;
 8007106:	2003      	movs	r0, #3
 8007108:	6008      	str	r0, [r1, #0]
		 pinExtend_On =1 ;
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	200000f8 	.word	0x200000f8
 8007114:	40020400 	.word	0x40020400
 8007118:	200000fc 	.word	0x200000fc
 800711c:	20000100 	.word	0x20000100
 8007120:	20000014 	.word	0x20000014

08007124 <checkServerFieldAction>:
void checkServerFieldAction(){
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clearenceMode == 6) {
 8007126:	4c9c      	ldr	r4, [pc, #624]	; (8007398 <checkServerFieldAction+0x274>)
	checkFieldAction();
 8007128:	f7ff ff5e 	bl	8006fe8 <checkFieldAction>
	if (clearenceMode == 6) {
 800712c:	7823      	ldrb	r3, [r4, #0]
 800712e:	2b06      	cmp	r3, #6
 8007130:	d106      	bne.n	8007140 <checkServerFieldAction+0x1c>
		if (!((count > 10) && (count < 20))) {
 8007132:	4b9a      	ldr	r3, [pc, #616]	; (800739c <checkServerFieldAction+0x278>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3b0b      	subs	r3, #11
 8007138:	2b08      	cmp	r3, #8
			clearenceMode = 1;
 800713a:	bf84      	itt	hi
 800713c:	2301      	movhi	r3, #1
 800713e:	7023      	strbhi	r3, [r4, #0]
	if (fieldActionFlag == 0) { //request is not coming from field
 8007140:	4b97      	ldr	r3, [pc, #604]	; (80073a0 <checkServerFieldAction+0x27c>)
 8007142:	4898      	ldr	r0, [pc, #608]	; (80073a4 <checkServerFieldAction+0x280>)
 8007144:	6819      	ldr	r1, [r3, #0]
 8007146:	2900      	cmp	r1, #0
 8007148:	f040 80e2 	bne.w	8007310 <checkServerFieldAction+0x1ec>
		if (checkServerJumpExtend == 0) {  //request is not from server
 800714c:	6803      	ldr	r3, [r0, #0]
 800714e:	b93b      	cbnz	r3, 8007160 <checkServerFieldAction+0x3c>
			if ((extendCnt == 3) || (extendCnt > 3)) {
 8007150:	4b95      	ldr	r3, [pc, #596]	; (80073a8 <checkServerFieldAction+0x284>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	dd03      	ble.n	8007160 <checkServerFieldAction+0x3c>
				extendCnt1 = 1;
 8007158:	4a94      	ldr	r2, [pc, #592]	; (80073ac <checkServerFieldAction+0x288>)
				clearenceMode = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	7023      	strb	r3, [r4, #0]
				extendCnt1 = 1;
 800715e:	6013      	str	r3, [r2, #0]
	if (clearenceMode == 4) {
 8007160:	7823      	ldrb	r3, [r4, #0]
 8007162:	2b04      	cmp	r3, #4
 8007164:	d105      	bne.n	8007172 <checkServerFieldAction+0x4e>
		if (count < 6) {
 8007166:	4b8d      	ldr	r3, [pc, #564]	; (800739c <checkServerFieldAction+0x278>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b05      	cmp	r3, #5
			clearenceMode = 1;
 800716c:	bfdc      	itt	le
 800716e:	2301      	movle	r3, #1
 8007170:	7023      	strble	r3, [r4, #0]
	if (clearenceMode==1)
 8007172:	7823      	ldrb	r3, [r4, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d138      	bne.n	80071ea <checkServerFieldAction+0xc6>
		count-- ;
 8007178:	4a88      	ldr	r2, [pc, #544]	; (800739c <checkServerFieldAction+0x278>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	6013      	str	r3, [r2, #0]
       Disp[0] = Disp[0] - 1 ;
 8007180:	4b8b      	ldr	r3, [pc, #556]	; (80073b0 <checkServerFieldAction+0x28c>)
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	3a01      	subs	r2, #1
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
       Disp[1] = Disp[1] - 1 ;
 800718a:	785a      	ldrb	r2, [r3, #1]
 800718c:	3a01      	subs	r2, #1
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	705a      	strb	r2, [r3, #1]
       Disp[2] = Disp[2] - 1 ;
 8007192:	789a      	ldrb	r2, [r3, #2]
 8007194:	3a01      	subs	r2, #1
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	709a      	strb	r2, [r3, #2]
       Disp[3] = Disp[3] - 1 ;
 800719a:	78da      	ldrb	r2, [r3, #3]
 800719c:	3a01      	subs	r2, #1
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	70da      	strb	r2, [r3, #3]
      if(lSec<9)
 80071a2:	4b84      	ldr	r3, [pc, #528]	; (80073b4 <checkServerFieldAction+0x290>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	2a08      	cmp	r2, #8
			lSec=lSec-1;
 80071a8:	bfdc      	itt	le
 80071aa:	f102 32ff 	addle.w	r2, r2, #4294967295
 80071ae:	601a      	strle	r2, [r3, #0]
			if(lSec==0)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	b92a      	cbnz	r2, 80071c0 <checkServerFieldAction+0x9c>
lSec=10;
 80071b4:	250a      	movs	r5, #10
 80071b6:	601d      	str	r5, [r3, #0]
clearenceMode=4;
 80071b8:	2304      	movs	r3, #4
 80071ba:	7023      	strb	r3, [r4, #0]
 		 pin_HighLast=0;
 80071bc:	4b7e      	ldr	r3, [pc, #504]	; (80073b8 <checkServerFieldAction+0x294>)
 80071be:	601a      	str	r2, [r3, #0]
      if(lsSec<9)
 80071c0:	4b7e      	ldr	r3, [pc, #504]	; (80073bc <checkServerFieldAction+0x298>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	2a08      	cmp	r2, #8
			lsSec=lsSec-1;
 80071c6:	bfdc      	itt	le
 80071c8:	f102 32ff 	addle.w	r2, r2, #4294967295
 80071cc:	601a      	strle	r2, [r3, #0]
			if(lsSec==0)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	b92a      	cbnz	r2, 80071de <checkServerFieldAction+0xba>
lsSec=10;
 80071d2:	250a      	movs	r5, #10
 80071d4:	601d      	str	r5, [r3, #0]
clearenceMode=6;
 80071d6:	2306      	movs	r3, #6
 80071d8:	7023      	strb	r3, [r4, #0]
 		 pinExtend_HighLast=0;
 80071da:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <checkServerFieldAction+0x29c>)
 80071dc:	601a      	str	r2, [r3, #0]
if(extendCnt1==1)
 80071de:	4b73      	ldr	r3, [pc, #460]	; (80073ac <checkServerFieldAction+0x288>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	2a01      	cmp	r2, #1
extendCnt1=0;
 80071e4:	bf04      	itt	eq
 80071e6:	2200      	moveq	r2, #0
 80071e8:	601a      	streq	r2, [r3, #0]
if((checkServerJumpExtend==0)&&(fieldActionFlag==0))// request is not coming from server and field
 80071ea:	6803      	ldr	r3, [r0, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8093 	bne.w	8007318 <checkServerFieldAction+0x1f4>
 80071f2:	2900      	cmp	r1, #0
 80071f4:	f040 8090 	bne.w	8007318 <checkServerFieldAction+0x1f4>
	 		laser(); //request is coming from camera(for jump)
 80071f8:	f7ff ff36 	bl	8007068 <laser>
			extend();//request is coming from camera
 80071fc:	f7ff ff62 	bl	80070c4 <extend>
if 	(!(clearenceModeLast==clearenceMode))
 8007200:	4d70      	ldr	r5, [pc, #448]	; (80073c4 <checkServerFieldAction+0x2a0>)
 8007202:	7822      	ldrb	r2, [r4, #0]
 8007204:	782b      	ldrb	r3, [r5, #0]
 8007206:	4293      	cmp	r3, r2
 8007208:	f000 8081 	beq.w	800730e <checkServerFieldAction+0x1ea>
	if 	(clearenceModeLast==2){
 800720c:	2b02      	cmp	r3, #2
 800720e:	f040 808c 	bne.w	800732a <checkServerFieldAction+0x206>
if (clearenceMode==1)
 8007212:	2a01      	cmp	r2, #1
 8007214:	f040 8089 	bne.w	800732a <checkServerFieldAction+0x206>
     Disp[0] = Disp[10]  ;
 8007218:	4b65      	ldr	r3, [pc, #404]	; (80073b0 <checkServerFieldAction+0x28c>)
clearenceModeLast=1 ;
 800721a:	702a      	strb	r2, [r5, #0]
     Disp[0] = Disp[10]  ;
 800721c:	7a99      	ldrb	r1, [r3, #10]
 800721e:	b2c9      	uxtb	r1, r1
 8007220:	7019      	strb	r1, [r3, #0]
   Disp[1] = Disp[11]  ;
 8007222:	7ad9      	ldrb	r1, [r3, #11]
 8007224:	b2c9      	uxtb	r1, r1
 8007226:	7059      	strb	r1, [r3, #1]
   Disp[2] = Disp[12] ;
 8007228:	7b19      	ldrb	r1, [r3, #12]
 800722a:	b2c9      	uxtb	r1, r1
 800722c:	7099      	strb	r1, [r3, #2]
   Disp[3] = Disp[13]  ;
 800722e:	7b59      	ldrb	r1, [r3, #13]
 8007230:	b2c9      	uxtb	r1, r1
 8007232:	70d9      	strb	r1, [r3, #3]
   Disp[4] = Disp[14] ;
 8007234:	7b99      	ldrb	r1, [r3, #14]
 8007236:	b2c9      	uxtb	r1, r1
 8007238:	7119      	strb	r1, [r3, #4]
     Disp[5] = Disp[15]  ;
 800723a:	7bd9      	ldrb	r1, [r3, #15]
 800723c:	b2c9      	uxtb	r1, r1
 800723e:	7159      	strb	r1, [r3, #5]
   Disp[6] = Disp[16]  ;
 8007240:	7c19      	ldrb	r1, [r3, #16]
 8007242:	b2c9      	uxtb	r1, r1
 8007244:	7199      	strb	r1, [r3, #6]
   Disp[7] = Disp[17] ;
 8007246:	7c59      	ldrb	r1, [r3, #17]
 8007248:	b2c9      	uxtb	r1, r1
 800724a:	71d9      	strb	r1, [r3, #7]
if (clearenceMode==4)
 800724c:	7823      	ldrb	r3, [r4, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d12b      	bne.n	80072aa <checkServerFieldAction+0x186>
if (!((Disp[4]==0x84)||(Disp[4]==0x48)||(Disp[5]==0x84)||(Disp[5]==0x48)))
 8007252:	4b57      	ldr	r3, [pc, #348]	; (80073b0 <checkServerFieldAction+0x28c>)
 8007254:	791a      	ldrb	r2, [r3, #4]
 8007256:	2a84      	cmp	r2, #132	; 0x84
 8007258:	d027      	beq.n	80072aa <checkServerFieldAction+0x186>
 800725a:	791a      	ldrb	r2, [r3, #4]
 800725c:	2a48      	cmp	r2, #72	; 0x48
 800725e:	d024      	beq.n	80072aa <checkServerFieldAction+0x186>
 8007260:	795a      	ldrb	r2, [r3, #5]
 8007262:	2a84      	cmp	r2, #132	; 0x84
 8007264:	d021      	beq.n	80072aa <checkServerFieldAction+0x186>
 8007266:	795a      	ldrb	r2, [r3, #5]
 8007268:	2a48      	cmp	r2, #72	; 0x48
 800726a:	d01e      	beq.n	80072aa <checkServerFieldAction+0x186>
				if(count > 5){
 800726c:	484b      	ldr	r0, [pc, #300]	; (800739c <checkServerFieldAction+0x278>)
 800726e:	6802      	ldr	r2, [r0, #0]
 8007270:	2a05      	cmp	r2, #5
 8007272:	dd17      	ble.n	80072a4 <checkServerFieldAction+0x180>
					Disp[0] =Disp[0]-count  ;
 8007274:	7819      	ldrb	r1, [r3, #0]
					count =count-5;
 8007276:	3a05      	subs	r2, #5
					Disp[0] =Disp[0]-count  ;
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	1a89      	subs	r1, r1, r2
 800727c:	b2c9      	uxtb	r1, r1
 800727e:	7019      	strb	r1, [r3, #0]
   Disp[1] = Disp[1]-count  ;
 8007280:	7859      	ldrb	r1, [r3, #1]
 8007282:	1a89      	subs	r1, r1, r2
 8007284:	b2c9      	uxtb	r1, r1
 8007286:	7059      	strb	r1, [r3, #1]
   Disp[2] = Disp[2]-count ;
 8007288:	7899      	ldrb	r1, [r3, #2]
 800728a:	1a89      	subs	r1, r1, r2
 800728c:	b2c9      	uxtb	r1, r1
 800728e:	7099      	strb	r1, [r3, #2]
   Disp[3] = Disp[3]-count ;
 8007290:	78d9      	ldrb	r1, [r3, #3]
 8007292:	1a89      	subs	r1, r1, r2
 8007294:	b2c9      	uxtb	r1, r1
 8007296:	70d9      	strb	r1, [r3, #3]
   Disp[6] = Disp[6]-count;
 8007298:	7999      	ldrb	r1, [r3, #6]
 800729a:	1a8a      	subs	r2, r1, r2
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	719a      	strb	r2, [r3, #6]
				count =5;
 80072a0:	2305      	movs	r3, #5
 80072a2:	6003      	str	r3, [r0, #0]
		 clearenceModeLast=1 ;
 80072a4:	2301      	movs	r3, #1
 80072a6:	702b      	strb	r3, [r5, #0]
			clearenceMode=1;
 80072a8:	7023      	strb	r3, [r4, #0]
if (clearenceMode==6)
 80072aa:	7823      	ldrb	r3, [r4, #0]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d121      	bne.n	80072f4 <checkServerFieldAction+0x1d0>
if((count<20) && (count>10))
 80072b0:	4f3a      	ldr	r7, [pc, #232]	; (800739c <checkServerFieldAction+0x278>)
 80072b2:	6838      	ldr	r0, [r7, #0]
 80072b4:	f1a0 030b 	sub.w	r3, r0, #11
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d81b      	bhi.n	80072f4 <checkServerFieldAction+0x1d0>
		if(extendCnt <3 )
 80072bc:	4e3a      	ldr	r6, [pc, #232]	; (80073a8 <checkServerFieldAction+0x284>)
 80072be:	6831      	ldr	r1, [r6, #0]
 80072c0:	2902      	cmp	r1, #2
 80072c2:	dc17      	bgt.n	80072f4 <checkServerFieldAction+0x1d0>
	Disp[0] = Disp[0] + 4 ;
 80072c4:	4b3a      	ldr	r3, [pc, #232]	; (80073b0 <checkServerFieldAction+0x28c>)
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	3204      	adds	r2, #4
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
   Disp[1] = Disp[1] + 4 ;
 80072ce:	785a      	ldrb	r2, [r3, #1]
 80072d0:	3204      	adds	r2, #4
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	705a      	strb	r2, [r3, #1]
   Disp[2] = Disp[2] + 4 ;
 80072d6:	789a      	ldrb	r2, [r3, #2]
 80072d8:	3204      	adds	r2, #4
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	709a      	strb	r2, [r3, #2]
   Disp[3] = Disp[3] + 4 ;
 80072de:	78da      	ldrb	r2, [r3, #3]
 80072e0:	3204      	adds	r2, #4
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	70da      	strb	r2, [r3, #3]
	 clearenceModeLast=1 ;
 80072e6:	2301      	movs	r3, #1
		 count = count + 4 ;
 80072e8:	3004      	adds	r0, #4
	extendCnt++;
 80072ea:	4419      	add	r1, r3
		 count = count + 4 ;
 80072ec:	6038      	str	r0, [r7, #0]
	 clearenceModeLast=1 ;
 80072ee:	702b      	strb	r3, [r5, #0]
			clearenceMode=1;
 80072f0:	7023      	strb	r3, [r4, #0]
	extendCnt++;
 80072f2:	6031      	str	r1, [r6, #0]
if (clearenceMode==5)
 80072f4:	7823      	ldrb	r3, [r4, #0]
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d105      	bne.n	8007306 <checkServerFieldAction+0x1e2>
Disp[4] =0x00 ;
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <checkServerFieldAction+0x28c>)
	 clearenceModeLast=5 ;
 80072fc:	702b      	strb	r3, [r5, #0]
Disp[4] =0x00 ;
 80072fe:	2100      	movs	r1, #0
 8007300:	7111      	strb	r1, [r2, #4]
	 clearenceMode=5;
 8007302:	7023      	strb	r3, [r4, #0]
Disp[5] =0x00 ;
 8007304:	7151      	strb	r1, [r2, #5]
	if (clearenceMode==1)
 8007306:	7823      	ldrb	r3, [r4, #0]
 8007308:	2b01      	cmp	r3, #1
		clearenceModeLast=1 ;
 800730a:	bf08      	it	eq
 800730c:	702b      	strbeq	r3, [r5, #0]
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		extendCnt = 0;
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <checkServerFieldAction+0x284>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e723      	b.n	8007160 <checkServerFieldAction+0x3c>
				lsSec=10;
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <checkServerFieldAction+0x298>)
 800731a:	230a      	movs	r3, #10
 800731c:	6013      	str	r3, [r2, #0]
				lSec=10;
 800731e:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <checkServerFieldAction+0x290>)
 8007320:	6013      	str	r3, [r2, #0]
				extendCnt=0;
 8007322:	4b21      	ldr	r3, [pc, #132]	; (80073a8 <checkServerFieldAction+0x284>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e76a      	b.n	8007200 <checkServerFieldAction+0xdc>
if (clearenceMode==2)
 800732a:	2a02      	cmp	r2, #2
 800732c:	d18e      	bne.n	800724c <checkServerFieldAction+0x128>
     Disp[10] = Disp[0]  ;
 800732e:	4b20      	ldr	r3, [pc, #128]	; (80073b0 <checkServerFieldAction+0x28c>)
     clearenceModeLast=2 ;
 8007330:	702a      	strb	r2, [r5, #0]
     Disp[10] = Disp[0]  ;
 8007332:	7819      	ldrb	r1, [r3, #0]
     secLast=sTime.Seconds;
 8007334:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <checkServerFieldAction+0x2a4>)
     Disp[10] = Disp[0]  ;
 8007336:	b2c9      	uxtb	r1, r1
 8007338:	7299      	strb	r1, [r3, #10]
   Disp[11] = Disp[1]  ;
 800733a:	7859      	ldrb	r1, [r3, #1]
 800733c:	b2c9      	uxtb	r1, r1
 800733e:	72d9      	strb	r1, [r3, #11]
   Disp[12] = Disp[2] ;
 8007340:	7899      	ldrb	r1, [r3, #2]
 8007342:	b2c9      	uxtb	r1, r1
 8007344:	7319      	strb	r1, [r3, #12]
   Disp[13] = Disp[3]  ;
 8007346:	78d9      	ldrb	r1, [r3, #3]
 8007348:	b2c9      	uxtb	r1, r1
 800734a:	7359      	strb	r1, [r3, #13]
   Disp[14] = Disp[4] ;
 800734c:	7919      	ldrb	r1, [r3, #4]
 800734e:	b2c9      	uxtb	r1, r1
 8007350:	7399      	strb	r1, [r3, #14]
     Disp[15] = Disp[5]  ;
 8007352:	7959      	ldrb	r1, [r3, #5]
 8007354:	b2c9      	uxtb	r1, r1
 8007356:	73d9      	strb	r1, [r3, #15]
   Disp[16] = Disp[6]  ;
 8007358:	7999      	ldrb	r1, [r3, #6]
 800735a:	b2c9      	uxtb	r1, r1
 800735c:	7419      	strb	r1, [r3, #16]
   Disp[17] = Disp[7] ;
 800735e:	79d9      	ldrb	r1, [r3, #7]
 8007360:	b2c9      	uxtb	r1, r1
 8007362:	7459      	strb	r1, [r3, #17]
     secLast=sTime.Seconds;
 8007364:	7891      	ldrb	r1, [r2, #2]
 8007366:	4a19      	ldr	r2, [pc, #100]	; (80073cc <checkServerFieldAction+0x2a8>)
 8007368:	6011      	str	r1, [r2, #0]
	count=1 ;
 800736a:	490c      	ldr	r1, [pc, #48]	; (800739c <checkServerFieldAction+0x278>)
 800736c:	2201      	movs	r2, #1
   Disp[0] = 1 ;
 800736e:	701a      	strb	r2, [r3, #0]
	count=1 ;
 8007370:	600a      	str	r2, [r1, #0]
   Disp[1] = 1 ;
 8007372:	705a      	strb	r2, [r3, #1]
   Disp[2] = 1 ;
 8007374:	709a      	strb	r2, [r3, #2]
   Disp[3] = 1 ;
 8007376:	70da      	strb	r2, [r3, #3]
   Disp[6] = 1 ;
 8007378:	719a      	strb	r2, [r3, #6]
switch (clearenceSide)
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <checkServerFieldAction+0x2ac>)
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	3a01      	subs	r2, #1
 8007380:	2a04      	cmp	r2, #4
 8007382:	d82f      	bhi.n	80073e4 <checkServerFieldAction+0x2c0>
 8007384:	e8df f002 	tbb	[pc, r2]
 8007388:	34322603 	.word	0x34322603
 800738c:	38          	.byte	0x38
 800738d:	00          	.byte	0x00
Disp[4] =0x38 ;
 800738e:	2238      	movs	r2, #56	; 0x38
Disp[4] =0x83 ;
 8007390:	711a      	strb	r2, [r3, #4]
Disp[5] =0x88 ;
 8007392:	2288      	movs	r2, #136	; 0x88
 8007394:	e021      	b.n	80073da <checkServerFieldAction+0x2b6>
 8007396:	bf00      	nop
 8007398:	200000b5 	.word	0x200000b5
 800739c:	20003af0 	.word	0x20003af0
 80073a0:	200000cc 	.word	0x200000cc
 80073a4:	20003afc 	.word	0x20003afc
 80073a8:	200000c4 	.word	0x200000c4
 80073ac:	200000c8 	.word	0x200000c8
 80073b0:	200010dd 	.word	0x200010dd
 80073b4:	20000010 	.word	0x20000010
 80073b8:	20000108 	.word	0x20000108
 80073bc:	20000014 	.word	0x20000014
 80073c0:	200000fc 	.word	0x200000fc
 80073c4:	200000b6 	.word	0x200000b6
 80073c8:	20000ec4 	.word	0x20000ec4
 80073cc:	20000114 	.word	0x20000114
 80073d0:	200000b7 	.word	0x200000b7
Disp[4] =0x88 ;
 80073d4:	2288      	movs	r2, #136	; 0x88
 80073d6:	711a      	strb	r2, [r3, #4]
Disp[5] =0x38 ;
 80073d8:	2238      	movs	r2, #56	; 0x38
Disp[5] =0x83 ;
 80073da:	715a      	strb	r2, [r3, #5]
Disp[7]=Disp[7]| 0x80 ;
 80073dc:	79da      	ldrb	r2, [r3, #7]
 80073de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
Disp[7]=Disp[7]| 0x03 ;
 80073e2:	71da      	strb	r2, [r3, #7]
	HAL_Delay(50);
 80073e4:	2032      	movs	r0, #50	; 0x32
 80073e6:	f7f9 f8ed 	bl	80005c4 <HAL_Delay>
 80073ea:	e72f      	b.n	800724c <checkServerFieldAction+0x128>
Disp[4] =0x83 ;
 80073ec:	2283      	movs	r2, #131	; 0x83
 80073ee:	e7cf      	b.n	8007390 <checkServerFieldAction+0x26c>
Disp[4] =0x88 ;
 80073f0:	2288      	movs	r2, #136	; 0x88
 80073f2:	711a      	strb	r2, [r3, #4]
Disp[5] =0x83 ;
 80073f4:	2283      	movs	r2, #131	; 0x83
 80073f6:	e7f0      	b.n	80073da <checkServerFieldAction+0x2b6>
Disp[4] =0x88 ;
 80073f8:	2288      	movs	r2, #136	; 0x88
 80073fa:	711a      	strb	r2, [r3, #4]
Disp[5] =0x88 ;
 80073fc:	715a      	strb	r2, [r3, #5]
Disp[7]=Disp[7]| 0x03 ;
 80073fe:	79da      	ldrb	r2, [r3, #7]
 8007400:	f042 0203 	orr.w	r2, r2, #3
 8007404:	e7ed      	b.n	80073e2 <checkServerFieldAction+0x2be>
 8007406:	bf00      	nop

08007408 <countNoOfMapDetails>:
 }


//HAL_UART_RxCpltCallback();

void countNoOfMapDetails(){
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
int counter=0;
	/*------------------checks the current date with dateSlot or with daySlot-------------*/
	  	/*------------------checking dateSlot---------date.txt-----*/
totalNoOfMap=0;
 800740c:	4c17      	ldr	r4, [pc, #92]	; (800746c <countNoOfMapDetails+0x64>)
	  	for(int i=1;i<noOfDateSlots+1;i++)
 800740e:	4e18      	ldr	r6, [pc, #96]	; (8007470 <countNoOfMapDetails+0x68>)


	  	    readDateSD(counter);
	  		counter=counter+11;

						totalNoOfMap=totalNoOfMap+readBytes[9];
 8007410:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007478 <countNoOfMapDetails+0x70>
totalNoOfMap=0;
 8007414:	2300      	movs	r3, #0
 8007416:	6023      	str	r3, [r4, #0]
	  	for(int i=1;i<noOfDateSlots+1;i++)
 8007418:	2501      	movs	r5, #1
 800741a:	270b      	movs	r7, #11
 800741c:	7833      	ldrb	r3, [r6, #0]
 800741e:	fb07 f005 	mul.w	r0, r7, r5
 8007422:	429d      	cmp	r5, r3
 8007424:	f1a0 000b 	sub.w	r0, r0, #11
 8007428:	dd0d      	ble.n	8007446 <countNoOfMapDetails+0x3e>

	  	}

		counter=0;

		for(int i=1;i<noOfDaySlots+1;i++)
 800742a:	4e12      	ldr	r6, [pc, #72]	; (8007474 <countNoOfMapDetails+0x6c>)
	  	{
			   readDaySD(counter);
			  	counter=counter+6;


			  	    totalNoOfMap=totalNoOfMap+readBytes[4];
 800742c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8007478 <countNoOfMapDetails+0x70>
 8007430:	2501      	movs	r5, #1
 8007432:	2706      	movs	r7, #6
		for(int i=1;i<noOfDaySlots+1;i++)
 8007434:	7833      	ldrb	r3, [r6, #0]
 8007436:	fb07 f005 	mul.w	r0, r7, r5
 800743a:	429d      	cmp	r5, r3
 800743c:	f1a0 0006 	sub.w	r0, r0, #6
 8007440:	dd0a      	ble.n	8007458 <countNoOfMapDetails+0x50>


	  	}


}
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  	    readDateSD(counter);
 8007446:	f7fd ffcb 	bl	80053e0 <readDateSD>
						totalNoOfMap=totalNoOfMap+readBytes[9];
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007450:	4413      	add	r3, r2
 8007452:	6023      	str	r3, [r4, #0]
	  	for(int i=1;i<noOfDateSlots+1;i++)
 8007454:	3501      	adds	r5, #1
 8007456:	e7e1      	b.n	800741c <countNoOfMapDetails+0x14>
			   readDaySD(counter);
 8007458:	f7fd ffce 	bl	80053f8 <readDaySD>
			  	    totalNoOfMap=totalNoOfMap+readBytes[4];
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8007462:	4413      	add	r3, r2
 8007464:	6023      	str	r3, [r4, #0]
		for(int i=1;i<noOfDaySlots+1;i++)
 8007466:	3501      	adds	r5, #1
 8007468:	e7e4      	b.n	8007434 <countNoOfMapDetails+0x2c>
 800746a:	bf00      	nop
 800746c:	2000011c 	.word	0x2000011c
 8007470:	200000e4 	.word	0x200000e4
 8007474:	200000e5 	.word	0x200000e5
 8007478:	20000314 	.word	0x20000314

0800747c <function17>:
int function17(void) {
 800747c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	countNoOfMapDetails();
 8007480:	f7ff ffc2 	bl	8007408 <countNoOfMapDetails>
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 8007484:	2501      	movs	r5, #1
				frame[4] = junctionId; // function no
 8007486:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8007660 <function17+0x1e4>
	int phaseMapID=1;
 800748a:	46a9      	mov	r9, r5
	int seekCnt=0;
 800748c:	2700      	movs	r7, #0
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 800748e:	4b65      	ldr	r3, [pc, #404]	; (8007624 <function17+0x1a8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007496:	429d      	cmp	r5, r3
 8007498:	f1a0 0007 	sub.w	r0, r0, #7
 800749c:	dd03      	ble.n	80074a6 <function17+0x2a>
	clearaRxBuffer();
 800749e:	f7fd ff39 	bl	8005314 <clearaRxBuffer>
	return 1;
 80074a2:	2001      	movs	r0, #1
 80074a4:	e0bb      	b.n	800761e <function17+0x1a2>
		clearframe();
 80074a6:	f7fd ff0b 	bl	80052c0 <clearframe>
		clearReadBytes();
 80074aa:	f7fd ff13 	bl	80052d4 <clearReadBytes>
		SDcardReadSeek("mapDate.txt", 100, seekCntWrite);
 80074ae:	2164      	movs	r1, #100	; 0x64
 80074b0:	4602      	mov	r2, r0
 80074b2:	485d      	ldr	r0, [pc, #372]	; (8007628 <function17+0x1ac>)
 80074b4:	f7fd fab6 	bl	8004a24 <SDcardReadSeek>
		map_ID = readBytes[4];
 80074b8:	4b5c      	ldr	r3, [pc, #368]	; (800762c <function17+0x1b0>)
 80074ba:	791a      	ldrb	r2, [r3, #4]
 80074bc:	9201      	str	r2, [sp, #4]
		totNoOfPhases = readBytes[5];
 80074be:	f893 b005 	ldrb.w	fp, [r3, #5]
		clearReadBytes();
 80074c2:	f7fd ff07 	bl	80052d4 <clearReadBytes>
		for(int i=1; i< totNoOfPhases+1;i++){
 80074c6:	f04f 0801 	mov.w	r8, #1
 80074ca:	45d8      	cmp	r8, fp
 80074cc:	dd01      	ble.n	80074d2 <function17+0x56>
	for (int j = 1; j < totalNoOfMap + 1;j++) {
 80074ce:	3501      	adds	r5, #1
 80074d0:	e7dd      	b.n	800748e <function17+0x12>
				frame[0] = 126;
 80074d2:	4c57      	ldr	r4, [pc, #348]	; (8007630 <function17+0x1b4>)
 80074d4:	237e      	movs	r3, #126	; 0x7e
 80074d6:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 80074d8:	7063      	strb	r3, [r4, #1]
				frame[2] = 0; // function no
 80074da:	2300      	movs	r3, #0
 80074dc:	70a3      	strb	r3, [r4, #2]
				frame[3] = 18;
 80074de:	2312      	movs	r3, #18
 80074e0:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 80074e8:	4b52      	ldr	r3, [pc, #328]	; (8007634 <function17+0x1b8>)
				frame[9] = i;  // plan no
 80074ea:	f884 8009 	strb.w	r8, [r4, #9]
				frame[5] = programVersionNo; // junction no
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 80074f2:	4b51      	ldr	r3, [pc, #324]	; (8007638 <function17+0x1bc>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x11; // function no
 80074f8:	2311      	movs	r3, #17
 80074fa:	71e3      	strb	r3, [r4, #7]
				frame[8] = map_ID;  // plan no planOnHr
 80074fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007500:	7223      	strb	r3, [r4, #8]
				frame[10] = 0x01;
 8007502:	2301      	movs	r3, #1
 8007504:	72a3      	strb	r3, [r4, #10]
				frame[11] = 0x01;
 8007506:	72e3      	strb	r3, [r4, #11]
				frame[12] = 0x01;
 8007508:	7323      	strb	r3, [r4, #12]
				frame[13] = 0x01;
 800750a:	7363      	strb	r3, [r4, #13]
				frame[14] = 0x01;
 800750c:	73a3      	strb	r3, [r4, #14]
				frame[15] = 0x01;
 800750e:	73e3      	strb	r3, [r4, #15]
				frame[16] = 0x01;
 8007510:	7423      	strb	r3, [r4, #16]
				frame[17] = 0x01;
 8007512:	7463      	strb	r3, [r4, #17]
				frame[18] = 0x01;  //'1'
 8007514:	74a3      	strb	r3, [r4, #18]
				frame[19] = 0x01;  //'0' ; //'5' ;
 8007516:	74e3      	strb	r3, [r4, #19]
				frame[20] = 0x01;  // '2' ;//'9' ;//'1' ;
 8007518:	7523      	strb	r3, [r4, #20]
				frame[21] = 0x01;  // '2' ;//'9' ;//'1' ;
 800751a:	7563      	strb	r3, [r4, #21]
				frame[22] = 0xFF - crcApi();  // junction no
 800751c:	f7fd ff40 	bl	80053a0 <crcApi>
				frame[23] = 125;
 8007520:	237d      	movs	r3, #125	; 0x7d
				frame[22] = 0xFF - crcApi();  // junction no
 8007522:	43c0      	mvns	r0, r0
				frame[23] = 125;
 8007524:	75e3      	strb	r3, [r4, #23]
				frame[24] = 125;
 8007526:	7623      	strb	r3, [r4, #24]
				frame[22] = 0xFF - crcApi();  // junction no
 8007528:	75a0      	strb	r0, [r4, #22]
				clearBuffer();
 800752a:	f7fd fedf 	bl	80052ec <clearBuffer>
				if(programFromBLE==1)
 800752e:	4b43      	ldr	r3, [pc, #268]	; (800763c <function17+0x1c0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8007534:	f04f 0218 	mov.w	r2, #24
 8007538:	f241 3388 	movw	r3, #5000	; 0x1388
 800753c:	4621      	mov	r1, r4
				if(programFromBLE==1)
 800753e:	d160      	bne.n	8007602 <function17+0x186>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 24, 5000);
 8007540:	483f      	ldr	r0, [pc, #252]	; (8007640 <function17+0x1c4>)
 8007542:	f7fb f8f3 	bl	800272c <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 40, 0x2FFF);
 8007546:	493f      	ldr	r1, [pc, #252]	; (8007644 <function17+0x1c8>)
 8007548:	483d      	ldr	r0, [pc, #244]	; (8007640 <function17+0x1c4>)
 800754a:	f642 73ff 	movw	r3, #12287	; 0x2fff
 800754e:	2228      	movs	r2, #40	; 0x28
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8007550:	4e3c      	ldr	r6, [pc, #240]	; (8007644 <function17+0x1c8>)
 8007552:	4c3d      	ldr	r4, [pc, #244]	; (8007648 <function17+0x1cc>)
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8007554:	f7fb f947 	bl	80027e6 <HAL_UART_Receive>
				HAL_Delay(300);
 8007558:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800755c:	f7f9 f832 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8007560:	2200      	movs	r2, #0
 8007562:	493a      	ldr	r1, [pc, #232]	; (800764c <function17+0x1d0>)
 8007564:	4630      	mov	r0, r6
 8007566:	f001 fcbd 	bl	8008ee4 <msgParse>
 800756a:	6020      	str	r0, [r4, #0]
		HAL_Delay(900);
 800756c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8007570:	f7f9 f828 	bl	80005c4 <HAL_Delay>
		signVal=4;
 8007574:	2004      	movs	r0, #4
 8007576:	6020      	str	r0, [r4, #0]
					+ crcApi3(signVal) == 0xFF) {
 8007578:	f7fe fb8e 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 800757c:	7973      	ldrb	r3, [r6, #5]
 800757e:	4433      	add	r3, r6
 8007580:	46b6      	mov	lr, r6
 8007582:	799b      	ldrb	r3, [r3, #6]
					+ crcApi3(signVal) == 0xFF) {
 8007584:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8007586:	28ff      	cmp	r0, #255	; 0xff
 8007588:	d144      	bne.n	8007614 <function17+0x198>
				signVal = signVal + 2;
 800758a:	2306      	movs	r3, #6
 800758c:	6023      	str	r3, [r4, #0]
				if ((aRxBuffer[signVal] == junctionId))
 800758e:	79b2      	ldrb	r2, [r6, #6]
 8007590:	f89a 3000 	ldrb.w	r3, [sl]
 8007594:	429a      	cmp	r2, r3
 8007596:	d131      	bne.n	80075fc <function17+0x180>
					signVal = signVal + 3;
 8007598:	2309      	movs	r3, #9
 800759a:	6023      	str	r3, [r4, #0]
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 800759c:	7a73      	ldrb	r3, [r6, #9]
						string[0]=phaseMapID;
 800759e:	492c      	ldr	r1, [pc, #176]	; (8007650 <function17+0x1d4>)
					if ((aRxBuffer[signVal] == 0x10)) //function Number
 80075a0:	2b10      	cmp	r3, #16
						signVal = signVal + 1;
 80075a2:	bf04      	itt	eq
 80075a4:	230a      	moveq	r3, #10
 80075a6:	6023      	streq	r3, [r4, #0]
						signVal=signVal+1;
 80075a8:	6822      	ldr	r2, [r4, #0]
						string[0]=phaseMapID;
 80075aa:	f881 9000 	strb.w	r9, [r1]
						signVal=signVal+1;
 80075ae:	f102 0c01 	add.w	ip, r2, #1
						for (int i = 1; i < 5; i++) {
 80075b2:	2301      	movs	r3, #1
							string[i] = aRxBuffer[signVal];
 80075b4:	460e      	mov	r6, r1
 80075b6:	eb0c 0003 	add.w	r0, ip, r3
 80075ba:	4470      	add	r0, lr
 80075bc:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 80075c0:	5598      	strb	r0, [r3, r6]
						for (int i = 1; i < 5; i++) {
 80075c2:	3301      	adds	r3, #1
 80075c4:	2b05      	cmp	r3, #5
 80075c6:	d1f6      	bne.n	80075b6 <function17+0x13a>
 80075c8:	3205      	adds	r2, #5
					string[5] = 0xFF ;//
 80075ca:	23ff      	movs	r3, #255	; 0xff
 80075cc:	714b      	strb	r3, [r1, #5]
 80075ce:	6022      	str	r2, [r4, #0]
						SDcardWriteSeek("mapPhase.txt", 6, (uint8_t *) string, seekCnt);
 80075d0:	463b      	mov	r3, r7
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <function17+0x1d4>)
 80075d4:	481f      	ldr	r0, [pc, #124]	; (8007654 <function17+0x1d8>)
 80075d6:	2106      	movs	r1, #6
 80075d8:	f7fd fa48 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("mapPhase.txt", 6, seekCnt);
 80075dc:	463a      	mov	r2, r7
 80075de:	2106      	movs	r1, #6
 80075e0:	481c      	ldr	r0, [pc, #112]	; (8007654 <function17+0x1d8>)
 80075e2:	f7fd fa1f 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80075e6:	2110      	movs	r1, #16
 80075e8:	481b      	ldr	r0, [pc, #108]	; (8007658 <function17+0x1dc>)
					phaseMapID++;
 80075ea:	f109 0901 	add.w	r9, r9, #1
						seekCnt=seekCnt+6;
 80075ee:	3706      	adds	r7, #6
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80075f0:	f7f9 fab1 	bl	8000b56 <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 80075f4:	f7fd fe8e 	bl	8005314 <clearaRxBuffer>
						clearBuffer4();
 80075f8:	f7fd feaa 	bl	8005350 <clearBuffer4>
		for(int i=1; i< totNoOfPhases+1;i++){
 80075fc:	f108 0801 	add.w	r8, r8, #1
 8007600:	e763      	b.n	80074ca <function17+0x4e>
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 24, 5000);
 8007602:	4816      	ldr	r0, [pc, #88]	; (800765c <function17+0x1e0>)
 8007604:	f7fb f892 	bl	800272c <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 40, 0x1FFF);
 8007608:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800760c:	2228      	movs	r2, #40	; 0x28
 800760e:	490d      	ldr	r1, [pc, #52]	; (8007644 <function17+0x1c8>)
 8007610:	4812      	ldr	r0, [pc, #72]	; (800765c <function17+0x1e0>)
 8007612:	e79d      	b.n	8007550 <function17+0xd4>
							clearaRxBuffer();
 8007614:	f7fd fe7e 	bl	8005314 <clearaRxBuffer>
							clearBuffer4();
 8007618:	f7fd fe9a 	bl	8005350 <clearBuffer4>
							return 0;
 800761c:	2000      	movs	r0, #0
}
 800761e:	b003      	add	sp, #12
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	2000011c 	.word	0x2000011c
 8007628:	0800982f 	.word	0x0800982f
 800762c:	20000314 	.word	0x20000314
 8007630:	20003b01 	.word	0x20003b01
 8007634:	2000010d 	.word	0x2000010d
 8007638:	2000000c 	.word	0x2000000c
 800763c:	2000369c 	.word	0x2000369c
 8007640:	20001108 	.word	0x20001108
 8007644:	2000136c 	.word	0x2000136c
 8007648:	200015e8 	.word	0x200015e8
 800764c:	08009853 	.word	0x08009853
 8007650:	20005312 	.word	0x20005312
 8007654:	0800983b 	.word	0x0800983b
 8007658:	40021000 	.word	0x40021000
 800765c:	20000e30 	.word	0x20000e30
 8007660:	2000000d 	.word	0x2000000d

08007664 <function18>:
int function18(){
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
				frame[0] = 126;
 8007666:	4c52      	ldr	r4, [pc, #328]	; (80077b0 <function18+0x14c>)
				frame[4] = junctionId; // function no
 8007668:	4f52      	ldr	r7, [pc, #328]	; (80077b4 <function18+0x150>)
	countNoOfMapDetails();
 800766a:	f7ff fecd 	bl	8007408 <countNoOfMapDetails>
		clearframe();
 800766e:	f7fd fe27 	bl	80052c0 <clearframe>
				frame[0] = 126;
 8007672:	237e      	movs	r3, #126	; 0x7e
 8007674:	7023      	strb	r3, [r4, #0]
				frame[1] = 126;
 8007676:	7063      	strb	r3, [r4, #1]
				frame[2] = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	70a3      	strb	r3, [r4, #2]
				frame[3] = 14;
 800767c:	230e      	movs	r3, #14
 800767e:	70e3      	strb	r3, [r4, #3]
				frame[4] = junctionId; // function no
 8007680:	783b      	ldrb	r3, [r7, #0]
 8007682:	7123      	strb	r3, [r4, #4]
				frame[5] = programVersionNo; // junction no
 8007684:	4b4c      	ldr	r3, [pc, #304]	; (80077b8 <function18+0x154>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	7163      	strb	r3, [r4, #5]
				frame[6] = fileNo; // junction no
 800768a:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <function18+0x158>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	71a3      	strb	r3, [r4, #6]
				frame[7] = 0x12; // function no
 8007690:	2312      	movs	r3, #18
 8007692:	71e3      	strb	r3, [r4, #7]
				frame[8] = 0x04;//noOfSides;  // plan no planOnHr
 8007694:	2304      	movs	r3, #4
 8007696:	7223      	strb	r3, [r4, #8]
				frame[9] =  0x01;
 8007698:	2301      	movs	r3, #1
 800769a:	7263      	strb	r3, [r4, #9]
				frame[10] = 0x01;
 800769c:	72a3      	strb	r3, [r4, #10]
				frame[11] = 0x01;
 800769e:	72e3      	strb	r3, [r4, #11]
				frame[12] = 0x01;
 80076a0:	7323      	strb	r3, [r4, #12]
				frame[13] = 0x01;
 80076a2:	7363      	strb	r3, [r4, #13]
				frame[14] = 0x01;
 80076a4:	73a3      	strb	r3, [r4, #14]
				frame[15] = 0x01;
 80076a6:	73e3      	strb	r3, [r4, #15]
				frame[16] = 0x01;
 80076a8:	7423      	strb	r3, [r4, #16]
				frame[17] = 0x01;
 80076aa:	7463      	strb	r3, [r4, #17]
				frame[18] = 0xFF - crcApi();  // junction no
 80076ac:	f7fd fe78 	bl	80053a0 <crcApi>
				frame[19] = 125;
 80076b0:	237d      	movs	r3, #125	; 0x7d
				frame[18] = 0xFF - crcApi();  // junction no
 80076b2:	43c0      	mvns	r0, r0
				frame[19] = 125;
 80076b4:	74e3      	strb	r3, [r4, #19]
				frame[20] = 125;
 80076b6:	7523      	strb	r3, [r4, #20]
				frame[18] = 0xFF - crcApi();  // junction no
 80076b8:	74a0      	strb	r0, [r4, #18]
				clearBuffer();
 80076ba:	f7fd fe17 	bl	80052ec <clearBuffer>
				if(programFromBLE==1)
 80076be:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <function18+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b01      	cmp	r3, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80076c4:	f04f 0214 	mov.w	r2, #20
 80076c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076cc:	4621      	mov	r1, r4
				if(programFromBLE==1)
 80076ce:	d15d      	bne.n	800778c <function18+0x128>
					HAL_UART_Transmit(&huart1, (uint8_t*) frame, 20, 5000);
 80076d0:	483c      	ldr	r0, [pc, #240]	; (80077c4 <function18+0x160>)
 80076d2:	f7fb f82b 	bl	800272c <HAL_UART_Transmit>
					HAL_UART_Receive(&huart1, (uint8_t *) aRxBuffer, 50, 0x2FFF);
 80076d6:	493c      	ldr	r1, [pc, #240]	; (80077c8 <function18+0x164>)
 80076d8:	483a      	ldr	r0, [pc, #232]	; (80077c4 <function18+0x160>)
 80076da:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80076de:	2232      	movs	r2, #50	; 0x32
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80076e0:	4e39      	ldr	r6, [pc, #228]	; (80077c8 <function18+0x164>)
 80076e2:	4d3a      	ldr	r5, [pc, #232]	; (80077cc <function18+0x168>)
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 50, 0x1FFF);
 80076e4:	f7fb f87f 	bl	80027e6 <HAL_UART_Receive>
				HAL_Delay(300);
 80076e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076ec:	f7f8 ff6a 	bl	80005c4 <HAL_Delay>
				signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 80076f0:	2200      	movs	r2, #0
 80076f2:	4937      	ldr	r1, [pc, #220]	; (80077d0 <function18+0x16c>)
 80076f4:	4630      	mov	r0, r6
 80076f6:	f001 fbf5 	bl	8008ee4 <msgParse>
 80076fa:	6028      	str	r0, [r5, #0]
		HAL_Delay(900);
 80076fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8007700:	f7f8 ff60 	bl	80005c4 <HAL_Delay>
		signVal = msgParse((uint8_t *) aRxBuffer, "~~~~", 0);
 8007704:	2200      	movs	r2, #0
 8007706:	4932      	ldr	r1, [pc, #200]	; (80077d0 <function18+0x16c>)
 8007708:	4630      	mov	r0, r6
 800770a:	f001 fbeb 	bl	8008ee4 <msgParse>
 800770e:	4604      	mov	r4, r0
 8007710:	6028      	str	r0, [r5, #0]
		if (!(signVal == 0)){
 8007712:	2800      	cmp	r0, #0
 8007714:	d043      	beq.n	800779e <function18+0x13a>
					+ crcApi3(signVal) == 0xFF) {
 8007716:	f7fe fabf 	bl	8005c98 <crcApi3>
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 800771a:	1933      	adds	r3, r6, r4
 800771c:	785a      	ldrb	r2, [r3, #1]
 800771e:	4413      	add	r3, r2
 8007720:	789b      	ldrb	r3, [r3, #2]
					+ crcApi3(signVal) == 0xFF) {
 8007722:	4418      	add	r0, r3
			if (aRxBuffer[signVal + (aRxBuffer[signVal + 1]) + 2]
 8007724:	28ff      	cmp	r0, #255	; 0xff
 8007726:	d13f      	bne.n	80077a8 <function18+0x144>
				signVal = signVal + 2;
 8007728:	1ca3      	adds	r3, r4, #2
 800772a:	602b      	str	r3, [r5, #0]
				if ((aRxBuffer[signVal] == junctionId))
 800772c:	5cf2      	ldrb	r2, [r6, r3]
 800772e:	783b      	ldrb	r3, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d139      	bne.n	80077a8 <function18+0x144>
					signVal = signVal + 3;
 8007734:	1d63      	adds	r3, r4, #5
 8007736:	602b      	str	r3, [r5, #0]
					if ((aRxBuffer[signVal] == 0x12)) //function Number
 8007738:	5cf3      	ldrb	r3, [r6, r3]
							string[i] = aRxBuffer[signVal];
 800773a:	4826      	ldr	r0, [pc, #152]	; (80077d4 <function18+0x170>)
					if ((aRxBuffer[signVal] == 0x12)) //function Number
 800773c:	2b12      	cmp	r3, #18
						signVal = signVal + 1;
 800773e:	bf04      	itt	eq
 8007740:	3406      	addeq	r4, #6
 8007742:	602c      	streq	r4, [r5, #0]
 8007744:	682a      	ldr	r2, [r5, #0]
int function18(){
 8007746:	2301      	movs	r3, #1
							string[i] = aRxBuffer[signVal];
 8007748:	18d1      	adds	r1, r2, r3
 800774a:	4431      	add	r1, r6
 800774c:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8007750:	5419      	strb	r1, [r3, r0]
						for (int i = 1; i < 26; i++) {
 8007752:	3301      	adds	r3, #1
 8007754:	2b1a      	cmp	r3, #26
 8007756:	d1f7      	bne.n	8007748 <function18+0xe4>
 8007758:	3219      	adds	r2, #25
					string[26] = 0xFF ;//
 800775a:	23ff      	movs	r3, #255	; 0xff
 800775c:	7683      	strb	r3, [r0, #26]
 800775e:	602a      	str	r2, [r5, #0]
						SDcardWriteSeek("SlaveD.txt", 27, (uint8_t *) string, seekCnt);
 8007760:	2300      	movs	r3, #0
 8007762:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <function18+0x170>)
 8007764:	481c      	ldr	r0, [pc, #112]	; (80077d8 <function18+0x174>)
 8007766:	211b      	movs	r1, #27
 8007768:	f7fd f980 	bl	8004a6c <SDcardWriteSeek>
						SDcardReadSeek("SlaveD.txt", 27, seekCnt);
 800776c:	2200      	movs	r2, #0
 800776e:	211b      	movs	r1, #27
 8007770:	4819      	ldr	r0, [pc, #100]	; (80077d8 <function18+0x174>)
 8007772:	f7fd f957 	bl	8004a24 <SDcardReadSeek>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8007776:	2110      	movs	r1, #16
 8007778:	4818      	ldr	r0, [pc, #96]	; (80077dc <function18+0x178>)
 800777a:	f7f9 f9ec 	bl	8000b56 <HAL_GPIO_TogglePin>
						clearaRxBuffer();
 800777e:	f7fd fdc9 	bl	8005314 <clearaRxBuffer>
						clearBuffer4();
 8007782:	f7fd fde5 	bl	8005350 <clearBuffer4>
						return 1 ;
 8007786:	2401      	movs	r4, #1
}
 8007788:	4620      	mov	r0, r4
 800778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				HAL_UART_Transmit(&huart3, (uint8_t*) frame, 20, 5000);
 800778c:	4814      	ldr	r0, [pc, #80]	; (80077e0 <function18+0x17c>)
 800778e:	f7fa ffcd 	bl	800272c <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, (uint8_t *) aRxBuffer, 50, 0x1FFF);
 8007792:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007796:	2232      	movs	r2, #50	; 0x32
 8007798:	490b      	ldr	r1, [pc, #44]	; (80077c8 <function18+0x164>)
 800779a:	4811      	ldr	r0, [pc, #68]	; (80077e0 <function18+0x17c>)
 800779c:	e7a0      	b.n	80076e0 <function18+0x7c>
							clearaRxBuffer();
 800779e:	f7fd fdb9 	bl	8005314 <clearaRxBuffer>
							clearBuffer4();
 80077a2:	f7fd fdd5 	bl	8005350 <clearBuffer4>
							return 0;
 80077a6:	e7ef      	b.n	8007788 <function18+0x124>
	clearaRxBuffer();
 80077a8:	f7fd fdb4 	bl	8005314 <clearaRxBuffer>
}
 80077ac:	e7ec      	b.n	8007788 <function18+0x124>
 80077ae:	bf00      	nop
 80077b0:	20003b01 	.word	0x20003b01
 80077b4:	2000000d 	.word	0x2000000d
 80077b8:	2000010d 	.word	0x2000010d
 80077bc:	2000000c 	.word	0x2000000c
 80077c0:	2000369c 	.word	0x2000369c
 80077c4:	20001108 	.word	0x20001108
 80077c8:	2000136c 	.word	0x2000136c
 80077cc:	200015e8 	.word	0x200015e8
 80077d0:	08009853 	.word	0x08009853
 80077d4:	20005312 	.word	0x20005312
 80077d8:	08009848 	.word	0x08009848
 80077dc:	40021000 	.word	0x40021000
 80077e0:	20000e30 	.word	0x20000e30

080077e4 <currentDayAllPlan>:
void currentDayAllPlan(){
 80077e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
int cnt=0;
int enterLoop;
int ptr=0;
int mapCounter_Phase=0;
int phaseMapCnt2=0;
clearPlanDetailsArrayBuffer();
 80077e8:	f7fd fdc6 	bl	8005378 <clearPlanDetailsArrayBuffer>
int mapCounter_Phase=0;
 80077ec:	2500      	movs	r5, #0
for(int i=1;i<totalNoOfMap+1;i++){
 80077ee:	f8df b144 	ldr.w	fp, [pc, #324]	; 8007934 <currentDayAllPlan+0x150>
 80077f2:	2601      	movs	r6, #1
int ptr=0;
 80077f4:	46a8      	mov	r8, r5
int counter=0;
 80077f6:	46aa      	mov	sl, r5
for(int i=1;i<totalNoOfMap+1;i++){
 80077f8:	f8db 3000 	ldr.w	r3, [fp]
 80077fc:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 8007800:	429e      	cmp	r6, r3
 8007802:	f1a0 0007 	sub.w	r0, r0, #7
 8007806:	dd02      	ble.n	800780e <currentDayAllPlan+0x2a>

}
}
counterOfPlan=ptr;
}
}
 8007808:	b003      	add	sp, #12
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
clearReadBytes();
 800780e:	f7fd fd61 	bl	80052d4 <clearReadBytes>
SDcardReadSeek("mapDate.txt", 7, cnt);
 8007812:	2107      	movs	r1, #7
 8007814:	4602      	mov	r2, r0
 8007816:	4841      	ldr	r0, [pc, #260]	; (800791c <currentDayAllPlan+0x138>)
phaseMapCnt2=readBytes[5];
 8007818:	4c41      	ldr	r4, [pc, #260]	; (8007920 <currentDayAllPlan+0x13c>)
 800781a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8007950 <currentDayAllPlan+0x16c>
SDcardReadSeek("mapDate.txt", 7, cnt);
 800781e:	f7fd f901 	bl	8004a24 <SDcardReadSeek>
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 8007822:	4940      	ldr	r1, [pc, #256]	; (8007924 <currentDayAllPlan+0x140>)
phaseMapCnt2=readBytes[5];
 8007824:	7962      	ldrb	r2, [r4, #5]
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 8007826:	680b      	ldr	r3, [r1, #0]
if((dateID==readBytes[0])&&(dayID ==readBytes[1]))
 8007828:	7820      	ldrb	r0, [r4, #0]
phaseMapCnt1=phaseMapCnt1+phaseMapCnt2;
 800782a:	4413      	add	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
if((dateID==readBytes[0])&&(dayID ==readBytes[1]))
 800782e:	4b3e      	ldr	r3, [pc, #248]	; (8007928 <currentDayAllPlan+0x144>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	4298      	cmp	r0, r3
 8007834:	4621      	mov	r1, r4
 8007836:	d111      	bne.n	800785c <currentDayAllPlan+0x78>
 8007838:	f8df e104 	ldr.w	lr, [pc, #260]	; 8007940 <currentDayAllPlan+0x15c>
 800783c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8007840:	f89e e000 	ldrb.w	lr, [lr]
 8007844:	45f4      	cmp	ip, lr
 8007846:	d109      	bne.n	800785c <currentDayAllPlan+0x78>
planID=readBytes[2];
 8007848:	78a3      	ldrb	r3, [r4, #2]
 800784a:	f889 3000 	strb.w	r3, [r9]
mapID=readBytes[4];
 800784e:	4b37      	ldr	r3, [pc, #220]	; (800792c <currentDayAllPlan+0x148>)
 8007850:	7920      	ldrb	r0, [r4, #4]
 8007852:	7018      	strb	r0, [r3, #0]
noOfPhases_Map=readBytes[5];
 8007854:	4b36      	ldr	r3, [pc, #216]	; (8007930 <currentDayAllPlan+0x14c>)
enterLoop=1;
 8007856:	2701      	movs	r7, #1
noOfPhases_Map=readBytes[5];
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e00d      	b.n	8007878 <currentDayAllPlan+0x94>
if(!((dateID==0)||(dayID == 0)))
 800785c:	2b00      	cmp	r3, #0
 800785e:	d057      	beq.n	8007910 <currentDayAllPlan+0x12c>
 8007860:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8007940 <currentDayAllPlan+0x15c>
 8007864:	f89e e000 	ldrb.w	lr, [lr]
 8007868:	f1be 0f00 	cmp.w	lr, #0
 800786c:	d052      	beq.n	8007914 <currentDayAllPlan+0x130>
if((dateID==readBytes[0])||(dayID ==readBytes[1])){
 800786e:	4298      	cmp	r0, r3
 8007870:	d0ea      	beq.n	8007848 <currentDayAllPlan+0x64>
 8007872:	7863      	ldrb	r3, [r4, #1]
 8007874:	4573      	cmp	r3, lr
 8007876:	d0e7      	beq.n	8007848 <currentDayAllPlan+0x64>
if(!((planID==0x00)&&(mapID==0x00)))
 8007878:	f899 3000 	ldrb.w	r3, [r9]
 800787c:	b91b      	cbnz	r3, 8007886 <currentDayAllPlan+0xa2>
 800787e:	4b2b      	ldr	r3, [pc, #172]	; (800792c <currentDayAllPlan+0x148>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d03f      	beq.n	8007906 <currentDayAllPlan+0x122>
if(enterLoop==1)
 8007886:	2f01      	cmp	r7, #1
 8007888:	d13d      	bne.n	8007906 <currentDayAllPlan+0x122>
 800788a:	463b      	mov	r3, r7
for(int i=1;i<totalNoOfMap+1;i++)
 800788c:	4a29      	ldr	r2, [pc, #164]	; (8007934 <currentDayAllPlan+0x150>)
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	4293      	cmp	r3, r2
 8007892:	dc38      	bgt.n	8007906 <currentDayAllPlan+0x122>
 8007894:	9101      	str	r1, [sp, #4]
 8007896:	9300      	str	r3, [sp, #0]
clearReadBytes();
 8007898:	f7fd fd1c 	bl	80052d4 <clearReadBytes>
readPlanSD(counter);
 800789c:	4650      	mov	r0, sl
 800789e:	f7fd fdb7 	bl	8005410 <readPlanSD>
if(planID==readBytes[0])
 80078a2:	9901      	ldr	r1, [sp, #4]
 80078a4:	f899 2000 	ldrb.w	r2, [r9]
 80078a8:	7808      	ldrb	r0, [r1, #0]
 80078aa:	9b00      	ldr	r3, [sp, #0]
 80078ac:	4282      	cmp	r2, r0
 counter=counter+19;
 80078ae:	f10a 0a13 	add.w	sl, sl, #19
if(planID==readBytes[0])
 80078b2:	d131      	bne.n	8007918 <currentDayAllPlan+0x134>
	phaseMapCnt++;
 80078b4:	4820      	ldr	r0, [pc, #128]	; (8007938 <currentDayAllPlan+0x154>)
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	6003      	str	r3, [r0, #0]
	phaseMapArray[mapCounter_Phase]=dateID;
 80078bc:	481a      	ldr	r0, [pc, #104]	; (8007928 <currentDayAllPlan+0x144>)
 80078be:	4b1f      	ldr	r3, [pc, #124]	; (800793c <currentDayAllPlan+0x158>)
 80078c0:	7800      	ldrb	r0, [r0, #0]
 80078c2:	5558      	strb	r0, [r3, r5]
	phaseMapArray[mapCounter_Phase+1]=dayID;
 80078c4:	442b      	add	r3, r5
 80078c6:	481e      	ldr	r0, [pc, #120]	; (8007940 <currentDayAllPlan+0x15c>)
	phaseMapArray[mapCounter_Phase+2]=planID;
 80078c8:	709a      	strb	r2, [r3, #2]
	phaseMapArray[mapCounter_Phase+3]=mapID;
 80078ca:	4a18      	ldr	r2, [pc, #96]	; (800792c <currentDayAllPlan+0x148>)
	phaseMapArray[mapCounter_Phase+1]=dayID;
 80078cc:	7800      	ldrb	r0, [r0, #0]
	phaseMapArray[mapCounter_Phase+3]=mapID;
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	70da      	strb	r2, [r3, #3]
	phaseMapArray[mapCounter_Phase+4]=noOfPhases_Map;
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <currentDayAllPlan+0x14c>)
	phaseMapArray[mapCounter_Phase+1]=dayID;
 80078d4:	7058      	strb	r0, [r3, #1]
	phaseMapArray[mapCounter_Phase+4]=noOfPhases_Map;
 80078d6:	6812      	ldr	r2, [r2, #0]
 80078d8:	711a      	strb	r2, [r3, #4]
	phaseMapArray[mapCounter_Phase+5]=0xFF;
 80078da:	22ff      	movs	r2, #255	; 0xff
 80078dc:	715a      	strb	r2, [r3, #5]
planDetailsArray[ptr+i]=readBytes[i];
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <currentDayAllPlan+0x160>)
	mapCounter_Phase=mapCounter_Phase+6;
 80078e0:	3506      	adds	r5, #6
for(int i=0;i<19;i++){
 80078e2:	2300      	movs	r3, #0
planDetailsArray[ptr+i]=readBytes[i];
 80078e4:	4442      	add	r2, r8
 80078e6:	5cc8      	ldrb	r0, [r1, r3]
 80078e8:	54d0      	strb	r0, [r2, r3]
for(int i=0;i<19;i++){
 80078ea:	3301      	adds	r3, #1
 80078ec:	2b13      	cmp	r3, #19
 80078ee:	d1fa      	bne.n	80078e6 <currentDayAllPlan+0x102>
        planTime[j]= readBytes[j+2];
 80078f0:	4b15      	ldr	r3, [pc, #84]	; (8007948 <currentDayAllPlan+0x164>)
 80078f2:	78a2      	ldrb	r2, [r4, #2]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	78e2      	ldrb	r2, [r4, #3]
 80078f8:	705a      	strb	r2, [r3, #1]
 80078fa:	7922      	ldrb	r2, [r4, #4]
 80078fc:	709a      	strb	r2, [r3, #2]
 80078fe:	7962      	ldrb	r2, [r4, #5]
 8007900:	70da      	strb	r2, [r3, #3]
       ptr=ptr+19;
 8007902:	f108 0813 	add.w	r8, r8, #19
counterOfPlan=ptr;
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <currentDayAllPlan+0x168>)
for(int i=1;i<totalNoOfMap+1;i++){
 8007908:	3601      	adds	r6, #1
counterOfPlan=ptr;
 800790a:	f8c3 8000 	str.w	r8, [r3]
 800790e:	e773      	b.n	80077f8 <currentDayAllPlan+0x14>
enterLoop=0;
 8007910:	461f      	mov	r7, r3
 8007912:	e7b1      	b.n	8007878 <currentDayAllPlan+0x94>
 8007914:	4677      	mov	r7, lr
 8007916:	e7af      	b.n	8007878 <currentDayAllPlan+0x94>
for(int i=1;i<totalNoOfMap+1;i++)
 8007918:	3301      	adds	r3, #1
 800791a:	e7b7      	b.n	800788c <currentDayAllPlan+0xa8>
 800791c:	0800982f 	.word	0x0800982f
 8007920:	20000314 	.word	0x20000314
 8007924:	200000f4 	.word	0x200000f4
 8007928:	200000bc 	.word	0x200000bc
 800792c:	200039ec 	.word	0x200039ec
 8007930:	2000375c 	.word	0x2000375c
 8007934:	2000011c 	.word	0x2000011c
 8007938:	200000f0 	.word	0x200000f0
 800793c:	200036a4 	.word	0x200036a4
 8007940:	200000be 	.word	0x200000be
 8007944:	20003bb5 	.word	0x20003bb5
 8007948:	20001148 	.word	0x20001148
 800794c:	200000b8 	.word	0x200000b8
 8007950:	20003651 	.word	0x20003651

08007954 <getCurrentPlanTotalNoOfPhases>:
//		}
//
//	}
//}

void getCurrentPlanTotalNoOfPhases(){
 8007954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
int phaseId=0;
int mapID=0;
uint32_t flashAdd=ADDR_FLASH_SECTOR_10;
//int ptr=0;
/*----------get the current plan's , phaseMap from mapPhase.txt file-------- */
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007958:	2600      	movs	r6, #0
 800795a:	4c3f      	ldr	r4, [pc, #252]	; (8007a58 <getCurrentPlanTotalNoOfPhases+0x104>)
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
	{
		SDcardReadSeek("mapPhase.txt", 6, seekCnt);
		seekCnt=seekCnt+6;
		if(phaseMap==readBytes[1]){
 800795c:	f8df a120 	ldr.w	sl, [pc, #288]	; 8007a80 <getCurrentPlanTotalNoOfPhases+0x12c>
int counterOfList=0;
 8007960:	46b0      	mov	r8, r6
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007962:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <getCurrentPlanTotalNoOfPhases+0x108>)
 8007964:	4f3e      	ldr	r7, [pc, #248]	; (8007a60 <getCurrentPlanTotalNoOfPhases+0x10c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	429e      	cmp	r6, r3
 800796a:	db13      	blt.n	8007994 <getCurrentPlanTotalNoOfPhases+0x40>
     if(noOfPhasesInMapID==cnt1)
    	 break;
	}
	cnt=cnt+6;
}
SDcardReadSeek("phase.txt", 350, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007972:	483c      	ldr	r0, [pc, #240]	; (8007a64 <getCurrentPlanTotalNoOfPhases+0x110>)
uint32_t flashAdd=ADDR_FLASH_SECTOR_10;
 8007974:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007a84 <getCurrentPlanTotalNoOfPhases+0x130>
		/*--------read phase from eeprom-------end-------*/

		/*--------read phase from flash start-----------*/
		/*--------read current day plan in flash---------*/
		  HAL_FLASH_Unlock();
		  Flash_ReadByte(flashAdd,readBytes,17);
 8007978:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007a80 <getCurrentPlanTotalNoOfPhases+0x12c>
SDcardReadSeek("phase.txt", 350, 0);
 800797c:	f7fd f852 	bl	8004a24 <SDcardReadSeek>
clearReadBytes();
 8007980:	f7fd fca8 	bl	80052d4 <clearReadBytes>
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007984:	2500      	movs	r5, #0
counterOfList=0;
 8007986:	462e      	mov	r6, r5
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	429d      	cmp	r5, r3
 800798c:	db32      	blt.n	80079f4 <getCurrentPlanTotalNoOfPhases+0xa0>





}
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
 8007994:	683b      	ldr	r3, [r7, #0]
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 8007996:	7921      	ldrb	r1, [r4, #4]
 8007998:	4a33      	ldr	r2, [pc, #204]	; (8007a68 <getCurrentPlanTotalNoOfPhases+0x114>)
	phaseMap=phaseMapArray[cnt+3];
 800799a:	f894 b003 	ldrb.w	fp, [r4, #3]
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 800799e:	6011      	str	r1, [r2, #0]
	totalNoOfPhasesInMapID=totalNoOfPhasesInMapID+noOfPhasesInMapID;
 80079a0:	440b      	add	r3, r1
 80079a2:	603b      	str	r3, [r7, #0]
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 80079a4:	2500      	movs	r5, #0
 80079a6:	4b31      	ldr	r3, [pc, #196]	; (8007a6c <getCurrentPlanTotalNoOfPhases+0x118>)
	cnt1=0;
 80079a8:	46a9      	mov	r9, r5
 80079aa:	4617      	mov	r7, r2
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	2106      	movs	r1, #6
 80079b0:	4285      	cmp	r5, r0
 80079b2:	fb01 f205 	mul.w	r2, r1, r5
 80079b6:	dd02      	ble.n	80079be <getCurrentPlanTotalNoOfPhases+0x6a>
for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 80079b8:	3601      	adds	r6, #1
 80079ba:	3406      	adds	r4, #6
 80079bc:	e7d1      	b.n	8007962 <getCurrentPlanTotalNoOfPhases+0xe>
		SDcardReadSeek("mapPhase.txt", 6, seekCnt);
 80079be:	482c      	ldr	r0, [pc, #176]	; (8007a70 <getCurrentPlanTotalNoOfPhases+0x11c>)
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	f7fd f82f 	bl	8004a24 <SDcardReadSeek>
		if(phaseMap==readBytes[1]){
 80079c6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	455a      	cmp	r2, fp
 80079ce:	d10c      	bne.n	80079ea <getCurrentPlanTotalNoOfPhases+0x96>
				phaseMapIDList[i+counterOfList]=readBytes[i];
 80079d0:	4928      	ldr	r1, [pc, #160]	; (8007a74 <getCurrentPlanTotalNoOfPhases+0x120>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	4441      	add	r1, r8
 80079d6:	f81a 0002 	ldrb.w	r0, [sl, r2]
 80079da:	5488      	strb	r0, [r1, r2]
			for(int i=0;i<6;i++)
 80079dc:	3201      	adds	r2, #1
 80079de:	2a06      	cmp	r2, #6
 80079e0:	d1f9      	bne.n	80079d6 <getCurrentPlanTotalNoOfPhases+0x82>
			counterOfList=counterOfList+6;
 80079e2:	f108 0806 	add.w	r8, r8, #6
			cnt1++;
 80079e6:	f109 0901 	add.w	r9, r9, #1
     if(noOfPhasesInMapID==cnt1)
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4591      	cmp	r9, r2
 80079ee:	d0e3      	beq.n	80079b8 <getCurrentPlanTotalNoOfPhases+0x64>
	for (int i=0;i<phaseMapCnt1+1;i++)// total no of phases
 80079f0:	3501      	adds	r5, #1
 80079f2:	e7db      	b.n	80079ac <getCurrentPlanTotalNoOfPhases+0x58>
	eepromAddress=0;
 80079f4:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <getCurrentPlanTotalNoOfPhases+0x124>)
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 80079f6:	f8df b090 	ldr.w	fp, [pc, #144]	; 8007a88 <getCurrentPlanTotalNoOfPhases+0x134>
	eepromAddress=0;
 80079fa:	2400      	movs	r4, #0
 80079fc:	601c      	str	r4, [r3, #0]
 80079fe:	2206      	movs	r2, #6
	phaseId=phaseMapIDList[cnt+2];
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <getCurrentPlanTotalNoOfPhases+0x120>)
 8007a02:	436a      	muls	r2, r5
 8007a04:	4413      	add	r3, r2
 8007a06:	f893 a002 	ldrb.w	sl, [r3, #2]
	noOfPhasesInMapID=phaseMapArray[cnt+4];
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <getCurrentPlanTotalNoOfPhases+0x104>)
 8007a0c:	441a      	add	r2, r3
 8007a0e:	7911      	ldrb	r1, [r2, #4]
 8007a10:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <getCurrentPlanTotalNoOfPhases+0x114>)
 8007a12:	6011      	str	r1, [r2, #0]
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 8007a14:	f89b 2000 	ldrb.w	r2, [fp]
 8007a18:	4294      	cmp	r4, r2
 8007a1a:	da18      	bge.n	8007a4e <getCurrentPlanTotalNoOfPhases+0xfa>
		  HAL_FLASH_Unlock();
 8007a1c:	f7f8 fefc 	bl	8000818 <HAL_FLASH_Unlock>
		  Flash_ReadByte(flashAdd,readBytes,17);
 8007a20:	2211      	movs	r2, #17
 8007a22:	4649      	mov	r1, r9
 8007a24:	4640      	mov	r0, r8
 8007a26:	f7fd f8ed 	bl	8004c04 <Flash_ReadByte>
		  HAL_FLASH_Lock();
 8007a2a:	f7f8 ff07 	bl	800083c <HAL_FLASH_Lock>
		if(phaseId==readBytes[3]){
 8007a2e:	f899 2003 	ldrb.w	r2, [r9, #3]
 8007a32:	4552      	cmp	r2, sl
		  flashAdd=flashAdd+17;
 8007a34:	f108 0811 	add.w	r8, r8, #17
		if(phaseId==readBytes[3]){
 8007a38:	d10b      	bne.n	8007a52 <getCurrentPlanTotalNoOfPhases+0xfe>
				phaseList[i+counterOfList]=readBytes[i];
 8007a3a:	4a10      	ldr	r2, [pc, #64]	; (8007a7c <getCurrentPlanTotalNoOfPhases+0x128>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4432      	add	r2, r6
 8007a40:	f819 1003 	ldrb.w	r1, [r9, r3]
 8007a44:	54d1      	strb	r1, [r2, r3]
			for(int i=0;i<15;i++)
 8007a46:	3301      	adds	r3, #1
 8007a48:	2b0f      	cmp	r3, #15
 8007a4a:	d1f9      	bne.n	8007a40 <getCurrentPlanTotalNoOfPhases+0xec>
			counterOfList=counterOfList+18;
 8007a4c:	3612      	adds	r6, #18
for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007a4e:	3501      	adds	r5, #1
 8007a50:	e79a      	b.n	8007988 <getCurrentPlanTotalNoOfPhases+0x34>
	for (int i=0;i<totalNoOfPhases;i++)// total no of phases
 8007a52:	3401      	adds	r4, #1
 8007a54:	e7de      	b.n	8007a14 <getCurrentPlanTotalNoOfPhases+0xc0>
 8007a56:	bf00      	nop
 8007a58:	200036a4 	.word	0x200036a4
 8007a5c:	200000f0 	.word	0x200000f0
 8007a60:	20000124 	.word	0x20000124
 8007a64:	0800988f 	.word	0x0800988f
 8007a68:	200000e8 	.word	0x200000e8
 8007a6c:	200000f4 	.word	0x200000f4
 8007a70:	0800983b 	.word	0x0800983b
 8007a74:	20003a1e 	.word	0x20003a1e
 8007a78:	200000c0 	.word	0x200000c0
 8007a7c:	200037f8 	.word	0x200037f8
 8007a80:	20000314 	.word	0x20000314
 8007a84:	080c0000 	.word	0x080c0000
 8007a88:	20000120 	.word	0x20000120

08007a8c <getCurrentPlanPhases>:


void getCurrentPlanPhases()
{
 8007a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int cnt3=0;
	uint8_t phaseMapID;



	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007a90:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <getCurrentPlanPhases+0xdc>)
	{
		if(plan_ID==phaseMapArray[cnt+2])
 8007a92:	4d36      	ldr	r5, [pc, #216]	; (8007b6c <getCurrentPlanPhases+0xe0>)
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007a94:	6819      	ldr	r1, [r3, #0]
		if(plan_ID==phaseMapArray[cnt+2])
 8007a96:	4b36      	ldr	r3, [pc, #216]	; (8007b70 <getCurrentPlanPhases+0xe4>)
 8007a98:	781c      	ldrb	r4, [r3, #0]
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2006      	movs	r0, #6
 8007a9e:	428a      	cmp	r2, r1
 8007aa0:	fb00 f302 	mul.w	r3, r0, r2
 8007aa4:	da09      	bge.n	8007aba <getCurrentPlanPhases+0x2e>
		if(plan_ID==phaseMapArray[cnt+2])
 8007aa6:	442b      	add	r3, r5
 8007aa8:	789e      	ldrb	r6, [r3, #2]
 8007aaa:	42a6      	cmp	r6, r4
 8007aac:	d146      	bne.n	8007b3c <getCurrentPlanPhases+0xb0>
		{
			mapIDForCurrentPhases=phaseMapArray[cnt+3];
 8007aae:	4a31      	ldr	r2, [pc, #196]	; (8007b74 <getCurrentPlanPhases+0xe8>)
 8007ab0:	78d9      	ldrb	r1, [r3, #3]
 8007ab2:	6011      	str	r1, [r2, #0]
			total_Phases=phaseMapArray[cnt+4];
 8007ab4:	791a      	ldrb	r2, [r3, #4]
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <getCurrentPlanPhases+0xec>)
 8007ab8:	601a      	str	r2, [r3, #0]
			break;
		}
		cnt=cnt+6;
	}

	uint8_t loopCnt=totalNoOfPhasesInMapID;
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <getCurrentPlanPhases+0xf0>)
	for (int mi=0;mi<loopCnt;mi++){

		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
		{

			Map_IDCurrent[cnt3]=phaseMapIDList[cnt2+2];// phaseID
 8007abc:	4830      	ldr	r0, [pc, #192]	; (8007b80 <getCurrentPlanPhases+0xf4>)
	uint8_t loopCnt=totalNoOfPhasesInMapID;
 8007abe:	681f      	ldr	r7, [r3, #0]
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 8007ac0:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <getCurrentPlanPhases+0xe8>)
	for (int mi=0;mi<loopCnt;mi++){
 8007ac2:	2200      	movs	r2, #0
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <getCurrentPlanPhases+0xf8>)
	int cnt3=0;
 8007ac8:	4611      	mov	r1, r2
	for (int mi=0;mi<loopCnt;mi++){
 8007aca:	b2fc      	uxtb	r4, r7
 8007acc:	42a2      	cmp	r2, r4
 8007ace:	db37      	blt.n	8007b40 <getCurrentPlanPhases+0xb4>




	cnt2=0;
	count=0;
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	; (8007b88 <getCurrentPlanPhases+0xfc>)
	{

//		cnt1=0;
//		count=0;
		phaseMapID=Map_IDCurrent[cnt2];
		for (int k=0;k<total_Phases;k++)// total no of phases
 8007ad2:	4929      	ldr	r1, [pc, #164]	; (8007b78 <getCurrentPlanPhases+0xec>)
 8007ad4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007b8c <getCurrentPlanPhases+0x100>
//			if(mapIDForCurrentPhases==phaseList[counterOfList+2])
			if(phaseMapID==phaseList[counterOfList+3])
			{
				for(int l=0;l<15;l++)
				{
					currentPlanPhases[l+count]=phaseList[l+counterOfList-2];
 8007ad8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8007b90 <getCurrentPlanPhases+0x104>
		for (int k=0;k<total_Phases;k++)// total no of phases
 8007adc:	f8d1 e000 	ldr.w	lr, [r1]
 8007ae0:	9201      	str	r2, [sp, #4]
	count=0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6013      	str	r3, [r2, #0]
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4618      	mov	r0, r3
	int counterOfList=0;
 8007aea:	461d      	mov	r5, r3
	int cnt1=0;
 8007aec:	461c      	mov	r4, r3
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007aee:	42b8      	cmp	r0, r7
 8007af0:	da1e      	bge.n	8007b30 <getCurrentPlanPhases+0xa4>
		phaseMapID=Map_IDCurrent[cnt2];
 8007af2:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8007af6:	4a22      	ldr	r2, [pc, #136]	; (8007b80 <getCurrentPlanPhases+0xf4>)
 8007af8:	f816 a002 	ldrb.w	sl, [r6, r2]
		for (int k=0;k<total_Phases;k++)// total no of phases
 8007afc:	2600      	movs	r6, #0
 8007afe:	4576      	cmp	r6, lr
 8007b00:	da14      	bge.n	8007b2c <getCurrentPlanPhases+0xa0>
 8007b02:	eb05 0c08 	add.w	ip, r5, r8
			if(phaseMapID==phaseList[counterOfList+3])
 8007b06:	f89c b003 	ldrb.w	fp, [ip, #3]
 8007b0a:	45d3      	cmp	fp, sl
 8007b0c:	d126      	bne.n	8007b5c <getCurrentPlanPhases+0xd0>
 8007b0e:	2300      	movs	r3, #0
					currentPlanPhases[l+count]=phaseList[l+counterOfList-2];
 8007b10:	eb01 0609 	add.w	r6, r1, r9
 8007b14:	eb0c 0a03 	add.w	sl, ip, r3
 8007b18:	f81a ac02 	ldrb.w	sl, [sl, #-2]
 8007b1c:	f806 a003 	strb.w	sl, [r6, r3]
				for(int l=0;l<15;l++)
 8007b20:	3301      	adds	r3, #1
 8007b22:	2b0f      	cmp	r3, #15
 8007b24:	d1f6      	bne.n	8007b14 <getCurrentPlanPhases+0x88>

				}
				count=count+18;
 8007b26:	3112      	adds	r1, #18
				cnt1++;
 8007b28:	3401      	adds	r4, #1
				 break;
 8007b2a:	2301      	movs	r3, #1
	//    	 break;
		}
		cnt2=cnt2+3;
		cnt=cnt+6;
//		counterOfList=counterOfList+18;
		     if(total_Phases==cnt1)
 8007b2c:	4574      	cmp	r4, lr
 8007b2e:	d118      	bne.n	8007b62 <getCurrentPlanPhases+0xd6>
 8007b30:	b10b      	cbz	r3, 8007b36 <getCurrentPlanPhases+0xaa>
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	6019      	str	r1, [r3, #0]





}
 8007b36:	b003      	add	sp, #12
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(int i=0;i<phaseMapCnt;i++)// current day no of plans
 8007b3c:	3201      	adds	r2, #1
 8007b3e:	e7ae      	b.n	8007a9e <getCurrentPlanPhases+0x12>
		if(mapIDForCurrentPhases==phaseMapIDList[cnt2+1])
 8007b40:	785e      	ldrb	r6, [r3, #1]
 8007b42:	42ae      	cmp	r6, r5
 8007b44:	d107      	bne.n	8007b56 <getCurrentPlanPhases+0xca>
			Map_IDCurrent[cnt3]=phaseMapIDList[cnt2+2];// phaseID
 8007b46:	789e      	ldrb	r6, [r3, #2]
 8007b48:	5446      	strb	r6, [r0, r1]
			Map_IDCurrent[cnt3+1]=phaseMapIDList[cnt2+3];//phaseMapId
 8007b4a:	1846      	adds	r6, r0, r1
 8007b4c:	f893 e003 	ldrb.w	lr, [r3, #3]
 8007b50:	f886 e001 	strb.w	lr, [r6, #1]
			cnt3=cnt3+3;
 8007b54:	3103      	adds	r1, #3
	for (int mi=0;mi<loopCnt;mi++){
 8007b56:	3201      	adds	r2, #1
 8007b58:	3306      	adds	r3, #6
 8007b5a:	e7b7      	b.n	8007acc <getCurrentPlanPhases+0x40>
			counterOfList=counterOfList+18;
 8007b5c:	3512      	adds	r5, #18
		for (int k=0;k<total_Phases;k++)// total no of phases
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7cd      	b.n	8007afe <getCurrentPlanPhases+0x72>
	for(int j=0;j<totalNoOfPhasesInMapID;j++)// current day no of phases
 8007b62:	3001      	adds	r0, #1
 8007b64:	e7c3      	b.n	8007aee <getCurrentPlanPhases+0x62>
 8007b66:	bf00      	nop
 8007b68:	200000f0 	.word	0x200000f0
 8007b6c:	200036a4 	.word	0x200036a4
 8007b70:	20003650 	.word	0x20003650
 8007b74:	200000e0 	.word	0x200000e0
 8007b78:	2000012c 	.word	0x2000012c
 8007b7c:	20000124 	.word	0x20000124
 8007b80:	20003d86 	.word	0x20003d86
 8007b84:	20003a1e 	.word	0x20003a1e
 8007b88:	20003af0 	.word	0x20003af0
 8007b8c:	200037f8 	.word	0x200037f8
 8007b90:	20003c64 	.word	0x20003c64

08007b94 <DetectChange>:

/*----------------detect which side is being changed and which bit-----------*/
unsigned char DetectChange(unsigned char currentSide13Color,unsigned char previousSide13Color)
//		,unsigned char currentSide24Color,unsigned char previousSide24Color)
{
 8007b94:	b5f0      	push	{r4, r5, r6, r7, lr}
//
//	uint8_t sideNo1,sideNo2,sideNo3,sideNo4,color;
//
//	/*------------ for side13--------------*/
static unsigned char val,i,ChangeByte13;
ChangeByte13=0;
 8007b96:	4a10      	ldr	r2, [pc, #64]	; (8007bd8 <DetectChange+0x44>)
for(i=0;i<8;i++)
 8007b98:	4c10      	ldr	r4, [pc, #64]	; (8007bdc <DetectChange+0x48>)
ChangeByte13=0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	7013      	strb	r3, [r2, #0]
for(i=0;i<8;i++)
 8007b9e:	7023      	strb	r3, [r4, #0]
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	461f      	mov	r7, r3
 8007ba4:	461e      	mov	r6, r3
{
val = 0x01 << i;
 8007ba6:	f04f 0c01 	mov.w	ip, #1

if( (currentSide13Color & val) != (previousSide13Color & val) )
 8007baa:	4041      	eors	r1, r0
for(i=0;i<8;i++)
 8007bac:	fa5f fe83 	uxtb.w	lr, r3
 8007bb0:	f1be 0f08 	cmp.w	lr, #8
 8007bb4:	d106      	bne.n	8007bc4 <DetectChange+0x30>
 8007bb6:	b107      	cbz	r7, 8007bba <DetectChange+0x26>
 8007bb8:	7016      	strb	r6, [r2, #0]
 8007bba:	b10d      	cbz	r5, 8007bc0 <DetectChange+0x2c>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	7023      	strb	r3, [r4, #0]




return ChangeByte13;
}
 8007bc0:	7810      	ldrb	r0, [r2, #0]
 8007bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
val = 0x01 << i;
 8007bc4:	fa0c f503 	lsl.w	r5, ip, r3
 8007bc8:	b2ed      	uxtb	r5, r5
if( (currentSide13Color & val) != (previousSide13Color & val) )
 8007bca:	420d      	tst	r5, r1
ChangeByte13 |= val;
 8007bcc:	bf1c      	itt	ne
 8007bce:	432e      	orrne	r6, r5
 8007bd0:	2701      	movne	r7, #1
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	2501      	movs	r5, #1
 8007bd6:	e7e9      	b.n	8007bac <DetectChange+0x18>
 8007bd8:	200000ac 	.word	0x200000ac
 8007bdc:	200000d0 	.word	0x200000d0

08007be0 <sideChange>:
}


void sideChange(char previousSide13Color,char currentSide13Color
		,char previousSide24Color,char currentSide24Color)
{
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	460c      	mov	r4, r1
	char sideNoChanged,color;



		/*-------check side13------*/
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 8007be6:	4601      	mov	r1, r0
 8007be8:	4620      	mov	r0, r4
{
 8007bea:	461d      	mov	r5, r3
 8007bec:	4690      	mov	r8, r2
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 8007bee:	f7ff ffd1 	bl	8007b94 <DetectChange>
 8007bf2:	4e1e      	ldr	r6, [pc, #120]	; (8007c6c <sideChange+0x8c>)
 8007bf4:	4f1e      	ldr	r7, [pc, #120]	; (8007c70 <sideChange+0x90>)
	    if(currentSide13Color==0x88){
 8007bf6:	2c88      	cmp	r4, #136	; 0x88
	    	changedSide=0;
 8007bf8:	bf0a      	itet	eq
 8007bfa:	2300      	moveq	r3, #0
	    changedSide =DetectChange(currentSide13Color,previousSide13Color);
 8007bfc:	7030      	strbne	r0, [r6, #0]
	    	changedSide=0;
 8007bfe:	7033      	strbeq	r3, [r6, #0]
//	    {
//	    	changedSide=2;
//	    }
//	    changedSide=1;

		if(!(changedSide==0))
 8007c00:	7833      	ldrb	r3, [r6, #0]
 8007c02:	b183      	cbz	r3, 8007c26 <sideChange+0x46>
		{

			/*------side 1 is changed-----*/
					side= changedSide >> 4;
 8007c04:	091a      	lsrs	r2, r3, #4
 8007c06:	401c      	ands	r4, r3
 8007c08:	703a      	strb	r2, [r7, #0]
					if(side == 0)
					{
						sideNoChanged=3;
						color=currentSide13Color & changedSide;
 8007c0a:	b2e4      	uxtb	r4, r4
					if(side == 0)
 8007c0c:	b91a      	cbnz	r2, 8007c16 <sideChange+0x36>
			}

			break;

		case 3:
			if(color== 0x03)//for green
 8007c0e:	2c03      	cmp	r4, #3
 8007c10:	d123      	bne.n	8007c5a <sideChange+0x7a>
			{
				Disp[28]=planS3GT;
 8007c12:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <sideChange+0x94>)
 8007c14:	e002      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x30)//for green
 8007c16:	2c30      	cmp	r4, #48	; 0x30
 8007c18:	d117      	bne.n	8007c4a <sideChange+0x6a>
            Disp[28]=planS1GT;
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <sideChange+0x98>)
			{
				Disp[28]=planS4GT;
			}
			if(color== 0x04) //for yellow
			{
				Disp[28]=planA4GT;
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <sideChange+0x9c>)
 8007c20:	771a      	strb	r2, [r3, #28]
 8007c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			changedSide =DetectChange(currentSide24Color,previousSide24Color);
 8007c26:	4628      	mov	r0, r5
 8007c28:	4641      	mov	r1, r8
 8007c2a:	f7ff ffb3 	bl	8007b94 <DetectChange>
				side=changedSide >> 4;
 8007c2e:	0903      	lsrs	r3, r0, #4
 8007c30:	4005      	ands	r5, r0
			changedSide =DetectChange(currentSide24Color,previousSide24Color);
 8007c32:	7030      	strb	r0, [r6, #0]
				side=changedSide >> 4;
 8007c34:	703b      	strb	r3, [r7, #0]
					color=currentSide24Color & changedSide;
 8007c36:	b2ed      	uxtb	r5, r5
				if(side == 0)
 8007c38:	b91b      	cbnz	r3, 8007c42 <sideChange+0x62>
			if(color== 0x03)//for green
 8007c3a:	2d03      	cmp	r5, #3
 8007c3c:	d111      	bne.n	8007c62 <sideChange+0x82>
				Disp[28]=planS4GT;
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <sideChange+0xa0>)
 8007c40:	e7ec      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x30)//for green
 8007c42:	2d30      	cmp	r5, #48	; 0x30
 8007c44:	d105      	bne.n	8007c52 <sideChange+0x72>
				Disp[28]=planS2GT;
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <sideChange+0xa4>)
 8007c48:	e7e8      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x40) //for yellow
 8007c4a:	2c40      	cmp	r4, #64	; 0x40
 8007c4c:	d1e9      	bne.n	8007c22 <sideChange+0x42>
				Disp[28]=planA1GT ;
 8007c4e:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <sideChange+0xa8>)
 8007c50:	e7e4      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x40) //for yellow
 8007c52:	2d40      	cmp	r5, #64	; 0x40
 8007c54:	d1e5      	bne.n	8007c22 <sideChange+0x42>
				Disp[28]=planA2GT;
 8007c56:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <sideChange+0xac>)
 8007c58:	e7e0      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x04) //for yellow
 8007c5a:	2c04      	cmp	r4, #4
 8007c5c:	d1e1      	bne.n	8007c22 <sideChange+0x42>
				Disp[28]=planA3GT;
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <sideChange+0xb0>)
 8007c60:	e7dc      	b.n	8007c1c <sideChange+0x3c>
			if(color== 0x04) //for yellow
 8007c62:	2d04      	cmp	r5, #4
 8007c64:	d1dd      	bne.n	8007c22 <sideChange+0x42>
				Disp[28]=planA4GT;
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <sideChange+0xb4>)
 8007c68:	e7d8      	b.n	8007c1c <sideChange+0x3c>
 8007c6a:	bf00      	nop
 8007c6c:	200039ed 	.word	0x200039ed
 8007c70:	20001607 	.word	0x20001607
 8007c74:	20003a1c 	.word	0x20003a1c
 8007c78:	200037dc 	.word	0x200037dc
 8007c7c:	200010dd 	.word	0x200010dd
 8007c80:	20003c4b 	.word	0x20003c4b
 8007c84:	2000160d 	.word	0x2000160d
 8007c88:	20003c4c 	.word	0x20003c4c
 8007c8c:	20003a14 	.word	0x20003a14
 8007c90:	20003af6 	.word	0x20003af6
 8007c94:	20003b00 	.word	0x20003b00

08007c98 <clearPrimaryAndSecByte>:

}


void clearPrimaryAndSecByte()
{
 8007c98:	b530      	push	{r4, r5, lr}

	int x=0;
 8007c9a:	2300      	movs	r3, #0
	for(;x<6;x++)
	{
	primaryHorizontalByte[x] = 0x00;
 8007c9c:	4d08      	ldr	r5, [pc, #32]	; (8007cc0 <clearPrimaryAndSecByte+0x28>)
	secondaryHorizontalByte[x] = 0x00;
 8007c9e:	4c09      	ldr	r4, [pc, #36]	; (8007cc4 <clearPrimaryAndSecByte+0x2c>)
	primaryVerticalByte[x] = 0x00;
 8007ca0:	4809      	ldr	r0, [pc, #36]	; (8007cc8 <clearPrimaryAndSecByte+0x30>)
	secondaryVerticalByte[x] =  0x00;
 8007ca2:	490a      	ldr	r1, [pc, #40]	; (8007ccc <clearPrimaryAndSecByte+0x34>)
	primaryHorizontalByte[x] = 0x00;
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	secondaryHorizontalByte[x] = 0x00;
 8007caa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	primaryVerticalByte[x] = 0x00;
 8007cae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	secondaryVerticalByte[x] =  0x00;
 8007cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(;x<6;x++)
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d1f4      	bne.n	8007ca6 <clearPrimaryAndSecByte+0xe>

	}
}
 8007cbc:	bd30      	pop	{r4, r5, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20003664 	.word	0x20003664
 8007cc4:	20003610 	.word	0x20003610
 8007cc8:	200035f8 	.word	0x200035f8
 8007ccc:	20001610 	.word	0x20001610

08007cd0 <function8>:
	fileNo = 111;
 8007cd0:	4a76      	ldr	r2, [pc, #472]	; (8007eac <function8+0x1dc>)
	frame[29] = secondaryVerticalByte[1];//VerticalSide3
 8007cd2:	4877      	ldr	r0, [pc, #476]	; (8007eb0 <function8+0x1e0>)
	frame[30] = hundredPlaceSegment[1];
 8007cd4:	4977      	ldr	r1, [pc, #476]	; (8007eb4 <function8+0x1e4>)
int function8() {
 8007cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fileNo = 111;
 8007cda:	236f      	movs	r3, #111	; 0x6f
	frame[0] = 0x7E;
 8007cdc:	4c76      	ldr	r4, [pc, #472]	; (8007eb8 <function8+0x1e8>)
	fileNo = 111;
 8007cde:	7013      	strb	r3, [r2, #0]
	frame[0] = 0x7E;
 8007ce0:	227e      	movs	r2, #126	; 0x7e
 8007ce2:	7022      	strb	r2, [r4, #0]
	frame[1] = 0x7E;
 8007ce4:	7062      	strb	r2, [r4, #1]
	frame[3] = 66;   //byte size 2
 8007ce6:	2242      	movs	r2, #66	; 0x42
 8007ce8:	70e2      	strb	r2, [r4, #3]
	frame[4] = junctionId;   //junction id
 8007cea:	4a74      	ldr	r2, [pc, #464]	; (8007ebc <function8+0x1ec>)
	frame[6] = fileNo;   //file_num
 8007cec:	71a3      	strb	r3, [r4, #6]
	frame[4] = junctionId;   //junction id
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	7122      	strb	r2, [r4, #4]
	frame[7] = 0x08;   //function num
 8007cf2:	2308      	movs	r3, #8
	frame[5] = programVersionNo;   //program_version_number
 8007cf4:	4a72      	ldr	r2, [pc, #456]	; (8007ec0 <function8+0x1f0>)
	frame[7] = 0x08;   //function num
 8007cf6:	71e3      	strb	r3, [r4, #7]
	frame[8] = Disp[0];   //side1
 8007cf8:	4b72      	ldr	r3, [pc, #456]	; (8007ec4 <function8+0x1f4>)
	frame[5] = programVersionNo;   //program_version_number
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	7162      	strb	r2, [r4, #5]
	frame[8] = Disp[0];   //side1
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	7222      	strb	r2, [r4, #8]
	frame[9] = Disp[1];   //side2
 8007d02:	785a      	ldrb	r2, [r3, #1]
 8007d04:	7262      	strb	r2, [r4, #9]
	frame[10] = Disp[2];   //side3
 8007d06:	789a      	ldrb	r2, [r3, #2]
 8007d08:	72a2      	strb	r2, [r4, #10]
	frame[11] = Disp[3];   //side4
 8007d0a:	78da      	ldrb	r2, [r3, #3]
 8007d0c:	72e2      	strb	r2, [r4, #11]
	frame[13] = Disp[4];   //side13
 8007d0e:	791a      	ldrb	r2, [r3, #4]
 8007d10:	7362      	strb	r2, [r4, #13]
	frame[14] =Disp[5];   //side24
 8007d12:	795a      	ldrb	r2, [r3, #5]
 8007d14:	73a2      	strb	r2, [r4, #14]
	frame[16] =Disp[25];//readBytes[12];   //padestrainTime
 8007d16:	7e5a      	ldrb	r2, [r3, #25]
 8007d18:	7422      	strb	r2, [r4, #16]
	frame[18] = Disp[25];//readBytes[1];   //planMode
 8007d1a:	7e5b      	ldrb	r3, [r3, #25]
	frame[17] = plan_ID;//Disp[25];//readBytes[0];   //planNumb
 8007d1c:	4a6a      	ldr	r2, [pc, #424]	; (8007ec8 <function8+0x1f8>)
	frame[18] = Disp[25];//readBytes[1];   //planMode
 8007d1e:	74a3      	strb	r3, [r4, #18]
	frame[19] = clearenceMode;
 8007d20:	4b6a      	ldr	r3, [pc, #424]	; (8007ecc <function8+0x1fc>)
	frame[17] = plan_ID;//Disp[25];//readBytes[0];   //planNumb
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	7462      	strb	r2, [r4, #17]
	frame[2] = 0x00;   //byte size 1
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	f884 8002 	strb.w	r8, [r4, #2]
	frame[12] = 0;   //side5
 8007d2e:	f884 800c 	strb.w	r8, [r4, #12]
	frame[15] =0;   //side5
 8007d32:	f884 800f 	strb.w	r8, [r4, #15]
	frame[19] = clearenceMode;
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	74e3      	strb	r3, [r4, #19]
	frame[20] = sTime.Hours ;
 8007d3a:	4b65      	ldr	r3, [pc, #404]	; (8007ed0 <function8+0x200>)
	frame[27] = primaryVerticalByte[1];//VerticalSide1
 8007d3c:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8007f00 <function8+0x230>
	frame[20] = sTime.Hours ;
 8007d40:	781a      	ldrb	r2, [r3, #0]
	frame[21] = sTime.Minutes ;
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	7563      	strb	r3, [r4, #21]
	frame[22] = sDate.Date;
 8007d46:	4b63      	ldr	r3, [pc, #396]	; (8007ed4 <function8+0x204>)
	frame[20] = sTime.Hours ;
 8007d48:	7522      	strb	r2, [r4, #20]
	frame[22] = sDate.Date;
 8007d4a:	789a      	ldrb	r2, [r3, #2]
 8007d4c:	75a2      	strb	r2, [r4, #22]
	frame[23] = sDate.Month;//'1'
 8007d4e:	785a      	ldrb	r2, [r3, #1]
	frame[24] = sDate.Year;//'0' ; //'5' ;
 8007d50:	78db      	ldrb	r3, [r3, #3]
 8007d52:	7623      	strb	r3, [r4, #24]
	frame[25] = phase_ID;
 8007d54:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <function8+0x208>)
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007d56:	4d61      	ldr	r5, [pc, #388]	; (8007edc <function8+0x20c>)
	frame[25] = phase_ID;
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	7663      	strb	r3, [r4, #25]
	frame[26] = 0x30;//primaryHorizontalByte[1];//aspectColorFeedback  HorizontalSide1
 8007d5c:	2330      	movs	r3, #48	; 0x30
 8007d5e:	76a3      	strb	r3, [r4, #26]
	frame[27] = primaryVerticalByte[1];//VerticalSide1
 8007d60:	f8de 3004 	ldr.w	r3, [lr, #4]
 8007d64:	76e3      	strb	r3, [r4, #27]
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007d66:	686b      	ldr	r3, [r5, #4]
	frame[23] = sDate.Month;//'1'
 8007d68:	75e2      	strb	r2, [r4, #23]
	frame[28] = secondaryHorizontalByte[1];//secondaryForSide1  HorizontalSide3
 8007d6a:	7723      	strb	r3, [r4, #28]
	frame[31] = tenPlaceSegment[1];
 8007d6c:	4a5c      	ldr	r2, [pc, #368]	; (8007ee0 <function8+0x210>)
	frame[29] = secondaryVerticalByte[1];//VerticalSide3
 8007d6e:	6843      	ldr	r3, [r0, #4]
 8007d70:	7763      	strb	r3, [r4, #29]
	frame[30] = hundredPlaceSegment[1];
 8007d72:	684b      	ldr	r3, [r1, #4]
 8007d74:	77a3      	strb	r3, [r4, #30]
	frame[31] = tenPlaceSegment[1];
 8007d76:	6853      	ldr	r3, [r2, #4]
 8007d78:	77e3      	strb	r3, [r4, #31]
	frame[32] = unitPlaceSegment[1];
 8007d7a:	4b5a      	ldr	r3, [pc, #360]	; (8007ee4 <function8+0x214>)
 8007d7c:	685f      	ldr	r7, [r3, #4]
 8007d7e:	f884 7020 	strb.w	r7, [r4, #32]
	frame[33] = primaryHorizontalByte[2]; //side2  HorizontalSide2
 8007d82:	4f59      	ldr	r7, [pc, #356]	; (8007ee8 <function8+0x218>)
 8007d84:	7a3e      	ldrb	r6, [r7, #8]
 8007d86:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	frame[34] = primaryVerticalByte[2];//  VerticalSide2
 8007d8a:	f89e 6008 	ldrb.w	r6, [lr, #8]
 8007d8e:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
	frame[35] = secondaryHorizontalByte[2];
 8007d92:	7a2e      	ldrb	r6, [r5, #8]
 8007d94:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
	frame[36] = secondaryVerticalByte[2];
 8007d98:	7a06      	ldrb	r6, [r0, #8]
 8007d9a:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	frame[37] = hundredPlaceSegment[2];
 8007d9e:	7a0e      	ldrb	r6, [r1, #8]
 8007da0:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
	frame[38] = tenPlaceSegment[2];
 8007da4:	7a16      	ldrb	r6, [r2, #8]
 8007da6:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
	frame[39] = unitPlaceSegment[2];
 8007daa:	7a1e      	ldrb	r6, [r3, #8]
 8007dac:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
	frame[40] = primaryHorizontalByte[3]; //side3
 8007db0:	7b3e      	ldrb	r6, [r7, #12]
 8007db2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
	frame[41] = primaryVerticalByte[3];
 8007db6:	f89e 600c 	ldrb.w	r6, [lr, #12]
 8007dba:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
	frame[42] = secondaryHorizontalByte[3];
 8007dbe:	7b2e      	ldrb	r6, [r5, #12]
 8007dc0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
	frame[43] = secondaryVerticalByte[3];
 8007dc4:	7b06      	ldrb	r6, [r0, #12]
 8007dc6:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
	frame[44] = hundredPlaceSegment[3];
 8007dca:	7b0e      	ldrb	r6, [r1, #12]
 8007dcc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
	frame[45] = tenPlaceSegment[3];
 8007dd0:	7b16      	ldrb	r6, [r2, #12]
 8007dd2:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
	frame[46] = unitPlaceSegment[3];
 8007dd6:	7b1e      	ldrb	r6, [r3, #12]
 8007dd8:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
	frame[47] = primaryHorizontalByte[4]; //side4
 8007ddc:	7c3e      	ldrb	r6, [r7, #16]
 8007dde:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
	frame[48] = primaryVerticalByte[4];
 8007de2:	f89e 6010 	ldrb.w	r6, [lr, #16]
 8007de6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	frame[49] = secondaryHorizontalByte[4];
 8007dea:	7c2e      	ldrb	r6, [r5, #16]
 8007dec:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
	frame[50] = secondaryVerticalByte[4];
 8007df0:	7c06      	ldrb	r6, [r0, #16]
 8007df2:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    frame[51] = hundredPlaceSegment[4];
 8007df6:	7c0e      	ldrb	r6, [r1, #16]
 8007df8:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
    frame[52] = tenPlaceSegment[4];
 8007dfc:	7c16      	ldrb	r6, [r2, #16]
 8007dfe:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    frame[53] = unitPlaceSegment[4];
 8007e02:	7c1e      	ldrb	r6, [r3, #16]
    frame[60] = unitPlaceSegment[5];
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    frame[61] =powerStatus;
 8007e0a:	4b38      	ldr	r3, [pc, #224]	; (8007eec <function8+0x21c>)
	frame[54] = primaryHorizontalByte[5]; //side5
 8007e0c:	697f      	ldr	r7, [r7, #20]
    frame[61] =powerStatus;
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    frame[62] =communicationStatus;
 8007e14:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <function8+0x220>)
    frame[58] = hundredPlaceSegment[5];
 8007e16:	6949      	ldr	r1, [r1, #20]
    frame[62] =communicationStatus;
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    frame[63] =mapIDForCurrentPhases;//side5
 8007e1e:	4b35      	ldr	r3, [pc, #212]	; (8007ef4 <function8+0x224>)
    frame[59] = tenPlaceSegment[5];
 8007e20:	6952      	ldr	r2, [r2, #20]
    frame[63] =mapIDForCurrentPhases;//side5
 8007e22:	681b      	ldr	r3, [r3, #0]
	frame[54] = primaryHorizontalByte[5]; //side5
 8007e24:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
	frame[56] = secondaryHorizontalByte[5];
 8007e28:	696d      	ldr	r5, [r5, #20]
	frame[55] = primaryVerticalByte[5];
 8007e2a:	f8de 7014 	ldr.w	r7, [lr, #20]
	frame[57] = secondaryVerticalByte[5];
 8007e2e:	6940      	ldr	r0, [r0, #20]
    frame[63] =mapIDForCurrentPhases;//side5
 8007e30:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    frame[64] =1;
 8007e34:	2301      	movs	r3, #1
    frame[58] = hundredPlaceSegment[5];
 8007e36:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    frame[59] = tenPlaceSegment[5];
 8007e3a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
    frame[64] =1;
 8007e3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    frame[65] =1;
 8007e42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    frame[66] =1;
 8007e46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    frame[67] =1;
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    frame[68] =1;//TBD
 8007e4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    frame[69] =1;
 8007e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    frame[53] = unitPlaceSegment[4];
 8007e56:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
	frame[55] = primaryVerticalByte[5];
 8007e5a:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
	frame[56] = secondaryHorizontalByte[5];
 8007e5e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	frame[57] = secondaryVerticalByte[5];
 8007e62:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007e66:	f7fd fa9b 	bl	80053a0 <crcApi>
	frame[71] = 0x7D;   // ending delimeter
 8007e6a:	237d      	movs	r3, #125	; 0x7d
 8007e6c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	frame[72] = 0x7D;   //ending delimeter
 8007e70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	frame[73] = 0x0D;   // ending delimeter
 8007e74:	230d      	movs	r3, #13
 8007e76:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007e7a:	43c0      	mvns	r0, r0
    frame[74] = 0x0A;   //ending delimeter
 8007e7c:	230a      	movs	r3, #10
	frame[70] = 0xFF - crcApi();   //crcApiResponse();//CRC
 8007e7e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    frame[74] = 0x0A;   //ending delimeter
 8007e82:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	HAL_UART_Transmit(&huart3, (uint8_t*) frame, 72, 5000); //For ESP
 8007e86:	4621      	mov	r1, r4
 8007e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e8c:	2248      	movs	r2, #72	; 0x48
 8007e8e:	481a      	ldr	r0, [pc, #104]	; (8007ef8 <function8+0x228>)
 8007e90:	f7fa fc4c 	bl	800272c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) frame, 72, 5000); //For BLE
 8007e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e98:	2248      	movs	r2, #72	; 0x48
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4817      	ldr	r0, [pc, #92]	; (8007efc <function8+0x22c>)
 8007e9e:	f7fa fc45 	bl	800272c <HAL_UART_Transmit>
	clearPrimaryAndSecByte();
 8007ea2:	f7ff fef9 	bl	8007c98 <clearPrimaryAndSecByte>
}
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eac:	2000000c 	.word	0x2000000c
 8007eb0:	20001610 	.word	0x20001610
 8007eb4:	20003760 	.word	0x20003760
 8007eb8:	20003b01 	.word	0x20003b01
 8007ebc:	2000000d 	.word	0x2000000d
 8007ec0:	2000010d 	.word	0x2000010d
 8007ec4:	200010dd 	.word	0x200010dd
 8007ec8:	20003650 	.word	0x20003650
 8007ecc:	200000b5 	.word	0x200000b5
 8007ed0:	20000ec4 	.word	0x20000ec4
 8007ed4:	2000117a 	.word	0x2000117a
 8007ed8:	20003aec 	.word	0x20003aec
 8007edc:	20003610 	.word	0x20003610
 8007ee0:	200037e0 	.word	0x200037e0
 8007ee4:	20001628 	.word	0x20001628
 8007ee8:	20003664 	.word	0x20003664
 8007eec:	2000010c 	.word	0x2000010c
 8007ef0:	2000007c 	.word	0x2000007c
 8007ef4:	200000e0 	.word	0x200000e0
 8007ef8:	20000e30 	.word	0x20000e30
 8007efc:	20001108 	.word	0x20001108
 8007f00:	200035f8 	.word	0x200035f8

08007f04 <findSide>:
    side_1= side_1 << 4 ; //left shift 4 bit
    side_3= side13Color ^ side_1; //

    side_2= side24Color >> 4; // right shift 4 bit
    side_2=side_2 << 4 ; //left shift 4 bit
    side_4=  side24Color ^ sideNo2; //
 8007f04:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <findSide+0x80>)
    side_1= side_1 << 4 ; //left shift 4 bit
 8007f06:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    side_4=  side24Color ^ sideNo2; //
 8007f0a:	781b      	ldrb	r3, [r3, #0]


    if(side_1==0x30) // green side1
 8007f0c:	2830      	cmp	r0, #48	; 0x30
{
 8007f0e:	b510      	push	{r4, lr}
    side_2=side_2 << 4 ; //left shift 4 bit
 8007f10:	f001 04f0 	and.w	r4, r1, #240	; 0xf0
    side_4=  side24Color ^ sideNo2; //
 8007f14:	ea81 0103 	eor.w	r1, r1, r3
    if(side_1==0x30) // green side1
 8007f18:	d128      	bne.n	8007f6c <findSide+0x68>
    {
       	Disp[28]=planS1GT;
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <findSide+0x84>)
    	Disp[5]=Color[2];
    	phase_ID=Color[3];
    }
    if(side_1==0x40) // yellow side1
    {
    			Disp[28]=planA1GT;
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	; (8007f8c <findSide+0x88>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	7713      	strb	r3, [r2, #28]
    			Disp[4]=Color[1];
 8007f22:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <findSide+0x8c>)
 8007f24:	7858      	ldrb	r0, [r3, #1]
 8007f26:	7110      	strb	r0, [r2, #4]
    			Disp[5]=Color[2];
 8007f28:	7898      	ldrb	r0, [r3, #2]
 8007f2a:	7150      	strb	r0, [r2, #5]
    			phase_ID=Color[3];
 8007f2c:	78da      	ldrb	r2, [r3, #3]
 8007f2e:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <findSide+0x90>)
 8007f30:	701a      	strb	r2, [r3, #0]
    }

    if(side_2==0x30) // green side2
 8007f32:	2c30      	cmp	r4, #48	; 0x30
 8007f34:	d11e      	bne.n	8007f74 <findSide+0x70>
     {
        Disp[28]=planS2GT;
 8007f36:	4b18      	ldr	r3, [pc, #96]	; (8007f98 <findSide+0x94>)
     	Disp[5]=Color[2];
     	phase_ID=Color[3];
     }
     if(side_2==0x40) // yellow side2
     {
     			Disp[28]=planA2GT;
 8007f38:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <findSide+0x88>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	7713      	strb	r3, [r2, #28]
     			Disp[4]=Color[1];
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <findSide+0x8c>)
 8007f40:	7858      	ldrb	r0, [r3, #1]
 8007f42:	7110      	strb	r0, [r2, #4]
     			Disp[5]=Color[2];
 8007f44:	7898      	ldrb	r0, [r3, #2]
 8007f46:	7150      	strb	r0, [r2, #5]
     			phase_ID=Color[3];
 8007f48:	78da      	ldrb	r2, [r3, #3]
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <findSide+0x90>)
 8007f4c:	701a      	strb	r2, [r3, #0]
      			Disp[28]=planA3GT;
      			Disp[4]=Color[1];
      			Disp[5]=Color[2];
      			phase_ID=Color[3];
      }
      if(side_4==0x30) // green side4
 8007f4e:	2930      	cmp	r1, #48	; 0x30
 8007f50:	d114      	bne.n	8007f7c <findSide+0x78>
       {
          	Disp[28]=planS4GT;
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <findSide+0x98>)
       	Disp[5]=Color[2];
       	phase_ID=Color[3];
       }
       if(side_4==0x40) // yellow side4
       {
       			Disp[28]=planA4GT;
 8007f54:	4a0d      	ldr	r2, [pc, #52]	; (8007f8c <findSide+0x88>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	7713      	strb	r3, [r2, #28]
       			Disp[4]=Color[1];
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <findSide+0x8c>)
 8007f5c:	7859      	ldrb	r1, [r3, #1]
 8007f5e:	7111      	strb	r1, [r2, #4]
       			Disp[5]=Color[2];
 8007f60:	7899      	ldrb	r1, [r3, #2]
 8007f62:	7151      	strb	r1, [r2, #5]
       			phase_ID=Color[3];
 8007f64:	78da      	ldrb	r2, [r3, #3]
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <findSide+0x90>)
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	bd10      	pop	{r4, pc}
    if(side_1==0x40) // yellow side1
 8007f6c:	2840      	cmp	r0, #64	; 0x40
 8007f6e:	d1e0      	bne.n	8007f32 <findSide+0x2e>
    			Disp[28]=planA1GT;
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <findSide+0x9c>)
 8007f72:	e7d3      	b.n	8007f1c <findSide+0x18>
     if(side_2==0x40) // yellow side2
 8007f74:	2c40      	cmp	r4, #64	; 0x40
 8007f76:	d1ea      	bne.n	8007f4e <findSide+0x4a>
     			Disp[28]=planA2GT;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <findSide+0xa0>)
 8007f7a:	e7dd      	b.n	8007f38 <findSide+0x34>
       if(side_4==0x40) // yellow side4
 8007f7c:	2940      	cmp	r1, #64	; 0x40
 8007f7e:	d1f4      	bne.n	8007f6a <findSide+0x66>
       			Disp[28]=planA4GT;
 8007f80:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <findSide+0xa4>)
 8007f82:	e7e7      	b.n	8007f54 <findSide+0x50>
 8007f84:	200036a0 	.word	0x200036a0
 8007f88:	200037dc 	.word	0x200037dc
 8007f8c:	200010dd 	.word	0x200010dd
 8007f90:	20005226 	.word	0x20005226
 8007f94:	20003aec 	.word	0x20003aec
 8007f98:	2000160d 	.word	0x2000160d
 8007f9c:	20003c4b 	.word	0x20003c4b
 8007fa0:	20003c4c 	.word	0x20003c4c
 8007fa4:	20003a14 	.word	0x20003a14
 8007fa8:	20003b00 	.word	0x20003b00

08007fac <resetVariables>:
}

void resetVariables()
{

	junctionId = 111;
 8007fac:	4b14      	ldr	r3, [pc, #80]	; (8008000 <resetVariables+0x54>)
 8007fae:	226f      	movs	r2, #111	; 0x6f
 8007fb0:	701a      	strb	r2, [r3, #0]
	noOfDateSlots=0;
 8007fb2:	4a14      	ldr	r2, [pc, #80]	; (8008004 <resetVariables+0x58>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	7013      	strb	r3, [r2, #0]
	dateSlotNo=0;
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <resetVariables+0x5c>)
 8007fba:	7013      	strb	r3, [r2, #0]
	dateID=0;
 8007fbc:	4a13      	ldr	r2, [pc, #76]	; (800800c <resetVariables+0x60>)
 8007fbe:	7013      	strb	r3, [r2, #0]
	dayID=0;
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <resetVariables+0x64>)
 8007fc2:	7013      	strb	r3, [r2, #0]
	totalNoOfPlans=0;
 8007fc4:	4a13      	ldr	r2, [pc, #76]	; (8008014 <resetVariables+0x68>)
 8007fc6:	7013      	strb	r3, [r2, #0]
	totalNoOfPhases=0;
 8007fc8:	4a13      	ldr	r2, [pc, #76]	; (8008018 <resetVariables+0x6c>)
 8007fca:	7013      	strb	r3, [r2, #0]
	noOfDaySlots=0;
 8007fcc:	4a13      	ldr	r2, [pc, #76]	; (800801c <resetVariables+0x70>)
 8007fce:	7013      	strb	r3, [r2, #0]
	daySlotNo=0;
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <resetVariables+0x74>)
 8007fd2:	7013      	strb	r3, [r2, #0]
	noOfSides = 0;
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <resetVariables+0x78>)
 8007fd6:	7013      	strb	r3, [r2, #0]
	noOfPlans = 0;
 8007fd8:	4a13      	ldr	r2, [pc, #76]	; (8008028 <resetVariables+0x7c>)
 8007fda:	7013      	strb	r3, [r2, #0]
	noOfPhase = 0;
 8007fdc:	4a13      	ldr	r2, [pc, #76]	; (800802c <resetVariables+0x80>)
 8007fde:	7013      	strb	r3, [r2, #0]
	programVersionNo = 0;
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <resetVariables+0x84>)
 8007fe2:	7013      	strb	r3, [r2, #0]
	programVersionNoLast = 0;
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <resetVariables+0x88>)
 8007fe6:	7013      	strb	r3, [r2, #0]
	registrationStatus = 0;
 8007fe8:	4a13      	ldr	r2, [pc, #76]	; (8008038 <resetVariables+0x8c>)
 8007fea:	7013      	strb	r3, [r2, #0]
	totalPhase=0;
 8007fec:	4a13      	ldr	r2, [pc, #76]	; (800803c <resetVariables+0x90>)
 8007fee:	7013      	strb	r3, [r2, #0]
	padestarianTime = 10;
 8007ff0:	4a13      	ldr	r2, [pc, #76]	; (8008040 <resetVariables+0x94>)
 8007ff2:	210a      	movs	r1, #10
 8007ff4:	6011      	str	r1, [r2, #0]
	phaseMapCnt=0;
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <resetVariables+0x98>)
 8007ff8:	6013      	str	r3, [r2, #0]
	phaseMapCnt1=0;//total no of phases in phase.txt
 8007ffa:	4a13      	ldr	r2, [pc, #76]	; (8008048 <resetVariables+0x9c>)
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	4770      	bx	lr
 8008000:	2000000d 	.word	0x2000000d
 8008004:	200000e4 	.word	0x200000e4
 8008008:	200000bd 	.word	0x200000bd
 800800c:	200000bc 	.word	0x200000bc
 8008010:	200000be 	.word	0x200000be
 8008014:	20000128 	.word	0x20000128
 8008018:	20000120 	.word	0x20000120
 800801c:	200000e5 	.word	0x200000e5
 8008020:	200000bf 	.word	0x200000bf
 8008024:	200000ed 	.word	0x200000ed
 8008028:	200000ec 	.word	0x200000ec
 800802c:	200000e6 	.word	0x200000e6
 8008030:	2000010d 	.word	0x2000010d
 8008034:	2000010e 	.word	0x2000010e
 8008038:	2000010f 	.word	0x2000010f
 800803c:	20000129 	.word	0x20000129
 8008040:	20000018 	.word	0x20000018
 8008044:	200000f0 	.word	0x200000f0
 8008048:	200000f4 	.word	0x200000f4

0800804c <program3>:
void program3() {
 800804c:	b538      	push	{r3, r4, r5, lr}
	resetVariables();
 800804e:	f7ff ffad 	bl	8007fac <resetVariables>
	f_unlink ("infoN.txt");
 8008052:	4861      	ldr	r0, [pc, #388]	; (80081d8 <program3+0x18c>)
			planNo = 1;
 8008054:	4d61      	ldr	r5, [pc, #388]	; (80081dc <program3+0x190>)
	f_unlink ("infoN.txt");
 8008056:	f7fc fb13 	bl	8004680 <f_unlink>
	f_unlink ("date.txt");
 800805a:	4861      	ldr	r0, [pc, #388]	; (80081e0 <program3+0x194>)
 800805c:	f7fc fb10 	bl	8004680 <f_unlink>
	f_unlink ("day.txt");
 8008060:	4860      	ldr	r0, [pc, #384]	; (80081e4 <program3+0x198>)
 8008062:	f7fc fb0d 	bl	8004680 <f_unlink>
	f_unlink ("planN.txt");
 8008066:	4860      	ldr	r0, [pc, #384]	; (80081e8 <program3+0x19c>)
 8008068:	f7fc fb0a 	bl	8004680 <f_unlink>
	f_unlink ("mapDate.txt");
 800806c:	485f      	ldr	r0, [pc, #380]	; (80081ec <program3+0x1a0>)
 800806e:	f7fc fb07 	bl	8004680 <f_unlink>
	f_unlink ("mapDay.txt");
 8008072:	485f      	ldr	r0, [pc, #380]	; (80081f0 <program3+0x1a4>)
 8008074:	f7fc fb04 	bl	8004680 <f_unlink>
	f_unlink ("phase.txt");
 8008078:	485e      	ldr	r0, [pc, #376]	; (80081f4 <program3+0x1a8>)
 800807a:	f7fc fb01 	bl	8004680 <f_unlink>
	f_unlink ("mapPhase.txt");
 800807e:	485e      	ldr	r0, [pc, #376]	; (80081f8 <program3+0x1ac>)
 8008080:	f7fc fafe 	bl	8004680 <f_unlink>
	f_unlink ("SlaveD.txt");
 8008084:	485d      	ldr	r0, [pc, #372]	; (80081fc <program3+0x1b0>)
 8008086:	f7fc fafb 	bl	8004680 <f_unlink>
	flash_Erase();
 800808a:	f7fc fde5 	bl	8004c58 <flash_Erase>
	int temp = 1;
 800808e:	2401      	movs	r4, #1
		switch (temp) {
 8008090:	1e63      	subs	r3, r4, #1
 8008092:	2b09      	cmp	r3, #9
 8008094:	f200 809d 	bhi.w	80081d2 <program3+0x186>
 8008098:	e8df f003 	tbb	[pc, r3]
 800809c:	1b150f05 	.word	0x1b150f05
 80080a0:	45392f25 	.word	0x45392f25
 80080a4:	594f      	.short	0x594f
			HAL_Delay(500);
 80080a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080aa:	f7f8 fa8b 	bl	80005c4 <HAL_Delay>
			if(temp2 == function11N()) //basic info function
 80080ae:	f7fe f945 	bl	800633c <function11N>
 80080b2:	2801      	cmp	r0, #1
 80080b4:	d1ec      	bne.n	8008090 <program3+0x44>
				temp++;
 80080b6:	2402      	movs	r4, #2
 80080b8:	e7ea      	b.n	8008090 <program3+0x44>
			if (temp2 == function12()) //date slot function
 80080ba:	f7fe fa47 	bl	800654c <function12>
 80080be:	2801      	cmp	r0, #1
 80080c0:	d1f9      	bne.n	80080b6 <program3+0x6a>
				temp++;
 80080c2:	2403      	movs	r4, #3
 80080c4:	e7e4      	b.n	8008090 <program3+0x44>
			if (temp2 == function13()) //day slot function
 80080c6:	f7fe fb21 	bl	800670c <function13>
 80080ca:	2801      	cmp	r0, #1
 80080cc:	d1f9      	bne.n	80080c2 <program3+0x76>
			temp++;
 80080ce:	2404      	movs	r4, #4
 80080d0:	e7de      	b.n	8008090 <program3+0x44>
			HAL_Delay(500);
 80080d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080d6:	f7f8 fa75 	bl	80005c4 <HAL_Delay>
			if (temp2 == function14())  //plan info function
 80080da:	f7fe fc15 	bl	8006908 <function14>
				temp++;
 80080de:	2801      	cmp	r0, #1
 80080e0:	bf08      	it	eq
 80080e2:	2405      	moveq	r4, #5
 80080e4:	e7d4      	b.n	8008090 <program3+0x44>
			HAL_Delay(500);
 80080e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080ea:	f7f8 fa6b 	bl	80005c4 <HAL_Delay>
			if (temp2 == function15()) // map date function
 80080ee:	f7fe fce9 	bl	8006ac4 <function15>
				temp++;
 80080f2:	2801      	cmp	r0, #1
 80080f4:	bf08      	it	eq
 80080f6:	2406      	moveq	r4, #6
 80080f8:	e7ca      	b.n	8008090 <program3+0x44>
				HAL_Delay(500);
 80080fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080fe:	f7f8 fa61 	bl	80005c4 <HAL_Delay>
				if (temp2 == function16()) //map day function
 8008102:	f7fe fe13 	bl	8006d2c <function16>
					temp++;
 8008106:	2801      	cmp	r0, #1
 8008108:	bf08      	it	eq
 800810a:	2407      	moveq	r4, #7
 800810c:	e7c0      	b.n	8008090 <program3+0x44>
			HAL_Delay(500);
 800810e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008112:	f7f8 fa57 	bl	80005c4 <HAL_Delay>
			planNo = 1;
 8008116:	2301      	movs	r3, #1
 8008118:	702b      	strb	r3, [r5, #0]
			if (temp2 == function_10())	//phase info
 800811a:	f7fd fe99 	bl	8005e50 <function_10>
				temp++;
 800811e:	2801      	cmp	r0, #1
 8008120:	bf08      	it	eq
 8008122:	2408      	moveq	r4, #8
 8008124:	e7b4      	b.n	8008090 <program3+0x44>
			HAL_Delay(500);
 8008126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800812a:	f7f8 fa4b 	bl	80005c4 <HAL_Delay>
			if(temp2 == function17()) //phaseMap
 800812e:	f7ff f9a5 	bl	800747c <function17>
			temp++;
 8008132:	2801      	cmp	r0, #1
 8008134:	bf08      	it	eq
 8008136:	2409      	moveq	r4, #9
 8008138:	e7aa      	b.n	8008090 <program3+0x44>
		   HAL_Delay(500);
 800813a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800813e:	f7f8 fa41 	bl	80005c4 <HAL_Delay>
		   if (temp2 == function18())
 8008142:	f7ff fa8f 	bl	8007664 <function18>
			temp++;
 8008146:	2801      	cmp	r0, #1
 8008148:	bf08      	it	eq
 800814a:	240a      	moveq	r4, #10
 800814c:	e7a0      	b.n	8008090 <program3+0x44>
			HAL_Delay(1000);
 800814e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008152:	f7f8 fa37 	bl	80005c4 <HAL_Delay>
			if (temp2 == function9())
 8008156:	f7fd fdb7 	bl	8005cc8 <function9>
 800815a:	2801      	cmp	r0, #1
 800815c:	d198      	bne.n	8008090 <program3+0x44>
	string[0]=1;
 800815e:	4a28      	ldr	r2, [pc, #160]	; (8008200 <program3+0x1b4>)
	SDcardWriteSeek("prog.txt", 5, (uint8_t *) string, 0);
 8008160:	4828      	ldr	r0, [pc, #160]	; (8008204 <program3+0x1b8>)
	string[0]=1;
 8008162:	2301      	movs	r3, #1
 8008164:	7013      	strb	r3, [r2, #0]
	string[1]=1;
 8008166:	7053      	strb	r3, [r2, #1]
	SDcardWriteSeek("prog.txt", 5, (uint8_t *) string, 0);
 8008168:	2105      	movs	r1, #5
 800816a:	2300      	movs	r3, #0
 800816c:	f7fc fc7e 	bl	8004a6c <SDcardWriteSeek>
		SDcardReadSeek("infoN.txt", 16, 0);
 8008170:	2200      	movs	r2, #0
 8008172:	2110      	movs	r1, #16
 8008174:	4818      	ldr	r0, [pc, #96]	; (80081d8 <program3+0x18c>)
 8008176:	f7fc fc55 	bl	8004a24 <SDcardReadSeek>
		junctionId = readBytes[0];
 800817a:	4b23      	ldr	r3, [pc, #140]	; (8008208 <program3+0x1bc>)
 800817c:	4a23      	ldr	r2, [pc, #140]	; (800820c <program3+0x1c0>)
 800817e:	7819      	ldrb	r1, [r3, #0]
 8008180:	7011      	strb	r1, [r2, #0]
		programVersionNo = readBytes[1];
 8008182:	4a23      	ldr	r2, [pc, #140]	; (8008210 <program3+0x1c4>)
 8008184:	7859      	ldrb	r1, [r3, #1]
 8008186:	7011      	strb	r1, [r2, #0]
		fileNo = readBytes[2];
 8008188:	4a22      	ldr	r2, [pc, #136]	; (8008214 <program3+0x1c8>)
 800818a:	7899      	ldrb	r1, [r3, #2]
 800818c:	7011      	strb	r1, [r2, #0]
		noOfSides = readBytes[4];
 800818e:	4a22      	ldr	r2, [pc, #136]	; (8008218 <program3+0x1cc>)
 8008190:	7919      	ldrb	r1, [r3, #4]
 8008192:	7011      	strb	r1, [r2, #0]
		noOfDateSlots = readBytes[5];
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <program3+0x1d0>)
 8008196:	7959      	ldrb	r1, [r3, #5]
 8008198:	7011      	strb	r1, [r2, #0]
		noOfDaySlots = readBytes[6];
 800819a:	4a21      	ldr	r2, [pc, #132]	; (8008220 <program3+0x1d4>)
 800819c:	7999      	ldrb	r1, [r3, #6]
 800819e:	7011      	strb	r1, [r2, #0]
		noOfPlans = readBytes[7];
 80081a0:	4a20      	ldr	r2, [pc, #128]	; (8008224 <program3+0x1d8>)
 80081a2:	79d9      	ldrb	r1, [r3, #7]
 80081a4:	7011      	strb	r1, [r2, #0]
		padestarianTime = readBytes[8];
 80081a6:	4a20      	ldr	r2, [pc, #128]	; (8008228 <program3+0x1dc>)
 80081a8:	7a19      	ldrb	r1, [r3, #8]
 80081aa:	6011      	str	r1, [r2, #0]
		side1PoleType = readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 80081ac:	4a1f      	ldr	r2, [pc, #124]	; (800822c <program3+0x1e0>)
 80081ae:	7a99      	ldrb	r1, [r3, #10]
 80081b0:	6011      	str	r1, [r2, #0]
		side2PoleType = readBytes[11];
 80081b2:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <program3+0x1e4>)
 80081b4:	7ad9      	ldrb	r1, [r3, #11]
 80081b6:	6011      	str	r1, [r2, #0]
		side3PoleType = readBytes[12];
 80081b8:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <program3+0x1e8>)
 80081ba:	7b19      	ldrb	r1, [r3, #12]
 80081bc:	6011      	str	r1, [r2, #0]
		side4PoleType = readBytes[13];
 80081be:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <program3+0x1ec>)
 80081c0:	7b59      	ldrb	r1, [r3, #13]
 80081c2:	6011      	str	r1, [r2, #0]
		side5PoleType = readBytes[14];
 80081c4:	4a1d      	ldr	r2, [pc, #116]	; (800823c <program3+0x1f0>)
 80081c6:	7b99      	ldrb	r1, [r3, #14]
 80081c8:	6011      	str	r1, [r2, #0]
		totalNoOfPhases=readBytes[9];
 80081ca:	7a5a      	ldrb	r2, [r3, #9]
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <program3+0x1f4>)
 80081ce:	701a      	strb	r2, [r3, #0]
}
 80081d0:	bd38      	pop	{r3, r4, r5, pc}
		if (temp == 11)
 80081d2:	2c0b      	cmp	r4, #11
 80081d4:	e7c2      	b.n	800815c <program3+0x110>
 80081d6:	bf00      	nop
 80081d8:	08009858 	.word	0x08009858
 80081dc:	20003aed 	.word	0x20003aed
 80081e0:	0800987e 	.word	0x0800987e
 80081e4:	08009887 	.word	0x08009887
 80081e8:	08009899 	.word	0x08009899
 80081ec:	0800982f 	.word	0x0800982f
 80081f0:	0800986a 	.word	0x0800986a
 80081f4:	0800988f 	.word	0x0800988f
 80081f8:	0800983b 	.word	0x0800983b
 80081fc:	08009848 	.word	0x08009848
 8008200:	20005312 	.word	0x20005312
 8008204:	08009875 	.word	0x08009875
 8008208:	20000314 	.word	0x20000314
 800820c:	2000000d 	.word	0x2000000d
 8008210:	2000010d 	.word	0x2000010d
 8008214:	2000000c 	.word	0x2000000c
 8008218:	200000ed 	.word	0x200000ed
 800821c:	200000e4 	.word	0x200000e4
 8008220:	200000e5 	.word	0x200000e5
 8008224:	200000ec 	.word	0x200000ec
 8008228:	20000018 	.word	0x20000018
 800822c:	20001640 	.word	0x20001640
 8008230:	2000365c 	.word	0x2000365c
 8008234:	20003a18 	.word	0x20003a18
 8008238:	20003ae8 	.word	0x20003ae8
 800823c:	20003a10 	.word	0x20003a10
 8008240:	20000120 	.word	0x20000120

08008244 <espCommunication>:
int espCommunication(){
 8008244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (msgUnPrcd3 == 1) {
 8008248:	4f59      	ldr	r7, [pc, #356]	; (80083b0 <espCommunication+0x16c>)
 800824a:	f8d7 8000 	ldr.w	r8, [r7]
 800824e:	f1b8 0f01 	cmp.w	r8, #1
 8008252:	f040 808b 	bne.w	800836c <espCommunication+0x128>
		signVal = msgParse((uint8_t *) RecMsg3, "~~~~", 0);
 8008256:	4c57      	ldr	r4, [pc, #348]	; (80083b4 <espCommunication+0x170>)
 8008258:	4957      	ldr	r1, [pc, #348]	; (80083b8 <espCommunication+0x174>)
 800825a:	4e58      	ldr	r6, [pc, #352]	; (80083bc <espCommunication+0x178>)
 800825c:	2200      	movs	r2, #0
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fe40 	bl	8008ee4 <msgParse>
 8008264:	4605      	mov	r5, r0
 8008266:	6030      	str	r0, [r6, #0]
		if (!(signVal == 0)) {
 8008268:	2800      	cmp	r0, #0
 800826a:	d07d      	beq.n	8008368 <espCommunication+0x124>
			if (RecMsg3[signVal + (RecMsg3[signVal + 1]) + 2] + crcApi4(signVal)
 800826c:	f7fd fce0 	bl	8005c30 <crcApi4>
 8008270:	1963      	adds	r3, r4, r5
 8008272:	785a      	ldrb	r2, [r3, #1]
 8008274:	441a      	add	r2, r3
 8008276:	7892      	ldrb	r2, [r2, #2]
 8008278:	4410      	add	r0, r2
 800827a:	28ff      	cmp	r0, #255	; 0xff
 800827c:	d170      	bne.n	8008360 <espCommunication+0x11c>
				if (!(RecMsg3[signVal + 3] == programVersionNo)) {
 800827e:	78d8      	ldrb	r0, [r3, #3]
 8008280:	4b4f      	ldr	r3, [pc, #316]	; (80083c0 <espCommunication+0x17c>)
				slave4Rsp = 1;
 8008282:	4a50      	ldr	r2, [pc, #320]	; (80083c4 <espCommunication+0x180>)
				if (!(RecMsg3[signVal + 3] == programVersionNo)) {
 8008284:	7819      	ldrb	r1, [r3, #0]
				slave4Rsp = 1;
 8008286:	f8c2 8000 	str.w	r8, [r2]
				if (!(RecMsg3[signVal++] == programVersionNo))
 800828a:	1d2a      	adds	r2, r5, #4
 800828c:	4288      	cmp	r0, r1
 800828e:	4698      	mov	r8, r3
					programVersionNo = RecMsg3[signVal] - 1;
 8008290:	bf18      	it	ne
 8008292:	5ca3      	ldrbne	r3, [r4, r2]
				if (RecMsg3[signVal++] == 1)
 8008294:	eb04 0205 	add.w	r2, r4, r5
					programVersionNo = RecMsg3[signVal] - 1;
 8008298:	bf18      	it	ne
 800829a:	f103 33ff 	addne.w	r3, r3, #4294967295
				if (RecMsg3[signVal++] == 1)
 800829e:	7992      	ldrb	r2, [r2, #6]
					programVersionNo = RecMsg3[signVal] - 1;
 80082a0:	bf18      	it	ne
 80082a2:	f888 3000 	strbne.w	r3, [r8]
				if (RecMsg3[signVal++] == 1)
 80082a6:	1deb      	adds	r3, r5, #7
 80082a8:	2a01      	cmp	r2, #1
 80082aa:	6033      	str	r3, [r6, #0]
 80082ac:	d119      	bne.n	80082e2 <espCommunication+0x9e>
					if (RecMsg3[signVal++] == 1)
 80082ae:	5ce3      	ldrb	r3, [r4, r3]
 80082b0:	f105 0208 	add.w	r2, r5, #8
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	6032      	str	r2, [r6, #0]
 80082b8:	d113      	bne.n	80082e2 <espCommunication+0x9e>
						if (RecMsg3[signVal++] == 1)
 80082ba:	5ca2      	ldrb	r2, [r4, r2]
 80082bc:	f105 0309 	add.w	r3, r5, #9
 80082c0:	2a01      	cmp	r2, #1
 80082c2:	6033      	str	r3, [r6, #0]
 80082c4:	d10d      	bne.n	80082e2 <espCommunication+0x9e>
							if (RecMsg3[signVal++] == 1) {
 80082c6:	5ce3      	ldrb	r3, [r4, r3]
 80082c8:	350a      	adds	r5, #10
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	6035      	str	r5, [r6, #0]
 80082ce:	d108      	bne.n	80082e2 <espCommunication+0x9e>
								clearenceMode = 1;
 80082d0:	4a3d      	ldr	r2, [pc, #244]	; (80083c8 <espCommunication+0x184>)
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80082d2:	483e      	ldr	r0, [pc, #248]	; (80083cc <espCommunication+0x188>)
								clearenceMode = 1;
 80082d4:	7013      	strb	r3, [r2, #0]
											checkServerJumpExtend=0;
 80082d6:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <espCommunication+0x18c>)
 80082d8:	2200      	movs	r2, #0
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80082da:	2102      	movs	r1, #2
											checkServerJumpExtend=0;
 80082dc:	601a      	str	r2, [r3, #0]
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80082de:	f7f8 fc35 	bl	8000b4c <HAL_GPIO_WritePin>
				if (!(RecMsg3[7] == programVersionNo)) {
 80082e2:	79e2      	ldrb	r2, [r4, #7]
 80082e4:	f898 3000 	ldrb.w	r3, [r8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d009      	beq.n	8008300 <espCommunication+0xbc>
					program3();
 80082ec:	f7ff feae 	bl	800804c <program3>
										checkServerJumpExtend=0;
 80082f0:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <espCommunication+0x18c>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
										isReprogrammed=1;
 80082f6:	4b37      	ldr	r3, [pc, #220]	; (80083d4 <espCommunication+0x190>)
 80082f8:	2001      	movs	r0, #1
 80082fa:	6018      	str	r0, [r3, #0]
										return 1;
 80082fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (RecMsg3[9] == 8)
 8008300:	7a63      	ldrb	r3, [r4, #9]
 8008302:	2b08      	cmp	r3, #8
 8008304:	d142      	bne.n	800838c <espCommunication+0x148>
					if ((!(RecMsg3[10] == 1))) {
 8008306:	7aa1      	ldrb	r1, [r4, #10]
 8008308:	2901      	cmp	r1, #1
 800830a:	d01f      	beq.n	800834c <espCommunication+0x108>
										checkServerJumpExtend=0;
 800830c:	4d30      	ldr	r5, [pc, #192]	; (80083d0 <espCommunication+0x18c>)
 800830e:	2200      	movs	r2, #0
						if (RecMsg3[10] == 5) {
 8008310:	2905      	cmp	r1, #5
										checkServerJumpExtend=0;
 8008312:	602a      	str	r2, [r5, #0]
						if (RecMsg3[10] == 5) {
 8008314:	d12c      	bne.n	8008370 <espCommunication+0x12c>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8008316:	2201      	movs	r2, #1
 8008318:	2102      	movs	r1, #2
 800831a:	482c      	ldr	r0, [pc, #176]	; (80083cc <espCommunication+0x188>)
 800831c:	f7f8 fc16 	bl	8000b4c <HAL_GPIO_WritePin>
							clearenceMode = RecMsg3[10];
 8008320:	4b29      	ldr	r3, [pc, #164]	; (80083c8 <espCommunication+0x184>)
 8008322:	7aa2      	ldrb	r2, [r4, #10]
 8008324:	701a      	strb	r2, [r3, #0]
							clearenceSide = RecMsg3[11];
 8008326:	4b2c      	ldr	r3, [pc, #176]	; (80083d8 <espCommunication+0x194>)
 8008328:	7ae2      	ldrb	r2, [r4, #11]
 800832a:	701a      	strb	r2, [r3, #0]
						if (RecMsg3[10] == 3) {
 800832c:	7aa3      	ldrb	r3, [r4, #10]
 800832e:	2b03      	cmp	r3, #3
 8008330:	d123      	bne.n	800837a <espCommunication+0x136>
							changeMode = 1;
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <espCommunication+0x198>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]
							if (planMode == 2)							//3)
 8008338:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <espCommunication+0x19c>)
 800833a:	7819      	ldrb	r1, [r3, #0]
 800833c:	2902      	cmp	r1, #2
								planMode = 1;
 800833e:	bf08      	it	eq
 8008340:	701a      	strbeq	r2, [r3, #0]
							if (planMode == 1) {
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	2a01      	cmp	r2, #1
 8008346:	d101      	bne.n	800834c <espCommunication+0x108>
								planMode = 2;							//3;
 8008348:	2202      	movs	r2, #2
 800834a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2); //master
 800834c:	2104      	movs	r1, #4
 800834e:	481f      	ldr	r0, [pc, #124]	; (80083cc <espCommunication+0x188>)
 8008350:	f7f8 fc01 	bl	8000b56 <HAL_GPIO_TogglePin>
				clearBuffer3();
 8008354:	f7fc ffe8 	bl	8005328 <clearBuffer3>
				clearaRxBuffer3();
 8008358:	f7fc fff0 	bl	800533c <clearaRxBuffer3>
				msgUnPrcd3 = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	603b      	str	r3, [r7, #0]
			clearBuffer3();
 8008360:	f7fc ffe2 	bl	8005328 <clearBuffer3>
			clearaRxBuffer3();
 8008364:	f7fc ffea 	bl	800533c <clearaRxBuffer3>
		msgUnPrcd3=0;
 8008368:	2300      	movs	r3, #0
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008370:	2102      	movs	r1, #2
 8008372:	4816      	ldr	r0, [pc, #88]	; (80083cc <espCommunication+0x188>)
 8008374:	f7f8 fbea 	bl	8000b4c <HAL_GPIO_WritePin>
 8008378:	e7d8      	b.n	800832c <espCommunication+0xe8>
						if (RecMsg3[10] == 6) // extend request
 800837a:	2b06      	cmp	r3, #6
 800837c:	d10f      	bne.n	800839e <espCommunication+0x15a>
							clearenceMode = RecMsg3[10];
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <espCommunication+0x184>)
 8008380:	7013      	strb	r3, [r2, #0]
							clearenceSide = RecMsg3[11];
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <espCommunication+0x194>)
 8008384:	7ae2      	ldrb	r2, [r4, #11]
 8008386:	701a      	strb	r2, [r3, #0]
											checkServerJumpExtend=1;
 8008388:	2301      	movs	r3, #1
 800838a:	602b      	str	r3, [r5, #0]
				if (RecMsg3[10] == 4) // jump request
 800838c:	7aa3      	ldrb	r3, [r4, #10]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d1dc      	bne.n	800834c <espCommunication+0x108>
					clearenceMode = 4;
 8008392:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <espCommunication+0x184>)
 8008394:	7013      	strb	r3, [r2, #0]
									checkServerJumpExtend=1;
 8008396:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <espCommunication+0x18c>)
 8008398:	2201      	movs	r2, #1
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e7d6      	b.n	800834c <espCommunication+0x108>
						if (RecMsg3[10] == 2) {
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d1f4      	bne.n	800838c <espCommunication+0x148>
							clearenceMode = RecMsg3[10];
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <espCommunication+0x184>)
 80083a4:	7013      	strb	r3, [r2, #0]
							clearenceSide = RecMsg3[11];
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <espCommunication+0x194>)
 80083a8:	7ae2      	ldrb	r2, [r4, #11]
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e7ee      	b.n	800838c <espCommunication+0x148>
 80083ae:	bf00      	nop
 80083b0:	200011bc 	.word	0x200011bc
 80083b4:	200056e2 	.word	0x200056e2
 80083b8:	08009853 	.word	0x08009853
 80083bc:	200015e8 	.word	0x200015e8
 80083c0:	2000010d 	.word	0x2000010d
 80083c4:	200000a4 	.word	0x200000a4
 80083c8:	200000b5 	.word	0x200000b5
 80083cc:	40021000 	.word	0x40021000
 80083d0:	20003afc 	.word	0x20003afc
 80083d4:	200000d8 	.word	0x200000d8
 80083d8:	200000b7 	.word	0x200000b7
 80083dc:	20003654 	.word	0x20003654
 80083e0:	20005212 	.word	0x20005212

080083e4 <BLECommunication>:
void BLECommunication(){
 80083e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (msgUnPrcd1 == 1) {
 80083e8:	4f59      	ldr	r7, [pc, #356]	; (8008550 <BLECommunication+0x16c>)
 80083ea:	f8d7 8000 	ldr.w	r8, [r7]
 80083ee:	f1b8 0f01 	cmp.w	r8, #1
 80083f2:	f040 8087 	bne.w	8008504 <BLECommunication+0x120>
		signVal = msgParse((uint8_t *) RecMsg1, "~~~~", 0);
 80083f6:	4c57      	ldr	r4, [pc, #348]	; (8008554 <BLECommunication+0x170>)
 80083f8:	4957      	ldr	r1, [pc, #348]	; (8008558 <BLECommunication+0x174>)
 80083fa:	4e58      	ldr	r6, [pc, #352]	; (800855c <BLECommunication+0x178>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fd70 	bl	8008ee4 <msgParse>
 8008404:	4605      	mov	r5, r0
 8008406:	6030      	str	r0, [r6, #0]
		if (!(signVal == 0)) {
 8008408:	2800      	cmp	r0, #0
 800840a:	d07b      	beq.n	8008504 <BLECommunication+0x120>
			if (RecMsg1[signVal + (RecMsg1[signVal + 1]) + 2] + crcApi1(signVal)
 800840c:	f7fd fc2a 	bl	8005c64 <crcApi1>
 8008410:	1963      	adds	r3, r4, r5
 8008412:	785a      	ldrb	r2, [r3, #1]
 8008414:	441a      	add	r2, r3
 8008416:	7892      	ldrb	r2, [r2, #2]
 8008418:	4410      	add	r0, r2
 800841a:	28ff      	cmp	r0, #255	; 0xff
 800841c:	d16c      	bne.n	80084f8 <BLECommunication+0x114>
				if (!(RecMsg1[signVal + 3] == programVersionNo)) {
 800841e:	78d8      	ldrb	r0, [r3, #3]
 8008420:	4b4f      	ldr	r3, [pc, #316]	; (8008560 <BLECommunication+0x17c>)
				slave4Rsp = 1;
 8008422:	4a50      	ldr	r2, [pc, #320]	; (8008564 <BLECommunication+0x180>)
				if (!(RecMsg1[signVal + 3] == programVersionNo)) {
 8008424:	7819      	ldrb	r1, [r3, #0]
				slave4Rsp = 1;
 8008426:	f8c2 8000 	str.w	r8, [r2]
				if (!(RecMsg1[signVal++] == programVersionNo))
 800842a:	1d2a      	adds	r2, r5, #4
 800842c:	4288      	cmp	r0, r1
 800842e:	4698      	mov	r8, r3
					programVersionNo = RecMsg1[signVal] - 1;
 8008430:	bf18      	it	ne
 8008432:	5ca3      	ldrbne	r3, [r4, r2]
				if (RecMsg1[signVal++] == 1)
 8008434:	eb04 0205 	add.w	r2, r4, r5
					programVersionNo = RecMsg1[signVal] - 1;
 8008438:	bf18      	it	ne
 800843a:	f103 33ff 	addne.w	r3, r3, #4294967295
				if (RecMsg1[signVal++] == 1)
 800843e:	7992      	ldrb	r2, [r2, #6]
					programVersionNo = RecMsg1[signVal] - 1;
 8008440:	bf18      	it	ne
 8008442:	f888 3000 	strbne.w	r3, [r8]
				if (RecMsg1[signVal++] == 1)
 8008446:	1deb      	adds	r3, r5, #7
 8008448:	2a01      	cmp	r2, #1
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	d119      	bne.n	8008482 <BLECommunication+0x9e>
					if (RecMsg1[signVal++] == 1)
 800844e:	5ce3      	ldrb	r3, [r4, r3]
 8008450:	f105 0208 	add.w	r2, r5, #8
 8008454:	2b01      	cmp	r3, #1
 8008456:	6032      	str	r2, [r6, #0]
 8008458:	d113      	bne.n	8008482 <BLECommunication+0x9e>
						if (RecMsg1[signVal++] == 1)
 800845a:	5ca2      	ldrb	r2, [r4, r2]
 800845c:	f105 0309 	add.w	r3, r5, #9
 8008460:	2a01      	cmp	r2, #1
 8008462:	6033      	str	r3, [r6, #0]
 8008464:	d10d      	bne.n	8008482 <BLECommunication+0x9e>
							if (RecMsg1[signVal++] == 1) {
 8008466:	5ce3      	ldrb	r3, [r4, r3]
 8008468:	350a      	adds	r5, #10
 800846a:	2b01      	cmp	r3, #1
 800846c:	6035      	str	r5, [r6, #0]
 800846e:	d108      	bne.n	8008482 <BLECommunication+0x9e>
								clearenceMode = 1;
 8008470:	4a3d      	ldr	r2, [pc, #244]	; (8008568 <BLECommunication+0x184>)
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008472:	483e      	ldr	r0, [pc, #248]	; (800856c <BLECommunication+0x188>)
								clearenceMode = 1;
 8008474:	7013      	strb	r3, [r2, #0]
											checkServerJumpExtend=0;
 8008476:	4b3e      	ldr	r3, [pc, #248]	; (8008570 <BLECommunication+0x18c>)
 8008478:	2200      	movs	r2, #0
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800847a:	2102      	movs	r1, #2
											checkServerJumpExtend=0;
 800847c:	601a      	str	r2, [r3, #0]
											HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800847e:	f7f8 fb65 	bl	8000b4c <HAL_GPIO_WritePin>
				if (!(RecMsg1[7] == programVersionNo)) {
 8008482:	79e2      	ldrb	r2, [r4, #7]
 8008484:	f898 3000 	ldrb.w	r3, [r8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d004      	beq.n	8008496 <BLECommunication+0xb2>
					program3();
 800848c:	f7ff fdde 	bl	800804c <program3>
										checkServerJumpExtend=0;
 8008490:	4b37      	ldr	r3, [pc, #220]	; (8008570 <BLECommunication+0x18c>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
				if (RecMsg1[9] == 8)
 8008496:	7a63      	ldrb	r3, [r4, #9]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d145      	bne.n	8008528 <BLECommunication+0x144>
					if ((!(RecMsg1[10] == 1))) {
 800849c:	7aa1      	ldrb	r1, [r4, #10]
 800849e:	2901      	cmp	r1, #1
 80084a0:	d020      	beq.n	80084e4 <BLECommunication+0x100>
										checkServerJumpExtend=0;
 80084a2:	4d33      	ldr	r5, [pc, #204]	; (8008570 <BLECommunication+0x18c>)
 80084a4:	2200      	movs	r2, #0
						if (RecMsg1[10] == 5) {
 80084a6:	2905      	cmp	r1, #5
										checkServerJumpExtend=0;
 80084a8:	602a      	str	r2, [r5, #0]
						if (RecMsg1[10] == 5) {
 80084aa:	d12d      	bne.n	8008508 <BLECommunication+0x124>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80084ac:	2201      	movs	r2, #1
 80084ae:	2102      	movs	r1, #2
 80084b0:	482e      	ldr	r0, [pc, #184]	; (800856c <BLECommunication+0x188>)
 80084b2:	f7f8 fb4b 	bl	8000b4c <HAL_GPIO_WritePin>
							clearenceMode = 9;
 80084b6:	4b2c      	ldr	r3, [pc, #176]	; (8008568 <BLECommunication+0x184>)
 80084b8:	2209      	movs	r2, #9
 80084ba:	701a      	strb	r2, [r3, #0]
							clearenceSide = RecMsg3[11];
 80084bc:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <BLECommunication+0x190>)
 80084be:	7ada      	ldrb	r2, [r3, #11]
 80084c0:	4b2d      	ldr	r3, [pc, #180]	; (8008578 <BLECommunication+0x194>)
 80084c2:	701a      	strb	r2, [r3, #0]
						if (RecMsg1[10] == 3) {
 80084c4:	7aa3      	ldrb	r3, [r4, #10]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d123      	bne.n	8008512 <BLECommunication+0x12e>
							changeMode = 1;
 80084ca:	4b2c      	ldr	r3, [pc, #176]	; (800857c <BLECommunication+0x198>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
							if (planMode == 2)							//3)
 80084d0:	4b2b      	ldr	r3, [pc, #172]	; (8008580 <BLECommunication+0x19c>)
 80084d2:	7819      	ldrb	r1, [r3, #0]
 80084d4:	2902      	cmp	r1, #2
								planMode = 1;
 80084d6:	bf08      	it	eq
 80084d8:	701a      	strbeq	r2, [r3, #0]
							if (planMode == 1) {
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	2a01      	cmp	r2, #1
 80084de:	d101      	bne.n	80084e4 <BLECommunication+0x100>
								planMode = 2;							//3;
 80084e0:	2202      	movs	r2, #2
 80084e2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2); //master
 80084e4:	2104      	movs	r1, #4
 80084e6:	4821      	ldr	r0, [pc, #132]	; (800856c <BLECommunication+0x188>)
 80084e8:	f7f8 fb35 	bl	8000b56 <HAL_GPIO_TogglePin>
				clearBuffer3();
 80084ec:	f7fc ff1c 	bl	8005328 <clearBuffer3>
				clearaRxBuffer3();
 80084f0:	f7fc ff24 	bl	800533c <clearaRxBuffer3>
				msgUnPrcd1 = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
			clearBuffer3();
 80084f8:	f7fc ff16 	bl	8005328 <clearBuffer3>
			clearaRxBuffer3();
 80084fc:	f7fc ff1e 	bl	800533c <clearaRxBuffer3>
			msgUnPrcd1 = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8008508:	2102      	movs	r1, #2
 800850a:	4818      	ldr	r0, [pc, #96]	; (800856c <BLECommunication+0x188>)
 800850c:	f7f8 fb1e 	bl	8000b4c <HAL_GPIO_WritePin>
 8008510:	e7d8      	b.n	80084c4 <BLECommunication+0xe0>
						if (RecMsg1[10] == 6) // extend request
 8008512:	2b06      	cmp	r3, #6
 8008514:	d111      	bne.n	800853a <BLECommunication+0x156>
							clearenceMode = RecMsg3[10];
 8008516:	4b17      	ldr	r3, [pc, #92]	; (8008574 <BLECommunication+0x190>)
 8008518:	4a13      	ldr	r2, [pc, #76]	; (8008568 <BLECommunication+0x184>)
 800851a:	7a99      	ldrb	r1, [r3, #10]
 800851c:	7011      	strb	r1, [r2, #0]
							clearenceSide = RecMsg3[11];
 800851e:	7ada      	ldrb	r2, [r3, #11]
 8008520:	4b15      	ldr	r3, [pc, #84]	; (8008578 <BLECommunication+0x194>)
 8008522:	701a      	strb	r2, [r3, #0]
											checkServerJumpExtend=1;
 8008524:	2301      	movs	r3, #1
 8008526:	602b      	str	r3, [r5, #0]
				if (RecMsg1[10] == 4) // jump request
 8008528:	7aa3      	ldrb	r3, [r4, #10]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d1da      	bne.n	80084e4 <BLECommunication+0x100>
					clearenceMode = 4;
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <BLECommunication+0x184>)
 8008530:	7013      	strb	r3, [r2, #0]
									checkServerJumpExtend=1;
 8008532:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <BLECommunication+0x18c>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	e7d4      	b.n	80084e4 <BLECommunication+0x100>
						if (RecMsg1[10] == 2) {
 800853a:	2b02      	cmp	r3, #2
 800853c:	d1f4      	bne.n	8008528 <BLECommunication+0x144>
							clearenceMode = RecMsg3[10];
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <BLECommunication+0x190>)
 8008540:	4a09      	ldr	r2, [pc, #36]	; (8008568 <BLECommunication+0x184>)
 8008542:	7a99      	ldrb	r1, [r3, #10]
 8008544:	7011      	strb	r1, [r2, #0]
							clearenceSide = RecMsg3[11];
 8008546:	7ada      	ldrb	r2, [r3, #11]
 8008548:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <BLECommunication+0x194>)
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	e7ec      	b.n	8008528 <BLECommunication+0x144>
 800854e:	bf00      	nop
 8008550:	20001454 	.word	0x20001454
 8008554:	200057dc 	.word	0x200057dc
 8008558:	08009853 	.word	0x08009853
 800855c:	200015e8 	.word	0x200015e8
 8008560:	2000010d 	.word	0x2000010d
 8008564:	200000a4 	.word	0x200000a4
 8008568:	200000b5 	.word	0x200000b5
 800856c:	40021000 	.word	0x40021000
 8008570:	20003afc 	.word	0x20003afc
 8008574:	200056e2 	.word	0x200056e2
 8008578:	200000b7 	.word	0x200000b7
 800857c:	20003654 	.word	0x20003654
 8008580:	20005212 	.word	0x20005212

08008584 <extractSlaveInfo>:


}

void extractSlaveInfo()
{
 8008584:	b508      	push	{r3, lr}

int seekCnt =0;
/*-------------------read SD card begins-------------------*/
	SDcardReadSeek("SlaveD.txt", 27, seekCnt);
 8008586:	2200      	movs	r2, #0
 8008588:	4806      	ldr	r0, [pc, #24]	; (80085a4 <extractSlaveInfo+0x20>)
 800858a:	211b      	movs	r1, #27
 800858c:	f7fc fa4a 	bl	8004a24 <SDcardReadSeek>

   for(int i=0;i<26;i++)
   {
	  slaveDetails[i]= readBytes[i];
 8008590:	4a05      	ldr	r2, [pc, #20]	; (80085a8 <extractSlaveInfo+0x24>)
 8008592:	4806      	ldr	r0, [pc, #24]	; (80085ac <extractSlaveInfo+0x28>)
   for(int i=0;i<26;i++)
 8008594:	2300      	movs	r3, #0
	  slaveDetails[i]= readBytes[i];
 8008596:	5c19      	ldrb	r1, [r3, r0]
 8008598:	5499      	strb	r1, [r3, r2]
   for(int i=0;i<26;i++)
 800859a:	3301      	adds	r3, #1
 800859c:	2b1a      	cmp	r3, #26
 800859e:	d1fa      	bne.n	8008596 <extractSlaveInfo+0x12>





}
 80085a0:	bd08      	pop	{r3, pc}
 80085a2:	bf00      	nop
 80085a4:	08009848 	.word	0x08009848
 80085a8:	20001657 	.word	0x20001657
 80085ac:	20000314 	.word	0x20000314

080085b0 <populatePrimaryHVSecondaryHV>:
void  populatePrimaryHVSecondaryHV()
{
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*----------------Separating the values of sides------------------*/

	sideNo1= Disp[4] >> 4; // right shift 4 bit side13
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <populatePrimaryHVSecondaryHV+0x58>)
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <populatePrimaryHVSecondaryHV+0x5c>)
	sideNo1= Disp[4] >> 4; // right shift 4 bit side13
 80085b6:	791f      	ldrb	r7, [r3, #4]
	sideNo3=  Disp[4] ^ sideNo1; //
    sideNo3=sideNo3 << 4;
 80085b8:	4915      	ldr	r1, [pc, #84]	; (8008610 <populatePrimaryHVSecondaryHV+0x60>)

	sideNo2= Disp[5] >> 4; // right shift 4 bit
	sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80085ba:	4816      	ldr	r0, [pc, #88]	; (8008614 <populatePrimaryHVSecondaryHV+0x64>)
//	sideNo4=  Disp[5] ^ sideNo2; //
//	sideNo4_1= sideNo4 << 4;
//	sideNo4_1=sideNo4 | sideNo4_1;


  primaryHorizontalByte[1]=sideNo1;
 80085bc:	4e16      	ldr	r6, [pc, #88]	; (8008618 <populatePrimaryHVSecondaryHV+0x68>)
  primaryVerticalByte[1]=sideNo1;
 80085be:	4d17      	ldr	r5, [pc, #92]	; (800861c <populatePrimaryHVSecondaryHV+0x6c>)
  secondaryHorizontalByte[1]=sideNo3;
 80085c0:	4c17      	ldr	r4, [pc, #92]	; (8008620 <populatePrimaryHVSecondaryHV+0x70>)
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 80085c2:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 80085c6:	6017      	str	r7, [r2, #0]
	sideNo3=  Disp[4] ^ sideNo1; //
 80085c8:	791a      	ldrb	r2, [r3, #4]
  primaryHorizontalByte[1]=sideNo1;
 80085ca:	6077      	str	r7, [r6, #4]
	sideNo3=  Disp[4] ^ sideNo1; //
 80085cc:	407a      	eors	r2, r7
    sideNo3=sideNo3 << 4;
 80085ce:	0112      	lsls	r2, r2, #4
 80085d0:	600a      	str	r2, [r1, #0]
	sideNo2= Disp[5] >> 4; // right shift 4 bit
 80085d2:	7959      	ldrb	r1, [r3, #5]
	sideNo4=  Disp[5] ^ sideNo2; //
 80085d4:	795b      	ldrb	r3, [r3, #5]
  primaryVerticalByte[1]=sideNo1;
 80085d6:	606f      	str	r7, [r5, #4]
	sideNo2=sideNo2 << 4 ; //left shift 4 bit
 80085d8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80085dc:	6001      	str	r1, [r0, #0]
	sideNo4=  Disp[5] ^ sideNo2; //
 80085de:	404b      	eors	r3, r1
	sideNo4=sideNo4 << 4;
 80085e0:	4810      	ldr	r0, [pc, #64]	; (8008624 <populatePrimaryHVSecondaryHV+0x74>)
  secondaryHorizontalByte[1]=sideNo3;
 80085e2:	6062      	str	r2, [r4, #4]
	sideNo4=sideNo4 << 4;
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	6003      	str	r3, [r0, #0]
  secondaryVerticalByte[1]=sideNo3;
 80085e8:	480f      	ldr	r0, [pc, #60]	; (8008628 <populatePrimaryHVSecondaryHV+0x78>)

  primaryHorizontalByte[2]=sideNo2;
 80085ea:	60b1      	str	r1, [r6, #8]
  secondaryVerticalByte[1]=sideNo3;
 80085ec:	6042      	str	r2, [r0, #4]
  primaryVerticalByte[2]=sideNo2;
 80085ee:	60a9      	str	r1, [r5, #8]
  secondaryHorizontalByte[2]=sideNo4;
 80085f0:	60a3      	str	r3, [r4, #8]
  secondaryVerticalByte[2]=sideNo4;
 80085f2:	6083      	str	r3, [r0, #8]

  primaryHorizontalByte[3]=sideNo3;
 80085f4:	60f2      	str	r2, [r6, #12]
  primaryVerticalByte[3]=sideNo3;
 80085f6:	60ea      	str	r2, [r5, #12]
  secondaryHorizontalByte[3]=sideNo1;
 80085f8:	60e7      	str	r7, [r4, #12]
  secondaryVerticalByte[3]=sideNo1;
 80085fa:	60c7      	str	r7, [r0, #12]


  primaryHorizontalByte[4]=sideNo4;
 80085fc:	6133      	str	r3, [r6, #16]
  primaryVerticalByte[4]=sideNo4;
 80085fe:	612b      	str	r3, [r5, #16]
  secondaryHorizontalByte[4]=sideNo2;
 8008600:	6121      	str	r1, [r4, #16]
  secondaryVerticalByte[4]=sideNo2;
 8008602:	6101      	str	r1, [r0, #16]
 8008604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008606:	bf00      	nop
 8008608:	200010dd 	.word	0x200010dd
 800860c:	20001608 	.word	0x20001608
 8008610:	20003af8 	.word	0x20003af8
 8008614:	200036a0 	.word	0x200036a0
 8008618:	20003664 	.word	0x20003664
 800861c:	200035f8 	.word	0x200035f8
 8008620:	20003610 	.word	0x20003610
 8008624:	20001678 	.word	0x20001678
 8008628:	20001610 	.word	0x20001610

0800862c <phaseInfoData>:
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 800862c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	clearenceMode=1;
 8008630:	f04f 0901 	mov.w	r9, #1
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 8008634:	460c      	mov	r4, r1
	uint32_t AddressOfPhase1=0;
 8008636:	f04f 0800 	mov.w	r8, #0
	clearenceMode=1;
 800863a:	46ca      	mov	sl, r9
	checkServerJumpExtend=0;
 800863c:	4a5d      	ldr	r2, [pc, #372]	; (80087b4 <phaseInfoData+0x188>)
    lSec=10;
 800863e:	495e      	ldr	r1, [pc, #376]	; (80087b8 <phaseInfoData+0x18c>)
    count=Disp[28];
 8008640:	4d5e      	ldr	r5, [pc, #376]	; (80087bc <phaseInfoData+0x190>)
 8008642:	4e5f      	ldr	r6, [pc, #380]	; (80087c0 <phaseInfoData+0x194>)
    	  if(!(secLast == sec1))
 8008644:	4f5f      	ldr	r7, [pc, #380]	; (80087c4 <phaseInfoData+0x198>)
	checkServerJumpExtend=0;
 8008646:	2300      	movs	r3, #0
 8008648:	6013      	str	r3, [r2, #0]
	extendCnt=0;
 800864a:	4a5f      	ldr	r2, [pc, #380]	; (80087c8 <phaseInfoData+0x19c>)
 800864c:	6013      	str	r3, [r2, #0]
	extendCnt1=0;
 800864e:	4a5f      	ldr	r2, [pc, #380]	; (80087cc <phaseInfoData+0x1a0>)
 8008650:	6013      	str	r3, [r2, #0]
	clearenceMode=1;
 8008652:	4a5f      	ldr	r2, [pc, #380]	; (80087d0 <phaseInfoData+0x1a4>)
 8008654:	f882 a000 	strb.w	sl, [r2]
	clearenceModeLast=1;
 8008658:	4a5e      	ldr	r2, [pc, #376]	; (80087d4 <phaseInfoData+0x1a8>)
 800865a:	f882 a000 	strb.w	sl, [r2]
    lSec=10;
 800865e:	220a      	movs	r2, #10
 8008660:	600a      	str	r2, [r1, #0]
    lsSec=10;
 8008662:	495d      	ldr	r1, [pc, #372]	; (80087d8 <phaseInfoData+0x1ac>)
 8008664:	600a      	str	r2, [r1, #0]
    pin_HighLast=0;
 8008666:	4a5d      	ldr	r2, [pc, #372]	; (80087dc <phaseInfoData+0x1b0>)
 8008668:	6013      	str	r3, [r2, #0]
	pinExtend_HighLast=0;
 800866a:	4a5d      	ldr	r2, [pc, #372]	; (80087e0 <phaseInfoData+0x1b4>)
 800866c:	6013      	str	r3, [r2, #0]
    count=Disp[28];
 800866e:	7f2b      	ldrb	r3, [r5, #28]
 8008670:	6033      	str	r3, [r6, #0]
			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008672:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8008828 <phaseInfoData+0x1fc>
			 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 8008676:	495b      	ldr	r1, [pc, #364]	; (80087e4 <phaseInfoData+0x1b8>)
 8008678:	485b      	ldr	r0, [pc, #364]	; (80087e8 <phaseInfoData+0x1bc>)
 800867a:	2201      	movs	r2, #1
 800867c:	f7fa f913 	bl	80028a6 <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);//for slave through LORA
 8008680:	2201      	movs	r2, #1
 8008682:	495a      	ldr	r1, [pc, #360]	; (80087ec <phaseInfoData+0x1c0>)
 8008684:	485a      	ldr	r0, [pc, #360]	; (80087f0 <phaseInfoData+0x1c4>)
 8008686:	f7fa f90e 	bl	80028a6 <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer4,1);//For slave through RS485
 800868a:	2201      	movs	r2, #1
 800868c:	4959      	ldr	r1, [pc, #356]	; (80087f4 <phaseInfoData+0x1c8>)
 800868e:	485a      	ldr	r0, [pc, #360]	; (80087f8 <phaseInfoData+0x1cc>)
 8008690:	f7fa f909 	bl	80028a6 <HAL_UART_Receive_IT>
			 HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);//For BLE
 8008694:	2201      	movs	r2, #1
 8008696:	4959      	ldr	r1, [pc, #356]	; (80087fc <phaseInfoData+0x1d0>)
 8008698:	4859      	ldr	r0, [pc, #356]	; (8008800 <phaseInfoData+0x1d4>)
 800869a:	f7fa f904 	bl	80028a6 <HAL_UART_Receive_IT>
			HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800869e:	2200      	movs	r2, #0
 80086a0:	4958      	ldr	r1, [pc, #352]	; (8008804 <phaseInfoData+0x1d8>)
 80086a2:	4658      	mov	r0, fp
 80086a4:	f7f9 fafc 	bl	8001ca0 <HAL_RTC_GetDate>
			 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 80086a8:	4957      	ldr	r1, [pc, #348]	; (8008808 <phaseInfoData+0x1dc>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	4658      	mov	r0, fp
 80086ae:	f7f9 facf 	bl	8001c50 <HAL_RTC_GetTime>
      if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5))
 80086b2:	2120      	movs	r1, #32
 80086b4:	4855      	ldr	r0, [pc, #340]	; (800880c <phaseInfoData+0x1e0>)
 80086b6:	f7f8 fa43 	bl	8000b40 <HAL_GPIO_ReadPin>
 80086ba:	b108      	cbz	r0, 80086c0 <phaseInfoData+0x94>
    	  BLECommunication();
 80086bc:	f7ff fe92 	bl	80083e4 <BLECommunication>
    	  espCommunication();
 80086c0:	f7ff fdc0 	bl	8008244 <espCommunication>
    	  if(isReprogrammed==1)
 80086c4:	4b52      	ldr	r3, [pc, #328]	; (8008810 <phaseInfoData+0x1e4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d06f      	beq.n	80087ac <phaseInfoData+0x180>
    	  sendMsgToSlave();//through uart2 and uart6
 80086cc:	f7fd f83e 	bl	800574c <sendMsgToSlave>
    	  slaveResponse();
 80086d0:	f7fd f9ae 	bl	8005a30 <slaveResponse>
    	  populatePrimaryHVSecondaryHV();
 80086d4:	f7ff ff6c 	bl	80085b0 <populatePrimaryHVSecondaryHV>
    	  if(!(secLast == sec1))
 80086d8:	4b4e      	ldr	r3, [pc, #312]	; (8008814 <phaseInfoData+0x1e8>)
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	4291      	cmp	r1, r2
 80086e2:	d00c      	beq.n	80086fe <phaseInfoData+0xd2>
    		  checkServerFieldAction();
 80086e4:	f7fe fd1e 	bl	8007124 <checkServerFieldAction>
    		  function8();
 80086e8:	f7ff faf2 	bl	8007cd0 <function8>
    		  if(clearenceMode==1)
 80086ec:	4b38      	ldr	r3, [pc, #224]	; (80087d0 <phaseInfoData+0x1a4>)
 80086ee:	781a      	ldrb	r2, [r3, #0]
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	2a01      	cmp	r2, #1
 80086f4:	d101      	bne.n	80086fa <phaseInfoData+0xce>
    		 if(count==0)
 80086f6:	6832      	ldr	r2, [r6, #0]
 80086f8:	b162      	cbz	r2, 8008714 <phaseInfoData+0xe8>
    	  secLast=sec1;
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	603b      	str	r3, [r7, #0]
    		if(changeMode==1){
 80086fe:	4b46      	ldr	r3, [pc, #280]	; (8008818 <phaseInfoData+0x1ec>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	2a01      	cmp	r2, #1
 8008704:	d1b7      	bne.n	8008676 <phaseInfoData+0x4a>
    			changeMode=0;
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
    			blinker();
 800870a:	f000 f90b 	bl	8008924 <blinker>
 800870e:	e7b0      	b.n	8008672 <phaseInfoData+0x46>
int phaseInfoData(uint8_t planNo,uint8_t phaseNo){
 8008710:	46b8      	mov	r8, r7
 8008712:	e793      	b.n	800863c <phaseInfoData+0x10>
		AddressOfPhase1=AddressOfPhase1+4;
 8008714:	f108 0704 	add.w	r7, r8, #4
		if(phaseNo==Color[AddressOfPhase1])
 8008718:	4e40      	ldr	r6, [pc, #256]	; (800881c <phaseInfoData+0x1f0>)
		phase_No=phaseNo;
 800871a:	f8df b120 	ldr.w	fp, [pc, #288]	; 800883c <phaseInfoData+0x210>
		if(phaseNo==Color[AddressOfPhase1])
 800871e:	5df3      	ldrb	r3, [r6, r7]
		phaseNo++;
 8008720:	3401      	adds	r4, #1
 8008722:	b2e4      	uxtb	r4, r4
		if(phaseNo==Color[AddressOfPhase1])
 8008724:	42a3      	cmp	r3, r4
		phase_No=phaseNo;
 8008726:	f8cb 4000 	str.w	r4, [fp]
		if(phaseNo==Color[AddressOfPhase1])
 800872a:	d114      	bne.n	8008756 <phaseInfoData+0x12a>
 800872c:	9601      	str	r6, [sp, #4]
			countDown();
 800872e:	f7fc feb3 	bl	8005498 <countDown>
			Disp[4]=Color[AddressOfPhase1+1];  //side13
 8008732:	9b01      	ldr	r3, [sp, #4]
			side13Last=Disp[4];
 8008734:	7928      	ldrb	r0, [r5, #4]
			side24Last=Disp[5];
 8008736:	796a      	ldrb	r2, [r5, #5]
			Disp[4]=Color[AddressOfPhase1+1];  //side13
 8008738:	4498      	add	r8, r3
 800873a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800873e:	712b      	strb	r3, [r5, #4]
			Disp[5]=Color[AddressOfPhase1+2];  //side24
 8008740:	f898 3006 	ldrb.w	r3, [r8, #6]
 8008744:	716b      	strb	r3, [r5, #5]
			phase_ID=Color[AddressOfPhase1+3]; //PhaseID
 8008746:	4b36      	ldr	r3, [pc, #216]	; (8008820 <phaseInfoData+0x1f4>)
 8008748:	f898 1007 	ldrb.w	r1, [r8, #7]
 800874c:	7019      	strb	r1, [r3, #0]
	        sideChange(side13Last,Disp[4],side24Last,Disp[5]);
 800874e:	7929      	ldrb	r1, [r5, #4]
 8008750:	796b      	ldrb	r3, [r5, #5]
 8008752:	f7ff fa45 	bl	8007be0 <sideChange>
		if(phaseNo >totalPhase )
 8008756:	4b33      	ldr	r3, [pc, #204]	; (8008824 <phaseInfoData+0x1f8>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	42a3      	cmp	r3, r4
 800875c:	d20b      	bcs.n	8008776 <phaseInfoData+0x14a>
			phase_No=phaseNo;
 800875e:	f8cb 9000 	str.w	r9, [fp]
			clearDispBuffer() ;
 8008762:	f7fc fdcd 	bl	8005300 <clearDispBuffer>
			countDown();
 8008766:	f7fc fe97 	bl	8005498 <countDown>
			findSide(Color[1],Color[2]);
 800876a:	78b1      	ldrb	r1, [r6, #2]
 800876c:	7870      	ldrb	r0, [r6, #1]
 800876e:	f7ff fbc9 	bl	8007f04 <findSide>
			phaseNo=1;
 8008772:	2401      	movs	r4, #1
			AddressOfPhase1=0;
 8008774:	2700      	movs	r7, #0
			HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008776:	2200      	movs	r2, #0
 8008778:	4923      	ldr	r1, [pc, #140]	; (8008808 <phaseInfoData+0x1dc>)
 800877a:	482b      	ldr	r0, [pc, #172]	; (8008828 <phaseInfoData+0x1fc>)
 800877c:	f7f9 fa68 	bl	8001c50 <HAL_RTC_GetTime>
			if(!(sDate.Date == DateLast))
 8008780:	4b20      	ldr	r3, [pc, #128]	; (8008804 <phaseInfoData+0x1d8>)
 8008782:	789a      	ldrb	r2, [r3, #2]
 8008784:	4b29      	ldr	r3, [pc, #164]	; (800882c <phaseInfoData+0x200>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d001      	beq.n	8008790 <phaseInfoData+0x164>
					getDateAndTimeFromGPS();
 800878c:	f7fd fd84 	bl	8006298 <getDateAndTimeFromGPS>
			     if (sTime.Hours==planOffHr)
 8008790:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <phaseInfoData+0x1dc>)
 8008792:	4a27      	ldr	r2, [pc, #156]	; (8008830 <phaseInfoData+0x204>)
 8008794:	7819      	ldrb	r1, [r3, #0]
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	4291      	cmp	r1, r2
			    	 if(sTime.Minutes>planOffM)
 800879a:	bf01      	itttt	eq
 800879c:	785a      	ldrbeq	r2, [r3, #1]
 800879e:	4b25      	ldreq	r3, [pc, #148]	; (8008834 <phaseInfoData+0x208>)
 80087a0:	781b      	ldrbeq	r3, [r3, #0]
 80087a2:	429a      	cmpeq	r2, r3
 80087a4:	d9b4      	bls.n	8008710 <phaseInfoData+0xe4>
			    		returnMode=1;
 80087a6:	4b24      	ldr	r3, [pc, #144]	; (8008838 <phaseInfoData+0x20c>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	601a      	str	r2, [r3, #0]
}
 80087ac:	2001      	movs	r0, #1
 80087ae:	b003      	add	sp, #12
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	20003afc 	.word	0x20003afc
 80087b8:	20000010 	.word	0x20000010
 80087bc:	200010dd 	.word	0x200010dd
 80087c0:	20003af0 	.word	0x20003af0
 80087c4:	20000114 	.word	0x20000114
 80087c8:	200000c4 	.word	0x200000c4
 80087cc:	200000c8 	.word	0x200000c8
 80087d0:	200000b5 	.word	0x200000b5
 80087d4:	200000b6 	.word	0x200000b6
 80087d8:	20000014 	.word	0x20000014
 80087dc:	20000108 	.word	0x20000108
 80087e0:	200000fc 	.word	0x200000fc
 80087e4:	20000ffc 	.word	0x20000ffc
 80087e8:	20000e30 	.word	0x20000e30
 80087ec:	2000136c 	.word	0x2000136c
 80087f0:	2000132c 	.word	0x2000132c
 80087f4:	20001458 	.word	0x20001458
 80087f8:	200015a4 	.word	0x200015a4
 80087fc:	20001244 	.word	0x20001244
 8008800:	20001108 	.word	0x20001108
 8008804:	2000117a 	.word	0x2000117a
 8008808:	20000ec4 	.word	0x20000ec4
 800880c:	40021000 	.word	0x40021000
 8008810:	200000d8 	.word	0x200000d8
 8008814:	20000154 	.word	0x20000154
 8008818:	20003654 	.word	0x20003654
 800881c:	20005226 	.word	0x20005226
 8008820:	20003aec 	.word	0x20003aec
 8008824:	20000129 	.word	0x20000129
 8008828:	20001188 	.word	0x20001188
 800882c:	2000160c 	.word	0x2000160c
 8008830:	20005210 	.word	0x20005210
 8008834:	20003af7 	.word	0x20003af7
 8008838:	20000110 	.word	0x20000110
 800883c:	200039f0 	.word	0x200039f0

08008840 <signal>:
	for(int m=1;m<total_Phases+1;)
 8008840:	4b2d      	ldr	r3, [pc, #180]	; (80088f8 <signal+0xb8>)
 8008842:	492e      	ldr	r1, [pc, #184]	; (80088fc <signal+0xbc>)
 8008844:	f8d3 c000 	ldr.w	ip, [r3]
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 8008848:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <signal+0xc0>)
{
 800884a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 800884e:	f8d3 8000 	ldr.w	r8, [r3]
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 8008852:	4b2c      	ldr	r3, [pc, #176]	; (8008904 <signal+0xc4>)
 8008854:	4f2c      	ldr	r7, [pc, #176]	; (8008908 <signal+0xc8>)
 8008856:	f8d3 9000 	ldr.w	r9, [r3]
			Color[cntr2]=m;
 800885a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800890c <signal+0xcc>
    int cntr2=0;
 800885e:	2300      	movs	r3, #0
	for(int m=1;m<total_Phases+1;)
 8008860:	2201      	movs	r2, #1
    int cntr1=0;
 8008862:	461c      	mov	r4, r3
    int phaseID=0;
 8008864:	4618      	mov	r0, r3
	for(int m=1;m<total_Phases+1;)
 8008866:	4562      	cmp	r2, ip
 8008868:	dd1e      	ble.n	80088a8 <signal+0x68>
	findSide(Color[1],Color[2]);
 800886a:	4b28      	ldr	r3, [pc, #160]	; (800890c <signal+0xcc>)
    phaseNo=1;
 800886c:	4c28      	ldr	r4, [pc, #160]	; (8008910 <signal+0xd0>)
	findSide(Color[1],Color[2]);
 800886e:	7858      	ldrb	r0, [r3, #1]
 8008870:	7899      	ldrb	r1, [r3, #2]
 8008872:	f7ff fb47 	bl	8007f04 <findSide>
    phaseNo=1;
 8008876:	2101      	movs	r1, #1
 8008878:	7021      	strb	r1, [r4, #0]
	clearDispBuffer();
 800887a:	f7fc fd41 	bl	8005300 <clearDispBuffer>
	phase_No=1;
 800887e:	4b25      	ldr	r3, [pc, #148]	; (8008914 <signal+0xd4>)
 8008880:	6019      	str	r1, [r3, #0]
	countDown();
 8008882:	f7fc fe09 	bl	8005498 <countDown>
	extractSlaveInfo();
 8008886:	f7ff fe7d 	bl	8008584 <extractSlaveInfo>
	phaseInfoData(planNo,phaseNo);
 800888a:	4b23      	ldr	r3, [pc, #140]	; (8008918 <signal+0xd8>)
 800888c:	7821      	ldrb	r1, [r4, #0]
 800888e:	7818      	ldrb	r0, [r3, #0]
 8008890:	f7ff fecc 	bl	800862c <phaseInfoData>
	if(isReprogrammed==1)
 8008894:	4b21      	ldr	r3, [pc, #132]	; (800891c <signal+0xdc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d02a      	beq.n	80088f2 <signal+0xb2>
    if(returnMode==1)
 800889c:	4b20      	ldr	r3, [pc, #128]	; (8008920 <signal+0xe0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d026      	beq.n	80088f2 <signal+0xb2>
}
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((mapIDForCurrentPhases== phaseMapIDList[cnt+1]) && (m == phaseMapIDList[cnt+4])) //if mapID and order number matches
 80088a8:	784d      	ldrb	r5, [r1, #1]
 80088aa:	4545      	cmp	r5, r8
 80088ac:	d117      	bne.n	80088de <signal+0x9e>
 80088ae:	790d      	ldrb	r5, [r1, #4]
 80088b0:	42aa      	cmp	r2, r5
 80088b2:	d114      	bne.n	80088de <signal+0x9e>
		phaseID=phaseMapIDList[cnt+2];//phaseID
 80088b4:	7888      	ldrb	r0, [r1, #2]
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 80088b6:	2501      	movs	r5, #1
 80088b8:	454d      	cmp	r5, r9
 80088ba:	da10      	bge.n	80088de <signal+0x9e>
		if(phaseID==currentPlanPhases[cntr1+5])
 80088bc:	193e      	adds	r6, r7, r4
 80088be:	f896 a005 	ldrb.w	sl, [r6, #5]
 80088c2:	4550      	cmp	r0, sl
 80088c4:	d112      	bne.n	80088ec <signal+0xac>
			Color[cntr2+1]=currentPlanPhases[cntr1+12]; //side 13
 80088c6:	eb0e 0503 	add.w	r5, lr, r3
 80088ca:	f896 a00c 	ldrb.w	sl, [r6, #12]
			Color[cntr2+2]=currentPlanPhases[cntr1+13]; //side24
 80088ce:	7b76      	ldrb	r6, [r6, #13]
			Color[cntr2]=m;
 80088d0:	f80e 2003 	strb.w	r2, [lr, r3]
			Color[cntr2+1]=currentPlanPhases[cntr1+12]; //side 13
 80088d4:	f885 a001 	strb.w	sl, [r5, #1]
			Color[cntr2+2]=currentPlanPhases[cntr1+13]; //side24
 80088d8:	70ae      	strb	r6, [r5, #2]
			Color[cntr2+3]=phaseID;
 80088da:	70e8      	strb	r0, [r5, #3]
			cntr2=cntr2+4;
 80088dc:	3304      	adds	r3, #4
	if(phaseID==currentPlanPhases[cntr1+5])
 80088de:	193d      	adds	r5, r7, r4
 80088e0:	3106      	adds	r1, #6
 80088e2:	796d      	ldrb	r5, [r5, #5]
 80088e4:	42a8      	cmp	r0, r5
		m++;
 80088e6:	bf08      	it	eq
 80088e8:	3201      	addeq	r2, #1
 80088ea:	e7bc      	b.n	8008866 <signal+0x26>
		cntr1=cntr1+18;
 80088ec:	3412      	adds	r4, #18
		for(int j=1;j<totalNoOfPhasesInMapID;j++)
 80088ee:	3501      	adds	r5, #1
 80088f0:	e7e2      	b.n	80088b8 <signal+0x78>
 80088f2:	2001      	movs	r0, #1
}
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	2000012c 	.word	0x2000012c
 80088fc:	20003a1e 	.word	0x20003a1e
 8008900:	200000e0 	.word	0x200000e0
 8008904:	20000124 	.word	0x20000124
 8008908:	20003c64 	.word	0x20003c64
 800890c:	20005226 	.word	0x20005226
 8008910:	20003758 	.word	0x20003758
 8008914:	200039f0 	.word	0x200039f0
 8008918:	20003aed 	.word	0x20003aed
 800891c:	200000d8 	.word	0x200000d8
 8008920:	20000110 	.word	0x20000110

08008924 <blinker>:
void blinker(){
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008928:	4f40      	ldr	r7, [pc, #256]	; (8008a2c <blinker+0x108>)
 800892a:	4e41      	ldr	r6, [pc, #260]	; (8008a30 <blinker+0x10c>)
int on=0;
 800892c:	2500      	movs	r5, #0
		 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 800892e:	2201      	movs	r2, #1
 8008930:	4940      	ldr	r1, [pc, #256]	; (8008a34 <blinker+0x110>)
 8008932:	4841      	ldr	r0, [pc, #260]	; (8008a38 <blinker+0x114>)
	if(changeMode==1)
 8008934:	4c41      	ldr	r4, [pc, #260]	; (8008a3c <blinker+0x118>)
		 HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1);//For ESP
 8008936:	f7f9 ffb6 	bl	80028a6 <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1);//for slave through LORA
 800893a:	2201      	movs	r2, #1
 800893c:	4940      	ldr	r1, [pc, #256]	; (8008a40 <blinker+0x11c>)
 800893e:	4841      	ldr	r0, [pc, #260]	; (8008a44 <blinker+0x120>)
 8008940:	f7f9 ffb1 	bl	80028a6 <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer4,1);//For slave through RS485
 8008944:	2201      	movs	r2, #1
 8008946:	4940      	ldr	r1, [pc, #256]	; (8008a48 <blinker+0x124>)
 8008948:	4840      	ldr	r0, [pc, #256]	; (8008a4c <blinker+0x128>)
 800894a:	f7f9 ffac 	bl	80028a6 <HAL_UART_Receive_IT>
		 HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);//For BLE
 800894e:	2201      	movs	r2, #1
 8008950:	493f      	ldr	r1, [pc, #252]	; (8008a50 <blinker+0x12c>)
 8008952:	4840      	ldr	r0, [pc, #256]	; (8008a54 <blinker+0x130>)
 8008954:	f7f9 ffa7 	bl	80028a6 <HAL_UART_Receive_IT>
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008958:	2200      	movs	r2, #0
 800895a:	4639      	mov	r1, r7
 800895c:	4630      	mov	r0, r6
 800895e:	f7f9 f99f 	bl	8001ca0 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008962:	2200      	movs	r2, #0
 8008964:	493c      	ldr	r1, [pc, #240]	; (8008a58 <blinker+0x134>)
 8008966:	4630      	mov	r0, r6
 8008968:	f7f9 f972 	bl	8001c50 <HAL_RTC_GetTime>
	if(changeMode==1)
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d103      	bne.n	800897a <blinker+0x56>
			changeMode=0;
 8008972:	2300      	movs	r3, #0
 8008974:	6023      	str	r3, [r4, #0]
				signal();
 8008976:	f7ff ff63 	bl	8008840 <signal>
	 if (!(secLast == sec1)) {
 800897a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8008a70 <blinker+0x14c>
 800897e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8008a74 <blinker+0x150>
		espCommunication();
 8008982:	f7ff fc5f 	bl	8008244 <espCommunication>
		sendMsgToSlave();
 8008986:	f7fc fee1 	bl	800574c <sendMsgToSlave>
		slaveResponse();
 800898a:	f7fd f851 	bl	8005a30 <slaveResponse>
	 if (!(secLast == sec1)) {
 800898e:	f8d8 2000 	ldr.w	r2, [r8]
 8008992:	f8d9 3000 	ldr.w	r3, [r9]
 8008996:	429a      	cmp	r2, r3
 8008998:	d018      	beq.n	80089cc <blinker+0xa8>
 800899a:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <blinker+0x138>)
 800899c:	2211      	movs	r2, #17
			Disp[0] = 0x11;
 800899e:	701a      	strb	r2, [r3, #0]
			Disp[1] = Disp[0];
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	705a      	strb	r2, [r3, #1]
			Disp[2] = Disp[1];
 80089a6:	785a      	ldrb	r2, [r3, #1]
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	709a      	strb	r2, [r3, #2]
			Disp[3] = Disp[2];
 80089ac:	789a      	ldrb	r2, [r3, #2]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	70da      	strb	r2, [r3, #3]
		 if(on==0){
 80089b2:	bb25      	cbnz	r5, 80089fe <blinker+0xda>
			Disp[4] = 0x44; //01000100	;
 80089b4:	2244      	movs	r2, #68	; 0x44
 80089b6:	711a      	strb	r2, [r3, #4]
			Disp[5] = 0x44; //01000100	;
 80089b8:	715a      	strb	r2, [r3, #5]
			Disp[6] = 0x0A;
 80089ba:	220a      	movs	r2, #10
 80089bc:	719a      	strb	r2, [r3, #6]
			on=1;
 80089be:	2501      	movs	r5, #1
			function8();
 80089c0:	f7ff f986 	bl	8007cd0 <function8>
			secLast = sec1;
 80089c4:	f8d9 3000 	ldr.w	r3, [r9]
 80089c8:	f8c8 3000 	str.w	r3, [r8]
	 HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80089cc:	2200      	movs	r2, #0
 80089ce:	4917      	ldr	r1, [pc, #92]	; (8008a2c <blinker+0x108>)
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7f9 f965 	bl	8001ca0 <HAL_RTC_GetDate>
	if(!(sDate.Date == DateLast))
 80089d6:	4b22      	ldr	r3, [pc, #136]	; (8008a60 <blinker+0x13c>)
 80089d8:	78ba      	ldrb	r2, [r7, #2]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d001      	beq.n	80089e4 <blinker+0xc0>
			getDateAndTimeFromGPS();
 80089e0:	f7fd fc5a 	bl	8006298 <getDateAndTimeFromGPS>
	if (sTime.Hours==(planOffHr)){
 80089e4:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <blinker+0x134>)
 80089e6:	491f      	ldr	r1, [pc, #124]	; (8008a64 <blinker+0x140>)
 80089e8:	7813      	ldrb	r3, [r2, #0]
 80089ea:	7809      	ldrb	r1, [r1, #0]
 80089ec:	428b      	cmp	r3, r1
 80089ee:	d10d      	bne.n	8008a0c <blinker+0xe8>
		if (sTime.Minutes>planOffM)
 80089f0:	7851      	ldrb	r1, [r2, #1]
 80089f2:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <blinker+0x144>)
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	4291      	cmp	r1, r2
 80089f8:	d909      	bls.n	8008a0e <blinker+0xea>
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				Disp[4] = 0x12; //00000000	;
 80089fe:	2212      	movs	r2, #18
 8008a00:	711a      	strb	r2, [r3, #4]
				Disp[5] = 0x12; //00000000	;
 8008a02:	715a      	strb	r2, [r3, #5]
				Disp[6] = 0x0A;
 8008a04:	220a      	movs	r2, #10
 8008a06:	719a      	strb	r2, [r3, #6]
				on=0;
 8008a08:	2500      	movs	r5, #0
 8008a0a:	e7d9      	b.n	80089c0 <blinker+0x9c>
		if (sTime.Hours>(planOffHr))
 8008a0c:	d80b      	bhi.n	8008a26 <blinker+0x102>
			if (sTime.Hours<(planOnHr))
 8008a0e:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <blinker+0x148>)
 8008a10:	7812      	ldrb	r2, [r2, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d807      	bhi.n	8008a26 <blinker+0x102>
			if(changeMode==1){
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d188      	bne.n	800892e <blinker+0xa>
			changeMode=0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6023      	str	r3, [r4, #0]
			signal();
 8008a20:	f7ff ff0e 	bl	8008840 <signal>
 8008a24:	e783      	b.n	800892e <blinker+0xa>
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2000117a 	.word	0x2000117a
 8008a30:	20001188 	.word	0x20001188
 8008a34:	20000ffc 	.word	0x20000ffc
 8008a38:	20000e30 	.word	0x20000e30
 8008a3c:	20003654 	.word	0x20003654
 8008a40:	2000136c 	.word	0x2000136c
 8008a44:	2000132c 	.word	0x2000132c
 8008a48:	20001458 	.word	0x20001458
 8008a4c:	200015a4 	.word	0x200015a4
 8008a50:	20001244 	.word	0x20001244
 8008a54:	20001108 	.word	0x20001108
 8008a58:	20000ec4 	.word	0x20000ec4
 8008a5c:	200010dd 	.word	0x200010dd
 8008a60:	2000160c 	.word	0x2000160c
 8008a64:	20005210 	.word	0x20005210
 8008a68:	20003af7 	.word	0x20003af7
 8008a6c:	20002645 	.word	0x20002645
 8008a70:	20000114 	.word	0x20000114
 8008a74:	20000154 	.word	0x20000154

08008a78 <planDetailSD>:
	incCnt=incCnt-19;
 8008a78:	4a32      	ldr	r2, [pc, #200]	; (8008b44 <planDetailSD+0xcc>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
int planDetailSD(int planNo) {
 8008a7c:	b510      	push	{r4, lr}
	incCnt=incCnt-19;
 8008a7e:	f1a3 0113 	sub.w	r1, r3, #19
 8008a82:	6011      	str	r1, [r2, #0]
	plan_ID = planDetailsArray[incCnt+1];
 8008a84:	4a30      	ldr	r2, [pc, #192]	; (8008b48 <planDetailSD+0xd0>)
	planMode = planDetailsArray[incCnt+16];
 8008a86:	4c31      	ldr	r4, [pc, #196]	; (8008b4c <planDetailSD+0xd4>)
	plan_ID = planDetailsArray[incCnt+1];
 8008a88:	4413      	add	r3, r2
 8008a8a:	4a31      	ldr	r2, [pc, #196]	; (8008b50 <planDetailSD+0xd8>)
 8008a8c:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8008a90:	7011      	strb	r1, [r2, #0]
	planOnHr = planDetailsArray[incCnt+2];
 8008a92:	4a30      	ldr	r2, [pc, #192]	; (8008b54 <planDetailSD+0xdc>)
 8008a94:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 8008a98:	7011      	strb	r1, [r2, #0]
	planOnM = planDetailsArray[incCnt+3];
 8008a9a:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <planDetailSD+0xe0>)
 8008a9c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8008aa0:	7011      	strb	r1, [r2, #0]
	planOffHr = planDetailsArray[incCnt+4];
 8008aa2:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <planDetailSD+0xe4>)
 8008aa4:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 8008aa8:	7011      	strb	r1, [r2, #0]
	planOffM = planDetailsArray[incCnt+5];
 8008aaa:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <planDetailSD+0xe8>)
 8008aac:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8008ab0:	7011      	strb	r1, [r2, #0]
	planS1GT = planDetailsArray[incCnt+6];
 8008ab2:	4a2c      	ldr	r2, [pc, #176]	; (8008b64 <planDetailSD+0xec>)
 8008ab4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8008ab8:	7011      	strb	r1, [r2, #0]
	planS2GT = planDetailsArray[incCnt+7];
 8008aba:	4a2b      	ldr	r2, [pc, #172]	; (8008b68 <planDetailSD+0xf0>)
 8008abc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8008ac0:	7011      	strb	r1, [r2, #0]
	planS3GT = planDetailsArray[incCnt+8];
 8008ac2:	4a2a      	ldr	r2, [pc, #168]	; (8008b6c <planDetailSD+0xf4>)
 8008ac4:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8008ac8:	7011      	strb	r1, [r2, #0]
	planS4GT = planDetailsArray[incCnt+9];
 8008aca:	4a29      	ldr	r2, [pc, #164]	; (8008b70 <planDetailSD+0xf8>)
 8008acc:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8008ad0:	7011      	strb	r1, [r2, #0]
	planS5GT = planDetailsArray[incCnt+10];
 8008ad2:	4a28      	ldr	r2, [pc, #160]	; (8008b74 <planDetailSD+0xfc>)
 8008ad4:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8008ad8:	7011      	strb	r1, [r2, #0]
	planA1GT = planDetailsArray[incCnt+11];
 8008ada:	4a27      	ldr	r2, [pc, #156]	; (8008b78 <planDetailSD+0x100>)
 8008adc:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8008ae0:	7011      	strb	r1, [r2, #0]
	planA2GT = planDetailsArray[incCnt+12];
 8008ae2:	4a26      	ldr	r2, [pc, #152]	; (8008b7c <planDetailSD+0x104>)
 8008ae4:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8008ae8:	7011      	strb	r1, [r2, #0]
	planA3GT = planDetailsArray[incCnt+13];
 8008aea:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <planDetailSD+0x108>)
 8008aec:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8008af0:	7011      	strb	r1, [r2, #0]
	planA4GT = planDetailsArray[incCnt+14];
 8008af2:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <planDetailSD+0x10c>)
 8008af4:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8008af8:	7011      	strb	r1, [r2, #0]
	planA5GT = planDetailsArray[incCnt+15];
 8008afa:	4a23      	ldr	r2, [pc, #140]	; (8008b88 <planDetailSD+0x110>)
 8008afc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8008b00:	7011      	strb	r1, [r2, #0]
	planMode = planDetailsArray[incCnt+16];
 8008b02:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8008b06:	7022      	strb	r2, [r4, #0]
	noOfPhase = planDetailsArray[incCnt+17];
 8008b08:	4a20      	ldr	r2, [pc, #128]	; (8008b8c <planDetailSD+0x114>)
 8008b0a:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8008b0e:	7013      	strb	r3, [r2, #0]
	totalPhase=noOfPhase;
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <planDetailSD+0x118>)
 8008b12:	7013      	strb	r3, [r2, #0]
	getCurrentPlanTotalNoOfPhases(); //get the total no of phases in current dat/date plan and save it in phaseList[].
 8008b14:	f7fe ff1e 	bl	8007954 <getCurrentPlanTotalNoOfPhases>
	getCurrentPlanPhases();
 8008b18:	f7fe ffb8 	bl	8007a8c <getCurrentPlanPhases>
		if (planMode == 1 )
 8008b1c:	7823      	ldrb	r3, [r4, #0]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d10a      	bne.n	8008b38 <planDetailSD+0xc0>
			blinker();
 8008b22:	f7ff feff 	bl	8008924 <blinker>
		 if(returnMode==1)
 8008b26:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <planDetailSD+0x11c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d007      	beq.n	8008b3e <planDetailSD+0xc6>
		 if(isReprogrammed==1)
 8008b2e:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <planDetailSD+0x120>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d003      	beq.n	8008b3e <planDetailSD+0xc6>
}
 8008b36:	bd10      	pop	{r4, pc}
			signal();
 8008b38:	f7ff fe82 	bl	8008840 <signal>
 8008b3c:	e7f3      	b.n	8008b26 <planDetailSD+0xae>
 8008b3e:	2001      	movs	r0, #1
}
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	bf00      	nop
 8008b44:	200000d4 	.word	0x200000d4
 8008b48:	20003bb5 	.word	0x20003bb5
 8008b4c:	20005212 	.word	0x20005212
 8008b50:	20003650 	.word	0x20003650
 8008b54:	20002645 	.word	0x20002645
 8008b58:	20003a0e 	.word	0x20003a0e
 8008b5c:	20005210 	.word	0x20005210
 8008b60:	20003af7 	.word	0x20003af7
 8008b64:	200037dc 	.word	0x200037dc
 8008b68:	2000160d 	.word	0x2000160d
 8008b6c:	20003a1c 	.word	0x20003a1c
 8008b70:	20003c4b 	.word	0x20003c4b
 8008b74:	2000001d 	.word	0x2000001d
 8008b78:	20003c4c 	.word	0x20003c4c
 8008b7c:	20003a14 	.word	0x20003a14
 8008b80:	20003af6 	.word	0x20003af6
 8008b84:	20003b00 	.word	0x20003b00
 8008b88:	2000001c 	.word	0x2000001c
 8008b8c:	200000e6 	.word	0x200000e6
 8008b90:	20000129 	.word	0x20000129
 8008b94:	20000110 	.word	0x20000110
 8008b98:	200000d8 	.word	0x200000d8

08008b9c <init4>:
	 returnMode=0;
 8008b9c:	4ba6      	ldr	r3, [pc, #664]	; (8008e38 <init4+0x29c>)
void init4(void) {
 8008b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 returnMode=0;
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	601d      	str	r5, [r3, #0]
     isReprogrammed=0;
 8008ba6:	4ba5      	ldr	r3, [pc, #660]	; (8008e3c <init4+0x2a0>)
     isProgrammed = readBytes[0];
 8008ba8:	4ca5      	ldr	r4, [pc, #660]	; (8008e40 <init4+0x2a4>)
     isReprogrammed=0;
 8008baa:	601d      	str	r5, [r3, #0]
     clearReadBytes();
 8008bac:	f7fc fb92 	bl	80052d4 <clearReadBytes>
     SDcardReadSeek("prog.txt", 3, 0);
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	2103      	movs	r1, #3
 8008bb4:	48a3      	ldr	r0, [pc, #652]	; (8008e44 <init4+0x2a8>)
 8008bb6:	f7fb ff35 	bl	8004a24 <SDcardReadSeek>
     isProgrammed = readBytes[0];
 8008bba:	7820      	ldrb	r0, [r4, #0]
     clearReadBytes();
 8008bbc:	f7fc fb8a 	bl	80052d4 <clearReadBytes>
     if(isProgrammed==1){
 8008bc0:	2801      	cmp	r0, #1
 8008bc2:	d104      	bne.n	8008bce <init4+0x32>
	SDcardReadSeek("infoN.txt", 16, 0);
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	2110      	movs	r1, #16
 8008bc8:	489f      	ldr	r0, [pc, #636]	; (8008e48 <init4+0x2ac>)
 8008bca:	f7fb ff2b 	bl	8004a24 <SDcardReadSeek>
	junctionId = readBytes[0];
 8008bce:	4a9f      	ldr	r2, [pc, #636]	; (8008e4c <init4+0x2b0>)
 8008bd0:	7823      	ldrb	r3, [r4, #0]
	programVersionNo = readBytes[1];
 8008bd2:	4e9f      	ldr	r6, [pc, #636]	; (8008e50 <init4+0x2b4>)
	junctionId = readBytes[0];
 8008bd4:	7013      	strb	r3, [r2, #0]
	programVersionNo = readBytes[1];
 8008bd6:	7862      	ldrb	r2, [r4, #1]
 8008bd8:	7032      	strb	r2, [r6, #0]
	fileNo = readBytes[2];
 8008bda:	4a9e      	ldr	r2, [pc, #632]	; (8008e54 <init4+0x2b8>)
 8008bdc:	78a1      	ldrb	r1, [r4, #2]
 8008bde:	7011      	strb	r1, [r2, #0]
	noOfSides = readBytes[4];
 8008be0:	4a9d      	ldr	r2, [pc, #628]	; (8008e58 <init4+0x2bc>)
 8008be2:	7921      	ldrb	r1, [r4, #4]
 8008be4:	7011      	strb	r1, [r2, #0]
	noOfDateSlots = readBytes[5];
 8008be6:	499d      	ldr	r1, [pc, #628]	; (8008e5c <init4+0x2c0>)
 8008be8:	7962      	ldrb	r2, [r4, #5]
 8008bea:	700a      	strb	r2, [r1, #0]
	noOfDaySlots = readBytes[6];
 8008bec:	4a9c      	ldr	r2, [pc, #624]	; (8008e60 <init4+0x2c4>)
 8008bee:	79a0      	ldrb	r0, [r4, #6]
 8008bf0:	7010      	strb	r0, [r2, #0]
	noOfPlans = readBytes[7];
 8008bf2:	489c      	ldr	r0, [pc, #624]	; (8008e64 <init4+0x2c8>)
 8008bf4:	79e5      	ldrb	r5, [r4, #7]
 8008bf6:	7005      	strb	r5, [r0, #0]
	padestarianTime = readBytes[8];
 8008bf8:	489b      	ldr	r0, [pc, #620]	; (8008e68 <init4+0x2cc>)
 8008bfa:	7a25      	ldrb	r5, [r4, #8]
 8008bfc:	6005      	str	r5, [r0, #0]
	side1PoleType = readBytes[10]; // 1= standard ,2= l Cantilever,3= T cantilever pole
 8008bfe:	489b      	ldr	r0, [pc, #620]	; (8008e6c <init4+0x2d0>)
 8008c00:	7aa5      	ldrb	r5, [r4, #10]
 8008c02:	6005      	str	r5, [r0, #0]
	side2PoleType = readBytes[11];
 8008c04:	489a      	ldr	r0, [pc, #616]	; (8008e70 <init4+0x2d4>)
 8008c06:	7ae5      	ldrb	r5, [r4, #11]
 8008c08:	6005      	str	r5, [r0, #0]
	side3PoleType = readBytes[12];
 8008c0a:	489a      	ldr	r0, [pc, #616]	; (8008e74 <init4+0x2d8>)
 8008c0c:	7b25      	ldrb	r5, [r4, #12]
 8008c0e:	6005      	str	r5, [r0, #0]
	side4PoleType = readBytes[13];
 8008c10:	4899      	ldr	r0, [pc, #612]	; (8008e78 <init4+0x2dc>)
 8008c12:	7b65      	ldrb	r5, [r4, #13]
 8008c14:	6005      	str	r5, [r0, #0]
	side5PoleType = readBytes[14];
 8008c16:	4899      	ldr	r0, [pc, #612]	; (8008e7c <init4+0x2e0>)
 8008c18:	7ba5      	ldrb	r5, [r4, #14]
 8008c1a:	6005      	str	r5, [r0, #0]
	if (junctionId == 0xFF || junctionId == 0x00)
 8008c1c:	3b01      	subs	r3, #1
	totalNoOfPhases=readBytes[9];
 8008c1e:	4898      	ldr	r0, [pc, #608]	; (8008e80 <init4+0x2e4>)
 8008c20:	7a65      	ldrb	r5, [r4, #9]
 8008c22:	7005      	strb	r5, [r0, #0]
	if (junctionId == 0xFF || junctionId == 0x00)
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2bfd      	cmp	r3, #253	; 0xfd
 8008c28:	468a      	mov	sl, r1
 8008c2a:	4691      	mov	r9, r2
 8008c2c:	4d95      	ldr	r5, [pc, #596]	; (8008e84 <init4+0x2e8>)
 8008c2e:	d931      	bls.n	8008c94 <init4+0xf8>
	     if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5))
 8008c30:	2120      	movs	r1, #32
 8008c32:	4895      	ldr	r0, [pc, #596]	; (8008e88 <init4+0x2ec>)
 8008c34:	f7f7 ff84 	bl	8000b40 <HAL_GPIO_ReadPin>
 8008c38:	4b94      	ldr	r3, [pc, #592]	; (8008e8c <init4+0x2f0>)
 8008c3a:	b348      	cbz	r0, 8008c90 <init4+0xf4>
	    	  programFromBLE=1;
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
	     program3();
 8008c40:	f7ff fa04 	bl	800804c <program3>
	programVersionNoLast = programVersionNo;
 8008c44:	4b92      	ldr	r3, [pc, #584]	; (8008e90 <init4+0x2f4>)
 8008c46:	7832      	ldrb	r2, [r6, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
  	 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008c4a:	4992      	ldr	r1, [pc, #584]	; (8008e94 <init4+0x2f8>)
 8008c4c:	4892      	ldr	r0, [pc, #584]	; (8008e98 <init4+0x2fc>)
  		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008c4e:	4f8d      	ldr	r7, [pc, #564]	; (8008e84 <init4+0x2e8>)
 8008c50:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8008e98 <init4+0x2fc>
  	 HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8008c54:	2200      	movs	r2, #0
 8008c56:	f7f8 fffb 	bl	8001c50 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4989      	ldr	r1, [pc, #548]	; (8008e84 <init4+0x2e8>)
 8008c5e:	488e      	ldr	r0, [pc, #568]	; (8008e98 <init4+0x2fc>)
 8008c60:	f7f9 f81e 	bl	8001ca0 <HAL_RTC_GetDate>
  	while (sDate.Year==0){
 8008c64:	78ee      	ldrb	r6, [r5, #3]
 8008c66:	b31e      	cbz	r6, 8008cb0 <init4+0x114>
  	dayID = 0xFE;
 8008c68:	4b8c      	ldr	r3, [pc, #560]	; (8008e9c <init4+0x300>)
  	dateID = 0xFE;
 8008c6a:	4f8d      	ldr	r7, [pc, #564]	; (8008ea0 <init4+0x304>)
  		 dateSlot[j]= readBytes[j+3];
 8008c6c:	4e8d      	ldr	r6, [pc, #564]	; (8008ea4 <init4+0x308>)
  	dateID = 0xFE;
 8008c6e:	22fe      	movs	r2, #254	; 0xfe
 8008c70:	703a      	strb	r2, [r7, #0]
  	dayID = 0xFE;
 8008c72:	701a      	strb	r2, [r3, #0]
  	for(int i=1;i<noOfDateSlots+1;i++)
 8008c74:	f04f 0b01 	mov.w	fp, #1
 8008c78:	4698      	mov	r8, r3
 8008c7a:	220b      	movs	r2, #11
 8008c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c80:	fb02 f00b 	mul.w	r0, r2, fp
 8008c84:	459b      	cmp	fp, r3
 8008c86:	f1a0 000b 	sub.w	r0, r0, #11
 8008c8a:	dd19      	ble.n	8008cc0 <init4+0x124>
  	noOfPlansN = 0xFE;
 8008c8c:	26fe      	movs	r6, #254	; 0xfe
 8008c8e:	e037      	b.n	8008d00 <init4+0x164>
	    	  programFromBLE=0;
 8008c90:	6018      	str	r0, [r3, #0]
 8008c92:	e7d5      	b.n	8008c40 <init4+0xa4>
		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008c94:	2200      	movs	r2, #0
 8008c96:	4629      	mov	r1, r5
 8008c98:	487f      	ldr	r0, [pc, #508]	; (8008e98 <init4+0x2fc>)
 8008c9a:	f7f9 f801 	bl	8001ca0 <HAL_RTC_GetDate>
		if((sDate.Year==0))
 8008c9e:	78eb      	ldrb	r3, [r5, #3]
 8008ca0:	b913      	cbnz	r3, 8008ca8 <init4+0x10c>
		function9();
 8008ca2:	f7fd f811 	bl	8005cc8 <function9>
 8008ca6:	e7cd      	b.n	8008c44 <init4+0xa8>
			DateLast=sDate.Date;
 8008ca8:	4b7f      	ldr	r3, [pc, #508]	; (8008ea8 <init4+0x30c>)
 8008caa:	78aa      	ldrb	r2, [r5, #2]
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e7c9      	b.n	8008c44 <init4+0xa8>
  		function9();
 8008cb0:	f7fd f80a 	bl	8005cc8 <function9>
  		HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	4640      	mov	r0, r8
 8008cba:	f7f8 fff1 	bl	8001ca0 <HAL_RTC_GetDate>
 8008cbe:	e7d1      	b.n	8008c64 <init4+0xc8>
 8008cc0:	9201      	str	r2, [sp, #4]
  	    readDateSD(counter);
 8008cc2:	f7fc fb8d 	bl	80053e0 <readDateSD>
  	for(int j=0;j<6;j++){
 8008cc6:	9a01      	ldr	r2, [sp, #4]
 8008cc8:	2300      	movs	r3, #0
  		 dateSlot[j]= readBytes[j+3];
 8008cca:	18e1      	adds	r1, r4, r3
 8008ccc:	78c9      	ldrb	r1, [r1, #3]
 8008cce:	5599      	strb	r1, [r3, r6]
  	for(int j=0;j<6;j++){
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d1f9      	bne.n	8008cca <init4+0x12e>
if(dateSlot[5]==sDate.Year)//comparing present year with ToYear
 8008cd6:	7971      	ldrb	r1, [r6, #5]
 8008cd8:	78eb      	ldrb	r3, [r5, #3]
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	d16f      	bne.n	8008dbe <init4+0x222>
	if(dateSlot[4] >= sDate.Month)//comparing present month with ToMonth
 8008cde:	786b      	ldrb	r3, [r5, #1]
 8008ce0:	7931      	ldrb	r1, [r6, #4]
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d376      	bcc.n	8008dd4 <init4+0x238>
		if(dateSlot[1] <= sDate.Month)//comparing present month with FromMonth
 8008ce6:	7871      	ldrb	r1, [r6, #1]
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	d873      	bhi.n	8008dd4 <init4+0x238>
			if(dateSlot[3] >= sDate.Date)//comparing present day with ToDay
 8008cec:	78ab      	ldrb	r3, [r5, #2]
 8008cee:	78f1      	ldrb	r1, [r6, #3]
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d36f      	bcc.n	8008dd4 <init4+0x238>
				if(dateSlot[0] <= sDate.Date)//comparing present day with FromDay
 8008cf4:	7831      	ldrb	r1, [r6, #0]
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d86c      	bhi.n	8008dd4 <init4+0x238>
					dateID=readBytes[2];
 8008cfa:	78a3      	ldrb	r3, [r4, #2]
					noOfPlansN=readBytes[9];
 8008cfc:	7a66      	ldrb	r6, [r4, #9]
					dateID=readBytes[2];
 8008cfe:	703b      	strb	r3, [r7, #0]
if(dateID==0xFE) //if means the present date is not coming in date slot and we have to find it in day
 8008d00:	783b      	ldrb	r3, [r7, #0]
 8008d02:	2bfe      	cmp	r3, #254	; 0xfe
 8008d04:	d115      	bne.n	8008d32 <init4+0x196>
 8008d06:	f04f 0a01 	mov.w	sl, #1
 8008d0a:	f04f 0b06 	mov.w	fp, #6
	for(int i=1;i<noOfDaySlots+1;i++)
 8008d0e:	f899 3000 	ldrb.w	r3, [r9]
 8008d12:	fb0b f00a 	mul.w	r0, fp, sl
 8008d16:	459a      	cmp	sl, r3
 8008d18:	f1a0 0006 	sub.w	r0, r0, #6
 8008d1c:	dc09      	bgt.n	8008d32 <init4+0x196>
		   readDaySD(counter);
 8008d1e:	f7fc fb6b 	bl	80053f8 <readDaySD>
		  	if(sDate.WeekDay==readBytes[3])
 8008d22:	782a      	ldrb	r2, [r5, #0]
 8008d24:	78e3      	ldrb	r3, [r4, #3]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d157      	bne.n	8008dda <init4+0x23e>
		  		dayID=readBytes[2];
 8008d2a:	78a3      	ldrb	r3, [r4, #2]
		  		noOfPlansN=readBytes[4];
 8008d2c:	7926      	ldrb	r6, [r4, #4]
		  		dayID=readBytes[2];
 8008d2e:	f888 3000 	strb.w	r3, [r8]
if((dayID==0xFE)&&(dateID==0xFE))
 8008d32:	f898 3000 	ldrb.w	r3, [r8]
 8008d36:	2bfe      	cmp	r3, #254	; 0xfe
 8008d38:	d116      	bne.n	8008d68 <init4+0x1cc>
 8008d3a:	783b      	ldrb	r3, [r7, #0]
 8008d3c:	2bfe      	cmp	r3, #254	; 0xfe
 8008d3e:	d113      	bne.n	8008d68 <init4+0x1cc>
 8008d40:	2501      	movs	r5, #1
 8008d42:	f04f 0a06 	mov.w	sl, #6
	for(int i=1;i<noOfDaySlots+1;i++)
 8008d46:	f899 3000 	ldrb.w	r3, [r9]
 8008d4a:	fb0a f005 	mul.w	r0, sl, r5
 8008d4e:	429d      	cmp	r5, r3
 8008d50:	f1a0 0006 	sub.w	r0, r0, #6
 8008d54:	dc08      	bgt.n	8008d68 <init4+0x1cc>
		   readDaySD(counter);
 8008d56:	f7fc fb4f 	bl	80053f8 <readDaySD>
		  	if(0==readBytes[2]){
 8008d5a:	78a3      	ldrb	r3, [r4, #2]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d13f      	bne.n	8008de0 <init4+0x244>
		  		noOfPlansN=readBytes[4];
 8008d60:	7926      	ldrb	r6, [r4, #4]
		  		dateID=0;
 8008d62:	703b      	strb	r3, [r7, #0]
		  		dayID=readBytes[2];
 8008d64:	f888 3000 	strb.w	r3, [r8]
countNoOfMapDetails();
 8008d68:	f7fe fb4e 	bl	8007408 <countNoOfMapDetails>
EEPROM_WriteArray(planDetailsArray,counterOfPlan,eepromAddress);
 8008d6c:	4c4f      	ldr	r4, [pc, #316]	; (8008eac <init4+0x310>)
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008d6e:	4d50      	ldr	r5, [pc, #320]	; (8008eb0 <init4+0x314>)
currentDayAllPlan();
 8008d70:	f7fe fd38 	bl	80077e4 <currentDayAllPlan>
clearPlanTimeBuffer();
 8008d74:	f7fc fb0a 	bl	800538c <clearPlanTimeBuffer>
HAL_Delay(50);
 8008d78:	2032      	movs	r0, #50	; 0x32
 8008d7a:	f7f7 fc23 	bl	80005c4 <HAL_Delay>
eepromAddress=4001;
 8008d7e:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <init4+0x318>)
EEPROM_WriteArray(planDetailsArray,counterOfPlan,eepromAddress);
 8008d80:	6821      	ldr	r1, [r4, #0]
 8008d82:	484d      	ldr	r0, [pc, #308]	; (8008eb8 <init4+0x31c>)
eepromAddress=4001;
 8008d84:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8008d88:	601a      	str	r2, [r3, #0]
EEPROM_WriteArray(planDetailsArray,counterOfPlan,eepromAddress);
 8008d8a:	f7fb feff 	bl	8004b8c <EEPROM_WriteArray>
  HAL_FLASH_Unlock();
 8008d8e:	f7f7 fd43 	bl	8000818 <HAL_FLASH_Unlock>
  Flash_Write(ADDR_FLASH_SECTOR_11,planDetailsArray,counterOfPlan);
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	4948      	ldr	r1, [pc, #288]	; (8008eb8 <init4+0x31c>)
 8008d96:	4849      	ldr	r0, [pc, #292]	; (8008ebc <init4+0x320>)
 8008d98:	f7fb ff3e 	bl	8004c18 <Flash_Write>
  HAL_FLASH_Lock();
 8008d9c:	f7f7 fd4e 	bl	800083c <HAL_FLASH_Lock>
 8008da0:	4b47      	ldr	r3, [pc, #284]	; (8008ec0 <init4+0x324>)
if (sTime.Hours>planTime[2])
 8008da2:	4a3c      	ldr	r2, [pc, #240]	; (8008e94 <init4+0x2f8>)
 8008da4:	6818      	ldr	r0, [r3, #0]
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008da6:	f8df c110 	ldr.w	ip, [pc, #272]	; 8008eb8 <init4+0x31c>
if (sTime.Hours>planTime[2])
 8008daa:	7817      	ldrb	r7, [r2, #0]
if   (sTime.Minutes < planTime[1])
 8008dac:	f892 e001 	ldrb.w	lr, [r2, #1]
for(int i=1;i<noOfPlansN+1;i++)
 8008db0:	2401      	movs	r4, #1
 8008db2:	2200      	movs	r2, #0
 8008db4:	42a6      	cmp	r6, r4
 8008db6:	da15      	bge.n	8008de4 <init4+0x248>
 8008db8:	b38a      	cbz	r2, 8008e1e <init4+0x282>
 8008dba:	6018      	str	r0, [r3, #0]
 8008dbc:	e02f      	b.n	8008e1e <init4+0x282>
if(dateSlot[5]>sDate.Year)//comparing present year with ToYear
 8008dbe:	d909      	bls.n	8008dd4 <init4+0x238>
	if(dateSlot[2]== sDate.Year)//comparing present year with FromYear
 8008dc0:	78b1      	ldrb	r1, [r6, #2]
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d106      	bne.n	8008dd4 <init4+0x238>
		if(dateSlot[1]==sDate.Month)//comparing present month with FromMonth
 8008dc6:	7871      	ldrb	r1, [r6, #1]
 8008dc8:	786b      	ldrb	r3, [r5, #1]
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	d102      	bne.n	8008dd4 <init4+0x238>
			if(dateSlot[0] <= sDate.Date)//comparing present day with FromDay
 8008dce:	7831      	ldrb	r1, [r6, #0]
 8008dd0:	78ab      	ldrb	r3, [r5, #2]
 8008dd2:	e790      	b.n	8008cf6 <init4+0x15a>
  	for(int i=1;i<noOfDateSlots+1;i++)
 8008dd4:	f10b 0b01 	add.w	fp, fp, #1
 8008dd8:	e750      	b.n	8008c7c <init4+0xe0>
	for(int i=1;i<noOfDaySlots+1;i++)
 8008dda:	f10a 0a01 	add.w	sl, sl, #1
 8008dde:	e796      	b.n	8008d0e <init4+0x172>
	for(int i=1;i<noOfDaySlots+1;i++)
 8008de0:	3501      	adds	r5, #1
 8008de2:	e7b0      	b.n	8008d46 <init4+0x1aa>
 8008de4:	2200      	movs	r2, #0
	        planTime[j]= planDetailsArray[incCnt+2+j];
 8008de6:	1881      	adds	r1, r0, r2
 8008de8:	4461      	add	r1, ip
 8008dea:	7889      	ldrb	r1, [r1, #2]
 8008dec:	5551      	strb	r1, [r2, r5]
	  for(int j=0;j<4;j++){
 8008dee:	3201      	adds	r2, #1
 8008df0:	2a04      	cmp	r2, #4
 8008df2:	d1f8      	bne.n	8008de6 <init4+0x24a>
if (sTime.Hours>planTime[2])
 8008df4:	78aa      	ldrb	r2, [r5, #2]
 8008df6:	4297      	cmp	r7, r2
	       incCnt=incCnt+19;
 8008df8:	f100 0013 	add.w	r0, r0, #19
if (sTime.Hours>planTime[2])
 8008dfc:	d819      	bhi.n	8008e32 <init4+0x296>
if (sTime.Hours==planTime[2])
 8008dfe:	d105      	bne.n	8008e0c <init4+0x270>
if   (sTime.Minutes < planTime[1])
 8008e00:	7869      	ldrb	r1, [r5, #1]
 8008e02:	458e      	cmp	lr, r1
 8008e04:	d201      	bcs.n	8008e0a <init4+0x26e>
 8008e06:	6018      	str	r0, [r3, #0]
 8008e08:	e007      	b.n	8008e1a <init4+0x27e>
else if(sTime.Minutes > planTime[1])
 8008e0a:	d812      	bhi.n	8008e32 <init4+0x296>
if (sTime.Hours==planTime[0])
 8008e0c:	7829      	ldrb	r1, [r5, #0]
 8008e0e:	428f      	cmp	r7, r1
 8008e10:	d10c      	bne.n	8008e2c <init4+0x290>
 8008e12:	6018      	str	r0, [r3, #0]
{if (!(sTime.Minutes <= planTime[1]))
 8008e14:	786b      	ldrb	r3, [r5, #1]
 8008e16:	4573      	cmp	r3, lr
 8008e18:	d201      	bcs.n	8008e1e <init4+0x282>
			   planNo=i;
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <init4+0x328>)
 8008e1c:	701c      	strb	r4, [r3, #0]
planDetailSD(planNo);
 8008e1e:	4b29      	ldr	r3, [pc, #164]	; (8008ec4 <init4+0x328>)
 8008e20:	7818      	ldrb	r0, [r3, #0]
}
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
planDetailSD(planNo);
 8008e28:	f7ff be26 	b.w	8008a78 <planDetailSD>
  if (sTime.Hours>planTime[0])
 8008e2c:	d901      	bls.n	8008e32 <init4+0x296>
	   if (sTime.Hours< planTime[2]){
 8008e2e:	4297      	cmp	r7, r2
 8008e30:	d3e9      	bcc.n	8008e06 <init4+0x26a>
for(int i=1;i<noOfPlansN+1;i++)
 8008e32:	3401      	adds	r4, #1
 8008e34:	2201      	movs	r2, #1
 8008e36:	e7bd      	b.n	8008db4 <init4+0x218>
 8008e38:	20000110 	.word	0x20000110
 8008e3c:	200000d8 	.word	0x200000d8
 8008e40:	20000314 	.word	0x20000314
 8008e44:	08009875 	.word	0x08009875
 8008e48:	08009858 	.word	0x08009858
 8008e4c:	2000000d 	.word	0x2000000d
 8008e50:	2000010d 	.word	0x2000010d
 8008e54:	2000000c 	.word	0x2000000c
 8008e58:	200000ed 	.word	0x200000ed
 8008e5c:	200000e4 	.word	0x200000e4
 8008e60:	200000e5 	.word	0x200000e5
 8008e64:	200000ec 	.word	0x200000ec
 8008e68:	20000018 	.word	0x20000018
 8008e6c:	20001640 	.word	0x20001640
 8008e70:	2000365c 	.word	0x2000365c
 8008e74:	20003a18 	.word	0x20003a18
 8008e78:	20003ae8 	.word	0x20003ae8
 8008e7c:	20003a10 	.word	0x20003a10
 8008e80:	20000120 	.word	0x20000120
 8008e84:	2000117a 	.word	0x2000117a
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	2000369c 	.word	0x2000369c
 8008e90:	2000010e 	.word	0x2000010e
 8008e94:	20000ec4 	.word	0x20000ec4
 8008e98:	20001188 	.word	0x20001188
 8008e9c:	200000be 	.word	0x200000be
 8008ea0:	200000bc 	.word	0x200000bc
 8008ea4:	20003d64 	.word	0x20003d64
 8008ea8:	2000160c 	.word	0x2000160c
 8008eac:	200000b8 	.word	0x200000b8
 8008eb0:	20001148 	.word	0x20001148
 8008eb4:	200000c0 	.word	0x200000c0
 8008eb8:	20003bb5 	.word	0x20003bb5
 8008ebc:	080e0000 	.word	0x080e0000
 8008ec0:	200000d4 	.word	0x200000d4
 8008ec4:	20003aed 	.word	0x20003aed

08008ec8 <clearStringNsign>:


		void clearStringNsign(void)
		{
int a =0 ;
	for (a=0;a<100;a++)
 8008ec8:	2300      	movs	r3, #0
		{
string[a]=0;
 8008eca:	4804      	ldr	r0, [pc, #16]	; (8008edc <clearStringNsign+0x14>)
sign[a]=0;
 8008ecc:	4904      	ldr	r1, [pc, #16]	; (8008ee0 <clearStringNsign+0x18>)
string[a]=0;
 8008ece:	461a      	mov	r2, r3
 8008ed0:	541a      	strb	r2, [r3, r0]
sign[a]=0;
 8008ed2:	545a      	strb	r2, [r3, r1]
	for (a=0;a<100;a++)
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d1fa      	bne.n	8008ed0 <clearStringNsign+0x8>
}
}
 8008eda:	4770      	bx	lr
 8008edc:	20005312 	.word	0x20005312
 8008ee0:	2000529f 	.word	0x2000529f

08008ee4 <msgParse>:
	{
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	4615      	mov	r5, r2
 8008eea:	460f      	mov	r7, r1
	 signCntr = 0 ;
 8008eec:	4c29      	ldr	r4, [pc, #164]	; (8008f94 <msgParse+0xb0>)
	 clearStringNsign();
 8008eee:	f7ff ffeb 	bl	8008ec8 <clearStringNsign>
	 msgCntr =  0 ;
 8008ef2:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <msgParse+0xb4>)
	 signCntr = 0 ;
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	8022      	strh	r2, [r4, #0]
	 msgCntr =  0 ;
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	4630      	mov	r0, r6
 8008efc:	4602      	mov	r2, r0
 8008efe:	3001      	adds	r0, #1
	  while(*SPtr == '\0'){
 8008f00:	7811      	ldrb	r1, [r2, #0]
 8008f02:	b329      	cbz	r1, 8008f50 <msgParse+0x6c>
 8008f04:	4e25      	ldr	r6, [pc, #148]	; (8008f9c <msgParse+0xb8>)
 8008f06:	3a01      	subs	r2, #1
		while(*SPtr != '\0') {
 8008f08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f0c:	bb21      	cbnz	r1, 8008f58 <msgParse+0x74>
      string[msgCntr] =  '\0' ;
 8008f0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008f12:	54b1      	strb	r1, [r6, r2]
 8008f14:	1e79      	subs	r1, r7, #1
 8008f16:	4f22      	ldr	r7, [pc, #136]	; (8008fa0 <msgParse+0xbc>)
      while(*sigPtr != '\0') {
 8008f18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
      sign[signCntr] =  *sigPtr ;
 8008f1c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8008f20:	54b8      	strb	r0, [r7, r2]
      while(*sigPtr != '\0') {
 8008f22:	b9f8      	cbnz	r0, 8008f64 <msgParse+0x80>
 8008f24:	1c6a      	adds	r2, r5, #1
	 signCntr = 0 ;
 8008f26:	8020      	strh	r0, [r4, #0]
 8008f28:	b292      	uxth	r2, r2
	 msgCntr = pointer ;
 8008f2a:	4601      	mov	r1, r0
            if(string[msgCntr]!=sign[signCntr])
 8008f2c:	1e55      	subs	r5, r2, #1
 8008f2e:	b22d      	sxth	r5, r5
 8008f30:	f816 e005 	ldrb.w	lr, [r6, r5]
 8008f34:	5c7d      	ldrb	r5, [r7, r1]
 8008f36:	45ae      	cmp	lr, r5
 8008f38:	b215      	sxth	r5, r2
 8008f3a:	d01b      	beq.n	8008f74 <msgParse+0x90>
                if (string[msgCntr]=='\0')
 8008f3c:	f816 e005 	ldrb.w	lr, [r6, r5]
 8008f40:	f1be 0f00 	cmp.w	lr, #0
 8008f44:	d111      	bne.n	8008f6a <msgParse+0x86>
 8008f46:	801d      	strh	r5, [r3, #0]
 8008f48:	b100      	cbz	r0, 8008f4c <msgParse+0x68>
 8008f4a:	8021      	strh	r1, [r4, #0]
                 return 0 ;
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   msgCntr++;
 8008f50:	881a      	ldrh	r2, [r3, #0]
 8008f52:	3201      	adds	r2, #1
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e7d1      	b.n	8008efc <msgParse+0x18>
      string[msgCntr] =  *SPtr ;
 8008f58:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008f5c:	5431      	strb	r1, [r6, r0]
      msgCntr++;
 8008f5e:	3001      	adds	r0, #1
 8008f60:	8018      	strh	r0, [r3, #0]
 8008f62:	e7d1      	b.n	8008f08 <msgParse+0x24>
      signCntr++;
 8008f64:	3201      	adds	r2, #1
 8008f66:	8022      	strh	r2, [r4, #0]
 8008f68:	e7d6      	b.n	8008f18 <msgParse+0x34>
				signCntr = 0 ;  // Reset signature counter
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	3201      	adds	r2, #1
 8008f6e:	b292      	uxth	r2, r2
 8008f70:	2001      	movs	r0, #1
 8008f72:	e7db      	b.n	8008f2c <msgParse+0x48>
            signCntr++ ;
 8008f74:	3101      	adds	r1, #1
 8008f76:	b209      	sxth	r1, r1
            msgCntr++ ;
 8008f78:	4628      	mov	r0, r5
                if (sign[signCntr]=='\0')
 8008f7a:	f817 e001 	ldrb.w	lr, [r7, r1]
 8008f7e:	f1be 0f00 	cmp.w	lr, #0
 8008f82:	d102      	bne.n	8008f8a <msgParse+0xa6>
 8008f84:	801d      	strh	r5, [r3, #0]
 8008f86:	8021      	strh	r1, [r4, #0]
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (string[msgCntr]=='\0')
 8008f8a:	5d70      	ldrb	r0, [r6, r5]
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d1ed      	bne.n	8008f6c <msgParse+0x88>
 8008f90:	801d      	strh	r5, [r3, #0]
 8008f92:	e7da      	b.n	8008f4a <msgParse+0x66>
 8008f94:	20000132 	.word	0x20000132
 8008f98:	20000130 	.word	0x20000130
 8008f9c:	20005312 	.word	0x20005312
 8008fa0:	2000529f 	.word	0x2000529f

08008fa4 <SD_CheckStatus.isra.0>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
 8008fa4:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8008fa6:	4c06      	ldr	r4, [pc, #24]	; (8008fc0 <SD_CheckStatus.isra.0+0x1c>)
 8008fa8:	2301      	movs	r3, #1
 8008faa:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008fac:	f7fb fdb0 	bl	8004b10 <BSP_SD_GetCardState>
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	b918      	cbnz	r0, 8008fbc <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008fb4:	7822      	ldrb	r2, [r4, #0]
 8008fb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fba:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8008fbc:	7818      	ldrb	r0, [r3, #0]
}
 8008fbe:	bd10      	pop	{r4, pc}
 8008fc0:	2000001e 	.word	0x2000001e

08008fc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008fc4:	b510      	push	{r4, lr}
Stat = STA_NOINIT;  
 8008fc6:	4c05      	ldr	r4, [pc, #20]	; (8008fdc <SD_initialize+0x18>)
 8008fc8:	2301      	movs	r3, #1
 8008fca:	7023      	strb	r3, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008fcc:	f7fb fd70 	bl	8004ab0 <BSP_SD_Init>
 8008fd0:	b910      	cbnz	r0, 8008fd8 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8008fd2:	f7ff ffe7 	bl	8008fa4 <SD_CheckStatus.isra.0>
 8008fd6:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008fd8:	7820      	ldrb	r0, [r4, #0]
}
 8008fda:	bd10      	pop	{r4, pc}
 8008fdc:	2000001e 	.word	0x2000001e

08008fe0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8008fe0:	f7ff bfe0 	b.w	8008fa4 <SD_CheckStatus.isra.0>

08008fe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008fe4:	b508      	push	{r3, lr}
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	4611      	mov	r1, r2
 8008fea:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008fec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff0:	f7fb fd6e 	bl	8004ad0 <BSP_SD_ReadBlocks>
 8008ff4:	b920      	cbnz	r0, 8009000 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008ff6:	f7fb fd8b 	bl	8004b10 <BSP_SD_GetCardState>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d1fb      	bne.n	8008ff6 <SD_read+0x12>
 8008ffe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009000:	2001      	movs	r0, #1
}
 8009002:	bd08      	pop	{r3, pc}

08009004 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009004:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009006:	4b12      	ldr	r3, [pc, #72]	; (8009050 <SD_ioctl+0x4c>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	07db      	lsls	r3, r3, #31
{
 800900c:	b088      	sub	sp, #32
 800900e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009010:	d41b      	bmi.n	800904a <SD_ioctl+0x46>

  switch (cmd)
 8009012:	2903      	cmp	r1, #3
 8009014:	d803      	bhi.n	800901e <SD_ioctl+0x1a>
 8009016:	e8df f001 	tbb	[pc, r1]
 800901a:	0510      	.short	0x0510
 800901c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800901e:	2004      	movs	r0, #4
  }

  return res;
}
 8009020:	b008      	add	sp, #32
 8009022:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009024:	4668      	mov	r0, sp
 8009026:	f7fb fd7d 	bl	8004b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800902a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	e004      	b.n	800903a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8009030:	4668      	mov	r0, sp
 8009032:	f7fb fd77 	bl	8004b24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009036:	9b07      	ldr	r3, [sp, #28]
 8009038:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800903a:	2000      	movs	r0, #0
 800903c:	e7f0      	b.n	8009020 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800903e:	4668      	mov	r0, sp
 8009040:	f7fb fd70 	bl	8004b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	0a5b      	lsrs	r3, r3, #9
 8009048:	e7f0      	b.n	800902c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800904a:	2003      	movs	r0, #3
 800904c:	e7e8      	b.n	8009020 <SD_ioctl+0x1c>
 800904e:	bf00      	nop
 8009050:	2000001e 	.word	0x2000001e

08009054 <SD_write>:
{
 8009054:	b508      	push	{r3, lr}
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800905c:	f04f 33ff 	mov.w	r3, #4294967295
 8009060:	f7fb fd46 	bl	8004af0 <BSP_SD_WriteBlocks>
 8009064:	b920      	cbnz	r0, 8009070 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8009066:	f7fb fd53 	bl	8004b10 <BSP_SD_GetCardState>
 800906a:	2800      	cmp	r0, #0
 800906c:	d1fb      	bne.n	8009066 <SD_write+0x12>
 800906e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009070:	2001      	movs	r0, #1
}
 8009072:	bd08      	pop	{r3, pc}

08009074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009074:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009076:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <HAL_MspInit+0x3c>)
 8009078:	2100      	movs	r1, #0
 800907a:	9100      	str	r1, [sp, #0]
 800907c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800907e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009082:	645a      	str	r2, [r3, #68]	; 0x44
 8009084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009086:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800908a:	9200      	str	r2, [sp, #0]
 800908c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800908e:	9101      	str	r1, [sp, #4]
 8009090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009096:	641a      	str	r2, [r3, #64]	; 0x40
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80090a0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80090a4:	f7f7 faa2 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090a8:	b003      	add	sp, #12
 80090aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80090ae:	bf00      	nop
 80090b0:	40023800 	.word	0x40023800

080090b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80090b4:	6802      	ldr	r2, [r0, #0]
 80090b6:	4b09      	ldr	r3, [pc, #36]	; (80090dc <HAL_CRC_MspInit+0x28>)
 80090b8:	429a      	cmp	r2, r3
{
 80090ba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80090bc:	d10b      	bne.n	80090d6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80090be:	2300      	movs	r3, #0
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <HAL_CRC_MspInit+0x2c>)
 80090c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80090d6:	b002      	add	sp, #8
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40023000 	.word	0x40023000
 80090e0:	40023800 	.word	0x40023800

080090e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	4604      	mov	r4, r0
 80090e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090ea:	2214      	movs	r2, #20
 80090ec:	2100      	movs	r1, #0
 80090ee:	a803      	add	r0, sp, #12
 80090f0:	f000 fb30 	bl	8009754 <memset>
  if(hi2c->Instance==I2C1)
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	4b15      	ldr	r3, [pc, #84]	; (800914c <HAL_I2C_MspInit+0x68>)
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d124      	bne.n	8009146 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090fc:	4c14      	ldr	r4, [pc, #80]	; (8009150 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090fe:	4815      	ldr	r0, [pc, #84]	; (8009154 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009100:	2500      	movs	r5, #0
 8009102:	9501      	str	r5, [sp, #4]
 8009104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009106:	f043 0302 	orr.w	r3, r3, #2
 800910a:	6323      	str	r3, [r4, #48]	; 0x30
 800910c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800911a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800911c:	2312      	movs	r3, #18
 800911e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009120:	2301      	movs	r3, #1
 8009122:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009124:	2303      	movs	r3, #3
 8009126:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009128:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800912a:	2304      	movs	r3, #4
 800912c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800912e:	f7f7 fc27 	bl	8000980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009132:	9502      	str	r5, [sp, #8]
 8009134:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800913a:	6423      	str	r3, [r4, #64]	; 0x40
 800913c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800913e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009146:	b009      	add	sp, #36	; 0x24
 8009148:	bd30      	pop	{r4, r5, pc}
 800914a:	bf00      	nop
 800914c:	40005400 	.word	0x40005400
 8009150:	40023800 	.word	0x40023800
 8009154:	40020400 	.word	0x40020400

08009158 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8009158:	6802      	ldr	r2, [r0, #0]
 800915a:	4b03      	ldr	r3, [pc, #12]	; (8009168 <HAL_RTC_MspInit+0x10>)
 800915c:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800915e:	bf02      	ittt	eq
 8009160:	4b02      	ldreq	r3, [pc, #8]	; (800916c <HAL_RTC_MspInit+0x14>)
 8009162:	2201      	moveq	r2, #1
 8009164:	601a      	streq	r2, [r3, #0]
 8009166:	4770      	bx	lr
 8009168:	40002800 	.word	0x40002800
 800916c:	42470e3c 	.word	0x42470e3c

08009170 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009178:	2214      	movs	r2, #20
 800917a:	2100      	movs	r1, #0
 800917c:	a803      	add	r0, sp, #12
 800917e:	f000 fae9 	bl	8009754 <memset>
  if(hsd->Instance==SDIO)
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <HAL_SD_MspInit+0xb8>)
 8009186:	429a      	cmp	r2, r3
 8009188:	d14a      	bne.n	8009220 <HAL_SD_MspInit+0xb0>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800918a:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800918e:	2400      	movs	r4, #0
 8009190:	9400      	str	r4, [sp, #0]
 8009192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009194:	4825      	ldr	r0, [pc, #148]	; (800922c <HAL_SD_MspInit+0xbc>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800919a:	645a      	str	r2, [r3, #68]	; 0x44
 800919c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800919e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80091a2:	9200      	str	r2, [sp, #0]
 80091a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80091a6:	9401      	str	r4, [sp, #4]
 80091a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091aa:	f042 0204 	orr.w	r2, r2, #4
 80091ae:	631a      	str	r2, [r3, #48]	; 0x30
 80091b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b2:	f002 0204 	and.w	r2, r2, #4
 80091b6:	9201      	str	r2, [sp, #4]
 80091b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80091ba:	9402      	str	r4, [sp, #8]
 80091bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091be:	f042 0208 	orr.w	r2, r2, #8
 80091c2:	631a      	str	r2, [r3, #48]	; 0x30
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80091ca:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80091cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d0:	2603      	movs	r6, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80091d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091d4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80091d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091da:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091de:	eb0d 0105 	add.w	r1, sp, r5
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80091e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091e4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091e8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80091ea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091ec:	f7f7 fbc8 	bl	8000980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091f4:	eb0d 0105 	add.w	r1, sp, r5
 80091f8:	480c      	ldr	r0, [pc, #48]	; (800922c <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009200:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009202:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009204:	f7f7 fbbc 	bl	8000980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009208:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800920a:	eb0d 0105 	add.w	r1, sp, r5
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <HAL_SD_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009210:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009212:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009214:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009218:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800921a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800921c:	f7f7 fbb0 	bl	8000980 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009220:	b008      	add	sp, #32
 8009222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009226:	bf00      	nop
 8009228:	40012c00 	.word	0x40012c00
 800922c:	40020800 	.word	0x40020800
 8009230:	40020c00 	.word	0x40020c00

08009234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800923c:	2214      	movs	r2, #20
 800923e:	2100      	movs	r1, #0
 8009240:	a809      	add	r0, sp, #36	; 0x24
 8009242:	f000 fa87 	bl	8009754 <memset>
  if(huart->Instance==USART1)
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	4a6a      	ldr	r2, [pc, #424]	; (80093f4 <HAL_UART_MspInit+0x1c0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d12e      	bne.n	80092ac <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800924e:	4b6a      	ldr	r3, [pc, #424]	; (80093f8 <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009250:	486a      	ldr	r0, [pc, #424]	; (80093fc <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8009252:	2400      	movs	r4, #0
 8009254:	9400      	str	r4, [sp, #0]
 8009256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009258:	f042 0210 	orr.w	r2, r2, #16
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
 800925e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009260:	f002 0210 	and.w	r2, r2, #16
 8009264:	9200      	str	r2, [sp, #0]
 8009266:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009268:	9401      	str	r4, [sp, #4]
 800926a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800926c:	f042 0202 	orr.w	r2, r2, #2
 8009270:	631a      	str	r2, [r3, #48]	; 0x30
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800927c:	23c0      	movs	r3, #192	; 0xc0
 800927e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009280:	2302      	movs	r3, #2
 8009282:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009284:	2301      	movs	r3, #1
 8009286:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009288:	2303      	movs	r3, #3
 800928a:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800928c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800928e:	2307      	movs	r3, #7
 8009290:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009292:	f7f7 fb75 	bl	8000980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009296:	2025      	movs	r0, #37	; 0x25
 8009298:	4622      	mov	r2, r4
 800929a:	4621      	mov	r1, r4
 800929c:	f7f7 f9b8 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80092a0:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80092a2:	f7f7 f9e9 	bl	8000678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80092a6:	b00e      	add	sp, #56	; 0x38
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART2)
 80092ac:	4a54      	ldr	r2, [pc, #336]	; (8009400 <HAL_UART_MspInit+0x1cc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d12a      	bne.n	8009308 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80092b2:	4b51      	ldr	r3, [pc, #324]	; (80093f8 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092b4:	4853      	ldr	r0, [pc, #332]	; (8009404 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80092b6:	2400      	movs	r4, #0
 80092b8:	9402      	str	r4, [sp, #8]
 80092ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80092c0:	641a      	str	r2, [r3, #64]	; 0x40
 80092c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80092c8:	9202      	str	r2, [sp, #8]
 80092ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80092cc:	9403      	str	r4, [sp, #12]
 80092ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	f003 0308 	and.w	r3, r3, #8
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80092e0:	2360      	movs	r3, #96	; 0x60
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e4:	2302      	movs	r3, #2
 80092e6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092e8:	2301      	movs	r3, #1
 80092ea:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ec:	2303      	movs	r3, #3
 80092ee:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092f0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80092f2:	2307      	movs	r3, #7
 80092f4:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092f6:	f7f7 fb43 	bl	8000980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80092fa:	2026      	movs	r0, #38	; 0x26
 80092fc:	4622      	mov	r2, r4
 80092fe:	4621      	mov	r1, r4
 8009300:	f7f7 f986 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009304:	2026      	movs	r0, #38	; 0x26
 8009306:	e7cc      	b.n	80092a2 <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART3)
 8009308:	4a3f      	ldr	r2, [pc, #252]	; (8009408 <HAL_UART_MspInit+0x1d4>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d143      	bne.n	8009396 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800930e:	4b3a      	ldr	r3, [pc, #232]	; (80093f8 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009310:	483a      	ldr	r0, [pc, #232]	; (80093fc <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8009312:	2400      	movs	r4, #0
 8009314:	9404      	str	r4, [sp, #16]
 8009316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009318:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
 800931e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009320:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8009324:	9204      	str	r2, [sp, #16]
 8009326:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009328:	9405      	str	r4, [sp, #20]
 800932a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800932c:	f042 0202 	orr.w	r2, r2, #2
 8009330:	631a      	str	r2, [r3, #48]	; 0x30
 8009332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009334:	f002 0202 	and.w	r2, r2, #2
 8009338:	9205      	str	r2, [sp, #20]
 800933a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800933c:	9406      	str	r4, [sp, #24]
 800933e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009340:	f042 0208 	orr.w	r2, r2, #8
 8009344:	631a      	str	r2, [r3, #48]	; 0x30
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	f003 0308 	and.w	r3, r3, #8
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009350:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009354:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009358:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800935c:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800935e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009360:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009362:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009366:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009368:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800936a:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800936c:	f7f7 fb08 	bl	8000980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009370:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009374:	a909      	add	r1, sp, #36	; 0x24
 8009376:	4823      	ldr	r0, [pc, #140]	; (8009404 <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800937a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800937e:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009380:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009382:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009384:	f7f7 fafc 	bl	8000980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009388:	2027      	movs	r0, #39	; 0x27
 800938a:	4622      	mov	r2, r4
 800938c:	4621      	mov	r1, r4
 800938e:	f7f7 f93f 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009392:	2027      	movs	r0, #39	; 0x27
 8009394:	e785      	b.n	80092a2 <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART6)
 8009396:	4a1d      	ldr	r2, [pc, #116]	; (800940c <HAL_UART_MspInit+0x1d8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d184      	bne.n	80092a6 <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART6_CLK_ENABLE();
 800939c:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800939e:	481c      	ldr	r0, [pc, #112]	; (8009410 <HAL_UART_MspInit+0x1dc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80093a0:	2400      	movs	r4, #0
 80093a2:	9407      	str	r4, [sp, #28]
 80093a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a6:	f042 0220 	orr.w	r2, r2, #32
 80093aa:	645a      	str	r2, [r3, #68]	; 0x44
 80093ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ae:	f002 0220 	and.w	r2, r2, #32
 80093b2:	9207      	str	r2, [sp, #28]
 80093b4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093b6:	9408      	str	r4, [sp, #32]
 80093b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ba:	f042 0204 	orr.w	r2, r2, #4
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	9308      	str	r3, [sp, #32]
 80093c8:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80093ca:	23c0      	movs	r3, #192	; 0xc0
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ce:	2302      	movs	r3, #2
 80093d0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093d2:	2301      	movs	r3, #1
 80093d4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d6:	2303      	movs	r3, #3
 80093d8:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093da:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80093dc:	2308      	movs	r3, #8
 80093de:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093e0:	f7f7 face 	bl	8000980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80093e4:	2047      	movs	r0, #71	; 0x47
 80093e6:	4622      	mov	r2, r4
 80093e8:	4621      	mov	r1, r4
 80093ea:	f7f7 f911 	bl	8000610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80093ee:	2047      	movs	r0, #71	; 0x47
 80093f0:	e757      	b.n	80092a2 <HAL_UART_MspInit+0x6e>
 80093f2:	bf00      	nop
 80093f4:	40011000 	.word	0x40011000
 80093f8:	40023800 	.word	0x40023800
 80093fc:	40020400 	.word	0x40020400
 8009400:	40004400 	.word	0x40004400
 8009404:	40020c00 	.word	0x40020c00
 8009408:	40004800 	.word	0x40004800
 800940c:	40011400 	.word	0x40011400
 8009410:	40020800 	.word	0x40020800

08009414 <NMI_Handler>:
 8009414:	4770      	bx	lr

08009416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009416:	e7fe      	b.n	8009416 <HardFault_Handler>

08009418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009418:	e7fe      	b.n	8009418 <MemManage_Handler>

0800941a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800941a:	e7fe      	b.n	800941a <BusFault_Handler>

0800941c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800941c:	e7fe      	b.n	800941c <UsageFault_Handler>

0800941e <SVC_Handler>:
 800941e:	4770      	bx	lr

08009420 <DebugMon_Handler>:
 8009420:	4770      	bx	lr

08009422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009422:	4770      	bx	lr

08009424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009424:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	          TimingDelay_Decrement();
 8009426:	f7fb ff19 	bl	800525c <TimingDelay_Decrement>
			  TimingDelay_Decrement1();
 800942a:	f7fb ff21 	bl	8005270 <TimingDelay_Decrement1>
			  TimingDelay_Decrement3();
 800942e:	f7fb ff29 	bl	8005284 <TimingDelay_Decrement3>
			  TimingDelay_Decrement4();
 8009432:	f7fb ff31 	bl	8005298 <TimingDelay_Decrement4>
			  TimingDelay_Decrement5();
 8009436:	f7fb ff39 	bl	80052ac <TimingDelay_Decrement5>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800943a:	f7f7 f88b 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /*for uart6*/
       	if (TimingDelay<2) //if timming delay is less than 2
 800943e:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <SysTick_Handler+0x94>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d809      	bhi.n	800945a <SysTick_Handler+0x36>
       		{
       		if (flag2==1)  //flag is 1 (flag tells that has msg came)
 8009446:	491d      	ldr	r1, [pc, #116]	; (80094bc <SysTick_Handler+0x98>)
 8009448:	680a      	ldr	r2, [r1, #0]
 800944a:	2a01      	cmp	r2, #1
 800944c:	d105      	bne.n	800945a <SysTick_Handler+0x36>
       			{
       //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
       //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
       //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

             flag2= 0 ;
 800944e:	2300      	movs	r3, #0
 8009450:	600b      	str	r3, [r1, #0]
       		  msgUnPrcd = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009452:	491b      	ldr	r1, [pc, #108]	; (80094c0 <SysTick_Handler+0x9c>)
 8009454:	600a      	str	r2, [r1, #0]
       		  RxCount2 = 0 ;
 8009456:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <SysTick_Handler+0xa0>)
 8009458:	8013      	strh	r3, [r2, #0]
       //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

       }
       }
        /*for uart1*/
         	if (TimingDelay1<2) //if timming delay is less than 2
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <SysTick_Handler+0xa4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d809      	bhi.n	8009476 <SysTick_Handler+0x52>
         		{
         		if (flag1==1)  //flag is 1 (flag tells that has msg came)
 8009462:	491a      	ldr	r1, [pc, #104]	; (80094cc <SysTick_Handler+0xa8>)
 8009464:	680a      	ldr	r2, [r1, #0]
 8009466:	2a01      	cmp	r2, #1
 8009468:	d105      	bne.n	8009476 <SysTick_Handler+0x52>
         			{
         //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
         //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
         //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

               flag1= 0 ;
 800946a:	2300      	movs	r3, #0
 800946c:	600b      	str	r3, [r1, #0]
         		  msgUnPrcd1 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 800946e:	4918      	ldr	r1, [pc, #96]	; (80094d0 <SysTick_Handler+0xac>)
 8009470:	600a      	str	r2, [r1, #0]
         		  RxCount1 = 0 ;
 8009472:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <SysTick_Handler+0xb0>)
 8009474:	8013      	strh	r3, [r2, #0]
         //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

         }
         }
            /*for uart3*/
              	if (TimingDelay3<2) //if timming delay is less than 2
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <SysTick_Handler+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d80d      	bhi.n	800949a <SysTick_Handler+0x76>
              		{
              		if (flag3==1)  //flag is 1 (flag tells that has msg came)
 800947e:	4817      	ldr	r0, [pc, #92]	; (80094dc <SysTick_Handler+0xb8>)
 8009480:	6801      	ldr	r1, [r0, #0]
 8009482:	2901      	cmp	r1, #1
 8009484:	d109      	bne.n	800949a <SysTick_Handler+0x76>
              			{
              //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
              //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
              //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);
              			pointerOfArray=RxCount3;
 8009486:	4a16      	ldr	r2, [pc, #88]	; (80094e0 <SysTick_Handler+0xbc>)
 8009488:	4c16      	ldr	r4, [pc, #88]	; (80094e4 <SysTick_Handler+0xc0>)
 800948a:	8813      	ldrh	r3, [r2, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	6023      	str	r3, [r4, #0]

                    flag3= 0 ;
 8009490:	2300      	movs	r3, #0
 8009492:	6003      	str	r3, [r0, #0]
              		  msgUnPrcd3 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009494:	4814      	ldr	r0, [pc, #80]	; (80094e8 <SysTick_Handler+0xc4>)
              		  RxCount3 = 0 ;
 8009496:	8013      	strh	r3, [r2, #0]
              		  msgUnPrcd3 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8009498:	6001      	str	r1, [r0, #0]
              //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

              }
              }
                /*for uart2*/
                  	if (TimingDelay4<2) //if timming delay is less than 2
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <SysTick_Handler+0xc8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d809      	bhi.n	80094b6 <SysTick_Handler+0x92>
                  		{
                  		if (flag4==1)  //flag is 1 (flag tells that has msg came)
 80094a2:	4913      	ldr	r1, [pc, #76]	; (80094f0 <SysTick_Handler+0xcc>)
 80094a4:	680a      	ldr	r2, [r1, #0]
 80094a6:	2a01      	cmp	r2, #1
 80094a8:	d105      	bne.n	80094b6 <SysTick_Handler+0x92>
                  			{
                  //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
                  //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
                  //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

                        flag4= 0 ;
 80094aa:	2300      	movs	r3, #0
 80094ac:	600b      	str	r3, [r1, #0]
                  		  msgUnPrcd4 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 80094ae:	4911      	ldr	r1, [pc, #68]	; (80094f4 <SysTick_Handler+0xd0>)
 80094b0:	600a      	str	r2, [r1, #0]
                  		  RxCount4 = 0 ;
 80094b2:	4a11      	ldr	r2, [pc, #68]	; (80094f8 <SysTick_Handler+0xd4>)
 80094b4:	8013      	strh	r3, [r2, #0]
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	20000ee4 	.word	0x20000ee4
 80094bc:	20000140 	.word	0x20000140
 80094c0:	20000ff4 	.word	0x20000ff4
 80094c4:	20000136 	.word	0x20000136
 80094c8:	200015ec 	.word	0x200015ec
 80094cc:	2000013c 	.word	0x2000013c
 80094d0:	20001454 	.word	0x20001454
 80094d4:	20000134 	.word	0x20000134
 80094d8:	20000e28 	.word	0x20000e28
 80094dc:	20000144 	.word	0x20000144
 80094e0:	20000138 	.word	0x20000138
 80094e4:	200058d8 	.word	0x200058d8
 80094e8:	200011bc 	.word	0x200011bc
 80094ec:	200015a0 	.word	0x200015a0
 80094f0:	20000148 	.word	0x20000148
 80094f4:	20000edc 	.word	0x20000edc
 80094f8:	2000013a 	.word	0x2000013a

080094fc <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80094fc:	4b10      	ldr	r3, [pc, #64]	; (8009540 <USART1_IRQHandler+0x44>)
 80094fe:	220a      	movs	r2, #10
{
 8009500:	b510      	push	{r4, lr}
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009502:	601a      	str	r2, [r3, #0]
  	if(flag1==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8009504:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <USART1_IRQHandler+0x48>)
 8009506:	4c10      	ldr	r4, [pc, #64]	; (8009548 <USART1_IRQHandler+0x4c>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	b99a      	cbnz	r2, 8009534 <USART1_IRQHandler+0x38>
  {
  RxCount1 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 800950c:	8022      	strh	r2, [r4, #0]
  flag1=1;   		//UART is active in process of receiving a messege
 800950e:	2201      	movs	r2, #1
 8009510:	601a      	str	r2, [r3, #0]
//	msgTime = 0 ;
  }
	else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
		RxCount1++;

	if (RxCount1>150)
 8009512:	8822      	ldrh	r2, [r4, #0]
//		comCount=1;
//		comCount=2;

  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009514:	480d      	ldr	r0, [pc, #52]	; (800954c <USART1_IRQHandler+0x50>)
	if (RxCount1>150)
 8009516:	b292      	uxth	r2, r2
 8009518:	2a96      	cmp	r2, #150	; 0x96
		flag1=0 ;
 800951a:	bf82      	ittt	hi
 800951c:	2200      	movhi	r2, #0
 800951e:	601a      	strhi	r2, [r3, #0]
		RxCount1 = 0 ;
 8009520:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart1);
 8009522:	f7f9 fa27 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  RecMsg1[RxCount1]=aRxBuffer1[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8009526:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <USART1_IRQHandler+0x54>)
 8009528:	8823      	ldrh	r3, [r4, #0]
 800952a:	7811      	ldrb	r1, [r2, #0]
 800952c:	4a09      	ldr	r2, [pc, #36]	; (8009554 <USART1_IRQHandler+0x58>)
 800952e:	b29b      	uxth	r3, r3
 8009530:	54d1      	strb	r1, [r2, r3]
 8009532:	bd10      	pop	{r4, pc}
		RxCount1++;
 8009534:	8822      	ldrh	r2, [r4, #0]
 8009536:	3201      	adds	r2, #1
 8009538:	b292      	uxth	r2, r2
 800953a:	8022      	strh	r2, [r4, #0]
 800953c:	e7e9      	b.n	8009512 <USART1_IRQHandler+0x16>
 800953e:	bf00      	nop
 8009540:	200015ec 	.word	0x200015ec
 8009544:	2000013c 	.word	0x2000013c
 8009548:	20000134 	.word	0x20000134
 800954c:	20001108 	.word	0x20001108
 8009550:	20001244 	.word	0x20001244
 8009554:	200057dc 	.word	0x200057dc

08009558 <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009558:	4b10      	ldr	r3, [pc, #64]	; (800959c <USART2_IRQHandler+0x44>)
 800955a:	220a      	movs	r2, #10
{
 800955c:	b510      	push	{r4, lr}
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 800955e:	601a      	str	r2, [r3, #0]
				  	if(flag4==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8009560:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <USART2_IRQHandler+0x48>)
 8009562:	4c10      	ldr	r4, [pc, #64]	; (80095a4 <USART2_IRQHandler+0x4c>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	b99a      	cbnz	r2, 8009590 <USART2_IRQHandler+0x38>
				  {
				  RxCount4 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8009568:	8022      	strh	r2, [r4, #0]
				  flag4=1;   		//UART is active in process of receiving a messege
 800956a:	2201      	movs	r2, #1
 800956c:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount4++;

					if (RxCount4>150)
 800956e:	8822      	ldrh	r2, [r4, #0]
				//		comCount=1;
				//		comCount=2;

				  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009570:	480d      	ldr	r0, [pc, #52]	; (80095a8 <USART2_IRQHandler+0x50>)
					if (RxCount4>150)
 8009572:	b292      	uxth	r2, r2
 8009574:	2a96      	cmp	r2, #150	; 0x96
						flag4=0 ;
 8009576:	bf82      	ittt	hi
 8009578:	2200      	movhi	r2, #0
 800957a:	601a      	strhi	r2, [r3, #0]
						RxCount4 = 0 ;
 800957c:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart2);
 800957e:	f7f9 f9f9 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  RecMsg4[RxCount4]=aRxBuffer4[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8009582:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <USART2_IRQHandler+0x54>)
 8009584:	8823      	ldrh	r3, [r4, #0]
 8009586:	7811      	ldrb	r1, [r2, #0]
 8009588:	4a09      	ldr	r2, [pc, #36]	; (80095b0 <USART2_IRQHandler+0x58>)
 800958a:	b29b      	uxth	r3, r3
 800958c:	54d1      	strb	r1, [r2, r3]
 800958e:	bd10      	pop	{r4, pc}
						RxCount4++;
 8009590:	8822      	ldrh	r2, [r4, #0]
 8009592:	3201      	adds	r2, #1
 8009594:	b292      	uxth	r2, r2
 8009596:	8022      	strh	r2, [r4, #0]
 8009598:	e7e9      	b.n	800956e <USART2_IRQHandler+0x16>
 800959a:	bf00      	nop
 800959c:	200015a0 	.word	0x200015a0
 80095a0:	20000148 	.word	0x20000148
 80095a4:	2000013a 	.word	0x2000013a
 80095a8:	200015a4 	.word	0x200015a4
 80095ac:	20001458 	.word	0x20001458
 80095b0:	200053f4 	.word	0x200053f4

080095b4 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80095b4:	4b10      	ldr	r3, [pc, #64]	; (80095f8 <USART3_IRQHandler+0x44>)
 80095b6:	220a      	movs	r2, #10
{
 80095b8:	b510      	push	{r4, lr}
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 80095ba:	601a      	str	r2, [r3, #0]
				  	if(flag3==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 80095bc:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <USART3_IRQHandler+0x48>)
 80095be:	4c10      	ldr	r4, [pc, #64]	; (8009600 <USART3_IRQHandler+0x4c>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	b99a      	cbnz	r2, 80095ec <USART3_IRQHandler+0x38>
				  {
				  RxCount3 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 80095c4:	8022      	strh	r2, [r4, #0]
				  flag3=1;   		//UART is active in process of receiving a messege
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount3++;

					if (RxCount3>50)
 80095ca:	8822      	ldrh	r2, [r4, #0]
				//		comCount=2;

				  }

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80095cc:	480d      	ldr	r0, [pc, #52]	; (8009604 <USART3_IRQHandler+0x50>)
					if (RxCount3>50)
 80095ce:	b292      	uxth	r2, r2
 80095d0:	2a32      	cmp	r2, #50	; 0x32
						flag3=0 ;
 80095d2:	bf82      	ittt	hi
 80095d4:	2200      	movhi	r2, #0
 80095d6:	601a      	strhi	r2, [r3, #0]
						RxCount3 = 0 ;
 80095d8:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart3);
 80095da:	f7f9 f9cb 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  RecMsg3[RxCount3]=aRxBuffer3[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 80095de:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <USART3_IRQHandler+0x54>)
 80095e0:	8823      	ldrh	r3, [r4, #0]
 80095e2:	7811      	ldrb	r1, [r2, #0]
 80095e4:	4a09      	ldr	r2, [pc, #36]	; (800960c <USART3_IRQHandler+0x58>)
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	54d1      	strb	r1, [r2, r3]
 80095ea:	bd10      	pop	{r4, pc}
						RxCount3++;
 80095ec:	8822      	ldrh	r2, [r4, #0]
 80095ee:	3201      	adds	r2, #1
 80095f0:	b292      	uxth	r2, r2
 80095f2:	8022      	strh	r2, [r4, #0]
 80095f4:	e7e9      	b.n	80095ca <USART3_IRQHandler+0x16>
 80095f6:	bf00      	nop
 80095f8:	20000e28 	.word	0x20000e28
 80095fc:	20000144 	.word	0x20000144
 8009600:	20000138 	.word	0x20000138
 8009604:	20000e30 	.word	0x20000e30
 8009608:	20000ffc 	.word	0x20000ffc
 800960c:	200056e2 	.word	0x200056e2

08009610 <USART6_IRQHandler>:
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009610:	4b10      	ldr	r3, [pc, #64]	; (8009654 <USART6_IRQHandler+0x44>)
 8009612:	220a      	movs	r2, #10
{
 8009614:	b510      	push	{r4, lr}
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 8009616:	601a      	str	r2, [r3, #0]
				  	if(flag2==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8009618:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <USART6_IRQHandler+0x48>)
 800961a:	4c10      	ldr	r4, [pc, #64]	; (800965c <USART6_IRQHandler+0x4c>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	b99a      	cbnz	r2, 8009648 <USART6_IRQHandler+0x38>
				  {
				  RxCount2 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8009620:	8022      	strh	r2, [r4, #0]
				  flag2=1;   		//UART is active in process of receiving a messege
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount2++;

					if (RxCount2>50)
 8009626:	8822      	ldrh	r2, [r4, #0]
				//		comCount=1;
				//		comCount=2;

				  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8009628:	480d      	ldr	r0, [pc, #52]	; (8009660 <USART6_IRQHandler+0x50>)
					if (RxCount2>50)
 800962a:	b292      	uxth	r2, r2
 800962c:	2a32      	cmp	r2, #50	; 0x32
						flag2=0 ;
 800962e:	bf82      	ittt	hi
 8009630:	2200      	movhi	r2, #0
 8009632:	601a      	strhi	r2, [r3, #0]
						RxCount2 = 0 ;
 8009634:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart6);
 8009636:	f7f9 f99d 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  RecMsg2[RxCount2]=aRxBuffer[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 800963a:	4a0a      	ldr	r2, [pc, #40]	; (8009664 <USART6_IRQHandler+0x54>)
 800963c:	8823      	ldrh	r3, [r4, #0]
 800963e:	7811      	ldrb	r1, [r2, #0]
 8009640:	4a09      	ldr	r2, [pc, #36]	; (8009668 <USART6_IRQHandler+0x58>)
 8009642:	b29b      	uxth	r3, r3
 8009644:	54d1      	strb	r1, [r2, r3]
 8009646:	bd10      	pop	{r4, pc}
						RxCount2++;
 8009648:	8822      	ldrh	r2, [r4, #0]
 800964a:	3201      	adds	r2, #1
 800964c:	b292      	uxth	r2, r2
 800964e:	8022      	strh	r2, [r4, #0]
 8009650:	e7e9      	b.n	8009626 <USART6_IRQHandler+0x16>
 8009652:	bf00      	nop
 8009654:	20000ee4 	.word	0x20000ee4
 8009658:	20000140 	.word	0x20000140
 800965c:	20000136 	.word	0x20000136
 8009660:	2000132c 	.word	0x2000132c
 8009664:	2000136c 	.word	0x2000136c
 8009668:	200054ee 	.word	0x200054ee

0800966c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800966c:	490f      	ldr	r1, [pc, #60]	; (80096ac <SystemInit+0x40>)
 800966e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009672:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800967a:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <SystemInit+0x44>)
 800967c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800967e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009686:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800968e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009692:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009694:	4a07      	ldr	r2, [pc, #28]	; (80096b4 <SystemInit+0x48>)
 8009696:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800969e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80096a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096a6:	608b      	str	r3, [r1, #8]
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	e000ed00 	.word	0xe000ed00
 80096b0:	40023800 	.word	0x40023800
 80096b4:	24003010 	.word	0x24003010

080096b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80096b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80096bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80096be:	e003      	b.n	80096c8 <LoopCopyDataInit>

080096c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80096c0:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80096c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80096c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80096c6:	3104      	adds	r1, #4

080096c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096c8:	480b      	ldr	r0, [pc, #44]	; (80096f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096ca:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096d0:	d3f6      	bcc.n	80096c0 <CopyDataInit>
  ldr  r2, =_sbss
 80096d2:	4a0b      	ldr	r2, [pc, #44]	; (8009700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096d4:	e002      	b.n	80096dc <LoopFillZerobss>

080096d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096d8:	f842 3b04 	str.w	r3, [r2], #4

080096dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096e0:	d3f9      	bcc.n	80096d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096e2:	f7ff ffc3 	bl	800966c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096e6:	f000 f811 	bl	800970c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096ea:	f7fb fc0d 	bl	8004f08 <main>
  bx  lr    
 80096ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80096f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80096f4:	080098e4 	.word	0x080098e4
  ldr  r0, =_sdata
 80096f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80096fc:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8009700:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8009704:	200058dc 	.word	0x200058dc

08009708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009708:	e7fe      	b.n	8009708 <ADC_IRQHandler>
	...

0800970c <__libc_init_array>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4e0d      	ldr	r6, [pc, #52]	; (8009744 <__libc_init_array+0x38>)
 8009710:	4c0d      	ldr	r4, [pc, #52]	; (8009748 <__libc_init_array+0x3c>)
 8009712:	1ba4      	subs	r4, r4, r6
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	2500      	movs	r5, #0
 8009718:	42a5      	cmp	r5, r4
 800971a:	d109      	bne.n	8009730 <__libc_init_array+0x24>
 800971c:	4e0b      	ldr	r6, [pc, #44]	; (800974c <__libc_init_array+0x40>)
 800971e:	4c0c      	ldr	r4, [pc, #48]	; (8009750 <__libc_init_array+0x44>)
 8009720:	f000 f832 	bl	8009788 <_init>
 8009724:	1ba4      	subs	r4, r4, r6
 8009726:	10a4      	asrs	r4, r4, #2
 8009728:	2500      	movs	r5, #0
 800972a:	42a5      	cmp	r5, r4
 800972c:	d105      	bne.n	800973a <__libc_init_array+0x2e>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009734:	4798      	blx	r3
 8009736:	3501      	adds	r5, #1
 8009738:	e7ee      	b.n	8009718 <__libc_init_array+0xc>
 800973a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973e:	4798      	blx	r3
 8009740:	3501      	adds	r5, #1
 8009742:	e7f2      	b.n	800972a <__libc_init_array+0x1e>
 8009744:	080098dc 	.word	0x080098dc
 8009748:	080098dc 	.word	0x080098dc
 800974c:	080098dc 	.word	0x080098dc
 8009750:	080098e0 	.word	0x080098e0

08009754 <memset>:
 8009754:	4402      	add	r2, r0
 8009756:	4603      	mov	r3, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <strncmp>:
 8009764:	b510      	push	{r4, lr}
 8009766:	b16a      	cbz	r2, 8009784 <strncmp+0x20>
 8009768:	3901      	subs	r1, #1
 800976a:	1884      	adds	r4, r0, r2
 800976c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009770:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009774:	4293      	cmp	r3, r2
 8009776:	d103      	bne.n	8009780 <strncmp+0x1c>
 8009778:	42a0      	cmp	r0, r4
 800977a:	d001      	beq.n	8009780 <strncmp+0x1c>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f5      	bne.n	800976c <strncmp+0x8>
 8009780:	1a98      	subs	r0, r3, r2
 8009782:	bd10      	pop	{r4, pc}
 8009784:	4610      	mov	r0, r2
 8009786:	bd10      	pop	{r4, pc}

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr
